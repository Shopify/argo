// Code generated by jtd-codegen for TypeScript v0.2.1

export interface PixelEventsCheckoutCompletedData {
  checkout: Checkout;
}

/**
 * The `checkout_completed` event logs when a visitor completes a purchase. This
 * event is available on the Order Status and Checkout pages
 */
export interface PixelEventsCheckoutCompleted {
  clientId: ClientId;
  context: Context;
  data: PixelEventsCheckoutCompletedData;
  id: Id;

  /**
   * The name of the customer event
   */
  name: 'checkout_completed';
  timestamp: Timestamp;
}

export interface PixelEventsCheckoutStartedData {
  checkout: Checkout;
}

/**
 * The `checkout_started` event logs an instance of a buyer starting the
 * checkout process. This event is available on the Checkout pages
 */
export interface PixelEventsCheckoutStarted {
  clientId: ClientId;
  context: Context;
  data: PixelEventsCheckoutStartedData;
  id: Id;

  /**
   * The name of the customer event
   */
  name: 'checkout_started';
  timestamp: Timestamp;
}

export interface PixelEventsCollectionViewedData {
  collection: Collection;
}

/**
 * The `collection_viewed` event logs an instance where a buyer visited to a
 * product collection index page. This event is available on the Online Store
 * pages
 */
export interface PixelEventsCollectionViewed {
  clientId: ClientId;
  context: Context;
  data: PixelEventsCollectionViewedData;
  id: Id;

  /**
   * The name of the customer event
   */
  name: 'collection_viewed';
  timestamp: Timestamp;
}

/**
 * This event represents any custom events emitted by partners or merchants via
 * the `publish` method
 */
export interface PixelEventsCustomEvent {
  clientId: ClientId;
  context: Context;
  customData: CustomData | null;
  id: Id;

  /**
   * The name of the customer event
   */
  name: 'custom_event';
  timestamp: Timestamp;
}

/**
 * The `page_viewed` event logs an instance where a buyer visited a page. This
 * event is available on the Online Store, Checkout, and Order Status pages
 */
export interface PixelEventsPageViewed {
  clientId: ClientId;
  context: Context;
  id: Id;

  /**
   * The name of the customer event
   */
  name: 'page_viewed';
  timestamp: Timestamp;
}

export interface PixelEventsPaymentInfoSubmittedData {
  checkout: Checkout;
}

/**
 * The `payment_info_submitted` event logs an instance of a buyer submitting
 * their payment information. This event is available on the Checkout pages
 */
export interface PixelEventsPaymentInfoSubmitted {
  clientId: ClientId;
  context: Context;
  data: PixelEventsPaymentInfoSubmittedData;
  id: Id;

  /**
   * The name of the customer event
   */
  name: 'payment_info_submitted';
  timestamp: Timestamp;
}

export interface PixelEventsProductAddedToCartData {
  cartLine: CartLine | null;
}

/**
 * The `product_added_to_cart` event logs an instance where a buyer adds a
 * product to their cart. This event is available on the Online Store pages
 */
export interface PixelEventsProductAddedToCart {
  clientId: ClientId;
  context: Context;
  data: PixelEventsProductAddedToCartData;
  id: Id;

  /**
   * The name of the customer event
   */
  name: 'product_added_to_cart';
  timestamp: Timestamp;
}

export interface PixelEventsProductVariantViewedData {
  productVariant: ProductVariant;
}

/**
 * The `product_variant_viewed` event logs an instance where a buyer interacts
 * with the product page and views a different variant than the initial
 * `product_viewed` impression. This event is available on the Product page
 */
export interface PixelEventsProductVariantViewed {
  clientId: ClientId;
  context: Context;
  data: PixelEventsProductVariantViewedData;
  id: Id;

  /**
   * The name of the customer event
   */
  name: 'product_variant_viewed';
  timestamp: Timestamp;
}

export interface PixelEventsProductViewedData {
  productVariant: ProductVariant;
}

/**
 * The `product_viewed` event logs an instance where a buyer visited a product
 * details page. This event is available on the Product page
 */
export interface PixelEventsProductViewed {
  clientId: ClientId;
  context: Context;
  data: PixelEventsProductViewedData;
  id: Id;

  /**
   * The name of the customer event
   */
  name: 'product_viewed';
  timestamp: Timestamp;
}

export interface PixelEventsSearchSubmittedData {
  searchResult: SearchResult;
}

/**
 * The `search_submitted event` logs an instance where a buyer performed a
 * search on the storefront. This event is available on the Online Store pages
 */
export interface PixelEventsSearchSubmitted {
  clientId: ClientId;
  context: Context;
  data: PixelEventsSearchSubmittedData;
  id: Id;

  /**
   * The name of the customer event
   */
  name: 'search_submitted';
  timestamp: Timestamp;
}

export interface PixelEvents {
  /**
   * The `checkout_completed` event logs when a visitor completes a purchase.
   * This event is available on the Order Status and Checkout pages
   */
  checkout_completed: PixelEventsCheckoutCompleted;

  /**
   * The `checkout_started` event logs an instance of a buyer starting the
   * checkout process. This event is available on the Checkout pages
   */
  checkout_started: PixelEventsCheckoutStarted;

  /**
   * The `collection_viewed` event logs an instance where a buyer visited to a
   * product collection index page. This event is available on the Online Store
   * pages
   */
  collection_viewed: PixelEventsCollectionViewed;

  /**
   * This event represents any custom events emitted by partners or merchants
   * via the `publish` method
   */
  custom_event: PixelEventsCustomEvent;

  /**
   * The `page_viewed` event logs an instance where a buyer visited a page. This
   * event is available on the Online Store, Checkout, and Order Status pages
   */
  page_viewed: PixelEventsPageViewed;

  /**
   * The `payment_info_submitted` event logs an instance of a buyer submitting
   * their payment information. This event is available on the Checkout pages
   */
  payment_info_submitted: PixelEventsPaymentInfoSubmitted;

  /**
   * The `product_added_to_cart` event logs an instance where a buyer adds a
   * product to their cart. This event is available on the Online Store pages
   */
  product_added_to_cart: PixelEventsProductAddedToCart;

  /**
   * The `product_variant_viewed` event logs an instance where a buyer interacts
   * with the product page and views a different variant than the initial
   * `product_viewed` impression. This event is available on the Product page
   */
  product_variant_viewed: PixelEventsProductVariantViewed;

  /**
   * The `product_viewed` event logs an instance where a buyer visited a product
   * details page. This event is available on the Product page
   */
  product_viewed: PixelEventsProductViewed;

  /**
   * The `search_submitted event` logs an instance where a buyer performed a
   * search on the storefront. This event is available on the Online Store pages
   */
  search_submitted: PixelEventsSearchSubmitted;
}

/**
 * This object replaces the native document.cookie API and provides a
 * setter/getter to set cookies on the top frame.
 */
export interface BrowserCookie {
  /**
   * An asynchronous method to get a specific cookie by name. Takes a cookie
   * name of type `string` and returns the cookie value as a `string`
   */
  get: (name?: string) => Promise<string>;

  /**
   * An asynchronous method to set a cookie by name. It
   * takes two arguments, a string of form `key=value`
   * as [decribed here](https://developer.mozilla.org/en-
   * US/docs/Web/API/Document/cookie#write_a_new_cookie) or the name of the
   * cookie as the first argument and the value as the second argument.
   */
  set: (cookieOrName: string, value?: string) => Promise<string>;
}

export interface BrowserLocalStorage {
  /**
   * When invoked, will empty all keys out of the storage.
   */
  clear: () => Promise<ReturnType<WindowLocalStorage['localStorage']['clear']>>;

  /**
   * When passed a key name, will return that key's value.
   */
  getItem: (
    key: string,
  ) => Promise<ReturnType<WindowLocalStorage['localStorage']['getItem']>>;

  /**
   * When passed a number n, this method will return the name of the nth key in
   * the storage.
   */
  key: (
    index: number,
  ) => Promise<ReturnType<WindowLocalStorage['localStorage']['key']>>;

  /**
   * Returns an integer representing the number of data items stored in the
   * Storage object.
   */
  length: () => Promise<WindowLocalStorage['localStorage']['length']>;

  /**
   * When passed a key name, will remove that key from the storage.
   */
  removeItem: (
    key: string,
  ) => Promise<ReturnType<WindowLocalStorage['localStorage']['removeItem']>>;

  /**
   * When passed a key name and value, will add that key to the storage, or
   * update that key's value if it already exists.
   */
  setItem: (
    key: string,
    value: any,
  ) => Promise<ReturnType<WindowLocalStorage['localStorage']['setItem']>>;
}

export interface BrowserSessionStorage {
  /**
   * When invoked, will empty all keys out of the storage.
   */
  clear: () => Promise<
    ReturnType<WindowSessionStorage['sessionStorage']['clear']>
  >;

  /**
   * When passed a key name, will return that key's value.
   */
  getItem: (
    key: string,
  ) => Promise<ReturnType<WindowSessionStorage['sessionStorage']['getItem']>>;

  /**
   * When passed a number n, this method will return the name of the nth key in
   * the storage.
   */
  key: (
    index: number,
  ) => Promise<ReturnType<WindowSessionStorage['sessionStorage']['key']>>;

  /**
   * Returns an integer representing the number of data items stored in the
   * Storage object.
   */
  length: () => Promise<WindowSessionStorage['sessionStorage']['length']>;

  /**
   * When passed a key name, will remove that key from the storage.
   */
  removeItem: (
    key: string,
  ) => Promise<
    ReturnType<WindowSessionStorage['sessionStorage']['removeItem']>
  >;

  /**
   * When passed a key name and value, will add that key to the storage, or
   * update that key's value if it already exists.
   */
  setItem: (
    key: string,
    value: any,
  ) => Promise<ReturnType<WindowSessionStorage['sessionStorage']['setItem']>>;
}

export interface Browser {
  /**
   * This object replaces the native document.cookie API and provides a
   * setter/getter to set cookies on the top frame.
   */
  cookie: BrowserCookie;
  localStorage: BrowserLocalStorage;

  /**
   * The navigator.sendBeacon() method asynchronously sends an HTTP POST request
   * containing a small amount of data to a web server.
   */
  sendBeacon: (url: string, body?: string) => Promise<boolean>;
  sessionStorage: BrowserSessionStorage;
}

/**
 * A cart represents the merchandise that a buyer intends to purchase, and the
 * estimated cost associated with the cart. To learn how to interact with a
 * cart during a customer's session, refer to [Manage a cart with the Storefront
 * API](https://shopify.dev/api/examples/cart).
 */
export interface Cart {
  /**
   * The estimated costs that the buyer will pay at checkout. The costs
   * are subject to change and changes will be reflected at checkout. The
   * `cost` field uses the `buyerIdentity` field to determine [international
   * pricing](https://shopify.dev/api/examples/international-pricing#create-
   * a-cart).
   */
  cost: CartCost;

  /**
   * A globally-unique identifier.
   */
  id: string;
  lines: CartLine[];

  /**
   * The total number of items in the cart.
   */
  totalQuantity: number;
}

/**
 * The costs that the buyer will pay at checkout.
 * It uses
 * [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartb
 * uyeridentity) to determine
 * [international pricing](https://shopify.dev/api/examples/international-
 * pricing#create-a-cart).
 */
export interface CartCost {
  /**
   * The total amount for the customer to pay.
   */
  totalAmount: MoneyV2;
}

/**
 * Represents information about the merchandise in the cart.
 */
export interface CartLine {
  /**
   * The cost of the merchandise that the buyer will pay for at checkout. The
   * costs are subject to change and changes will be reflected at checkout.
   */
  cost: CartLineCost;

  /**
   * The merchandise that the buyer intends to purchase.
   */
  merchandise: ProductVariant;

  /**
   * The quantity of the merchandise that the customer intends to purchase.
   */
  quantity: number;
}

/**
 * The cost of the merchandise line that the buyer will pay at checkout.
 */
export interface CartLineCost {
  /**
   * The total cost of the merchandise line.
   */
  totalAmount: MoneyV2;
}

/**
 * A container for all the information required to checkout items and pay.
 */
export interface Checkout {
  /**
   * The currency code for the checkout.
   */
  currencyCode: string;

  /**
   * The email attached to this checkout.
   */
  email: string | null;
  lineItems: CheckoutLineItem[];

  /**
   * The resulting order from a paid checkout.
   */
  order: Order | null;

  /**
   * The phone attached to this checkout.
   */
  phone: string | null;

  /**
   * The shipping address to where the line items will be shipped.
   */
  shippingAddress: MailingAddress | null;

  /**
   * Once a shipping rate is selected by the customer it is transitioned to a
   * `shipping_line` object.
   */
  shippingLine: ShippingRate | null;

  /**
   * The price at checkout before duties, shipping, and taxes.
   */
  subtotalPrice: MoneyV2;

  /**
   * A unique identifier for a particular checkout.
   */
  token: string;

  /**
   * The sum of all the prices of all the items in the checkout, including
   * duties, taxes, and discounts.
   */
  totalPrice: MoneyV2;

  /**
   * The sum of all the taxes applied to the line items and shipping lines in
   * the checkout.
   */
  totalTax: MoneyV2;
}

/**
 * A single line item in the checkout, grouped by variant and attributes.
 */
export interface CheckoutLineItem {
  /**
   * A globally-unique identifier.
   */
  id: string;

  /**
   * The quantity of the line item.
   */
  quantity: number;

  /**
   * Title of the line item. Defaults to the product's title.
   */
  title: string | null;

  /**
   * Product variant of the line item.
   */
  variant: ProductVariant | null;
}

/**
 * The unique client-side cookie identifier (provided by Shopify)
 */
export type ClientId = string;

/**
 * A collection represents a grouping of products that a shop owner can create
 * to organize them or make their shops easier to browse.
 */
export interface Collection {
  /**
   * A globally-unique identifier.
   */
  id: string;

  /**
   * The collection's name. Limit of 255 characters.
   */
  title: string;
}

/**
 * Snapshot of various read-only properties of the browser at the time of event
 */
export interface Context {
  /**
   * Snapshot of a subset of properties of the `document` object in the top
   * frame of the browser
   */
  document: WebPixelsDocument;

  /**
   * Snapshot of a subset of properties of the `navigator` object in the top
   * frame of the browser
   */
  navigator: WebPixelsNavigator;

  /**
   * Snapshot of a subset of properties of the `window` object in the top frame
   * of the browser
   */
  window: WebPixelsWindow;
}

/**
 * A free-form JSON object representing data specific to a custom event provided
 * by the custom event publisher
 */
export type CustomData = Record<string, unknown>;

/**
 * A customer represents a customer account with the shop. Customer accounts
 * store contact information for the customer, saving logged-in customers the
 * trouble of having to provide it at every checkout.
 */
export interface Customer {
  /**
   * The customer's email address.
   */
  email: string | null;

  /**
   * A unique identifier for the customer.
   */
  id: string;

  /**
   * The customer's phone number.
   */
  phone: string | null;
}

/**
 * A free-form JSON object representing data specific to this event provided
 * by Shopify
 */
export type Data = Record<string, unknown>;

/**
 * The unique identifier for the customer event
 */
export type Id = string;

/**
 * Represents an image resource.
 */
export interface Image {
  /**
   * The location of the image as a URL.
   */
  src: string;
}

export interface InitData {
  cart: Cart | null;
  checkout: Checkout | null;
  customer: Customer | null;
  productVariants: ProductVariant[] | null;
}

/**
 * Snapshot of a subset of properties of the `location` object in the top frame
 * of the browser
 */
export interface Location {
  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
   * string containing a `'#'` followed by the fragment identifier of the URL
   */
  hash: string;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
   * string containing the host, that is the hostname, a `':'`, and the port of
   * the URL
   */
  host: string;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
   * string containing the domain of the URL
   */
  hostname: string;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
   * string containing the entire URL
   */
  href: string;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
   * string containing the canonical form of the origin of the specific location
   */
  origin: string;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
   * string containing an initial `'/'` followed by the path of the URL, not
   * including the query string or fragment
   */
  pathname: string;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
   * string containing the port number of the URL
   */
  port: string;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
   * string containing the protocol scheme of the URL, including the final `':'`
   */
  protocol: string;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Location), a
   * string containing a `'?'` followed by the parameters or "querystring" of
   * the URL
   */
  search: string;
}

/**
 * Represents a mailing address for customers and shipping.
 */
export interface MailingAddress {
  /**
   * The name of the city, district, village, or town.
   */
  city: string | null;

  /**
   * The name of the country.
   */
  country: string | null;

  /**
   * The two-letter code for the country of the address.
   * For example, US.
   */
  countryCode: string | null;

  /**
   * A unique phone number for the customer.
   */
  phone: string | null;

  /**
   * The region of the address, such as the province, state, or district.
   */
  province: string | null;

  /**
   * The two-letter code for the region.
   * For example, ON.
   */
  provinceCode: string | null;
}

/**
 * A monetary value with currency.
 */
export interface MoneyV2 {
  /**
   * Decimal money amount.
   */
  amount: number;

  /**
   * Currency of the money.
   */
  currencyCode: string;
}

/**
 * The name of the customer event
 */
export type Name = string;

/**
 * An order is a customer's completed request to purchase one or more products
 * from a shop. An order is created when a customer completes the checkout
 * process, during which time they provides an email address, billing address
 * and payment information.
 */
export interface Order {
  /**
   * A globally-unique identifier.
   */
  id: string;
}

/**
 * A product represents an individual item for sale in a Shopify store. Products
 * are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also
 * qualifies as a product, as do services (such as equipment rental, work for
 * hire, customization of another product or an extended warranty).
 */
export interface Product {
  /**
   * A globally-unique identifier.
   */
  id: string;

  /**
   * The product's title.
   */
  title: string;

  /**
   * The product's vendor name.
   */
  vendor: string;
}

/**
 * A product variant represents a different version of a product, such as
 * differing sizes or differing colors.
 */
export interface ProductVariant {
  /**
   * A globally-unique identifier.
   */
  id: string;

  /**
   * Image associated with the product variant. This field falls back to the
   * product image if no image is available.
   */
  image: Image | null;

  /**
   * The product variant's price.
   */
  price: MoneyV2;

  /**
   * The product object that the product variant belongs to.
   */
  product: Product;

  /**
   * The SKU (stock keeping unit) associated with the variant.
   */
  sku: string | null;

  /**
   * The product variant's title.
   */
  title: string;
}

/**
 * An object containing metadata of when a search has been performed.
 */
export interface SearchResult {
  /**
   * The search query that was executed
   */
  query: string;
}

/**
 * A shipping rate to be applied to a checkout.
 */
export interface ShippingRate {
  /**
   * Price of this shipping rate.
   */
  price: MoneyV2;
}

/**
 * The timestamp of when the customer event occurred
 */
export type Timestamp = string;

/**
 * Snapshot of a subset of properties of the `document` object in the top frame
 * of the browser
 */
export interface WebPixelsDocument {
  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document),
   * returns the character set being used by the document
   */
  characterSet: string;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document),
   * returns the URI of the current document
   */
  location: Location;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document),
   * returns the URI of the page that linked to this page
   */
  referrer: string;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document),
   * returns the title of the current document
   */
  title: string;
}

/**
 * Snapshot of a subset of properties of the `navigator` object in the top frame
 * of the browser
 */
export interface WebPixelsNavigator {
  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Navigator),
   * returns false if setting a cookie will be ignored and true otherwise
   */
  cookieEnabled: boolean;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Navigator),
   * returns a string representing the preferred language of the user, usually
   * the language of the browser UI. The null value is returned when this is
   * unknown
   */
  language: string;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Navigator),
   * returns an array of strings representing the languages known to the user,
   * by order of preference
   */
  languages: readonly string[];

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Navigator),
   * returns the user agent string for the current browser
   */
  userAgent: string;
}

/**
 * Snapshot of a subset of properties of the `window` object in the top frame of
 * the browser
 */
export interface WebPixelsWindow {
  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window),
   * gets the height of the content area of the browser window including, if
   * rendered, the horizontal scrollbar
   */
  innerHeight: number;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), gets
   * the width of the content area of the browser window including, if rendered,
   * the vertical scrollbar
   */
  innerWidth: number;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), the
   * location, or current URL, of the window object
   */
  location: Location;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), the
   * global object's origin, serialized as a string
   */
  origin: string;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), gets
   * the height of the outside of the browser window
   */
  outerHeight: number;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), gets
   * the width of the outside of the browser window
   */
  outerWidth: number;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), an
   * alias for window.scrollX
   */
  pageXOffset: number;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), an
   * alias for window.scrollY
   */
  pageYOffset: number;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), the
   * horizontal distance from the left border of the user's browser viewport to
   * the left side of the screen
   */
  screenX: number;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), the
   * vertical distance from the top border of the user's browser viewport to the
   * top side of the screen
   */
  screenY: number;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), the
   * number of pixels that the document has already been scrolled horizontally
   */
  scrollX: number;

  /**
   * Per [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window), the
   * number of pixels that the document has already been scrolled vertically
   */
  scrollY: number;
}
