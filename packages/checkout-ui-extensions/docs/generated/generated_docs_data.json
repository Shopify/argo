[
  {
    "name": "CartLineDetailsApi",
    "overviewPreviewDescription": "The API provided to extensions which target cart line details.",
    "description": "\nThis API object is provided to extensions registered for the `Checkout::CartLineDetails::RenderAfter` extension point.\n\nIt extends the [StandardApi](/docs/api/checkout-ui-extensions/apis/standardapi) and provides the [target](#properties-propertydetail-target) cart line item associated with the extension.\n",
    "requires": "access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) for some properties.",
    "isVisualComponent": false,
    "category": "APIs",
    "definitions": [
      {
        "title": "Properties",
        "description": "See the [StandardApi examples](/docs/api/checkout-ui-extensions/apis/standardapi#examples) for more information on how to use the API.",
        "type": "CartLineDetailsApi",
        "typeDefinitions": {
          "CartLineDetailsApi": {
            "filePath": "/api/cart-line/cart-line-details.ts",
            "name": "CartLineDetailsApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/cart-line/cart-line-details.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "StatefulRemoteSubscribable<PresentmentCartLine>",
                "description": "The cart line the extension is attached to."
              }
            ],
            "value": "export interface CartLineDetailsApi {\n  /**\n   * The cart line the extension is attached to.\n   */\n  target: StatefulRemoteSubscribable<PresentmentCartLine>;\n}"
          },
          "PresentmentCartLine": {
            "filePath": "/api/standard/standard.ts",
            "name": "PresentmentCartLine",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The ID of the present cart line. This ID isn't stable and might change after\nany operations on the line items."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "PresentmentCartLineCost",
                "description": "The details about the cost components attributed to the presentment cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the line item."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "string",
                "description": "The subtitle of the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "The image associated with the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lines",
                "value": "CartLine[]",
                "description": "The merchandise lines being purchased."
              }
            ],
            "value": "export interface PresentmentCartLine {\n  /**\n   * The ID of the present cart line. This ID isn't stable and might change after\n   * any operations on the line items.\n   * @example 'gid://shopify/PresentmentCartLine/123'\n   */\n  id: string;\n\n  /**\n   * The quantity of the merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The details about the cost components attributed to the presentment cart line.\n   */\n  cost: PresentmentCartLineCost;\n\n  /**\n   * The title of the line item.\n   */\n  title: string;\n\n  /**\n   * The subtitle of the line item.\n   */\n  subtitle?: string;\n\n  /**\n   * The image associated with the line item.\n   */\n  image?: ImageDetails;\n\n  /**\n   * The merchandise lines being purchased.\n   */\n  lines: CartLine[];\n}"
          },
          "PresentmentCartLineCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "PresentmentCartLineCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "Money",
                "description": "The total cost of the merchandise line."
              }
            ],
            "value": "export interface PresentmentCartLineCost {\n  /**\n   * The total cost of the merchandise line.\n   */\n  totalAmount: Money;\n}"
          },
          "Money": {
            "filePath": "/api/standard/standard.ts",
            "name": "Money",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": "The price amount."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currencyCode",
                "value": "CurrencyCode",
                "description": "The ISO 4217 format for the currency."
              }
            ],
            "value": "export interface Money {\n  /**\n   * The price amount.\n   */\n  amount: number;\n  /**\n   * The ISO 4217 format for the currency.\n   * @example 'CAD' for Canadian dollar\n   */\n  currencyCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          },
          "ImageDetails": {
            "filePath": "/api/standard/standard.ts",
            "name": "ImageDetails",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "url",
                "value": "string",
                "description": "The image URL."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "altText",
                "value": "string",
                "description": "The alternative text for the image.",
                "isOptional": true
              }
            ],
            "value": "export interface ImageDetails {\n  /**\n   * The image URL.\n   */\n  url: string;\n\n  /**\n   * The alternative text for the image.\n   */\n  altText?: string;\n}"
          },
          "CartLine": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLine",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "These line item IDs are not stable at the moment, they might change after\nany operations on the line items. You should always look up for an updated\nID before any call to `applyCartLinesChange` because you'll need the ID to\ncreate a `CartLineChange` object."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The details about the cost components attributed to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The line item additional custom attributes."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountAllocations",
                "value": "CartDiscountAllocation[]",
                "description": "Discounts applied to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lineComponents",
                "value": "CartBundleLineComponent[]",
                "description": "Sub lines of the merchandise line. If no sub lines are present, this will be an empty array."
              }
            ],
            "value": "export interface CartLine {\n  /**\n   * These line item IDs are not stable at the moment, they might change after\n   * any operations on the line items. You should always look up for an updated\n   * ID before any call to `applyCartLinesChange` because you'll need the ID to\n   * create a `CartLineChange` object.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise being purchased.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of the merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The details about the cost components attributed to the cart line.\n   */\n  cost: CartLineCost;\n\n  /**\n   * The line item additional custom attributes.\n   */\n  attributes: Attribute[];\n\n  /**\n   * Discounts applied to the cart line.\n   */\n  discountAllocations: CartDiscountAllocation[];\n\n  /**\n   * Sub lines of the merchandise line. If no sub lines are present, this will be an empty array.\n   */\n  lineComponents: CartLineComponentType[];\n}"
          },
          "Merchandise": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Merchandise",
            "value": "ProductVariant",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"variant\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The product variant’s title."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "string",
                "description": "The product variant's subtitle.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "Image associated with the product variant. This field falls back to the product\nimage if no image is available.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "selectedOptions",
                "value": "SelectedOption[]",
                "description": "List of product options applied to the variant."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "product",
                "value": "Product",
                "description": "The product object that the product variant belongs to."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "requiresShipping",
                "value": "boolean",
                "description": "Whether or not the product requires shipping."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlan",
                "value": "SellingPlan",
                "description": "The selling plan associated with the merchandise.",
                "isOptional": true
              }
            ]
          },
          "SelectedOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "SelectedOption",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the merchandise option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value of the merchandise option."
              }
            ],
            "value": "export interface SelectedOption {\n  /**\n   * The name of the merchandise option.\n   */\n  name: string;\n\n  /**\n   * The value of the merchandise option.\n   */\n  value: string;\n}"
          },
          "Product": {
            "filePath": "/api/standard/standard.ts",
            "name": "Product",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "vendor",
                "value": "string",
                "description": "The product’s vendor name."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "productType",
                "value": "string",
                "description": "A categorization that a product can be tagged with, commonly used for filtering and searching."
              }
            ],
            "value": "export interface Product {\n  /**\n   * A globally-unique identifier.\n   */\n  id: string;\n\n  /**\n   * The product’s vendor name.\n   */\n  vendor: string;\n\n  /**\n   * A categorization that a product can be tagged with, commonly used for filtering and searching.\n   */\n  productType: string;\n}"
          },
          "SellingPlan": {
            "filePath": "/api/shared.ts",
            "name": "SellingPlan",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              }
            ],
            "value": "export interface SellingPlan {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/SellingPlan/1'\n   */\n  id: string;\n}"
          },
          "CartLineCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLineCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "Money",
                "description": "The total amount after reductions the buyer can expect to pay that is directly attributable to a single\ncart line."
              }
            ],
            "value": "export interface CartLineCost {\n  /**\n   * The total amount after reductions the buyer can expect to pay that is directly attributable to a single\n   * cart line.\n   */\n  totalAmount: Money;\n}"
          },
          "Attribute": {
            "filePath": "/api/shared.ts",
            "name": "Attribute",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The key for the attribute."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value for the attribute."
              }
            ],
            "value": "export interface Attribute {\n  /**\n   * The key for the attribute.\n   */\n  key: string;\n\n  /**\n   * The value for the attribute.\n   */\n  value: string;\n}"
          },
          "CartDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartDiscountAllocation",
            "value": "CartCodeDiscountAllocation | CartAutomaticDiscountAllocation | CartCustomDiscountAllocation",
            "description": ""
          },
          "CartCodeDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCodeDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"code\"",
                "description": "The type of the code discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCodeDiscountAllocation extends CartDiscountAllocationBase {\n  /**\n   * The code for the discount\n   */\n  code: string;\n\n  /**\n   * The type of the code discount\n   */\n  type: 'code';\n}"
          },
          "CartAutomaticDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartAutomaticDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"automatic\"",
                "description": "The type of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartAutomaticDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the automatic discount\n   */\n  title: string;\n\n  /**\n   * The type of the automatic discount\n   */\n  type: 'automatic';\n}"
          },
          "CartCustomDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCustomDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"custom\"",
                "description": "The type of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCustomDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the custom discount\n   */\n  title: string;\n\n  /**\n   * The type of the custom discount\n   */\n  type: 'custom';\n}"
          },
          "CartBundleLineComponent": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartBundleLineComponent",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"bundle\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the bundle line component.\n\nThis ID is not stable. If an operation updates the line items in any way, all IDs could change."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise of this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The cost attributed to this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "Additional custom attributes for the bundle line component."
              }
            ],
            "value": "export interface CartBundleLineComponent {\n  type: 'bundle';\n\n  /**\n   * A unique identifier for the bundle line component.\n   *\n   * This ID is not stable. If an operation updates the line items in any way, all IDs could change.\n   *\n   * @example 'gid://shopify/CartLineComponent/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise of this bundle line component.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The cost attributed to this bundle line component.\n   */\n  cost: CartLineCost;\n\n  /**\n   * Additional custom attributes for the bundle line component.\n   *\n   * @example [{key: 'engraving', value: 'hello world'}]\n   */\n  attributes: Attribute[];\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "",
      "codeblock": {
        "title": "",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  render,\n  Text,\n  useTarget,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender(\n  'Checkout::CartLineDetails::RenderAfter',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const {title} = useTarget();\n  return <Text>Line item title: {title}</Text>;\n}\n",
            "language": "jsx",
            "title": "React"
          },
          {
            "code": "import {extend} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::CartLineDetails::RenderAfter',\n  (root, {target}) => {\n    const text = root.createText(\n      `Line item title: ${target.current.title}`,\n    );\n    root.appendChild(text);\n\n    target.subscribe((updatedTarget) => {\n      text.updateText(\n        `Line item title: ${updatedTarget.title}`,\n      );\n    });\n  },\n);\n",
            "language": "js",
            "title": "JavaScript"
          }
        ]
      }
    },
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "CheckoutApi",
    "overviewPreviewDescription": "The API provided to extensions before the purchase is completed.",
    "description": "\nThis API object is provided to extensions registered for the extension points that appear exclusively pre-purchase.\n\nIt extends the [StandardApi](/docs/api/checkout-ui-extensions/apis/standardapi) and provides the write apis for the checkout data.\n",
    "requires": "access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) for some properties.",
    "isVisualComponent": false,
    "category": "APIs",
    "definitions": [
      {
        "title": "Properties",
        "description": "See the [StandardApi examples](/docs/api/checkout-ui-extensions/apis/standardapi#examples) for more information on how to use the API.",
        "type": "CheckoutApi",
        "typeDefinitions": {
          "CheckoutApi": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CheckoutApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyAttributeChange",
                "value": "(change: AttributeUpdateChange) => Promise<AttributeChangeResult>",
                "description": "Performs an update on an attribute attached to the cart and checkout. If\nsuccessful, this mutation results in an update to the value retrieved\nthrough the [`attributes`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-applyattributechange) property."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyCartLinesChange",
                "value": "(change: CartLineChange) => Promise<CartLineChangeResult>",
                "description": "Performs an update on the merchandise line items. It resolves when the new\nline items have been negotiated and results in an update to the value\nretrieved through the\n[`lines`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-lines)\nproperty."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyDiscountCodeChange",
                "value": "(change: DiscountCodeChange) => Promise<DiscountCodeChangeResult>",
                "description": "Performs an update on the discount codes.\nIt resolves when the new discount codes have been negotiated and results in an update\nto the value retrieved through the [`discountCodes`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-discountcodes) property.\n\n> Caution:\n> See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves discount codes through a network call."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyGiftCardChange",
                "value": "(change: GiftCardChange) => Promise<GiftCardChangeResult>",
                "description": "Performs an update on the gift cards.\nIt resolves when gift card change have been negotiated and results in an update\nto the value retrieved through the [`appliedGiftCards`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-appliedgiftcards) property.\n\n> Caution:\n> See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves gift card codes through a network call."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyMetafieldChange",
                "value": "(change: MetafieldChange) => Promise<MetafieldChangeResult>",
                "description": "Performs an update on a piece of metadata attached to the checkout. If\nsuccessful, this mutation results in an update to the value retrieved\nthrough the [`metafields`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-metafields) property."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyNoteChange",
                "value": "(change: NoteChange) => Promise<NoteChangeResult>",
                "description": "Performs an update on the note attached to the cart and checkout. If\nsuccessful, this mutation results in an update to the value retrieved\nthrough the [`note`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-note) property."
              }
            ],
            "value": "export interface CheckoutApi {\n  /**\n   * Performs an update on an attribute attached to the cart and checkout. If\n   * successful, this mutation results in an update to the value retrieved\n   * through the [`attributes`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-applyattributechange) property.\n   */\n  applyAttributeChange(change: AttributeChange): Promise<AttributeChangeResult>;\n\n  /**\n   * Performs an update on the merchandise line items. It resolves when the new\n   * line items have been negotiated and results in an update to the value\n   * retrieved through the\n   * [`lines`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-lines)\n   * property.\n   */\n  applyCartLinesChange(change: CartLineChange): Promise<CartLineChangeResult>;\n\n  /**\n   * Performs an update on the discount codes.\n   * It resolves when the new discount codes have been negotiated and results in an update\n   * to the value retrieved through the [`discountCodes`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-discountcodes) property.\n   *\n   * > Caution:\n   * > See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves discount codes through a network call.\n   */\n  applyDiscountCodeChange(\n    change: DiscountCodeChange,\n  ): Promise<DiscountCodeChangeResult>;\n\n  /**\n   * Performs an update on the gift cards.\n   * It resolves when gift card change have been negotiated and results in an update\n   * to the value retrieved through the [`appliedGiftCards`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-appliedgiftcards) property.\n   *\n   * > Caution:\n   * > See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves gift card codes through a network call.\n   */\n  applyGiftCardChange(change: GiftCardChange): Promise<GiftCardChangeResult>;\n\n  /**\n   * Performs an update on a piece of metadata attached to the checkout. If\n   * successful, this mutation results in an update to the value retrieved\n   * through the [`metafields`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-metafields) property.\n   */\n  applyMetafieldChange(change: MetafieldChange): Promise<MetafieldChangeResult>;\n\n  /**\n   * Performs an update on the note attached to the cart and checkout. If\n   * successful, this mutation results in an update to the value retrieved\n   * through the [`note`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-note) property.\n   */\n  applyNoteChange(change: NoteChange): Promise<NoteChangeResult>;\n}"
          },
          "AttributeUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "AttributeUpdateChange",
            "description": "Updates an attribute on the order. If an attribute with the\nprovided key does not already exist, it gets created.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateAttribute\"",
                "description": "The type of the `AttributeUpdateChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "Key of the attribute to add or update"
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "Value for the attribute to add or update"
              }
            ],
            "value": "export interface AttributeUpdateChange {\n  /**\n   * The type of the `AttributeUpdateChange` API.\n   */\n  type: 'updateAttribute';\n\n  /**\n   * Key of the attribute to add or update\n   */\n  key: string;\n\n  /**\n   * Value for the attribute to add or update\n   */\n  value: string;\n}"
          },
          "Attribute": {
            "filePath": "/api/shared.ts",
            "name": "Attribute",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The key for the attribute."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value for the attribute."
              }
            ],
            "value": "export interface Attribute {\n  /**\n   * The key for the attribute.\n   */\n  key: string;\n\n  /**\n   * The value for the attribute.\n   */\n  value: string;\n}"
          },
          "AttributeChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AttributeChangeResult",
            "value": "AttributeChangeResultSuccess | AttributeChangeResultError",
            "description": ""
          },
          "AttributeChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "AttributeChangeResultSuccess",
            "description": "The returned result of a successful update to an attribute.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "The type of the `AttributeChangeResultSuccess` API."
              }
            ],
            "value": "export interface AttributeChangeResultSuccess {\n  /**\n   * The type of the `AttributeChangeResultSuccess` API.\n   */\n  type: 'success';\n}"
          },
          "AttributeChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "AttributeChangeResultError",
            "description": "The returned result of an unsuccessful update to an attribute\nwith a message detailing the type of error that occurred.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "The type of the `AttributeChangeResultError` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface AttributeChangeResultError {\n  /**\n   * The type of the `AttributeChangeResultError` API.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "CartLineChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartLineChange",
            "value": "CartLineAddChange | CartLineRemoveChange | CartLineUpdateChange",
            "description": ""
          },
          "CartLineAddChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineAddChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"addCartLine\"",
                "description": "An identifier for changes that add line items."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandiseId",
                "value": "string",
                "description": "The merchandise ID being added."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being added."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The attributes associated with the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlanId",
                "value": "string",
                "description": "The identifier of the selling plan that the merchandise is being purchased\nwith.",
                "isOptional": true
              }
            ],
            "value": "export interface CartLineAddChange {\n  /**\n   * An identifier for changes that add line items.\n   */\n  type: 'addCartLine';\n\n  /**\n   * The merchandise ID being added.\n   * @example 'gid://shopify/ProductVariant/123'\n   */\n  merchandiseId: string;\n\n  /**\n   * The quantity of the merchandise being added.\n   */\n  quantity: number;\n\n  /**\n   * The attributes associated with the line item.\n   */\n  attributes?: Attribute[];\n\n  /**\n   * The identifier of the selling plan that the merchandise is being purchased\n   * with.\n   */\n  sellingPlanId?: SellingPlan['id'];\n}"
          },
          "CartLine": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLine",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "These line item IDs are not stable at the moment, they might change after\nany operations on the line items. You should always look up for an updated\nID before any call to `applyCartLinesChange` because you'll need the ID to\ncreate a `CartLineChange` object."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The details about the cost components attributed to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The line item additional custom attributes."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountAllocations",
                "value": "CartDiscountAllocation[]",
                "description": "Discounts applied to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lineComponents",
                "value": "CartBundleLineComponent[]",
                "description": "Sub lines of the merchandise line. If no sub lines are present, this will be an empty array."
              }
            ],
            "value": "export interface CartLine {\n  /**\n   * These line item IDs are not stable at the moment, they might change after\n   * any operations on the line items. You should always look up for an updated\n   * ID before any call to `applyCartLinesChange` because you'll need the ID to\n   * create a `CartLineChange` object.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise being purchased.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of the merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The details about the cost components attributed to the cart line.\n   */\n  cost: CartLineCost;\n\n  /**\n   * The line item additional custom attributes.\n   */\n  attributes: Attribute[];\n\n  /**\n   * Discounts applied to the cart line.\n   */\n  discountAllocations: CartDiscountAllocation[];\n\n  /**\n   * Sub lines of the merchandise line. If no sub lines are present, this will be an empty array.\n   */\n  lineComponents: CartLineComponentType[];\n}"
          },
          "Merchandise": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Merchandise",
            "value": "ProductVariant",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"variant\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The product variant’s title."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "string",
                "description": "The product variant's subtitle.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "Image associated with the product variant. This field falls back to the product\nimage if no image is available.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "selectedOptions",
                "value": "SelectedOption[]",
                "description": "List of product options applied to the variant."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "product",
                "value": "Product",
                "description": "The product object that the product variant belongs to."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "requiresShipping",
                "value": "boolean",
                "description": "Whether or not the product requires shipping."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlan",
                "value": "SellingPlan",
                "description": "The selling plan associated with the merchandise.",
                "isOptional": true
              }
            ]
          },
          "ImageDetails": {
            "filePath": "/api/standard/standard.ts",
            "name": "ImageDetails",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "url",
                "value": "string",
                "description": "The image URL."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "altText",
                "value": "string",
                "description": "The alternative text for the image.",
                "isOptional": true
              }
            ],
            "value": "export interface ImageDetails {\n  /**\n   * The image URL.\n   */\n  url: string;\n\n  /**\n   * The alternative text for the image.\n   */\n  altText?: string;\n}"
          },
          "SelectedOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "SelectedOption",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the merchandise option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value of the merchandise option."
              }
            ],
            "value": "export interface SelectedOption {\n  /**\n   * The name of the merchandise option.\n   */\n  name: string;\n\n  /**\n   * The value of the merchandise option.\n   */\n  value: string;\n}"
          },
          "Product": {
            "filePath": "/api/standard/standard.ts",
            "name": "Product",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "vendor",
                "value": "string",
                "description": "The product’s vendor name."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "productType",
                "value": "string",
                "description": "A categorization that a product can be tagged with, commonly used for filtering and searching."
              }
            ],
            "value": "export interface Product {\n  /**\n   * A globally-unique identifier.\n   */\n  id: string;\n\n  /**\n   * The product’s vendor name.\n   */\n  vendor: string;\n\n  /**\n   * A categorization that a product can be tagged with, commonly used for filtering and searching.\n   */\n  productType: string;\n}"
          },
          "SellingPlan": {
            "filePath": "/api/shared.ts",
            "name": "SellingPlan",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              }
            ],
            "value": "export interface SellingPlan {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/SellingPlan/1'\n   */\n  id: string;\n}"
          },
          "CartLineCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLineCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "Money",
                "description": "The total amount after reductions the buyer can expect to pay that is directly attributable to a single\ncart line."
              }
            ],
            "value": "export interface CartLineCost {\n  /**\n   * The total amount after reductions the buyer can expect to pay that is directly attributable to a single\n   * cart line.\n   */\n  totalAmount: Money;\n}"
          },
          "Money": {
            "filePath": "/api/standard/standard.ts",
            "name": "Money",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": "The price amount."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currencyCode",
                "value": "CurrencyCode",
                "description": "The ISO 4217 format for the currency."
              }
            ],
            "value": "export interface Money {\n  /**\n   * The price amount.\n   */\n  amount: number;\n  /**\n   * The ISO 4217 format for the currency.\n   * @example 'CAD' for Canadian dollar\n   */\n  currencyCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          },
          "CartDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartDiscountAllocation",
            "value": "CartCodeDiscountAllocation | CartAutomaticDiscountAllocation | CartCustomDiscountAllocation",
            "description": ""
          },
          "CartCodeDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCodeDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"code\"",
                "description": "The type of the code discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCodeDiscountAllocation extends CartDiscountAllocationBase {\n  /**\n   * The code for the discount\n   */\n  code: string;\n\n  /**\n   * The type of the code discount\n   */\n  type: 'code';\n}"
          },
          "CartAutomaticDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartAutomaticDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"automatic\"",
                "description": "The type of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartAutomaticDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the automatic discount\n   */\n  title: string;\n\n  /**\n   * The type of the automatic discount\n   */\n  type: 'automatic';\n}"
          },
          "CartCustomDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCustomDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"custom\"",
                "description": "The type of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCustomDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the custom discount\n   */\n  title: string;\n\n  /**\n   * The type of the custom discount\n   */\n  type: 'custom';\n}"
          },
          "CartBundleLineComponent": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartBundleLineComponent",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"bundle\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the bundle line component.\n\nThis ID is not stable. If an operation updates the line items in any way, all IDs could change."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise of this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The cost attributed to this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "Additional custom attributes for the bundle line component."
              }
            ],
            "value": "export interface CartBundleLineComponent {\n  type: 'bundle';\n\n  /**\n   * A unique identifier for the bundle line component.\n   *\n   * This ID is not stable. If an operation updates the line items in any way, all IDs could change.\n   *\n   * @example 'gid://shopify/CartLineComponent/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise of this bundle line component.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The cost attributed to this bundle line component.\n   */\n  cost: CartLineCost;\n\n  /**\n   * Additional custom attributes for the bundle line component.\n   *\n   * @example [{key: 'engraving', value: 'hello world'}]\n   */\n  attributes: Attribute[];\n}"
          },
          "CartLineRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineRemoveChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeCartLine\"",
                "description": "An identifier for changes that remove line items."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Line Item ID."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity being removed for this line item."
              }
            ],
            "value": "export interface CartLineRemoveChange {\n  /**\n   * An identifier for changes that remove line items.\n   */\n  type: 'removeCartLine';\n\n  /**\n   * Line Item ID.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The quantity being removed for this line item.\n   */\n  quantity: number;\n}"
          },
          "CartLineUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineUpdateChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateCartLine\"",
                "description": "An identifier for changes that update line items."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Line Item ID."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandiseId",
                "value": "string",
                "description": "The new merchandise ID for the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The new quantity for the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The new attributes for the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlanId",
                "value": "string",
                "description": "The identifier of the selling plan that the merchandise is being purchased\nwith or `null` to remove the the product from the selling plan.",
                "isOptional": true
              }
            ],
            "value": "export interface CartLineUpdateChange {\n  /**\n   * An identifier for changes that update line items.\n   */\n  type: 'updateCartLine';\n\n  /**\n   * Line Item ID.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The new merchandise ID for the line item.\n   * @example 'gid://shopify/ProductVariant/123'\n   */\n\n  merchandiseId?: string;\n  /**\n   * The new quantity for the line item.\n   */\n  quantity?: number;\n\n  /**\n   * The new attributes for the line item.\n   */\n  attributes?: Attribute[];\n\n  /**\n   * The identifier of the selling plan that the merchandise is being purchased\n   * with or `null` to remove the the product from the selling plan.\n   */\n  sellingPlanId?: SellingPlan['id'] | null;\n}"
          },
          "CartLineChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartLineChangeResult",
            "value": "CartLineChangeResultSuccess | CartLineChangeResultError",
            "description": ""
          },
          "CartLineChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the line item was changed successfully."
              }
            ],
            "value": "export interface CartLineChangeResultSuccess {\n  /**\n   * Indicates that the line item was changed successfully.\n   */\n  type: 'success';\n}"
          },
          "CartLineChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the line item was not changed successfully. Refer to the `message` property for details about the error."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface CartLineChangeResultError {\n  /**\n   * Indicates that the line item was not changed successfully. Refer to the `message` property for details about the error.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "DiscountCodeChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DiscountCodeChange",
            "value": "DiscountCodeAddChange | DiscountCodeRemoveChange",
            "description": ""
          },
          "DiscountCodeAddChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeAddChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"addDiscountCode\"",
                "description": "The type of the `DiscountCodeChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              }
            ],
            "value": "export interface DiscountCodeAddChange {\n  /**\n   * The type of the `DiscountCodeChange` API.\n   */\n  type: 'addDiscountCode';\n\n  /**\n   * The code for the discount\n   */\n  code: string;\n}"
          },
          "DiscountCodeRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeRemoveChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeDiscountCode\"",
                "description": "The type of the `DiscountCodeChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              }
            ],
            "value": "export interface DiscountCodeRemoveChange {\n  /**\n   * The type of the `DiscountCodeChange` API.\n   */\n  type: 'removeDiscountCode';\n\n  /**\n   * The code for the discount\n   */\n  code: string;\n}"
          },
          "DiscountCodeChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DiscountCodeChangeResult",
            "value": "DiscountCodeChangeResultSuccess | DiscountCodeChangeResultError",
            "description": ""
          },
          "DiscountCodeChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the discount code change was applied successfully."
              }
            ],
            "value": "export interface DiscountCodeChangeResultSuccess {\n  /**\n   * Indicates that the discount code change was applied successfully.\n   */\n  type: 'success';\n}"
          },
          "DiscountCodeChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the discount code change failed."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface DiscountCodeChangeResultError {\n  /**\n   * Indicates that the discount code change failed.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "GiftCardChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "GiftCardChange",
            "value": "GiftCardAddChange | GiftCardRemoveChange",
            "description": ""
          },
          "GiftCardAddChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardAddChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"addGiftCard\"",
                "description": "The type of the `GiftCardChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "Gift card code."
              }
            ],
            "value": "export interface GiftCardAddChange {\n  /**\n   * The type of the `GiftCardChange` API.\n   */\n  type: 'addGiftCard';\n\n  /**\n   * Gift card code.\n   */\n  code: string;\n}"
          },
          "GiftCardRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardRemoveChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeGiftCard\"",
                "description": "The type of the `GiftCardChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "Gift card code."
              }
            ],
            "value": "export interface GiftCardRemoveChange {\n  /**\n   * The type of the `GiftCardChange` API.\n   */\n  type: 'removeGiftCard';\n\n  /**\n   * Gift card code.\n   */\n  code: string;\n}"
          },
          "GiftCardChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "GiftCardChangeResult",
            "value": "GiftCardChangeResultSuccess | GiftCardChangeResultError",
            "description": ""
          },
          "GiftCardChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the gift card change was applied successfully."
              }
            ],
            "value": "export interface GiftCardChangeResultSuccess {\n  /**\n   * Indicates that the gift card change was applied successfully.\n   */\n  type: 'success';\n}"
          },
          "GiftCardChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the gift card change failed."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface GiftCardChangeResultError {\n  /**\n   * Indicates that the gift card change failed.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "MetafieldChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MetafieldChange",
            "value": "MetafieldRemoveChange | MetafieldUpdateChange",
            "description": ""
          },
          "MetafieldRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldRemoveChange",
            "description": "Removes a metafield.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeMetafield\"",
                "description": "The type of the `MetafieldRemoveChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield to remove."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "The namespace of the metafield to remove."
              }
            ],
            "value": "export interface MetafieldRemoveChange {\n  /**\n   * The type of the `MetafieldRemoveChange` API.\n   */\n  type: 'removeMetafield';\n\n  /**\n   * The name of the metafield to remove.\n   */\n  key: string;\n\n  /**\n   * The namespace of the metafield to remove.\n   */\n  namespace: string;\n}"
          },
          "Metafield": {
            "filePath": "/api/standard/standard.ts",
            "name": "Metafield",
            "description": "Metadata associated with the checkout.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield. It must be between 3 and 30 characters in\nlength (inclusive)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "A container for a set of metafields. You need to define a custom\nnamespace for your metafields to distinguish them from the metafields\nused by other apps. This must be between 2 and 20 characters in length (inclusive)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number",
                "description": "The information to be stored as metadata."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"integer\" | \"json_string\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface Metafield {\n  /**\n   * The name of the metafield. It must be between 3 and 30 characters in\n   * length (inclusive).\n   */\n  key: string;\n\n  /**\n   * A container for a set of metafields. You need to define a custom\n   * namespace for your metafields to distinguish them from the metafields\n   * used by other apps. This must be between 2 and 20 characters in length (inclusive).\n   */\n  namespace: string;\n\n  /**\n   * The information to be stored as metadata.\n   */\n  value: string | number;\n\n  /** The metafield’s information type. */\n  valueType: 'integer' | 'string' | 'json_string';\n}"
          },
          "MetafieldUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldUpdateChange",
            "description": "Updates a metafield. If a metafield with the\nprovided key and namespace does not already exist, it gets created.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateMetafield\"",
                "description": "The type of the `MetafieldUpdateChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield to update."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "The namespace of the metafield to add."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number",
                "description": "The new information to store in the metafield."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"integer\" | \"json_string\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface MetafieldUpdateChange {\n  /**\n   * The type of the `MetafieldUpdateChange` API.\n   */\n  type: 'updateMetafield';\n\n  /** The name of the metafield to update. */\n  key: string;\n\n  /** The namespace of the metafield to add. */\n  namespace: string;\n\n  /** The new information to store in the metafield. */\n  value: string | number;\n\n  /**\n   * The metafield’s information type.\n   */\n  valueType: 'integer' | 'string' | 'json_string';\n}"
          },
          "MetafieldChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MetafieldChangeResult",
            "value": "MetafieldChangeResultSuccess | MetafieldChangeResultError",
            "description": ""
          },
          "MetafieldChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "The type of the `MetafieldChangeResultSuccess` API."
              }
            ],
            "value": "export interface MetafieldChangeResultSuccess {\n  /**\n   * The type of the `MetafieldChangeResultSuccess` API.\n   */\n  type: 'success';\n}"
          },
          "MetafieldChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "The type of the `MetafieldChangeResultError` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface MetafieldChangeResultError {\n  /**\n   * The type of the `MetafieldChangeResultError` API.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "NoteChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NoteChange",
            "value": "NoteRemoveChange | NoteUpdateChange",
            "description": ""
          },
          "NoteRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteRemoveChange",
            "description": "Removes a note",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeNote\"",
                "description": "The type of the `NoteRemoveChange` API."
              }
            ],
            "value": "export interface NoteRemoveChange {\n  /**\n   * The type of the `NoteRemoveChange` API.\n   */\n  type: 'removeNote';\n}"
          },
          "NoteUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteUpdateChange",
            "description": "An Update to a note on the order.\nfor example, the buyer could request detailed packaging instructions in an order note",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateNote\"",
                "description": "The type of the `NoteUpdateChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "note",
                "value": "string",
                "description": "The new value of the note."
              }
            ],
            "value": "export interface NoteUpdateChange {\n  /**\n   * The type of the `NoteUpdateChange` API.\n   */\n  type: 'updateNote';\n  /**\n   * The new value of the note.\n   */\n  note: string;\n}"
          },
          "NoteChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NoteChangeResult",
            "value": "NoteChangeResultSuccess | NoteChangeResultError",
            "description": ""
          },
          "NoteChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "The type of the `NoteChangeResultSuccess` API."
              }
            ],
            "value": "export interface NoteChangeResultSuccess {\n  /**\n   * The type of the `NoteChangeResultSuccess` API.\n   */\n  type: 'success';\n}"
          },
          "NoteChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "The type of the `NoteChangeResultError` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface NoteChangeResultError {\n  /**\n   * The type of the `NoteChangeResultError` API.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "",
      "codeblock": {
        "title": "",
        "tabs": [
          {
            "code": "import {\n  render,\n  Checkbox,\n  useApplyAttributeChange,\n} from '@shopify/checkout-ui-extensions-react';\n\n// 1. Choose an extension point\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const applyAttributeChange =\n    useApplyAttributeChange();\n\n  // 2. Render a UI\n  return (\n    <Checkbox onChange={onCheckboxChange}>\n      I would like to receive a free gift with my\n      order\n    </Checkbox>\n  );\n\n  // 3. Call API methods to modify the checkout\n  async function onCheckboxChange(isChecked) {\n    const result = await applyAttributeChange({\n      key: 'requestedFreeGift',\n      type: 'updateAttribute',\n      value: isChecked ? 'yes' : 'no',\n    });\n    console.log(\n      'applyAttributeChange result',\n      result,\n    );\n  }\n}\n",
            "language": "jsx",
            "title": "React"
          },
          {
            "code": "import {\n  extend,\n  Checkbox,\n} from '@shopify/checkout-ui-extensions';\n\n// 1. Choose an extension point\nextend(\n  'Checkout::Dynamic::Render',\n  (root, api) => {\n    // 2. Render a UI\n    root.appendChild(\n      root.createComponent(\n        Checkbox,\n        {\n          onChange: onCheckboxChange,\n        },\n        'I would like to receive a free gift with my order',\n      ),\n    );\n\n    // 3. Call API methods to modify the checkout\n    async function onCheckboxChange(isChecked) {\n      const result =\n        await api.applyAttributeChange({\n          key: 'requestedFreeGift',\n          type: 'updateAttribute',\n          value: isChecked ? 'yes' : 'no',\n        });\n      console.log(\n        'applyAttributeChange result',\n        result,\n      );\n    }\n  },\n);\n",
            "language": "js",
            "title": "JavaScript"
          }
        ]
      }
    },
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "ExtensionPoints",
    "overviewPreviewDescription": "The extension points and the APIs they provide.",
    "description": "\nA UI extension will register for one or more [extension points](/docs/api/checkout-ui-extensions/extension-points-overview) using `shopify.extend()`.\n\nAn extension point in a UI extension is a plain JavaScript function. This function receives some API for interacting with the application, and is expected to return a value in a specific shape.\n\nThe input arguments and the output type are different for each extension point.\n  ",
    "isVisualComponent": false,
    "category": "APIs",
    "definitions": [
      {
        "title": "Types of extension points",
        "description": "See a [visual representation](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) of each extension point.",
        "type": "ExtensionPoints",
        "typeDefinitions": {
          "ExtensionPoints": {
            "filePath": "/extension-points.ts",
            "name": "ExtensionPoints",
            "description": "A UI extension will register for one or more extension points using `shopify.extend()`.\nAn extension point in a UI extension is a plain JavaScript function.\nThis function receives some API for interacting with the application,\nand is expected to return a value in a specific shape.\nThe input arguments and the output type are different\nfor each extension point.",
            "members": [
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::Actions::RenderBefore",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Actions::RenderBefore'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered immediately before any actions within each step."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::CartLines::RenderAfter",
                "value": "RenderExtension<\n    CheckoutApi &\n      StandardApi<'Checkout::CartLines::RenderAfter'> &\n      OrderStatusApi,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after all line items."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::CartLineDetails::RenderAfter",
                "value": "RenderExtension<\n    CheckoutApi &\n      CartLineDetailsApi &\n      StandardApi<'Checkout::CartLineDetails::RenderAfter'> &\n      OrderStatusApi,\n    AllComponents\n  >",
                "description": "A static extension point that renders on every line item, inside the details\nunder the line item properties element."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::Contact::RenderAfter",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Contact::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered immediately after the contact form element."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::CustomerInformation::RenderAfter",
                "value": "RenderExtension<\n    OrderStatusApi &\n      CheckoutApi &\n      StandardApi<'Checkout::CustomerInformation::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after a purchase below the customer information."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::DeliveryAddress::RenderBefore",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::DeliveryAddress::RenderBefore'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered between the shipping address header\nand shipping address form elements."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::Dynamic::Render",
                "value": "RenderExtension<\n    CheckoutApi & OrderStatusApi & StandardApi<'Checkout::Dynamic::Render'>,\n    AllComponents\n  >",
                "description": "A [dynamic extension point](/docs/api/checkout-ui-extensions/extension-points-overview#dynamic-extension-points) that isn't tied to a specific checkout section or feature.\nUnlike static extension points, dynamic extension points render where the merchant\nsets them using the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n\nThe [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for dynamic extension points can be previewed during development\nby [using a URL parameter](/docs/apps/checkout/best-practices/testing-ui-extensions#dynamic-extension-points)."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ThankYou::Dynamic::Render",
                "value": "RenderExtension<\n    StandardApi<'Checkout::ThankYou::Dynamic::Render'>,\n    AllComponents\n  >",
                "description": "A [dynamic extension point](/docs/api/checkout-ui-extensions/extension-points-overview#dynamic-extension-points) that renders exclusively on the Thank You Page.\nUnlike static extension points, dynamic extension points render where the merchant\nsets them using the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n\nThe [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for dynamic extension points can be previewed during development\nby [using a URL parameter](/docs/apps/checkout/best-practices/testing-ui-extensions#dynamic-extension-points)."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ThankYou::CartLineDetails::RenderAfter",
                "value": "RenderExtension<\n    CartLineDetailsApi &\n      StandardApi<'Checkout::ThankYou::CartLineDetails::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that renders on every line item, inside the details\nunder the line item properties element on the Thank You Page."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ThankYou::CartLines::RenderAfter",
                "value": "RenderExtension<\n    StandardApi<'Checkout::ThankYou::CartLines::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after all line items on the Thank You page."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ThankYou::CustomerInformation::RenderAfter",
                "value": "RenderExtension<\n    StandardApi<'Checkout::ThankYou::CustomerInformation::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after a purchase below the customer information on the Thank You page."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::OrderStatus::Dynamic::Render",
                "value": "RenderExtension<\n    OrderStatusApi & StandardApi<'Checkout::OrderStatus::Dynamic::Render'>,\n    AllComponents\n  >",
                "description": "A [dynamic extension point](/docs/api/checkout-ui-extensions/extension-points-overview#dynamic-extension-points) that renders exclusively on the Order Status Page.\nUnlike static extension points, dynamic extension points render where the merchant\nsets them using the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n\nThe [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for dynamic extension points can be previewed during development\nby [using a URL parameter](/docs/apps/checkout/best-practices/testing-ui-extensions#dynamic-extension-points)."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::OrderStatus::CartLineDetails::RenderAfter",
                "value": "RenderExtension<\n    CartLineDetailsApi &\n      OrderStatusApi &\n      StandardApi<'Checkout::OrderStatus::CartLineDetails::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that renders on every line item, inside the details\nunder the line item properties element on the Order Status Page."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::OrderStatus::CartLines::RenderAfter",
                "value": "RenderExtension<\n    OrderStatusApi &\n      StandardApi<'Checkout::OrderStatus::CartLines::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after all line items on the Order Status page."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::OrderStatus::CustomerInformation::RenderAfter",
                "value": "RenderExtension<\n    OrderStatusApi &\n      StandardApi<'Checkout::OrderStatus::CustomerInformation::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after a purchase below the customer information on the Order Status page."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::GiftCard::Render",
                "value": "RenderExtension<\n    RedeemableRenderApi &\n      CheckoutApi &\n      StandardApi<'Checkout::GiftCard::Render'>,\n    AllComponents\n  >",
                "description": "A static extension point that renders the gift card entry form fields after\nthe buyer ticks a box to use a gift card. This does not replace the\nnative gift card entry form which is rendered in a separate part of checkout.",
                "isPrivate": true
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::PaymentMethod::Render",
                "value": "RenderExtension<\n    PaymentMethodRenderApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PaymentMethod::Render'>,\n    AllComponents\n  >",
                "description": "A static extension point that renders the form fields for a payment method when selected by the buyer.",
                "isPrivate": true
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::PaymentMethod::RenderRequiredAction",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::PaymentMethod::RenderRequiredAction'>,\n    AllComponents\n  >",
                "description": "A static extension point that renders a form modal when a buyer selects the custom onsite payment method.",
                "isPrivate": true
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::Reductions::RenderBefore",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Reductions::RenderBefore'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered in the order summary, before the discount form element."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::Reductions::RenderAfter",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Reductions::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered in the order summary, after the discount form\nand discount tag elements."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ShippingMethods::RenderBefore",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::ShippingMethods::RenderBefore'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered between the shipping method\nheader and shipping method options."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ShippingMethods::RenderAfter",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::ShippingMethods::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after the shipping method\noptions."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::PickupLocations::RenderBefore",
                "value": "RenderExtension<\n    PickupLocationsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupLocations::RenderBefore'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered before pickup location options."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::PickupLocations::RenderAfter",
                "value": "RenderExtension<\n    PickupLocationsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupLocations::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after pickup location options."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ShippingMethodDetails::RenderAfter",
                "value": "RenderExtension<\n    ShippingMethodDetailsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::ShippingMethodDetails::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after the shipping method\ndetails within the shipping method option list, for each option."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ShippingMethodDetails::RenderExpanded",
                "value": "RenderExtension<\n    ShippingMethodDetailsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::ShippingMethodDetails::RenderExpanded'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered under the shipping method\nwithin the shipping method option list, for each option."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::PickupPoints::RenderBefore",
                "value": "RenderExtension<\n    PickupPointsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupPoints::RenderBefore'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered immediately before the pickup points."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::PickupPoints::RenderAfter",
                "value": "RenderExtension<\n    PickupPointsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupPoints::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered immediately after the pickup points."
              }
            ],
            "value": "export interface ExtensionPoints {\n  /**\n   * A static extension point that is rendered immediately before any actions within each step.\n   */\n  'Checkout::Actions::RenderBefore': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Actions::RenderBefore'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after all line items.\n   */\n  'Checkout::CartLines::RenderAfter': RenderExtension<\n    CheckoutApi &\n      StandardApi<'Checkout::CartLines::RenderAfter'> &\n      OrderStatusApi,\n    AllComponents\n  >;\n  /**\n   * A static extension point that renders on every line item, inside the details\n   * under the line item properties element.\n   */\n  'Checkout::CartLineDetails::RenderAfter': RenderExtension<\n    CheckoutApi &\n      CartLineDetailsApi &\n      StandardApi<'Checkout::CartLineDetails::RenderAfter'> &\n      OrderStatusApi,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered immediately after the contact form element.\n   */\n  'Checkout::Contact::RenderAfter': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Contact::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after a purchase below the customer information.\n   */\n  'Checkout::CustomerInformation::RenderAfter': RenderExtension<\n    OrderStatusApi &\n      CheckoutApi &\n      StandardApi<'Checkout::CustomerInformation::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered between the shipping address header\n   * and shipping address form elements.\n   */\n  'Checkout::DeliveryAddress::RenderBefore': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::DeliveryAddress::RenderBefore'>,\n    AllComponents\n  >;\n  /**\n   * A [dynamic extension point](/docs/api/checkout-ui-extensions/extension-points-overview#dynamic-extension-points) that isn't tied to a specific checkout section or feature.\n   * Unlike static extension points, dynamic extension points render where the merchant\n   * sets them using the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n   *\n   * The [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for dynamic extension points can be previewed during development\n   * by [using a URL parameter](/docs/apps/checkout/best-practices/testing-ui-extensions#dynamic-extension-points).\n   */\n  'Checkout::Dynamic::Render': RenderExtension<\n    CheckoutApi & OrderStatusApi & StandardApi<'Checkout::Dynamic::Render'>,\n    AllComponents\n  >;\n  /**\n   * A [dynamic extension point](/docs/api/checkout-ui-extensions/extension-points-overview#dynamic-extension-points) that renders exclusively on the Thank You Page.\n   * Unlike static extension points, dynamic extension points render where the merchant\n   * sets them using the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n   *\n   * The [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for dynamic extension points can be previewed during development\n   * by [using a URL parameter](/docs/apps/checkout/best-practices/testing-ui-extensions#dynamic-extension-points).\n   *\n   */\n  'Checkout::ThankYou::Dynamic::Render': RenderExtension<\n    StandardApi<'Checkout::ThankYou::Dynamic::Render'>,\n    AllComponents\n  >;\n\n  /**\n   * A static extension point that renders on every line item, inside the details\n   * under the line item properties element on the Thank You Page.\n   *\n   */\n  'Checkout::ThankYou::CartLineDetails::RenderAfter': RenderExtension<\n    CartLineDetailsApi &\n      StandardApi<'Checkout::ThankYou::CartLineDetails::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after all line items on the Thank You page.\n   *\n   */\n  'Checkout::ThankYou::CartLines::RenderAfter': RenderExtension<\n    StandardApi<'Checkout::ThankYou::CartLines::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after a purchase below the customer information on the Thank You page.\n   *\n   */\n  'Checkout::ThankYou::CustomerInformation::RenderAfter': RenderExtension<\n    StandardApi<'Checkout::ThankYou::CustomerInformation::RenderAfter'>,\n    AllComponents\n  >;\n\n  /**\n   * A [dynamic extension point](/docs/api/checkout-ui-extensions/extension-points-overview#dynamic-extension-points) that renders exclusively on the Order Status Page.\n   * Unlike static extension points, dynamic extension points render where the merchant\n   * sets them using the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n   *\n   * The [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for dynamic extension points can be previewed during development\n   * by [using a URL parameter](/docs/apps/checkout/best-practices/testing-ui-extensions#dynamic-extension-points).\n   *\n   */\n  'Checkout::OrderStatus::Dynamic::Render': RenderExtension<\n    OrderStatusApi & StandardApi<'Checkout::OrderStatus::Dynamic::Render'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that renders on every line item, inside the details\n   * under the line item properties element on the Order Status Page.\n   *\n   */\n  'Checkout::OrderStatus::CartLineDetails::RenderAfter': RenderExtension<\n    CartLineDetailsApi &\n      OrderStatusApi &\n      StandardApi<'Checkout::OrderStatus::CartLineDetails::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after all line items on the Order Status page.\n   *\n   */\n  'Checkout::OrderStatus::CartLines::RenderAfter': RenderExtension<\n    OrderStatusApi &\n      StandardApi<'Checkout::OrderStatus::CartLines::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after a purchase below the customer information on the Order Status page.\n   *\n   */\n  'Checkout::OrderStatus::CustomerInformation::RenderAfter': RenderExtension<\n    OrderStatusApi &\n      StandardApi<'Checkout::OrderStatus::CustomerInformation::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that renders the gift card entry form fields after\n   * the buyer ticks a box to use a gift card. This does not replace the\n   * native gift card entry form which is rendered in a separate part of checkout.\n   *\n   * @private\n   */\n  'Checkout::GiftCard::Render': RenderExtension<\n    RedeemableRenderApi &\n      CheckoutApi &\n      StandardApi<'Checkout::GiftCard::Render'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that renders the form fields for a payment method when selected by the buyer.\n   *\n   * @private\n   */\n  'Checkout::PaymentMethod::Render': RenderExtension<\n    PaymentMethodRenderApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PaymentMethod::Render'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that renders a form modal when a buyer selects the custom onsite payment method.\n   *\n   * @private\n   */\n  'Checkout::PaymentMethod::RenderRequiredAction': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::PaymentMethod::RenderRequiredAction'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered in the order summary, before the discount form element.\n   */\n  'Checkout::Reductions::RenderBefore': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Reductions::RenderBefore'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered in the order summary, after the discount form\n   * and discount tag elements.\n   */\n  'Checkout::Reductions::RenderAfter': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Reductions::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered between the shipping method\n   * header and shipping method options.\n   */\n  'Checkout::ShippingMethods::RenderBefore': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::ShippingMethods::RenderBefore'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after the shipping method\n   * options.\n   */\n  'Checkout::ShippingMethods::RenderAfter': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::ShippingMethods::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered before pickup location options.\n   */\n  'Checkout::PickupLocations::RenderBefore': RenderExtension<\n    PickupLocationsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupLocations::RenderBefore'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after pickup location options.\n   */\n  'Checkout::PickupLocations::RenderAfter': RenderExtension<\n    PickupLocationsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupLocations::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after the shipping method\n   * details within the shipping method option list, for each option.\n   */\n  'Checkout::ShippingMethodDetails::RenderAfter': RenderExtension<\n    ShippingMethodDetailsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::ShippingMethodDetails::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered under the shipping method\n   * within the shipping method option list, for each option.\n   */\n  'Checkout::ShippingMethodDetails::RenderExpanded': RenderExtension<\n    ShippingMethodDetailsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::ShippingMethodDetails::RenderExpanded'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered immediately before the pickup points.\n   */\n  'Checkout::PickupPoints::RenderBefore': RenderExtension<\n    PickupPointsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupPoints::RenderBefore'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered immediately after the pickup points.\n   */\n  'Checkout::PickupPoints::RenderAfter': RenderExtension<\n    PickupPointsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupPoints::RenderAfter'>,\n    AllComponents\n  >;\n}"
          },
          "CheckoutApi": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CheckoutApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyAttributeChange",
                "value": "(change: AttributeUpdateChange) => Promise<AttributeChangeResult>",
                "description": "Performs an update on an attribute attached to the cart and checkout. If\nsuccessful, this mutation results in an update to the value retrieved\nthrough the [`attributes`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-applyattributechange) property."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyCartLinesChange",
                "value": "(change: CartLineChange) => Promise<CartLineChangeResult>",
                "description": "Performs an update on the merchandise line items. It resolves when the new\nline items have been negotiated and results in an update to the value\nretrieved through the\n[`lines`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-lines)\nproperty."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyDiscountCodeChange",
                "value": "(change: DiscountCodeChange) => Promise<DiscountCodeChangeResult>",
                "description": "Performs an update on the discount codes.\nIt resolves when the new discount codes have been negotiated and results in an update\nto the value retrieved through the [`discountCodes`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-discountcodes) property.\n\n> Caution:\n> See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves discount codes through a network call."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyGiftCardChange",
                "value": "(change: GiftCardChange) => Promise<GiftCardChangeResult>",
                "description": "Performs an update on the gift cards.\nIt resolves when gift card change have been negotiated and results in an update\nto the value retrieved through the [`appliedGiftCards`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-appliedgiftcards) property.\n\n> Caution:\n> See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves gift card codes through a network call."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyMetafieldChange",
                "value": "(change: MetafieldChange) => Promise<MetafieldChangeResult>",
                "description": "Performs an update on a piece of metadata attached to the checkout. If\nsuccessful, this mutation results in an update to the value retrieved\nthrough the [`metafields`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-metafields) property."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyNoteChange",
                "value": "(change: NoteChange) => Promise<NoteChangeResult>",
                "description": "Performs an update on the note attached to the cart and checkout. If\nsuccessful, this mutation results in an update to the value retrieved\nthrough the [`note`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-note) property."
              }
            ],
            "value": "export interface CheckoutApi {\n  /**\n   * Performs an update on an attribute attached to the cart and checkout. If\n   * successful, this mutation results in an update to the value retrieved\n   * through the [`attributes`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-applyattributechange) property.\n   */\n  applyAttributeChange(change: AttributeChange): Promise<AttributeChangeResult>;\n\n  /**\n   * Performs an update on the merchandise line items. It resolves when the new\n   * line items have been negotiated and results in an update to the value\n   * retrieved through the\n   * [`lines`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-lines)\n   * property.\n   */\n  applyCartLinesChange(change: CartLineChange): Promise<CartLineChangeResult>;\n\n  /**\n   * Performs an update on the discount codes.\n   * It resolves when the new discount codes have been negotiated and results in an update\n   * to the value retrieved through the [`discountCodes`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-discountcodes) property.\n   *\n   * > Caution:\n   * > See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves discount codes through a network call.\n   */\n  applyDiscountCodeChange(\n    change: DiscountCodeChange,\n  ): Promise<DiscountCodeChangeResult>;\n\n  /**\n   * Performs an update on the gift cards.\n   * It resolves when gift card change have been negotiated and results in an update\n   * to the value retrieved through the [`appliedGiftCards`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-appliedgiftcards) property.\n   *\n   * > Caution:\n   * > See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves gift card codes through a network call.\n   */\n  applyGiftCardChange(change: GiftCardChange): Promise<GiftCardChangeResult>;\n\n  /**\n   * Performs an update on a piece of metadata attached to the checkout. If\n   * successful, this mutation results in an update to the value retrieved\n   * through the [`metafields`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-metafields) property.\n   */\n  applyMetafieldChange(change: MetafieldChange): Promise<MetafieldChangeResult>;\n\n  /**\n   * Performs an update on the note attached to the cart and checkout. If\n   * successful, this mutation results in an update to the value retrieved\n   * through the [`note`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-note) property.\n   */\n  applyNoteChange(change: NoteChange): Promise<NoteChangeResult>;\n}"
          },
          "AttributeUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "AttributeUpdateChange",
            "description": "Updates an attribute on the order. If an attribute with the\nprovided key does not already exist, it gets created.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateAttribute\"",
                "description": "The type of the `AttributeUpdateChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "Key of the attribute to add or update"
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "Value for the attribute to add or update"
              }
            ],
            "value": "export interface AttributeUpdateChange {\n  /**\n   * The type of the `AttributeUpdateChange` API.\n   */\n  type: 'updateAttribute';\n\n  /**\n   * Key of the attribute to add or update\n   */\n  key: string;\n\n  /**\n   * Value for the attribute to add or update\n   */\n  value: string;\n}"
          },
          "Attribute": {
            "filePath": "/api/shared.ts",
            "name": "Attribute",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The key for the attribute."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value for the attribute."
              }
            ],
            "value": "export interface Attribute {\n  /**\n   * The key for the attribute.\n   */\n  key: string;\n\n  /**\n   * The value for the attribute.\n   */\n  value: string;\n}"
          },
          "AttributeChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AttributeChangeResult",
            "value": "AttributeChangeResultSuccess | AttributeChangeResultError",
            "description": ""
          },
          "AttributeChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "AttributeChangeResultSuccess",
            "description": "The returned result of a successful update to an attribute.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "The type of the `AttributeChangeResultSuccess` API."
              }
            ],
            "value": "export interface AttributeChangeResultSuccess {\n  /**\n   * The type of the `AttributeChangeResultSuccess` API.\n   */\n  type: 'success';\n}"
          },
          "AttributeChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "AttributeChangeResultError",
            "description": "The returned result of an unsuccessful update to an attribute\nwith a message detailing the type of error that occurred.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "The type of the `AttributeChangeResultError` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface AttributeChangeResultError {\n  /**\n   * The type of the `AttributeChangeResultError` API.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "CartLineChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartLineChange",
            "value": "CartLineAddChange | CartLineRemoveChange | CartLineUpdateChange",
            "description": ""
          },
          "CartLineAddChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineAddChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"addCartLine\"",
                "description": "An identifier for changes that add line items."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandiseId",
                "value": "string",
                "description": "The merchandise ID being added."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being added."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The attributes associated with the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlanId",
                "value": "string",
                "description": "The identifier of the selling plan that the merchandise is being purchased\nwith.",
                "isOptional": true
              }
            ],
            "value": "export interface CartLineAddChange {\n  /**\n   * An identifier for changes that add line items.\n   */\n  type: 'addCartLine';\n\n  /**\n   * The merchandise ID being added.\n   * @example 'gid://shopify/ProductVariant/123'\n   */\n  merchandiseId: string;\n\n  /**\n   * The quantity of the merchandise being added.\n   */\n  quantity: number;\n\n  /**\n   * The attributes associated with the line item.\n   */\n  attributes?: Attribute[];\n\n  /**\n   * The identifier of the selling plan that the merchandise is being purchased\n   * with.\n   */\n  sellingPlanId?: SellingPlan['id'];\n}"
          },
          "CartLine": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLine",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "These line item IDs are not stable at the moment, they might change after\nany operations on the line items. You should always look up for an updated\nID before any call to `applyCartLinesChange` because you'll need the ID to\ncreate a `CartLineChange` object."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The details about the cost components attributed to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The line item additional custom attributes."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountAllocations",
                "value": "CartDiscountAllocation[]",
                "description": "Discounts applied to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lineComponents",
                "value": "CartBundleLineComponent[]",
                "description": "Sub lines of the merchandise line. If no sub lines are present, this will be an empty array."
              }
            ],
            "value": "export interface CartLine {\n  /**\n   * These line item IDs are not stable at the moment, they might change after\n   * any operations on the line items. You should always look up for an updated\n   * ID before any call to `applyCartLinesChange` because you'll need the ID to\n   * create a `CartLineChange` object.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise being purchased.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of the merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The details about the cost components attributed to the cart line.\n   */\n  cost: CartLineCost;\n\n  /**\n   * The line item additional custom attributes.\n   */\n  attributes: Attribute[];\n\n  /**\n   * Discounts applied to the cart line.\n   */\n  discountAllocations: CartDiscountAllocation[];\n\n  /**\n   * Sub lines of the merchandise line. If no sub lines are present, this will be an empty array.\n   */\n  lineComponents: CartLineComponentType[];\n}"
          },
          "Merchandise": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Merchandise",
            "value": "ProductVariant",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"variant\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The product variant’s title."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "string",
                "description": "The product variant's subtitle.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "Image associated with the product variant. This field falls back to the product\nimage if no image is available.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "selectedOptions",
                "value": "SelectedOption[]",
                "description": "List of product options applied to the variant."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "product",
                "value": "Product",
                "description": "The product object that the product variant belongs to."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "requiresShipping",
                "value": "boolean",
                "description": "Whether or not the product requires shipping."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlan",
                "value": "SellingPlan",
                "description": "The selling plan associated with the merchandise.",
                "isOptional": true
              }
            ]
          },
          "ImageDetails": {
            "filePath": "/api/standard/standard.ts",
            "name": "ImageDetails",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "url",
                "value": "string",
                "description": "The image URL."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "altText",
                "value": "string",
                "description": "The alternative text for the image.",
                "isOptional": true
              }
            ],
            "value": "export interface ImageDetails {\n  /**\n   * The image URL.\n   */\n  url: string;\n\n  /**\n   * The alternative text for the image.\n   */\n  altText?: string;\n}"
          },
          "SelectedOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "SelectedOption",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the merchandise option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value of the merchandise option."
              }
            ],
            "value": "export interface SelectedOption {\n  /**\n   * The name of the merchandise option.\n   */\n  name: string;\n\n  /**\n   * The value of the merchandise option.\n   */\n  value: string;\n}"
          },
          "Product": {
            "filePath": "/api/standard/standard.ts",
            "name": "Product",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "vendor",
                "value": "string",
                "description": "The product’s vendor name."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "productType",
                "value": "string",
                "description": "A categorization that a product can be tagged with, commonly used for filtering and searching."
              }
            ],
            "value": "export interface Product {\n  /**\n   * A globally-unique identifier.\n   */\n  id: string;\n\n  /**\n   * The product’s vendor name.\n   */\n  vendor: string;\n\n  /**\n   * A categorization that a product can be tagged with, commonly used for filtering and searching.\n   */\n  productType: string;\n}"
          },
          "SellingPlan": {
            "filePath": "/api/shared.ts",
            "name": "SellingPlan",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              }
            ],
            "value": "export interface SellingPlan {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/SellingPlan/1'\n   */\n  id: string;\n}"
          },
          "CartLineCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLineCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "Money",
                "description": "The total amount after reductions the buyer can expect to pay that is directly attributable to a single\ncart line."
              }
            ],
            "value": "export interface CartLineCost {\n  /**\n   * The total amount after reductions the buyer can expect to pay that is directly attributable to a single\n   * cart line.\n   */\n  totalAmount: Money;\n}"
          },
          "Money": {
            "filePath": "/api/standard/standard.ts",
            "name": "Money",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": "The price amount."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currencyCode",
                "value": "CurrencyCode",
                "description": "The ISO 4217 format for the currency."
              }
            ],
            "value": "export interface Money {\n  /**\n   * The price amount.\n   */\n  amount: number;\n  /**\n   * The ISO 4217 format for the currency.\n   * @example 'CAD' for Canadian dollar\n   */\n  currencyCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          },
          "CartDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartDiscountAllocation",
            "value": "CartCodeDiscountAllocation | CartAutomaticDiscountAllocation | CartCustomDiscountAllocation",
            "description": ""
          },
          "CartCodeDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCodeDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"code\"",
                "description": "The type of the code discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCodeDiscountAllocation extends CartDiscountAllocationBase {\n  /**\n   * The code for the discount\n   */\n  code: string;\n\n  /**\n   * The type of the code discount\n   */\n  type: 'code';\n}"
          },
          "CartAutomaticDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartAutomaticDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"automatic\"",
                "description": "The type of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartAutomaticDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the automatic discount\n   */\n  title: string;\n\n  /**\n   * The type of the automatic discount\n   */\n  type: 'automatic';\n}"
          },
          "CartCustomDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCustomDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"custom\"",
                "description": "The type of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCustomDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the custom discount\n   */\n  title: string;\n\n  /**\n   * The type of the custom discount\n   */\n  type: 'custom';\n}"
          },
          "CartBundleLineComponent": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartBundleLineComponent",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"bundle\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the bundle line component.\n\nThis ID is not stable. If an operation updates the line items in any way, all IDs could change."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise of this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The cost attributed to this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "Additional custom attributes for the bundle line component."
              }
            ],
            "value": "export interface CartBundleLineComponent {\n  type: 'bundle';\n\n  /**\n   * A unique identifier for the bundle line component.\n   *\n   * This ID is not stable. If an operation updates the line items in any way, all IDs could change.\n   *\n   * @example 'gid://shopify/CartLineComponent/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise of this bundle line component.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The cost attributed to this bundle line component.\n   */\n  cost: CartLineCost;\n\n  /**\n   * Additional custom attributes for the bundle line component.\n   *\n   * @example [{key: 'engraving', value: 'hello world'}]\n   */\n  attributes: Attribute[];\n}"
          },
          "CartLineRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineRemoveChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeCartLine\"",
                "description": "An identifier for changes that remove line items."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Line Item ID."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity being removed for this line item."
              }
            ],
            "value": "export interface CartLineRemoveChange {\n  /**\n   * An identifier for changes that remove line items.\n   */\n  type: 'removeCartLine';\n\n  /**\n   * Line Item ID.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The quantity being removed for this line item.\n   */\n  quantity: number;\n}"
          },
          "CartLineUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineUpdateChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateCartLine\"",
                "description": "An identifier for changes that update line items."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Line Item ID."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandiseId",
                "value": "string",
                "description": "The new merchandise ID for the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The new quantity for the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The new attributes for the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlanId",
                "value": "string",
                "description": "The identifier of the selling plan that the merchandise is being purchased\nwith or `null` to remove the the product from the selling plan.",
                "isOptional": true
              }
            ],
            "value": "export interface CartLineUpdateChange {\n  /**\n   * An identifier for changes that update line items.\n   */\n  type: 'updateCartLine';\n\n  /**\n   * Line Item ID.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The new merchandise ID for the line item.\n   * @example 'gid://shopify/ProductVariant/123'\n   */\n\n  merchandiseId?: string;\n  /**\n   * The new quantity for the line item.\n   */\n  quantity?: number;\n\n  /**\n   * The new attributes for the line item.\n   */\n  attributes?: Attribute[];\n\n  /**\n   * The identifier of the selling plan that the merchandise is being purchased\n   * with or `null` to remove the the product from the selling plan.\n   */\n  sellingPlanId?: SellingPlan['id'] | null;\n}"
          },
          "CartLineChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartLineChangeResult",
            "value": "CartLineChangeResultSuccess | CartLineChangeResultError",
            "description": ""
          },
          "CartLineChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the line item was changed successfully."
              }
            ],
            "value": "export interface CartLineChangeResultSuccess {\n  /**\n   * Indicates that the line item was changed successfully.\n   */\n  type: 'success';\n}"
          },
          "CartLineChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the line item was not changed successfully. Refer to the `message` property for details about the error."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface CartLineChangeResultError {\n  /**\n   * Indicates that the line item was not changed successfully. Refer to the `message` property for details about the error.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "DiscountCodeChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DiscountCodeChange",
            "value": "DiscountCodeAddChange | DiscountCodeRemoveChange",
            "description": ""
          },
          "DiscountCodeAddChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeAddChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"addDiscountCode\"",
                "description": "The type of the `DiscountCodeChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              }
            ],
            "value": "export interface DiscountCodeAddChange {\n  /**\n   * The type of the `DiscountCodeChange` API.\n   */\n  type: 'addDiscountCode';\n\n  /**\n   * The code for the discount\n   */\n  code: string;\n}"
          },
          "DiscountCodeRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeRemoveChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeDiscountCode\"",
                "description": "The type of the `DiscountCodeChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              }
            ],
            "value": "export interface DiscountCodeRemoveChange {\n  /**\n   * The type of the `DiscountCodeChange` API.\n   */\n  type: 'removeDiscountCode';\n\n  /**\n   * The code for the discount\n   */\n  code: string;\n}"
          },
          "DiscountCodeChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DiscountCodeChangeResult",
            "value": "DiscountCodeChangeResultSuccess | DiscountCodeChangeResultError",
            "description": ""
          },
          "DiscountCodeChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the discount code change was applied successfully."
              }
            ],
            "value": "export interface DiscountCodeChangeResultSuccess {\n  /**\n   * Indicates that the discount code change was applied successfully.\n   */\n  type: 'success';\n}"
          },
          "DiscountCodeChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the discount code change failed."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface DiscountCodeChangeResultError {\n  /**\n   * Indicates that the discount code change failed.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "GiftCardChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "GiftCardChange",
            "value": "GiftCardAddChange | GiftCardRemoveChange",
            "description": ""
          },
          "GiftCardAddChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardAddChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"addGiftCard\"",
                "description": "The type of the `GiftCardChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "Gift card code."
              }
            ],
            "value": "export interface GiftCardAddChange {\n  /**\n   * The type of the `GiftCardChange` API.\n   */\n  type: 'addGiftCard';\n\n  /**\n   * Gift card code.\n   */\n  code: string;\n}"
          },
          "GiftCardRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardRemoveChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeGiftCard\"",
                "description": "The type of the `GiftCardChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "Gift card code."
              }
            ],
            "value": "export interface GiftCardRemoveChange {\n  /**\n   * The type of the `GiftCardChange` API.\n   */\n  type: 'removeGiftCard';\n\n  /**\n   * Gift card code.\n   */\n  code: string;\n}"
          },
          "GiftCardChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "GiftCardChangeResult",
            "value": "GiftCardChangeResultSuccess | GiftCardChangeResultError",
            "description": ""
          },
          "GiftCardChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the gift card change was applied successfully."
              }
            ],
            "value": "export interface GiftCardChangeResultSuccess {\n  /**\n   * Indicates that the gift card change was applied successfully.\n   */\n  type: 'success';\n}"
          },
          "GiftCardChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the gift card change failed."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface GiftCardChangeResultError {\n  /**\n   * Indicates that the gift card change failed.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "MetafieldChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MetafieldChange",
            "value": "MetafieldRemoveChange | MetafieldUpdateChange",
            "description": ""
          },
          "MetafieldRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldRemoveChange",
            "description": "Removes a metafield.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeMetafield\"",
                "description": "The type of the `MetafieldRemoveChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield to remove."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "The namespace of the metafield to remove."
              }
            ],
            "value": "export interface MetafieldRemoveChange {\n  /**\n   * The type of the `MetafieldRemoveChange` API.\n   */\n  type: 'removeMetafield';\n\n  /**\n   * The name of the metafield to remove.\n   */\n  key: string;\n\n  /**\n   * The namespace of the metafield to remove.\n   */\n  namespace: string;\n}"
          },
          "Metafield": {
            "filePath": "/api/standard/standard.ts",
            "name": "Metafield",
            "description": "Metadata associated with the checkout.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield. It must be between 3 and 30 characters in\nlength (inclusive)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "A container for a set of metafields. You need to define a custom\nnamespace for your metafields to distinguish them from the metafields\nused by other apps. This must be between 2 and 20 characters in length (inclusive)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number",
                "description": "The information to be stored as metadata."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"integer\" | \"json_string\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface Metafield {\n  /**\n   * The name of the metafield. It must be between 3 and 30 characters in\n   * length (inclusive).\n   */\n  key: string;\n\n  /**\n   * A container for a set of metafields. You need to define a custom\n   * namespace for your metafields to distinguish them from the metafields\n   * used by other apps. This must be between 2 and 20 characters in length (inclusive).\n   */\n  namespace: string;\n\n  /**\n   * The information to be stored as metadata.\n   */\n  value: string | number;\n\n  /** The metafield’s information type. */\n  valueType: 'integer' | 'string' | 'json_string';\n}"
          },
          "MetafieldUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldUpdateChange",
            "description": "Updates a metafield. If a metafield with the\nprovided key and namespace does not already exist, it gets created.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateMetafield\"",
                "description": "The type of the `MetafieldUpdateChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield to update."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "The namespace of the metafield to add."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number",
                "description": "The new information to store in the metafield."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"integer\" | \"json_string\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface MetafieldUpdateChange {\n  /**\n   * The type of the `MetafieldUpdateChange` API.\n   */\n  type: 'updateMetafield';\n\n  /** The name of the metafield to update. */\n  key: string;\n\n  /** The namespace of the metafield to add. */\n  namespace: string;\n\n  /** The new information to store in the metafield. */\n  value: string | number;\n\n  /**\n   * The metafield’s information type.\n   */\n  valueType: 'integer' | 'string' | 'json_string';\n}"
          },
          "MetafieldChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MetafieldChangeResult",
            "value": "MetafieldChangeResultSuccess | MetafieldChangeResultError",
            "description": ""
          },
          "MetafieldChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "The type of the `MetafieldChangeResultSuccess` API."
              }
            ],
            "value": "export interface MetafieldChangeResultSuccess {\n  /**\n   * The type of the `MetafieldChangeResultSuccess` API.\n   */\n  type: 'success';\n}"
          },
          "MetafieldChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "The type of the `MetafieldChangeResultError` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface MetafieldChangeResultError {\n  /**\n   * The type of the `MetafieldChangeResultError` API.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "NoteChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NoteChange",
            "value": "NoteRemoveChange | NoteUpdateChange",
            "description": ""
          },
          "NoteRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteRemoveChange",
            "description": "Removes a note",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeNote\"",
                "description": "The type of the `NoteRemoveChange` API."
              }
            ],
            "value": "export interface NoteRemoveChange {\n  /**\n   * The type of the `NoteRemoveChange` API.\n   */\n  type: 'removeNote';\n}"
          },
          "NoteUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteUpdateChange",
            "description": "An Update to a note on the order.\nfor example, the buyer could request detailed packaging instructions in an order note",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateNote\"",
                "description": "The type of the `NoteUpdateChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "note",
                "value": "string",
                "description": "The new value of the note."
              }
            ],
            "value": "export interface NoteUpdateChange {\n  /**\n   * The type of the `NoteUpdateChange` API.\n   */\n  type: 'updateNote';\n  /**\n   * The new value of the note.\n   */\n  note: string;\n}"
          },
          "NoteChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NoteChangeResult",
            "value": "NoteChangeResultSuccess | NoteChangeResultError",
            "description": ""
          },
          "NoteChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "The type of the `NoteChangeResultSuccess` API."
              }
            ],
            "value": "export interface NoteChangeResultSuccess {\n  /**\n   * The type of the `NoteChangeResultSuccess` API.\n   */\n  type: 'success';\n}"
          },
          "NoteChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "The type of the `NoteChangeResultError` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface NoteChangeResultError {\n  /**\n   * The type of the `NoteChangeResultError` API.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "StandardApi": {
            "filePath": "/api/standard/standard.ts",
            "name": "StandardApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "analytics",
                "value": "Analytics",
                "description": "Methods for interacting with [Web Pixels](/docs/apps/marketing), such as emitting an event."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "appliedGiftCards",
                "value": "StatefulRemoteSubscribable<AppliedGiftCard[]>",
                "description": "Gift Cards that have been applied to the checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "appMetafields",
                "value": "StatefulRemoteSubscribable<AppMetafieldEntry[]>",
                "description": "The metafields requested in the\n[`shopify.ui.extension.toml`](/docs/api/checkout-ui-extensions/configuration)\nfile. These metafields are updated when there's a change in the merchandise items\nbeing purchased by the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "StatefulRemoteSubscribable<Attribute[] | undefined>",
                "description": "Custom attributes left by the customer to the merchant, either in their cart or during checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "availablePaymentOptions",
                "value": "StatefulRemoteSubscribable<PaymentOption[]>",
                "description": "All available payment options."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "buyerIdentity",
                "value": "BuyerIdentity",
                "description": "Information about the buyer that is interacting with the checkout.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "buyerJourney",
                "value": "BuyerJourney",
                "description": "Provides details on the buyer's progression through the checkout.\n\nSee [buyer journey](/docs/api/checkout-ui-extensions/apis/standardapi#example-buyer-journey)\nexamples for more information."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartCost",
                "description": "Details on the costs the buyer will pay for this checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "deliveryGroups",
                "value": "StatefulRemoteSubscribable<DeliveryGroup[]>",
                "description": "A list of delivery groups containing information about the delivery of the items the customer intends to purchase."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountCodes",
                "value": "StatefulRemoteSubscribable<CartDiscountCode[]>",
                "description": "A list of discount codes currently applied to the checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountAllocations",
                "value": "StatefulRemoteSubscribable<CartDiscountAllocation[]>",
                "description": "Discounts that have been applied to the entire cart."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "extension",
                "value": "Extension",
                "description": "Meta information about the extension."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "extensionPoint",
                "value": "ExtensionPoint",
                "description": "The identifier of the running extension point."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "i18n",
                "value": "I18n",
                "description": "Utilities for translating content and formatting values according to the current\n[`localization`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-localization)\nof the checkout.\n\nSee [localization examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-localization)\nfor more information."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lines",
                "value": "StatefulRemoteSubscribable<CartLine[]>",
                "description": "A list of lines containing information about the items the customer intends to purchase."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "localization",
                "value": "Localization",
                "description": "Details about the location, language, and currency of the buyer. For utilities to easily\nformat and translate content based on these details, you can use the\n[`i18n`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-i18n)\nobject instead."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "metafields",
                "value": "StatefulRemoteSubscribable<Metafield[]>",
                "description": "The metafields that apply to the current checkout. The actual resource\non which these metafields exist depends on the source of the checkout:\n\n- If the source is an order, then the metafields are on the order.\n- If the source is a draft order, then the initial value of metafields are\n  from the draft order, and any new metafields you write are applied\n  to the order created by this checkout.\n- For all other sources, the metafields are only stored locally on the\n  client creating the checkout, and are applied to the order that\n  results from checkout.\n\nThese metafields are shared by all extensions running on checkout, and\npersist for as long as the customer is working on this checkout.\n\nOnce the order is created, you can query these metafields using the\n[GraphQL Admin API](/docs/admin-api/graphql/reference/orders/order#metafield-2021-01)"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "note",
                "value": "StatefulRemoteSubscribable<string | undefined>",
                "description": "A note left by the customer to the merchant, either in their cart or during checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "presentmentLines",
                "value": "StatefulRemoteSubscribable<PresentmentCartLine[]>",
                "description": "A list of the line items displayed in the checkout. These may be the same as lines, or may be a subset."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "query",
                "value": "<Data = unknown, Variables = { [key: string]: unknown; }>(query: string, options?: { variables?: Variables; version?: StorefrontApiVersion; }) => Promise<{ data?: Data; errors?: GraphQLError[]; }>",
                "description": "Used to query the Storefront GraphQL API with a prefetched token.\n\nSee [storefront api access examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-storefront-api-access) for more information."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "selectedPaymentOptions",
                "value": "StatefulRemoteSubscribable<SelectedPaymentOption[]>",
                "description": "Payment options selected by the buyer."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "sessionToken",
                "value": "SessionToken",
                "description": "Provides access to session tokens, which can be used to verify token claims on your app's server.\n\nSee [session token examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-session-token) for more information."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "settings",
                "value": "StatefulRemoteSubscribable<ExtensionSettings>",
                "description": "The settings matching the settings definition written in the\n[`shopify.ui.extension.toml`](/docs/api/checkout-ui-extensions/configuration) file.\n\n See [settings examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-settings) for more information.\n\n> Note: When an extension is being installed in the editor, the settings will be empty until\na merchant sets a value. In that case, this object will be updated in real time as a merchant fills in the settings."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "shippingAddress",
                "value": "StatefulRemoteSubscribable<MailingAddress | undefined>",
                "description": "The proposed buyer shipping address. During the information step, the address\nupdates when the field is committed (on change) rather than every keystroke.\nAn address value is only present if delivery is required. Otherwise, the\nsubscribable value is undefined.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "shop",
                "value": "Shop",
                "description": "Shop where the checkout is taking place."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "storage",
                "value": "Storage",
                "description": "Key-value storage for the extension point."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "ui",
                "value": "Ui",
                "description": "Methods to interact with the extension's UI."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "version",
                "value": "Version",
                "description": "The renderer version being used for the extension."
              }
            ],
            "value": "export interface StandardApi<\n  ExtensionPoint extends import('../../extension-points').ExtensionPoint,\n> {\n  /**\n   * Methods for interacting with [Web Pixels](/docs/apps/marketing), such as emitting an event.\n   */\n  analytics: Analytics;\n\n  /**\n   * Gift Cards that have been applied to the checkout.\n   */\n  appliedGiftCards: StatefulRemoteSubscribable<AppliedGiftCard[]>;\n\n  /**\n   * The metafields requested in the\n   * [`shopify.ui.extension.toml`](/docs/api/checkout-ui-extensions/configuration)\n   * file. These metafields are updated when there's a change in the merchandise items\n   * being purchased by the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  appMetafields: StatefulRemoteSubscribable<AppMetafieldEntry[]>;\n\n  /**\n   * Custom attributes left by the customer to the merchant, either in their cart or during checkout.\n   */\n  attributes: StatefulRemoteSubscribable<Attribute[] | undefined>;\n\n  /**\n   * All available payment options.\n   */\n  availablePaymentOptions: StatefulRemoteSubscribable<PaymentOption[]>;\n\n  /**\n   * Information about the buyer that is interacting with the checkout.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  buyerIdentity?: BuyerIdentity;\n\n  /**\n   * Provides details on the buyer's progression through the checkout.\n   *\n   * See [buyer journey](/docs/api/checkout-ui-extensions/apis/standardapi#example-buyer-journey)\n   * examples for more information.\n   */\n  buyerJourney: BuyerJourney;\n\n  /**\n   * Details on the costs the buyer will pay for this checkout.\n   */\n  cost: CartCost;\n\n  /**\n   * A list of delivery groups containing information about the delivery of the items the customer intends to purchase.\n   */\n  deliveryGroups: StatefulRemoteSubscribable<DeliveryGroup[]>;\n\n  /**\n   * A list of discount codes currently applied to the checkout.\n   */\n  discountCodes: StatefulRemoteSubscribable<CartDiscountCode[]>;\n\n  /**\n   * Discounts that have been applied to the entire cart.\n   */\n  discountAllocations: StatefulRemoteSubscribable<CartDiscountAllocation[]>;\n\n  /**\n   * Meta information about the extension.\n   */\n  extension: Extension;\n\n  /**\n   * The identifier of the running extension point.\n   * @example 'Checkout::PostPurchase::Render'\n   */\n  extensionPoint: ExtensionPoint;\n\n  /**\n   * Utilities for translating content and formatting values according to the current\n   * [`localization`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-localization)\n   * of the checkout.\n   *\n   * See [localization examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-localization)\n   * for more information.\n   */\n  i18n: I18n;\n\n  /**\n   * A list of lines containing information about the items the customer intends to purchase.\n   */\n  lines: StatefulRemoteSubscribable<CartLine[]>;\n\n  /**\n   * Details about the location, language, and currency of the buyer. For utilities to easily\n   * format and translate content based on these details, you can use the\n   * [`i18n`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-i18n)\n   * object instead.\n   */\n  localization: Localization;\n\n  /**\n   * The metafields that apply to the current checkout. The actual resource\n   * on which these metafields exist depends on the source of the checkout:\n   *\n   * - If the source is an order, then the metafields are on the order.\n   * - If the source is a draft order, then the initial value of metafields are\n   *   from the draft order, and any new metafields you write are applied\n   *   to the order created by this checkout.\n   * - For all other sources, the metafields are only stored locally on the\n   *   client creating the checkout, and are applied to the order that\n   *   results from checkout.\n   *\n   * These metafields are shared by all extensions running on checkout, and\n   * persist for as long as the customer is working on this checkout.\n   *\n   * Once the order is created, you can query these metafields using the\n   * [GraphQL Admin API](/docs/admin-api/graphql/reference/orders/order#metafield-2021-01)\n   */\n  metafields: StatefulRemoteSubscribable<Metafield[]>;\n\n  /**\n   * A note left by the customer to the merchant, either in their cart or during checkout.\n   */\n  note: StatefulRemoteSubscribable<string | undefined>;\n\n  /**\n   * A list of the line items displayed in the checkout. These may be the same as lines, or may be a subset.\n   */\n  presentmentLines: StatefulRemoteSubscribable<PresentmentCartLine[]>;\n\n  /**\n   * Used to query the Storefront GraphQL API with a prefetched token.\n   *\n   * See [storefront api access examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-storefront-api-access) for more information.\n   */\n  query: <Data = unknown, Variables = {[key: string]: unknown}>(\n    query: string,\n    options?: {variables?: Variables; version?: StorefrontApiVersion},\n  ) => Promise<{data?: Data; errors?: GraphQLError[]}>;\n\n  /**\n   * Payment options selected by the buyer.\n   */\n  selectedPaymentOptions: StatefulRemoteSubscribable<SelectedPaymentOption[]>;\n\n  /**\n   * Provides access to session tokens, which can be used to verify token claims on your app's server.\n   *\n   * See [session token examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-session-token) for more information.\n   */\n  sessionToken: SessionToken;\n\n  /**\n   * The settings matching the settings definition written in the\n   * [`shopify.ui.extension.toml`](/docs/api/checkout-ui-extensions/configuration) file.\n   *\n   *  See [settings examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-settings) for more information.\n   *\n   * > Note: When an extension is being installed in the editor, the settings will be empty until\n   * a merchant sets a value. In that case, this object will be updated in real time as a merchant fills in the settings.\n   */\n  settings: StatefulRemoteSubscribable<ExtensionSettings>;\n\n  /**\n   * The proposed buyer shipping address. During the information step, the address\n   * updates when the field is committed (on change) rather than every keystroke.\n   * An address value is only present if delivery is required. Otherwise, the\n   * subscribable value is undefined.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  shippingAddress?: StatefulRemoteSubscribable<MailingAddress | undefined>;\n\n  /** Shop where the checkout is taking place. */\n  shop: Shop;\n\n  /**\n   * Key-value storage for the extension point.\n   */\n  storage: Storage;\n\n  /**\n   * Methods to interact with the extension's UI.\n   */\n  ui: Ui;\n\n  /**\n   * The renderer version being used for the extension.\n   *\n   * @example 'unstable'\n   */\n  version: Version;\n}"
          },
          "Analytics": {
            "filePath": "/api/standard/standard.ts",
            "name": "Analytics",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "publish",
                "value": "(name: string, data: { [key: string]: unknown; }) => Promise<boolean>",
                "description": "Publish method to emit analytics events to [Web Pixels](/docs/apps/marketing)."
              }
            ],
            "value": "export interface Analytics {\n  /**\n   * Publish method to emit analytics events to [Web Pixels](/docs/apps/marketing).\n   */\n  publish(name: string, data: {[key: string]: unknown}): Promise<boolean>;\n}"
          },
          "AppliedGiftCard": {
            "filePath": "/api/standard/standard.ts",
            "name": "AppliedGiftCard",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lastCharacters",
                "value": "string",
                "description": "The last four characters of the applied gift card's code."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amountUsed",
                "value": "Money",
                "description": "The amount of the applied gift card that will be used when the checkout is completed."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "balance",
                "value": "Money",
                "description": "The current balance of the applied gift card prior to checkout completion."
              }
            ],
            "value": "export interface AppliedGiftCard {\n  /**\n   * The last four characters of the applied gift card's code.\n   */\n  lastCharacters: string;\n\n  /**\n   * The amount of the applied gift card that will be used when the checkout is completed.\n   */\n  amountUsed: Money;\n\n  /**\n   * The current balance of the applied gift card prior to checkout completion.\n   */\n  balance: Money;\n}"
          },
          "AppMetafieldEntry": {
            "filePath": "/api/standard/standard.ts",
            "name": "AppMetafieldEntry",
            "description": "A metafield associated with the shop or a resource on the checkout.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "AppMetafieldEntryTarget",
                "description": "The target that is associated to the metadata.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) when the type is `customer`."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "metafield",
                "value": "AppMetafield",
                "description": "The metadata information."
              }
            ],
            "value": "export interface AppMetafieldEntry {\n  /**\n   * The target that is associated to the metadata.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) when the type is `customer`.\n   */\n  target: AppMetafieldEntryTarget;\n\n  /** The metadata information. */\n  metafield: AppMetafield;\n}"
          },
          "AppMetafieldEntryTarget": {
            "filePath": "/api/standard/standard.ts",
            "name": "AppMetafieldEntryTarget",
            "description": "The metafield owner.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"customer\" | \"product\" | \"shop\" | \"variant\"",
                "description": "The type of the metafield owner.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) when the type is `customer`."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The numeric owner ID that is associated with the metafield."
              }
            ],
            "value": "export interface AppMetafieldEntryTarget {\n  /**\n   * The type of the metafield owner.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) when the type is `customer`.\n   */\n  type: 'customer' | 'product' | 'shop' | 'variant';\n\n  /** The numeric owner ID that is associated with the metafield. */\n  id: string;\n}"
          },
          "AppMetafield": {
            "filePath": "/api/standard/standard.ts",
            "name": "AppMetafield",
            "description": "Represents a custom metadata attached to a resource.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The key name of a metafield."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "The namespace for a metafield."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number | boolean",
                "description": "The value of a metafield."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"boolean\" | \"integer\" | \"json_string\" | \"float\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface AppMetafield {\n  /** The key name of a metafield. */\n  key: string;\n\n  /** The namespace for a metafield. */\n  namespace: string;\n\n  /** The value of a metafield. */\n  value: string | number | boolean;\n\n  /** The metafield’s information type. */\n  valueType: 'boolean' | 'float' | 'integer' | 'json_string' | 'string';\n}"
          },
          "PaymentOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "PaymentOption",
            "description": "A payment option presented to the buyer.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"creditCard\" | \"deferred\" | \"local\" | \"manualPayment\" | \"offsite\" | \"other\" | \"paymentOnDelivery\" | \"redeemable\" | \"wallet\" | \"customOnsite\"",
                "description": "The type of the payment option.\n\nShops can be configured to support many different payment options. Some options are only available to buyers in specific regions.\n\n| Type  | Description  |\n|---|---|\n| `creditCard`  |  A vaulted or manually entered credit card.  |\n| `deferred`  |  A [deferred payment](https://help.shopify.com/en/manual/orders/deferred-payments), such as invoicing the buyer and collecting payment at a later time.  |\n| `local`  |  A [local payment option](https://help.shopify.com/en/manual/payments/shopify-payments/local-payment-methods) specific to the current region or market  |\n| `manualPayment`  |  A manual payment option such as an in-person retail transaction.  |\n| `offsite`  |  A payment processed outside of Shopify's checkout, excluding integrated wallets.  |\n| `other`  |  Another type of payment not defined here.  |\n| `paymentOnDelivery`  |  A payment that will be collected on delivery.  |\n| `redeemable`  |  A redeemable payment option such as a gift card or store credit.  |\n| `wallet`  |  An integrated wallet such as PayPal, Google Pay, Apple Pay, etc.  |\n| `customOnsite` | A custom payment option that is processed through a checkout extension with a payments app. |"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique handle for the payment option.\n\nThis is not a globally unique identifier. It may be an identifier specific to the given checkout session or the current shop."
              }
            ],
            "value": "export interface PaymentOption {\n  /**\n   * The type of the payment option.\n   *\n   * Shops can be configured to support many different payment options. Some options are only available to buyers in specific regions.\n   *\n   * | Type  | Description  |\n   * |---|---|\n   * | `creditCard`  |  A vaulted or manually entered credit card.  |\n   * | `deferred`  |  A [deferred payment](https://help.shopify.com/en/manual/orders/deferred-payments), such as invoicing the buyer and collecting payment at a later time.  |\n   * | `local`  |  A [local payment option](https://help.shopify.com/en/manual/payments/shopify-payments/local-payment-methods) specific to the current region or market  |\n   * | `manualPayment`  |  A manual payment option such as an in-person retail transaction.  |\n   * | `offsite`  |  A payment processed outside of Shopify's checkout, excluding integrated wallets.  |\n   * | `other`  |  Another type of payment not defined here.  |\n   * | `paymentOnDelivery`  |  A payment that will be collected on delivery.  |\n   * | `redeemable`  |  A redeemable payment option such as a gift card or store credit.  |\n   * | `wallet`  |  An integrated wallet such as PayPal, Google Pay, Apple Pay, etc.  |\n   * | `customOnsite` | A custom payment option that is processed through a checkout extension with a payments app. |\n   */\n  type:\n    | 'creditCard'\n    | 'deferred'\n    | 'local'\n    | 'manualPayment'\n    | 'offsite'\n    | 'other'\n    | 'paymentOnDelivery'\n    | 'redeemable'\n    | 'wallet'\n    | 'customOnsite';\n\n  /**\n   * The unique handle for the payment option.\n   *\n   * This is not a globally unique identifier. It may be an identifier specific to the given checkout session or the current shop.\n   */\n  handle: string;\n}"
          },
          "BuyerIdentity": {
            "filePath": "/api/standard/standard.ts",
            "name": "BuyerIdentity",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "customer",
                "value": "StatefulRemoteSubscribable<Customer | undefined>",
                "description": "The buyer's customer account. The value is undefined if the buyer isn’t a\nknown customer for this shop or if they haven't logged in yet.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "email",
                "value": "StatefulRemoteSubscribable<string | undefined>",
                "description": "The email address of the buyer that is interacting with the cart.\nThe value is `undefined` if the app does not have access to customer data.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "phone",
                "value": "StatefulRemoteSubscribable<string | undefined>",
                "description": "The phone number of the buyer that is interacting with the cart.\nThe value is `undefined` if the app does not have access to customer data.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              }
            ],
            "value": "export interface BuyerIdentity {\n  /**\n   * The buyer's customer account. The value is undefined if the buyer isn’t a\n   * known customer for this shop or if they haven't logged in yet.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  customer: StatefulRemoteSubscribable<Customer | undefined>;\n\n  /**\n   * The email address of the buyer that is interacting with the cart.\n   * The value is `undefined` if the app does not have access to customer data.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  email: StatefulRemoteSubscribable<string | undefined>;\n\n  /**\n   * The phone number of the buyer that is interacting with the cart.\n   * The value is `undefined` if the app does not have access to customer data.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  phone: StatefulRemoteSubscribable<string | undefined>;\n}"
          },
          "Customer": {
            "filePath": "/api/standard/standard.ts",
            "name": "Customer",
            "description": "Information about a customer who has previously purchased from this shop.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Customer ID.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "email",
                "value": "string",
                "description": "The email of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "phone",
                "value": "string",
                "description": "The phone number of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "fullName",
                "value": "string",
                "description": "The full name of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "firstName",
                "value": "string",
                "description": "The first name of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lastName",
                "value": "string",
                "description": "The last name of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "The image associated with the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "acceptsMarketing",
                "value": "boolean",
                "description": "Defines if the customer accepts marketing activities.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "storeCreditAccounts",
                "value": "StoreCreditAccount[]",
                "description": "The Store Credit Accounts owned by the customer and usable during the checkout process.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isPrivate": true
              }
            ],
            "value": "export interface Customer {\n  /**\n   * Customer ID.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'gid://shopify/Customer/123'\n   */\n  id: string;\n  /**\n   * The email of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  email?: string;\n  /**\n   * The phone number of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  phone?: string;\n  /**\n   * The full name of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  fullName?: string;\n  /**\n   * The first name of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  firstName?: string;\n  /**\n   * The last name of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  lastName?: string;\n  /**\n   * The image associated with the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  image: ImageDetails;\n  /**\n   * Defines if the customer accepts marketing activities.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  acceptsMarketing: boolean;\n  /**\n   * The Store Credit Accounts owned by the customer and usable during the checkout process.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @private\n   */\n  storeCreditAccounts: StoreCreditAccount[];\n}"
          },
          "StoreCreditAccount": {
            "filePath": "/api/standard/standard.ts",
            "name": "StoreCreditAccount",
            "description": "Information about a Store Credit Account.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "balance",
                "value": "Money",
                "description": "The current balance of the Store Credit Account."
              }
            ],
            "value": "export interface StoreCreditAccount {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/StoreCreditAccount/1'\n   */\n  id: string;\n  /**\n   * The current balance of the Store Credit Account.\n   */\n  balance: Money;\n}"
          },
          "BuyerJourney": {
            "filePath": "/api/standard/standard.ts",
            "name": "BuyerJourney",
            "description": "Provides details on the buyer's progression through the checkout.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "intercept",
                "value": "(interceptor: Interceptor) => Promise<() => void>",
                "description": "Installs a function for intercepting and preventing progress on checkout.\n\nThis returns a promise that resolves to a teardown function. Calling the\nteardown function will remove the interceptor.\n\nTo block checkout progress, you must set the [block_progress](/docs/api/checkout-ui-extensions/configuration#block-progress)\ncapability in your extension's configuration."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "completed",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "This subscribable value will be true if the buyer completed submitting their order.\n\nFor example, when viewing the order status page after submitting payment, the buyer will have completed their order."
              }
            ],
            "value": "export interface BuyerJourney {\n  /**\n   * Installs a function for intercepting and preventing progress on checkout.\n   *\n   * This returns a promise that resolves to a teardown function. Calling the\n   * teardown function will remove the interceptor.\n   *\n   * To block checkout progress, you must set the [block_progress](/docs/api/checkout-ui-extensions/configuration#block-progress)\n   * capability in your extension's configuration.\n   */\n  intercept(interceptor: Interceptor): Promise<() => void>;\n\n  /**\n   * This subscribable value will be true if the buyer completed submitting their order.\n   *\n   * For example, when viewing the order status page after submitting payment, the buyer will have completed their order.\n   */\n  completed: StatefulRemoteSubscribable<boolean>;\n}"
          },
          "Interceptor": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Interceptor",
            "value": "(\n  interceptorProps: InterceptorProps,\n) => InterceptorRequest | Promise<InterceptorRequest>",
            "description": "A function for intercepting and preventing navigation on checkout. You can block\nnavigation by returning an object with\n`{behavior: 'block', reason: InvalidResultReason.InvalidExtensionState, errors?: ValidationErrors[]}`.\nIf you do, then you're expected to also update some part of your UI to reflect the reason why navigation\nwas blocked, either by targeting checkout UI fields, passing errors to the page level or rendering the errors in your extension."
          },
          "InterceptorProps": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorProps",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "canBlockProgress",
                "value": "boolean",
                "description": "Whether the interceptor has the capability to block a buyer's progress through\ncheckout. This ability might be granted by a merchant in differing checkout contexts."
              }
            ],
            "value": "export interface InterceptorProps {\n  /**\n   * Whether the interceptor has the capability to block a buyer's progress through\n   * checkout. This ability might be granted by a merchant in differing checkout contexts.\n   */\n  canBlockProgress: boolean;\n}"
          },
          "InterceptorRequest": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InterceptorRequest",
            "value": "InterceptorRequestAllow | InterceptorRequestBlock",
            "description": ""
          },
          "InterceptorRequestAllow": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorRequestAllow",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"allow\"",
                "description": "Indicates that the interceptor will allow the buyer's journey to continue."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "perform",
                "value": "(result: InterceptorResult) => void | Promise<void>",
                "description": "This callback is called when all interceptors finish. We recommend\nsetting errors or reasons for blocking at this stage, so that all the errors in\nthe UI show up at once.",
                "isOptional": true
              }
            ],
            "value": "interface InterceptorRequestAllow {\n  /**\n   * Indicates that the interceptor will allow the buyer's journey to continue.\n   */\n  behavior: 'allow';\n\n  /**\n   * This callback is called when all interceptors finish. We recommend\n   * setting errors or reasons for blocking at this stage, so that all the errors in\n   * the UI show up at once.\n   * @param result InterceptorResult with behavior as either 'allow' or 'block'\n   */\n  perform?(result: InterceptorResult): void | Promise<void>;\n}"
          },
          "InterceptorResult": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InterceptorResult",
            "value": "InterceptorResultAllow | InterceptorResultBlock",
            "description": ""
          },
          "InterceptorResultAllow": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorResultAllow",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"allow\"",
                "description": "Indicates that the buyer was allowed to progress through checkout."
              }
            ],
            "value": "interface InterceptorResultAllow {\n  /**\n   * Indicates that the buyer was allowed to progress through checkout.\n   */\n  behavior: 'allow';\n}"
          },
          "InterceptorResultBlock": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorResultBlock",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"block\"",
                "description": "Indicates that some part of the checkout UI intercepted and prevented\nthe buyer’s progress. The buyer typically needs to take some action\nto resolve this issue and to move on to the next step."
              }
            ],
            "value": "interface InterceptorResultBlock {\n  /**\n   * Indicates that some part of the checkout UI intercepted and prevented\n   * the buyer’s progress. The buyer typically needs to take some action\n   * to resolve this issue and to move on to the next step.\n   */\n  behavior: 'block';\n}"
          },
          "InterceptorRequestBlock": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorRequestBlock",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"block\"",
                "description": "Indicates that the interceptor will block the buyer's journey from continuing."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "reason",
                "value": "string",
                "description": "The reason for blocking the interceptor request. This value isn't presented to\nthe buyer, so it doesn't need to be localized. The value is used only for Shopify’s\nown internal debugging and metrics."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "errors",
                "value": "ValidationError[]",
                "description": "Used to pass errors to the checkout UI, outside your extension's UI boundaries.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "perform",
                "value": "(result: InterceptorResult) => void | Promise<void>",
                "description": "This callback is called when all interceptors finish. We recommend\nsetting errors or reasons for blocking at this stage, so that all the errors in\nthe UI show up at once.",
                "isOptional": true
              }
            ],
            "value": "interface InterceptorRequestBlock {\n  /**\n   * Indicates that the interceptor will block the buyer's journey from continuing.\n   */\n  behavior: 'block';\n\n  /**\n   * The reason for blocking the interceptor request. This value isn't presented to\n   * the buyer, so it doesn't need to be localized. The value is used only for Shopify’s\n   * own internal debugging and metrics.\n   */\n  reason: string;\n\n  /**\n   * Used to pass errors to the checkout UI, outside your extension's UI boundaries.\n   */\n  errors?: ValidationError[];\n\n  /**\n   * This callback is called when all interceptors finish. We recommend\n   * setting errors or reasons for blocking at this stage, so that all the errors in\n   * the UI show up at once.\n   * @param result InterceptorResult with behavior as either 'allow' or 'block'\n   */\n  perform?(result: InterceptorResult): void | Promise<void>;\n}"
          },
          "ValidationError": {
            "filePath": "/api/shared.ts",
            "name": "ValidationError",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "Error message to be displayed to the buyer."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "string",
                "description": "The checkout UI field that the error is associated with.\n\nExample: `$.cart.deliveryGroups[0].deliveryAddress.countryCode`\n\nSee the [supported targets](/docs/api/functions/reference/cart-checkout-validation/graphql#supported-targets)\nfor more information.",
                "isOptional": true
              }
            ],
            "value": "export interface ValidationError {\n  /**\n   * Error message to be displayed to the buyer.\n   */\n  message: string;\n  /**\n   * The checkout UI field that the error is associated with.\n   *\n   * Example: `$.cart.deliveryGroups[0].deliveryAddress.countryCode`\n   *\n   * See the [supported targets](/docs/api/functions/reference/cart-checkout-validation/graphql#supported-targets)\n   * for more information.\n   */\n  target?: string;\n}"
          },
          "CartCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "StatefulRemoteSubscribable<Money>",
                "description": "A `Money` value representing the minimum a buyer can expect to pay at the current\nstep of checkout. This value excludes amounts yet to be negotiated. For example,\nthe information step might not have delivery costs calculated."
              }
            ],
            "value": "export interface CartCost {\n  /**\n   * A `Money` value representing the minimum a buyer can expect to pay at the current\n   * step of checkout. This value excludes amounts yet to be negotiated. For example,\n   * the information step might not have delivery costs calculated.\n   */\n  totalAmount: StatefulRemoteSubscribable<Money>;\n}"
          },
          "DeliveryGroup": {
            "filePath": "/api/standard/standard.ts",
            "name": "DeliveryGroup",
            "description": "Represents the delivery information and options available for one or\nmore cart lines.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "targetedCartLines",
                "value": "CartLineReference[]",
                "description": "The cart line references associated to the delivery group."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "deliveryOptions",
                "value": "DeliveryOption[]",
                "description": "The delivery options available for the delivery group."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "selectedDeliveryOption",
                "value": "DeliveryOptionReference",
                "description": "The selected delivery option for the delivery group.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "groupType",
                "value": "DeliveryGroupType",
                "description": "The type of the delivery group."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "deliveryRequired",
                "value": "boolean",
                "description": "Whether delivery is required for the delivery group."
              }
            ],
            "value": "export interface DeliveryGroup {\n  /**\n   * The cart line references associated to the delivery group.\n   */\n  targetedCartLines: CartLineReference[];\n\n  /**\n   * The delivery options available for the delivery group.\n   */\n  deliveryOptions: DeliveryOption[];\n\n  /**\n   * The selected delivery option for the delivery group.\n   */\n  selectedDeliveryOption?: DeliveryOptionReference;\n\n  /**\n   * The type of the delivery group.\n   */\n  groupType: DeliveryGroupType;\n\n  /**\n   * Whether delivery is required for the delivery group.\n   */\n  deliveryRequired: boolean;\n}"
          },
          "CartLineReference": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLineReference",
            "description": "Represents a reference to a cart line.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The unique identifier of the referenced cart line."
              }
            ],
            "value": "export interface CartLineReference {\n  /**\n   * The unique identifier of the referenced cart line.\n   */\n  id: string;\n}"
          },
          "DeliveryOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "DeliveryOption",
            "description": "Represents a base interface for a single delivery option.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique identifier of the delivery option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the delivery option.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "description",
                "value": "string",
                "description": "The description of the delivery option.",
                "isOptional": true
              }
            ],
            "value": "export interface DeliveryOption {\n  /**\n   * The unique identifier of the delivery option.\n   */\n  handle: string;\n\n  /**\n   * The title of the delivery option.\n   */\n  title?: string;\n\n  /**\n   * The description of the delivery option.\n   */\n  description?: string;\n}"
          },
          "DeliveryOptionReference": {
            "filePath": "/api/standard/standard.ts",
            "name": "DeliveryOptionReference",
            "description": "Represents a reference to a delivery option.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique identifier of the referenced delivery option."
              }
            ],
            "value": "export interface DeliveryOptionReference {\n  /**\n   * The unique identifier of the referenced delivery option.\n   */\n  handle: string;\n}"
          },
          "DeliveryGroupType": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DeliveryGroupType",
            "value": "'oneTimePurchase' | 'subscription'",
            "description": "The possible types of a delivery group."
          },
          "CartDiscountCode": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartDiscountCode",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              }
            ],
            "value": "export interface CartDiscountCode {\n  /**\n   * The code for the discount\n   */\n  code: string;\n}"
          },
          "Extension": {
            "filePath": "/api/standard/standard.ts",
            "name": "Extension",
            "description": "Meta information about an extension point.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "version",
                "value": "string",
                "description": "The published version of the running extension point.\n\nFor unpublished extensions, the value is `undefined`.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "apiVersion",
                "value": "ApiVersion",
                "description": "The API version that was set in the extension config file."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "scriptUrl",
                "value": "string",
                "description": "The URL to the script that started the extension point."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "rendered",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "Whether your extension is currently rendered to the screen.\n\nShopify might render your extension before it's visible in the UI,\ntypically to pre-render extensions that will appear on a later step of the\ncheckout.\n\nYour extension might also continue to run after the buyer has navigated away\nfrom where it was rendered. The extension continues running so that\nyour extension is immediately available to render if the buyer navigates back."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "capabilities",
                "value": "StatefulRemoteSubscribable<Capability[]>",
                "description": "The allowed capabilities of the extension, defined\nin your [shopify.ui.extension.toml](/docs/api/checkout-ui-extensions/configuration) file.\n\n* [`api_access`](/docs/api/checkout-ui-extensions/configuration#api-access): the extension can access the Storefront API.\n\n* [`network_access`](/docs/api/checkout-ui-extensions/configuration#network-access): the extension can make external network calls.\n\n* [`block_progress`](/docs/api/checkout-ui-extensions/configuration#block-progress): the extension can block a buyer's progress and the merchant has allowed this blocking behavior."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "editor",
                "value": "Editor",
                "description": "Information about the editor where the extension is being rendered.\n\nThe value is undefined if the extension is not rendering in an editor.",
                "isOptional": true
              }
            ],
            "value": "export interface Extension {\n  /**\n   * The published version of the running extension point.\n   *\n   * For unpublished extensions, the value is `undefined`.\n   *\n   * @example 3.0.10\n   */\n  version?: string;\n\n  /**\n   * The API version that was set in the extension config file.\n   *\n   * @example '2023-01', '2022-10'\n   */\n  apiVersion: ApiVersion;\n\n  /**\n   * The URL to the script that started the extension point.\n   */\n  scriptUrl: string;\n\n  /**\n   * Whether your extension is currently rendered to the screen.\n   *\n   * Shopify might render your extension before it's visible in the UI,\n   * typically to pre-render extensions that will appear on a later step of the\n   * checkout.\n   *\n   * Your extension might also continue to run after the buyer has navigated away\n   * from where it was rendered. The extension continues running so that\n   * your extension is immediately available to render if the buyer navigates back.\n   */\n  rendered: StatefulRemoteSubscribable<boolean>;\n\n  /**\n   * The allowed capabilities of the extension, defined\n   * in your [shopify.ui.extension.toml](/docs/api/checkout-ui-extensions/configuration) file.\n   *\n   * * [`api_access`](/docs/api/checkout-ui-extensions/configuration#api-access): the extension can access the Storefront API.\n   *\n   * * [`network_access`](/docs/api/checkout-ui-extensions/configuration#network-access): the extension can make external network calls.\n   *\n   * * [`block_progress`](/docs/api/checkout-ui-extensions/configuration#block-progress): the extension can block a buyer's progress and the merchant has allowed this blocking behavior.\n   */\n  capabilities: StatefulRemoteSubscribable<Capability[]>;\n\n  /**\n   * Information about the editor where the extension is being rendered.\n   *\n   * The value is undefined if the extension is not rendering in an editor.\n   */\n  editor?: Editor;\n}"
          },
          "ApiVersion": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ApiVersion",
            "value": "'2022-10' | '2023-01' | '2023-04' | 'unstable'",
            "description": ""
          },
          "Capability": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Capability",
            "value": "'api_access' | 'network_access' | 'block_progress'",
            "description": "The capabilities an extension has access to.\n\n* [`api_access`](/docs/api/checkout-ui-extensions/configuration#api-access): the extension can access the Storefront API.\n\n* [`network_access`](/docs/api/checkout-ui-extensions/configuration#network-access): the extension can make external network calls.\n\n* [`block_progress`](/docs/api/checkout-ui-extensions/configuration#block-progress): the extension can block a buyer's progress and the merchant has allowed this blocking behavior."
          },
          "Editor": {
            "filePath": "/api/standard/standard.ts",
            "name": "Editor",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"checkout\"",
                "description": "Indicates whether the extension is rendering in the checkout editor."
              }
            ],
            "value": "export interface Editor {\n  /**\n   * Indicates whether the extension is rendering in the checkout editor.\n   */\n  type: 'checkout';\n}"
          },
          "ExtensionPoint": {
            "filePath": "/extension-points.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ExtensionPoint",
            "value": "keyof ExtensionPoints",
            "description": ""
          },
          "I18n": {
            "filePath": "/api/standard/standard.ts",
            "name": "I18n",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "formatNumber",
                "value": "(number: number | bigint, options?: { inExtensionLocale?: boolean; } & NumberFormatOptions) => string",
                "description": "Returns a localized number.\n\nThis function behaves like the standard `Intl.NumberFormat()`\nwith a style of `decimal` applied. It uses the buyer's locale by default."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "formatCurrency",
                "value": "(number: number | bigint, options?: { inExtensionLocale?: boolean; } & NumberFormatOptions) => string",
                "description": "Returns a localized currency value.\n\nThis function behaves like the standard `Intl.NumberFormat()`\nwith a style of `currency` applied. It uses the buyer's locale by default."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "formatDate",
                "value": "(date: Date, options?: { inExtensionLocale?: boolean; } & DateTimeFormatOptions) => string",
                "description": "Returns a localized date value.\n\nThis function behaves like the standard `Intl.DateTimeFormatOptions()` and uses\nthe buyer's locale by default. Formatting options can be passed in as\noptions."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "translate",
                "value": "I18nTranslate",
                "description": "Returns translated content in the buyer's locale,\nas supported by the extension.\n\n- `options.count` is a special numeric value used in pluralization.\n- The other option keys and values are treated as replacements for interpolation.\n- If the replacements are all primitives, then `translate()` returns a single string.\n- If replacements contain UI components, then `translate()` returns an array of elements."
              }
            ],
            "value": "export interface I18n {\n  /**\n   * Returns a localized number.\n   *\n   * This function behaves like the standard `Intl.NumberFormat()`\n   * with a style of `decimal` applied. It uses the buyer's locale by default.\n   *\n   * @param options.inExtensionLocale - if true, use the extension's locale\n   */\n  formatNumber: (\n    number: number | bigint,\n    options?: {inExtensionLocale?: boolean} & Intl.NumberFormatOptions,\n  ) => string;\n\n  /**\n   * Returns a localized currency value.\n   *\n   * This function behaves like the standard `Intl.NumberFormat()`\n   * with a style of `currency` applied. It uses the buyer's locale by default.\n   *\n   * @param options.inExtensionLocale - if true, use the extension's locale\n   */\n  formatCurrency: (\n    number: number | bigint,\n    options?: {inExtensionLocale?: boolean} & Intl.NumberFormatOptions,\n  ) => string;\n\n  /**\n   * Returns a localized date value.\n   *\n   * This function behaves like the standard `Intl.DateTimeFormatOptions()` and uses\n   * the buyer's locale by default. Formatting options can be passed in as\n   * options.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat0\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options\n   *\n   * @param options.inExtensionLocale - if true, use the extension's locale\n   */\n  formatDate: (\n    date: Date,\n    options?: {inExtensionLocale?: boolean} & Intl.DateTimeFormatOptions,\n  ) => string;\n\n  /**\n   * Returns translated content in the buyer's locale,\n   * as supported by the extension.\n   *\n   * - `options.count` is a special numeric value used in pluralization.\n   * - The other option keys and values are treated as replacements for interpolation.\n   * - If the replacements are all primitives, then `translate()` returns a single string.\n   * - If replacements contain UI components, then `translate()` returns an array of elements.\n   */\n  translate: I18nTranslate;\n}"
          },
          "I18nTranslate": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "I18nTranslate",
            "value": "(\n  key: string,\n  options?: {[placeholderKey: string]: ReplacementType | string | number},\n) => ReplacementType extends string | number\n  ? string\n  : (string | ReplacementType)[]",
            "description": "This returns a translated string matching a key in a locale file."
          },
          "Localization": {
            "filePath": "/api/standard/standard.ts",
            "name": "Localization",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currency",
                "value": "StatefulRemoteSubscribable<Currency>",
                "description": "The currency that the buyer sees for money amounts in the checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "timezone",
                "value": "StatefulRemoteSubscribable<Timezone>",
                "description": "The buyer’s time zone."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "language",
                "value": "StatefulRemoteSubscribable<Language>",
                "description": "The language the buyer sees in the checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "extensionLanguage",
                "value": "StatefulRemoteSubscribable<Language>",
                "description": "This is the buyer's language, as supported by the extension.\nIf the buyer's actual language is not supported by the extension,\nthis is the fallback locale used for translations.\n\nFor example, if the buyer's language is 'fr-CA' but your extension\nonly supports translations for 'fr', then the `isoCode` for this\nlanguage is 'fr'. If your extension does not provide french\ntranslations at all, this value is the default locale for your\nextension (that is, the one matching your .default.json file)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "country",
                "value": "StatefulRemoteSubscribable<Country | undefined>",
                "description": "The country context of the checkout. This value carries over from the\ncontext of the cart, where it was used to contextualize the storefront\nexperience. It will update if the buyer changes the country of their\nshipping address. The value is undefined if unknown."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "market",
                "value": "StatefulRemoteSubscribable<Market | undefined>",
                "description": "The [market](/docs/apps/markets) context of the\ncheckout. This value carries over from the context of the cart, where it\nwas used to contextualize the storefront experience. It will update if the\nbuyer changes the country of their shipping address. The value is undefined\nif unknown."
              }
            ],
            "value": "export interface Localization {\n  /**\n   * The currency that the buyer sees for money amounts in the checkout.\n   */\n  currency: StatefulRemoteSubscribable<Currency>;\n\n  /**\n   * The buyer’s time zone.\n   */\n  timezone: StatefulRemoteSubscribable<Timezone>;\n\n  /**\n   * The language the buyer sees in the checkout.\n   */\n  language: StatefulRemoteSubscribable<Language>;\n\n  /**\n   * This is the buyer's language, as supported by the extension.\n   * If the buyer's actual language is not supported by the extension,\n   * this is the fallback locale used for translations.\n   *\n   * For example, if the buyer's language is 'fr-CA' but your extension\n   * only supports translations for 'fr', then the `isoCode` for this\n   * language is 'fr'. If your extension does not provide french\n   * translations at all, this value is the default locale for your\n   * extension (that is, the one matching your .default.json file).\n   */\n  extensionLanguage: StatefulRemoteSubscribable<Language>;\n\n  /**\n   * The country context of the checkout. This value carries over from the\n   * context of the cart, where it was used to contextualize the storefront\n   * experience. It will update if the buyer changes the country of their\n   * shipping address. The value is undefined if unknown.\n   */\n  country: StatefulRemoteSubscribable<Country | undefined>;\n\n  /**\n   * The [market](/docs/apps/markets) context of the\n   * checkout. This value carries over from the context of the cart, where it\n   * was used to contextualize the storefront experience. It will update if the\n   * buyer changes the country of their shipping address. The value is undefined\n   * if unknown.\n   */\n  market: StatefulRemoteSubscribable<Market | undefined>;\n}"
          },
          "Currency": {
            "filePath": "/api/standard/standard.ts",
            "name": "Currency",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "isoCode",
                "value": "CurrencyCode",
                "description": "The ISO-4217 code for this currency."
              }
            ],
            "value": "export interface Currency {\n  /**\n   * The ISO-4217 code for this currency.\n   * @see https://www.iso.org/iso-4217-currency-codes.html\n   */\n  isoCode: CurrencyCode;\n}"
          },
          "Timezone": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Timezone",
            "value": "'Africa/Abidjan' | 'Africa/Algiers' | 'Africa/Bissau' | 'Africa/Cairo' | 'Africa/Casablanca' | 'Africa/Ceuta' | 'Africa/El_Aaiun' | 'Africa/Johannesburg' | 'Africa/Juba' | 'Africa/Khartoum' | 'Africa/Lagos' | 'Africa/Maputo' | 'Africa/Monrovia' | 'Africa/Nairobi' | 'Africa/Ndjamena' | 'Africa/Sao_Tome' | 'Africa/Tripoli' | 'Africa/Tunis' | 'Africa/Windhoek' | 'America/Adak' | 'America/Anchorage' | 'America/Araguaina' | 'America/Argentina/Buenos_Aires' | 'America/Argentina/Catamarca' | 'America/Argentina/Cordoba' | 'America/Argentina/Jujuy' | 'America/Argentina/La_Rioja' | 'America/Argentina/Mendoza' | 'America/Argentina/Rio_Gallegos' | 'America/Argentina/Salta' | 'America/Argentina/San_Juan' | 'America/Argentina/San_Luis' | 'America/Argentina/Tucuman' | 'America/Argentina/Ushuaia' | 'America/Asuncion' | 'America/Bahia' | 'America/Bahia_Banderas' | 'America/Barbados' | 'America/Belem' | 'America/Belize' | 'America/Boa_Vista' | 'America/Bogota' | 'America/Boise' | 'America/Cambridge_Bay' | 'America/Campo_Grande' | 'America/Cancun' | 'America/Caracas' | 'America/Cayenne' | 'America/Chicago' | 'America/Chihuahua' | 'America/Costa_Rica' | 'America/Cuiaba' | 'America/Danmarkshavn' | 'America/Dawson' | 'America/Dawson_Creek' | 'America/Denver' | 'America/Detroit' | 'America/Edmonton' | 'America/Eirunepe' | 'America/El_Salvador' | 'America/Fort_Nelson' | 'America/Fortaleza' | 'America/Glace_Bay' | 'America/Goose_Bay' | 'America/Grand_Turk' | 'America/Guatemala' | 'America/Guayaquil' | 'America/Guyana' | 'America/Halifax' | 'America/Havana' | 'America/Hermosillo' | 'America/Indiana/Indianapolis' | 'America/Indiana/Knox' | 'America/Indiana/Marengo' | 'America/Indiana/Petersburg' | 'America/Indiana/Tell_City' | 'America/Indiana/Vevay' | 'America/Indiana/Vincennes' | 'America/Indiana/Winamac' | 'America/Inuvik' | 'America/Iqaluit' | 'America/Jamaica' | 'America/Juneau' | 'America/Kentucky/Louisville' | 'America/Kentucky/Monticello' | 'America/La_Paz' | 'America/Lima' | 'America/Los_Angeles' | 'America/Maceio' | 'America/Managua' | 'America/Manaus' | 'America/Martinique' | 'America/Matamoros' | 'America/Mazatlan' | 'America/Menominee' | 'America/Merida' | 'America/Metlakatla' | 'America/Mexico_City' | 'America/Miquelon' | 'America/Moncton' | 'America/Monterrey' | 'America/Montevideo' | 'America/New_York' | 'America/Nipigon' | 'America/Nome' | 'America/Noronha' | 'America/North_Dakota/Beulah' | 'America/North_Dakota/Center' | 'America/North_Dakota/New_Salem' | 'America/Nuuk' | 'America/Ojinaga' | 'America/Panama' | 'America/Pangnirtung' | 'America/Paramaribo' | 'America/Phoenix' | 'America/Port-au-Prince' | 'America/Porto_Velho' | 'America/Puerto_Rico' | 'America/Punta_Arenas' | 'America/Rainy_River' | 'America/Rankin_Inlet' | 'America/Recife' | 'America/Regina' | 'America/Resolute' | 'America/Rio_Branco' | 'America/Santarem' | 'America/Santiago' | 'America/Santo_Domingo' | 'America/Sao_Paulo' | 'America/Scoresbysund' | 'America/Sitka' | 'America/St_Johns' | 'America/Swift_Current' | 'America/Tegucigalpa' | 'America/Thule' | 'America/Thunder_Bay' | 'America/Tijuana' | 'America/Toronto' | 'America/Vancouver' | 'America/Whitehorse' | 'America/Winnipeg' | 'America/Yakutat' | 'America/Yellowknife' | 'Antarctica/Casey' | 'Antarctica/Davis' | 'Antarctica/Macquarie' | 'Antarctica/Mawson' | 'Antarctica/Palmer' | 'Antarctica/Rothera' | 'Antarctica/Troll' | 'Antarctica/Vostok' | 'Asia/Almaty' | 'Asia/Amman' | 'Asia/Anadyr' | 'Asia/Aqtau' | 'Asia/Aqtobe' | 'Asia/Ashgabat' | 'Asia/Atyrau' | 'Asia/Baghdad' | 'Asia/Baku' | 'Asia/Bangkok' | 'Asia/Barnaul' | 'Asia/Beirut' | 'Asia/Bishkek' | 'Asia/Brunei' | 'Asia/Chita' | 'Asia/Choibalsan' | 'Asia/Colombo' | 'Asia/Damascus' | 'Asia/Dhaka' | 'Asia/Dili' | 'Asia/Dubai' | 'Asia/Dushanbe' | 'Asia/Famagusta' | 'Asia/Gaza' | 'Asia/Hebron' | 'Asia/Ho_Chi_Minh' | 'Asia/Hong_Kong' | 'Asia/Hovd' | 'Asia/Irkutsk' | 'Asia/Jakarta' | 'Asia/Jayapura' | 'Asia/Jerusalem' | 'Asia/Kabul' | 'Asia/Kamchatka' | 'Asia/Karachi' | 'Asia/Kathmandu' | 'Asia/Khandyga' | 'Asia/Kolkata' | 'Asia/Krasnoyarsk' | 'Asia/Kuala_Lumpur' | 'Asia/Kuching' | 'Asia/Macau' | 'Asia/Magadan' | 'Asia/Makassar' | 'Asia/Manila' | 'Asia/Nicosia' | 'Asia/Novokuznetsk' | 'Asia/Novosibirsk' | 'Asia/Omsk' | 'Asia/Oral' | 'Asia/Pontianak' | 'Asia/Pyongyang' | 'Asia/Qatar' | 'Asia/Qostanay' | 'Asia/Qyzylorda' | 'Asia/Riyadh' | 'Asia/Sakhalin' | 'Asia/Samarkand' | 'Asia/Seoul' | 'Asia/Shanghai' | 'Asia/Singapore' | 'Asia/Srednekolymsk' | 'Asia/Taipei' | 'Asia/Tashkent' | 'Asia/Tbilisi' | 'Asia/Tehran' | 'Asia/Thimphu' | 'Asia/Tokyo' | 'Asia/Tomsk' | 'Asia/Ulaanbaatar' | 'Asia/Urumqi' | 'Asia/Ust-Nera' | 'Asia/Vladivostok' | 'Asia/Yakutsk' | 'Asia/Yangon' | 'Asia/Yekaterinburg' | 'Asia/Yerevan' | 'Atlantic/Azores' | 'Atlantic/Bermuda' | 'Atlantic/Canary' | 'Atlantic/Cape_Verde' | 'Atlantic/Faroe' | 'Atlantic/Madeira' | 'Atlantic/Reykjavik' | 'Atlantic/South_Georgia' | 'Atlantic/Stanley' | 'Australia/Adelaide' | 'Australia/Brisbane' | 'Australia/Broken_Hill' | 'Australia/Darwin' | 'Australia/Eucla' | 'Australia/Hobart' | 'Australia/Lindeman' | 'Australia/Lord_Howe' | 'Australia/Melbourne' | 'Australia/Perth' | 'Australia/Sydney' | 'CET' | 'CST6CDT' | 'EET' | 'EST' | 'EST5EDT' | 'Etc/GMT' | 'Etc/GMT-1' | 'Etc/GMT-10' | 'Etc/GMT-11' | 'Etc/GMT-12' | 'Etc/GMT-13' | 'Etc/GMT-14' | 'Etc/GMT-2' | 'Etc/GMT-3' | 'Etc/GMT-4' | 'Etc/GMT-5' | 'Etc/GMT-6' | 'Etc/GMT-7' | 'Etc/GMT-8' | 'Etc/GMT-9' | 'Etc/GMT+1' | 'Etc/GMT+10' | 'Etc/GMT+11' | 'Etc/GMT+12' | 'Etc/GMT+2' | 'Etc/GMT+3' | 'Etc/GMT+4' | 'Etc/GMT+5' | 'Etc/GMT+6' | 'Etc/GMT+7' | 'Etc/GMT+8' | 'Etc/GMT+9' | 'Etc/UTC' | 'Europe/Amsterdam' | 'Europe/Andorra' | 'Europe/Astrakhan' | 'Europe/Athens' | 'Europe/Belgrade' | 'Europe/Berlin' | 'Europe/Brussels' | 'Europe/Bucharest' | 'Europe/Budapest' | 'Europe/Chisinau' | 'Europe/Copenhagen' | 'Europe/Dublin' | 'Europe/Gibraltar' | 'Europe/Helsinki' | 'Europe/Istanbul' | 'Europe/Kaliningrad' | 'Europe/Kiev' | 'Europe/Kirov' | 'Europe/Lisbon' | 'Europe/London' | 'Europe/Luxembourg' | 'Europe/Madrid' | 'Europe/Malta' | 'Europe/Minsk' | 'Europe/Monaco' | 'Europe/Moscow' | 'Europe/Oslo' | 'Europe/Paris' | 'Europe/Prague' | 'Europe/Riga' | 'Europe/Rome' | 'Europe/Samara' | 'Europe/Saratov' | 'Europe/Simferopol' | 'Europe/Sofia' | 'Europe/Stockholm' | 'Europe/Tallinn' | 'Europe/Tirane' | 'Europe/Ulyanovsk' | 'Europe/Uzhgorod' | 'Europe/Vienna' | 'Europe/Vilnius' | 'Europe/Volgograd' | 'Europe/Warsaw' | 'Europe/Zaporozhye' | 'Europe/Zurich' | 'HST' | 'Indian/Chagos' | 'Indian/Christmas' | 'Indian/Cocos' | 'Indian/Kerguelen' | 'Indian/Mahe' | 'Indian/Maldives' | 'Indian/Mauritius' | 'Indian/Reunion' | 'MET' | 'MST' | 'MST7MDT' | 'Pacific/Apia' | 'Pacific/Auckland' | 'Pacific/Bougainville' | 'Pacific/Chatham' | 'Pacific/Chuuk' | 'Pacific/Easter' | 'Pacific/Efate' | 'Pacific/Fakaofo' | 'Pacific/Fiji' | 'Pacific/Funafuti' | 'Pacific/Galapagos' | 'Pacific/Gambier' | 'Pacific/Guadalcanal' | 'Pacific/Guam' | 'Pacific/Honolulu' | 'Pacific/Kanton' | 'Pacific/Kiritimati' | 'Pacific/Kosrae' | 'Pacific/Kwajalein' | 'Pacific/Majuro' | 'Pacific/Marquesas' | 'Pacific/Nauru' | 'Pacific/Niue' | 'Pacific/Norfolk' | 'Pacific/Noumea' | 'Pacific/Pago_Pago' | 'Pacific/Palau' | 'Pacific/Pitcairn' | 'Pacific/Pohnpei' | 'Pacific/Port_Moresby' | 'Pacific/Rarotonga' | 'Pacific/Tahiti' | 'Pacific/Tarawa' | 'Pacific/Tongatapu' | 'Pacific/Wake' | 'Pacific/Wallis' | 'PST8PDT' | 'WET'",
            "description": ""
          },
          "Language": {
            "filePath": "/api/standard/standard.ts",
            "name": "Language",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "isoCode",
                "value": "string",
                "description": "The BCP-47 language tag. It may contain a dash followed by an ISO 3166-1 alpha-2 region code."
              }
            ],
            "value": "export interface Language {\n  /**\n   * The BCP-47 language tag. It may contain a dash followed by an ISO 3166-1 alpha-2 region code.\n   *\n   * @example 'en' for English, or 'en-US' for English local to United States.\n   * @see https://en.wikipedia.org/wiki/IETF_language_tag\n   * @see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n   */\n  isoCode: string;\n}"
          },
          "Country": {
            "filePath": "/api/standard/standard.ts",
            "name": "Country",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "isoCode",
                "value": "CountryCode",
                "description": "The ISO-3166-1 code for this country."
              }
            ],
            "value": "export interface Country {\n  /**\n   * The ISO-3166-1 code for this country.\n   * @see https://www.iso.org/iso-3166-country-codes.html\n   */\n  isoCode: CountryCode;\n}"
          },
          "CountryCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CountryCode",
            "value": "'AC' | 'AD' | 'AE' | 'AF' | 'AG' | 'AI' | 'AL' | 'AM' | 'AN' | 'AO' | 'AR' | 'AT' | 'AU' | 'AW' | 'AX' | 'AZ' | 'BA' | 'BB' | 'BD' | 'BE' | 'BF' | 'BG' | 'BH' | 'BI' | 'BJ' | 'BL' | 'BM' | 'BN' | 'BO' | 'BQ' | 'BR' | 'BS' | 'BT' | 'BV' | 'BW' | 'BY' | 'BZ' | 'CA' | 'CC' | 'CD' | 'CF' | 'CG' | 'CH' | 'CI' | 'CK' | 'CL' | 'CM' | 'CN' | 'CO' | 'CR' | 'CU' | 'CV' | 'CW' | 'CX' | 'CY' | 'CZ' | 'DE' | 'DJ' | 'DK' | 'DM' | 'DO' | 'DZ' | 'EC' | 'EE' | 'EG' | 'EH' | 'ER' | 'ES' | 'ET' | 'FI' | 'FJ' | 'FK' | 'FO' | 'FR' | 'GA' | 'GB' | 'GD' | 'GE' | 'GF' | 'GG' | 'GH' | 'GI' | 'GL' | 'GM' | 'GN' | 'GP' | 'GQ' | 'GR' | 'GS' | 'GT' | 'GW' | 'GY' | 'HK' | 'HM' | 'HN' | 'HR' | 'HT' | 'HU' | 'ID' | 'IE' | 'IL' | 'IM' | 'IN' | 'IO' | 'IQ' | 'IR' | 'IS' | 'IT' | 'JE' | 'JM' | 'JO' | 'JP' | 'KE' | 'KG' | 'KH' | 'KI' | 'KM' | 'KN' | 'KP' | 'KR' | 'KW' | 'KY' | 'KZ' | 'LA' | 'LB' | 'LC' | 'LI' | 'LK' | 'LR' | 'LS' | 'LT' | 'LU' | 'LV' | 'LY' | 'MA' | 'MC' | 'MD' | 'ME' | 'MF' | 'MG' | 'MK' | 'ML' | 'MM' | 'MN' | 'MO' | 'MQ' | 'MR' | 'MS' | 'MT' | 'MU' | 'MV' | 'MW' | 'MX' | 'MY' | 'MZ' | 'NA' | 'NC' | 'NE' | 'NF' | 'NG' | 'NI' | 'NL' | 'NO' | 'NP' | 'NR' | 'NU' | 'NZ' | 'OM' | 'PA' | 'PE' | 'PF' | 'PG' | 'PH' | 'PK' | 'PL' | 'PM' | 'PN' | 'PS' | 'PT' | 'PY' | 'QA' | 'RE' | 'RO' | 'RS' | 'RU' | 'RW' | 'SA' | 'SB' | 'SC' | 'SD' | 'SE' | 'SG' | 'SH' | 'SI' | 'SJ' | 'SK' | 'SL' | 'SM' | 'SN' | 'SO' | 'SR' | 'SS' | 'ST' | 'SV' | 'SX' | 'SY' | 'SZ' | 'TA' | 'TC' | 'TD' | 'TF' | 'TG' | 'TH' | 'TJ' | 'TK' | 'TL' | 'TM' | 'TN' | 'TO' | 'TR' | 'TT' | 'TV' | 'TW' | 'TZ' | 'UA' | 'UG' | 'UM' | 'US' | 'UY' | 'UZ' | 'VA' | 'VC' | 'VE' | 'VG' | 'VN' | 'VU' | 'WF' | 'WS' | 'XK' | 'YE' | 'YT' | 'ZA' | 'ZM' | 'ZW' | 'ZZ'",
            "description": ""
          },
          "Market": {
            "filePath": "/api/standard/standard.ts",
            "name": "Market",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier for a market."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The human-readable, shop-scoped identifier for the market."
              }
            ],
            "value": "export interface Market {\n  /**\n   * A globally-unique identifier for a market.\n   */\n  id: string;\n\n  /**\n   * The human-readable, shop-scoped identifier for the market.\n   */\n  handle: string;\n}"
          },
          "PresentmentCartLine": {
            "filePath": "/api/standard/standard.ts",
            "name": "PresentmentCartLine",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The ID of the present cart line. This ID isn't stable and might change after\nany operations on the line items."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "PresentmentCartLineCost",
                "description": "The details about the cost components attributed to the presentment cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the line item."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "string",
                "description": "The subtitle of the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "The image associated with the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lines",
                "value": "CartLine[]",
                "description": "The merchandise lines being purchased."
              }
            ],
            "value": "export interface PresentmentCartLine {\n  /**\n   * The ID of the present cart line. This ID isn't stable and might change after\n   * any operations on the line items.\n   * @example 'gid://shopify/PresentmentCartLine/123'\n   */\n  id: string;\n\n  /**\n   * The quantity of the merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The details about the cost components attributed to the presentment cart line.\n   */\n  cost: PresentmentCartLineCost;\n\n  /**\n   * The title of the line item.\n   */\n  title: string;\n\n  /**\n   * The subtitle of the line item.\n   */\n  subtitle?: string;\n\n  /**\n   * The image associated with the line item.\n   */\n  image?: ImageDetails;\n\n  /**\n   * The merchandise lines being purchased.\n   */\n  lines: CartLine[];\n}"
          },
          "PresentmentCartLineCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "PresentmentCartLineCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "Money",
                "description": "The total cost of the merchandise line."
              }
            ],
            "value": "export interface PresentmentCartLineCost {\n  /**\n   * The total cost of the merchandise line.\n   */\n  totalAmount: Money;\n}"
          },
          "StorefrontApiVersion": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "StorefrontApiVersion",
            "value": "'2022-04' | '2022-07' | '2022-10' | '2023-01' | 'unstable'",
            "description": "Union of supported storefront API versions"
          },
          "SelectedPaymentOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "SelectedPaymentOption",
            "description": "A payment option selected by the buyer.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique handle referencing `PaymentOption.handle`.\n\nSee [availablePaymentOptions](/docs/api/checkout-ui-extensions/unstable/apis/standardapi#properties-propertydetail-availablepaymentoptions)."
              }
            ],
            "value": "export interface SelectedPaymentOption {\n  /**\n   * The unique handle referencing `PaymentOption.handle`.\n   *\n   * See [availablePaymentOptions](/docs/api/checkout-ui-extensions/unstable/apis/standardapi#properties-propertydetail-availablepaymentoptions).\n   */\n  handle: string;\n}"
          },
          "SessionToken": {
            "filePath": "/api/standard/standard.ts",
            "name": "SessionToken",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "get",
                "value": "() => Promise<string>",
                "description": "Requests a session token that hasn't expired. You should call this method every\ntime you need to make a request to your backend in order to get a valid token.\nThis method will return cached tokens when possible, so you don’t need to worry\nabout storing these tokens yourself."
              }
            ],
            "value": "export interface SessionToken {\n  /**\n   * Requests a session token that hasn't expired. You should call this method every\n   * time you need to make a request to your backend in order to get a valid token.\n   * This method will return cached tokens when possible, so you don’t need to worry\n   * about storing these tokens yourself.\n   */\n  get(): Promise<string>;\n}"
          },
          "ExtensionSettings": {
            "filePath": "/api/standard/standard.ts",
            "name": "ExtensionSettings",
            "description": "The merchant-defined setting values for the extension.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "name": "[key: string]",
                "value": "string | number | boolean | undefined"
              }
            ],
            "value": "export interface ExtensionSettings {\n  [key: string]: string | number | boolean | undefined;\n}"
          },
          "MailingAddress": {
            "filePath": "/api/standard/standard.ts",
            "name": "MailingAddress",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The buyer's full name.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "firstName",
                "value": "string",
                "description": "The buyer's first name.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lastName",
                "value": "string",
                "description": "The buyer's last name.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "company",
                "value": "string",
                "description": "The buyer's company name.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "address1",
                "value": "string",
                "description": "The first line of the buyer's address, including street name and number.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "address2",
                "value": "string",
                "description": "The second line of the buyer's address, like apartment number, suite, etc.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "city",
                "value": "string",
                "description": "The buyer's city.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "zip",
                "value": "string",
                "description": "The buyer's postal or ZIP code.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "countryCode",
                "value": "CountryCode",
                "description": "The ISO 3166 Alpha-2 format for the buyer's country. Refer to https://www.iso.org/iso-3166-country-codes.html.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "provinceCode",
                "value": "string",
                "description": "The buyer's zone code, such as state, province, prefecture, or region.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "phone",
                "value": "string",
                "description": "The buyer's phone number.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              }
            ],
            "value": "export interface MailingAddress {\n  /**\n   * The buyer's full name.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'John Doe'\n   */\n  name?: string;\n\n  /**\n   * The buyer's first name.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'John'\n   */\n  firstName?: string;\n\n  /**\n   * The buyer's last name.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'Doe'\n   */\n  lastName?: string;\n\n  /**\n   * The buyer's company name.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'Shopify'\n   */\n  company?: string;\n\n  /**\n   * The first line of the buyer's address, including street name and number.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example '151 O'Connor Street'\n   */\n  address1?: string;\n\n  /**\n   * The second line of the buyer's address, like apartment number, suite, etc.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'Ground floor'\n   */\n  address2?: string;\n\n  /**\n   * The buyer's city.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'Ottawa'\n   */\n  city?: string;\n\n  /**\n   * The buyer's postal or ZIP code.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'K2P 2L8'\n   */\n  zip?: string;\n\n  /**\n   * The ISO 3166 Alpha-2 format for the buyer's country. Refer to https://www.iso.org/iso-3166-country-codes.html.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'CA' for Canada.\n   */\n  countryCode?: CountryCode;\n\n  /**\n   * The buyer's zone code, such as state, province, prefecture, or region.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'ON' for Ontario.\n   */\n  provinceCode?: string;\n\n  /**\n   * The buyer's phone number.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example '+1 613 111 2222'.\n   */\n  phone?: string;\n}"
          },
          "Shop": {
            "filePath": "/api/standard/standard.ts",
            "name": "Shop",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The shop ID."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the shop."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "storefrontUrl",
                "value": "string",
                "description": "The primary storefront URL.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "myshopifyDomain",
                "value": "string",
                "description": "The shop's myshopify.com domain."
              }
            ],
            "value": "export interface Shop {\n  /**\n   * The shop ID.\n   * @example 'gid://shopify/Shop/123'\n   */\n  id: string;\n  /**\n   * The name of the shop.\n   */\n  name: string;\n  /**\n   * The primary storefront URL.\n   */\n  storefrontUrl?: string;\n  /**\n   * The shop's myshopify.com domain.\n   */\n  myshopifyDomain: string;\n}"
          },
          "Storage": {
            "filePath": "/api/standard/standard.ts",
            "name": "Storage",
            "description": "A key-value storage object for extension points.\n\nStored data is only available to this specific app\nat this specific extension point.\n\nThe storage backend is implemented with `localStorage` and\nshould persist across the buyer's checkout session.\nHowever, data persistence isn't guaranteed.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "read",
                "value": "<T = unknown>(key: string) => Promise<T>",
                "description": "Read and return a stored value by key.\n\nThe stored data is deserialized from JSON and returned as\nits original primitive.\n\nReturns `null` if no stored data exists."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "write",
                "value": "(key: string, data: any) => Promise<void>",
                "description": "Write stored data for this key.\n\nThe data must be serializable to JSON."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "delete",
                "value": "(key: string) => Promise<void>",
                "description": "Delete stored data by key."
              }
            ],
            "value": "export interface Storage {\n  /**\n   * Read and return a stored value by key.\n   *\n   * The stored data is deserialized from JSON and returned as\n   * its original primitive.\n   *\n   * Returns `null` if no stored data exists.\n   */\n  read<T = unknown>(key: string): Promise<T | null>;\n\n  /**\n   * Write stored data for this key.\n   *\n   * The data must be serializable to JSON.\n   */\n  write(key: string, data: any): Promise<void>;\n\n  /**\n   * Delete stored data by key.\n   */\n  delete(key: string): Promise<void>;\n}"
          },
          "Ui": {
            "filePath": "/api/standard/standard.ts",
            "name": "Ui",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "overlay",
                "value": "{ close(overlayId: string): void; }",
                "description": ""
              }
            ],
            "value": "export interface Ui {\n  overlay: {\n    close(overlayId: string): void;\n  };\n}"
          },
          "Version": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Version",
            "value": "string",
            "description": ""
          },
          "AllComponents": {
            "filePath": "/extension-points.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AllComponents",
            "value": "Components[keyof Components]",
            "description": ""
          },
          "Components": {
            "filePath": "/extension-points.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Components",
            "value": "typeof import('./components')",
            "description": ""
          },
          "OrderStatusApi": {
            "filePath": "/api/order-status/order-status.ts",
            "name": "OrderStatusApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "order",
                "value": "StatefulRemoteSubscribable<Order | undefined>",
                "description": "Order information that's available post-checkout."
              }
            ],
            "value": "export interface OrderStatusApi {\n  /**\n   * Order information that's available post-checkout.\n   */\n  order: StatefulRemoteSubscribable<Order | undefined>;\n}"
          },
          "Order": {
            "filePath": "/api/order-status/order-status.ts",
            "name": "Order",
            "description": "Information about an order that was placed.",
            "members": [
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "Unique identifier for the order that appears on the order."
              },
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "cancelledAt",
                "value": "string",
                "description": "If cancelled, the time at which the order was cancelled.",
                "isOptional": true
              }
            ],
            "value": "export interface Order {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/Order/1'\n   */\n  id: string;\n  /**\n   * Unique identifier for the order that appears on the order.\n   * @example '#1000'\n   */\n  name: string;\n  /**\n   * If cancelled, the time at which the order was cancelled.\n   */\n  cancelledAt?: string;\n}"
          },
          "CartLineDetailsApi": {
            "filePath": "/api/cart-line/cart-line-details.ts",
            "name": "CartLineDetailsApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/cart-line/cart-line-details.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "StatefulRemoteSubscribable<PresentmentCartLine>",
                "description": "The cart line the extension is attached to."
              }
            ],
            "value": "export interface CartLineDetailsApi {\n  /**\n   * The cart line the extension is attached to.\n   */\n  target: StatefulRemoteSubscribable<PresentmentCartLine>;\n}"
          },
          "RedeemableRenderApi": {
            "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
            "name": "RedeemableRenderApi",
            "description": "",
            "members": [
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyRedeemableChange",
                "value": "(change: RedeemableAddChange) => Promise<RedeemableChangeResult>",
                "description": "Applies a redeemable change to add a redeemable payment method."
              }
            ],
            "value": "export interface RedeemableRenderApi {\n  /**\n   * Applies a redeemable change to add a redeemable payment method.\n   */\n  applyRedeemableChange(\n    change: RedeemableChange,\n  ): Promise<RedeemableChangeResult>;\n}"
          },
          "RedeemableAddChange": {
            "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
            "name": "RedeemableAddChange",
            "description": "",
            "members": [
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"redeemableAddChange\"",
                "description": "The type of the `RedeemableChange` API."
              },
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "RedeemableAttribute[]",
                "description": "The redeemable attributes"
              }
            ],
            "value": "export interface RedeemableAddChange {\n  /**\n   * The type of the `RedeemableChange` API.\n   */\n  type: 'redeemableAddChange';\n\n  /**\n   * The redeemable attributes\n   */\n  attributes: RedeemableAttribute[];\n}"
          },
          "RedeemableAttribute": {
            "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
            "name": "RedeemableAttribute",
            "description": "A key-value pair that represents an attribute of a redeemable payment method.",
            "members": [
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": ""
              }
            ],
            "value": "export interface RedeemableAttribute {\n  key: string;\n  value: string;\n}"
          },
          "RedeemableChangeResult": {
            "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "RedeemableChangeResult",
            "value": "RedeemableChangeResultSuccess | RedeemableChangeResultError",
            "description": ""
          },
          "RedeemableChangeResultSuccess": {
            "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
            "name": "RedeemableChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the redeemable change was applied successfully."
              }
            ],
            "value": "export interface RedeemableChangeResultSuccess {\n  /**\n   * Indicates that the redeemable change was applied successfully.\n   */\n  type: 'success';\n}"
          },
          "RedeemableChangeResultError": {
            "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
            "name": "RedeemableChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the redeemable change was not applied successfully."
              },
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface RedeemableChangeResultError {\n  /**\n   * Indicates that the redeemable change was not applied successfully.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "PaymentMethodRenderApi": {
            "filePath": "/api/payment-method/render.ts",
            "name": "PaymentMethodRenderApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyPaymentMethodAttributesChange",
                "value": "(change: PaymentMethodAttributesUpdateChange) => Promise<PaymentMethodAttributesResult>",
                "description": "Sets the attributes of the related payment method."
              }
            ],
            "value": "export interface PaymentMethodRenderApi {\n  /**\n   * Sets the attributes of the related payment method.\n   */\n  applyPaymentMethodAttributesChange(\n    change: PaymentMethodAttributesChange,\n  ): Promise<PaymentMethodAttributesResult>;\n}"
          },
          "PaymentMethodAttributesUpdateChange": {
            "filePath": "/api/payment-method/render.ts",
            "name": "PaymentMethodAttributesUpdateChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updatePaymentMethodAttributes\"",
                "description": "The type of the `PaymentMethodAttributesChange` API."
              },
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "PaymentMethodAttribute[]",
                "description": "The payment method attributes"
              }
            ],
            "value": "export interface PaymentMethodAttributesUpdateChange {\n  /**\n   * The type of the `PaymentMethodAttributesChange` API.\n   */\n  type: 'updatePaymentMethodAttributes';\n\n  /**\n   * The payment method attributes\n   */\n  attributes: PaymentMethodAttribute[];\n}"
          },
          "PaymentMethodAttribute": {
            "filePath": "/api/payment-method/render.ts",
            "name": "PaymentMethodAttribute",
            "description": "A key-value pair that represents an attribute of a payment method.",
            "members": [
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number | boolean",
                "description": ""
              }
            ],
            "value": "export interface PaymentMethodAttribute {\n  key: string;\n  value: string | number | boolean;\n}"
          },
          "PaymentMethodAttributesResult": {
            "filePath": "/api/payment-method/render.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "PaymentMethodAttributesResult",
            "value": "PaymentMethodAttributesResultSuccess | PaymentMethodAttributesResultError",
            "description": ""
          },
          "PaymentMethodAttributesResultSuccess": {
            "filePath": "/api/payment-method/render.ts",
            "name": "PaymentMethodAttributesResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the payment method attributes were set successfully."
              }
            ],
            "value": "export interface PaymentMethodAttributesResultSuccess {\n  /**\n   * Indicates that the payment method attributes were set successfully.\n   */\n  type: 'success';\n}"
          },
          "PaymentMethodAttributesResultError": {
            "filePath": "/api/payment-method/render.ts",
            "name": "PaymentMethodAttributesResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the payment method attributes were not set successfully."
              },
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface PaymentMethodAttributesResultError {\n  /**\n   * Indicates that the payment method attributes were not set successfully.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "PickupLocationsApi": {
            "filePath": "/api/pickup/pickup-locations.ts",
            "name": "PickupLocationsApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/pickup/pickup-locations.ts",
                "syntaxKind": "PropertySignature",
                "name": "locationFormVisible",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "Whether the customer location input form is shown to the buyer."
              }
            ],
            "value": "export interface PickupLocationsApi {\n  /**\n   * Whether the customer location input form is shown to the buyer.\n   */\n  locationFormVisible: StatefulRemoteSubscribable<boolean>;\n}"
          },
          "ShippingMethodDetailsApi": {
            "filePath": "/api/shipping/shipping-method-details.ts",
            "name": "ShippingMethodDetailsApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/shipping/shipping-method-details.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "StatefulRemoteSubscribable<ShippingOption>",
                "description": "The shipping option the extension is attached to."
              },
              {
                "filePath": "/api/shipping/shipping-method-details.ts",
                "syntaxKind": "PropertySignature",
                "name": "targetSelected",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "Whether the shipping option the extension is attached to is currently selected in the UI."
              }
            ],
            "value": "export interface ShippingMethodDetailsApi {\n  /**\n   * The shipping option the extension is attached to.\n   */\n  target: StatefulRemoteSubscribable<ShippingOption>;\n\n  /**\n   * Whether the shipping option the extension is attached to is currently selected in the UI.\n   */\n  targetSelected: StatefulRemoteSubscribable<boolean>;\n}"
          },
          "ShippingOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "ShippingOption",
            "description": "Represents a delivery option that is a shipping option.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"shipping\" | \"local\"",
                "description": "The type of this delivery option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "carrier",
                "value": "ShippingOptionCarrier",
                "description": "Information about the carrier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "Money",
                "description": "The cost of the delivery."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "costAfterDiscounts",
                "value": "Money",
                "description": "The cost of the delivery including discounts."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "deliveryEstimate",
                "value": "DeliveryEstimate",
                "description": "Information about the estimated delivery time."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique identifier of the delivery option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the delivery option.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "description",
                "value": "string",
                "description": "The description of the delivery option.",
                "isOptional": true
              }
            ],
            "value": "export interface ShippingOption extends DeliveryOption {\n  /**\n   * The type of this delivery option.\n   */\n  type: 'shipping' | 'local';\n\n  /**\n   * Information about the carrier.\n   */\n  carrier: ShippingOptionCarrier;\n\n  /**\n   * The cost of the delivery.\n   */\n  cost: Money;\n\n  /**\n   * The cost of the delivery including discounts.\n   */\n  costAfterDiscounts: Money;\n\n  /**\n   * Information about the estimated delivery time.\n   */\n  deliveryEstimate: DeliveryEstimate;\n}"
          },
          "ShippingOptionCarrier": {
            "filePath": "/api/standard/standard.ts",
            "name": "ShippingOptionCarrier",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the carrier.",
                "isOptional": true
              }
            ],
            "value": "export interface ShippingOptionCarrier {\n  /**\n   * The name of the carrier.\n   */\n  name?: string;\n}"
          },
          "DeliveryEstimate": {
            "filePath": "/api/standard/standard.ts",
            "name": "DeliveryEstimate",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "timeInTransit",
                "value": "NumberRange",
                "description": "The estimated time in transit for the delivery in seconds.",
                "isOptional": true
              }
            ],
            "value": "export interface DeliveryEstimate {\n  /**\n   * The estimated time in transit for the delivery in seconds.\n   */\n  timeInTransit?: NumberRange;\n}"
          },
          "NumberRange": {
            "filePath": "/api/standard/standard.ts",
            "name": "NumberRange",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lower",
                "value": "number",
                "description": "The lower bound of the number range.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "upper",
                "value": "number",
                "description": "The upper bound of the number range.",
                "isOptional": true
              }
            ],
            "value": "export interface NumberRange {\n  /**\n   * The lower bound of the number range.\n   */\n  lower?: number;\n\n  /**\n   * The upper bound of the number range.\n   */\n  upper?: number;\n}"
          },
          "PickupPointsApi": {
            "filePath": "/api/pickup/pickup-points.ts",
            "name": "PickupPointsApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/pickup/pickup-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "locationFormVisible",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "Whether the customer location input form is shown to the buyer."
              }
            ],
            "value": "export interface PickupPointsApi {\n  /**\n   * Whether the customer location input form is shown to the buyer.\n   */\n  locationFormVisible: StatefulRemoteSubscribable<boolean>;\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "",
      "codeblock": {
        "title": "",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  render,\n  Banner,\n  useApi,\n} from '@shopify/checkout-ui-extensions-react';\n\n// You can support multiple static extension points\nrender('Checkout::Actions::RenderBefore', () => (\n  <Extension />\n));\nrender(\n  'Checkout::DeliveryAddress::RenderBefore',\n  () => <Extension />,\n);\nrender(\n  'Checkout::ShippingMethods::RenderAfter',\n  () => <Extension />,\n);\n\n// You can also support a dynamic extension point which can be moved by the merchant\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const {extensionPoint} = useApi();\n  return (\n    <Banner>\n      This extension is rendering in the{' '}\n      {extensionPoint} extension point.\n    </Banner>\n  );\n}\n",
            "language": "jsx",
            "title": "React"
          },
          {
            "code": "import {\n  extend,\n  Banner,\n} from '@shopify/checkout-ui-extensions';\n\n// You can support multiple static extension points\nextend(\n  'Checkout::Actions::RenderBefore',\n  extension,\n);\nextend(\n  'Checkout::DeliveryAddress::RenderBefore',\n  extension,\n);\nextend(\n  'Checkout::ShippingMethods::RenderAfter',\n  extension,\n);\n\n// You can also support a dynamic extension point which can be moved by the merchant\nextend('Checkout::Dynamic::Render', extension);\n\nfunction extension(root, {extensionPoint}) {\n  root.appendChild(\n    root.createComponent(Banner, {\n      title: `This extension is rendering in the ${extensionPoint} extension point.`,\n    }),\n  );\n}\n",
            "language": "js",
            "title": "JavaScript"
          },
          {
            "code": "type = \"checkout_ui_extension\"\nname = \"my-checkout-extension\"\n\nextension_points = [\n  'Checkout::Actions::RenderBefore',\n  'Checkout::DeliveryAddress::RenderBefore',\n  'Checkout::ShippingMethods::RenderAfter',\n  'Checkout::Dynamic::Render'\n]\n",
            "language": "toml",
            "title": "shopify.ui.extension.toml"
          }
        ]
      }
    },
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      }
    ]
  },
  {
    "name": "OrderStatusApi",
    "overviewPreviewDescription": "The API provided to extension points on the order status page.",
    "description": "\nThis API object is provided to extensions registered for the extension points that appear exclusively on the order status page.\n\nIt extends the [StandardApi](/docs/api/checkout-ui-extensions/apis/standardapi) and provides access to an order object.\n",
    "isVisualComponent": false,
    "category": "APIs",
    "definitions": [
      {
        "title": "Properties",
        "description": "See the [StandardApi examples](/docs/api/checkout-ui-extensions/apis/standardapi#examples) for more information on how to use the API.",
        "type": "OrderStatusApi",
        "typeDefinitions": {
          "OrderStatusApi": {
            "filePath": "/api/order-status/order-status.ts",
            "name": "OrderStatusApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "order",
                "value": "StatefulRemoteSubscribable<Order | undefined>",
                "description": "Order information that's available post-checkout."
              }
            ],
            "value": "export interface OrderStatusApi {\n  /**\n   * Order information that's available post-checkout.\n   */\n  order: StatefulRemoteSubscribable<Order | undefined>;\n}"
          },
          "Order": {
            "filePath": "/api/order-status/order-status.ts",
            "name": "Order",
            "description": "Information about an order that was placed.",
            "members": [
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "Unique identifier for the order that appears on the order."
              },
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "cancelledAt",
                "value": "string",
                "description": "If cancelled, the time at which the order was cancelled.",
                "isOptional": true
              }
            ],
            "value": "export interface Order {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/Order/1'\n   */\n  id: string;\n  /**\n   * Unique identifier for the order that appears on the order.\n   * @example '#1000'\n   */\n  name: string;\n  /**\n   * If cancelled, the time at which the order was cancelled.\n   */\n  cancelledAt?: string;\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "",
      "codeblock": {
        "title": "",
        "tabs": [
          {
            "code": "import {\n  render,\n  Banner,\n  useOrder,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender(\n  'Checkout::OrderStatus::CustomerInformation::RenderAfter',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const order = useOrder();\n\n  if (order) {\n    return (\n      <Banner>\n        Please include your order ID ({order.id})\n        in support requests\n      </Banner>\n    );\n  }\n\n  return null;\n}\n",
            "language": "jsx",
            "title": "React"
          },
          {
            "code": "import {\n  Banner,\n  extend,\n} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::OrderStatus::CustomerInformation::RenderAfter',\n  (root, {order}) => {\n    let bannerShown = false;\n\n    order.subscribe((order) => {\n      if (order && !bannerShown) {\n        root.appendChild(\n          root.createComponent(\n            Banner,\n            undefined,\n            `Please include your order ID (${order.id}) in support requests`,\n          ),\n        );\n\n        bannerShown = true;\n      }\n    });\n  },\n);\n",
            "language": "js",
            "title": "JavaScript"
          }
        ]
      }
    },
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "PickupLocationsApi",
    "overviewPreviewDescription": "The API provided to extensions rendering before and after local pickup locations.",
    "description": "\nThis API object is provided to extensions registered for the `Checkout::PickupLocations::RenderBefore` or `Checkout::PickupLocations::RenderAfter` extension points.\n\n\nIt extends the [StandardApi](/docs/api/checkout-ui-extensions/apis/standardapi) and provides a [locationFormVisible](#properties-propertydetail-locationformvisible) boolean to indicate whether the customer location input form is currently rendered and shown to the buyer.\n",
    "requires": "access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) for some properties.",
    "isVisualComponent": false,
    "category": "APIs",
    "definitions": [
      {
        "title": "Properties",
        "description": "See the [StandardApi examples](/docs/api/checkout-ui-extensions/apis/standardapi#examples) for more information on how to use the API.",
        "type": "PickupLocationsApi",
        "typeDefinitions": {
          "PickupLocationsApi": {
            "filePath": "/api/pickup/pickup-locations.ts",
            "name": "PickupLocationsApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/pickup/pickup-locations.ts",
                "syntaxKind": "PropertySignature",
                "name": "locationFormVisible",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "Whether the customer location input form is shown to the buyer."
              }
            ],
            "value": "export interface PickupLocationsApi {\n  /**\n   * Whether the customer location input form is shown to the buyer.\n   */\n  locationFormVisible: StatefulRemoteSubscribable<boolean>;\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "",
      "codeblock": {
        "title": "",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  render,\n  useExtensionApi,\n  useSubscription,\n  Text,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender(\n  'Checkout::PickupLocations::RenderBefore',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const {locationFormVisible} = useExtensionApi();\n  const locationFormShown = useSubscription(\n    locationFormVisible,\n  );\n\n  if (locationFormShown) {\n    return (\n      <Text>\n        The customer is being asked to provide\n        their location.\n      </Text>\n    );\n  } else {\n    return (\n      <Text>\n        Pickup locations are being shown.\n      </Text>\n    );\n  }\n}\n",
            "language": "jsx",
            "title": "React"
          },
          {
            "code": "import {extend} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::PickupLocations::RenderBefore',\n  (root, {locationFormVisible}) => {\n    const content = root.createText(\n      getTextContent(locationFormVisible.current),\n    );\n    root.appendChild(content);\n\n    locationFormVisible.subscribe(\n      (updatedLocationFormVisible) => {\n        content.updateText(\n          getTextContent(\n            updatedLocationFormVisible,\n          ),\n        );\n      },\n    );\n\n    function getTextContent(locationFormVisible) {\n      if (locationFormVisible) {\n        return 'The customer is being asked to provide their location.';\n      } else {\n        return 'Pickup locations are being shown.';\n      }\n    }\n  },\n);\n",
            "language": "js",
            "title": "JavaScript"
          }
        ]
      }
    },
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "PickupPointsApi",
    "overviewPreviewDescription": "The API provided to extensions rendering before and after pickup points.",
    "description": "\nThis API object is provided to extensions registered for the `Checkout::PickupPoints::RenderBefore` or `Checkout::PickupPoints::RenderAfter` extension points.\n\nIt extends the [StandardApi](/docs/api/checkout-ui-extensions/apis/standardapi) and provides a [locationFormVisible](#properties-propertydetail-locationformvisible) boolean to indicate whether the customer location input form is currently rendered and shown to the buyer.\n",
    "requires": "access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) for some properties.",
    "isVisualComponent": false,
    "category": "APIs",
    "definitions": [
      {
        "title": "Properties",
        "description": "See the [StandardApi examples](/docs/api/checkout-ui-extensions/apis/standardapi#examples) for more information on how to use the API.",
        "type": "PickupPointsApi",
        "typeDefinitions": {
          "PickupPointsApi": {
            "filePath": "/api/pickup/pickup-points.ts",
            "name": "PickupPointsApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/pickup/pickup-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "locationFormVisible",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "Whether the customer location input form is shown to the buyer."
              }
            ],
            "value": "export interface PickupPointsApi {\n  /**\n   * Whether the customer location input form is shown to the buyer.\n   */\n  locationFormVisible: StatefulRemoteSubscribable<boolean>;\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "",
      "codeblock": {
        "title": "",
        "tabs": [
          {
            "code": "import React, {useState} from 'react';\nimport {\n  render,\n  useExtensionApi,\n  useSubscription,\n  Text,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender(\n  'Checkout::PickupPoints::RenderBefore',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const {locationFormVisible} = useExtensionApi();\n\n  const locationFormShown = useSubscription(\n    locationFormVisible,\n  );\n\n  if (locationFormShown) {\n    return (\n      <Text>\n        The customer is being asked to provide\n        their location.\n      </Text>\n    );\n  } else {\n    return (\n      <Text>Pickup points are being shown.</Text>\n    );\n  }\n}\n",
            "language": "jsx",
            "title": "React"
          },
          {
            "code": "import {extend} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::PickupPoints::RenderBefore',\n  (root, {locationFormVisible}) => {\n    const content = root.createText(\n      getTextContent(locationFormVisible.current),\n    );\n    root.appendChild(content);\n\n    locationFormVisible.subscribe(\n      (updatedLocationFormVisible) => {\n        content.updateText(\n          getTextContent(\n            updatedLocationFormVisible,\n          ),\n        );\n      },\n    );\n\n    function getTextContent(locationFormVisible) {\n      if (locationFormVisible) {\n        return 'The customer is being asked to provide their location.';\n      } else {\n        return 'Pickup points are being shown.';\n      }\n    }\n  },\n);\n",
            "language": "js",
            "title": "JavaScript"
          }
        ]
      }
    },
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "ShippingMethodDetailsApi",
    "overviewPreviewDescription": "The API provided to extensions rendering after shipping method details and the expanded section of a selected shipping method.",
    "description": "\nThis API object is provided to extensions registered for the `Checkout::ShippingMethodDetails::RenderAfter` or `Checkout::ShippingMethodDetails::RenderExpanded` extension points.\n\nIt extends the [StandardApi](/docs/api/checkout-ui-extensions/apis/standardapi), provides a [target](#properties-propertydetail-target) object with information about the shipping method the extension is attached to, and a [targetSelected](#properties-propertydetail-targetselected) boolean indicating whether the shipping method is currently selected in the UI.\n",
    "requires": "access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) for some properties.",
    "isVisualComponent": false,
    "category": "APIs",
    "definitions": [
      {
        "title": "Properties",
        "description": "See the [StandardApi examples](/docs/api/checkout-ui-extensions/apis/standardapi#examples) for more information on how to use the API.",
        "type": "ShippingMethodDetailsApi",
        "typeDefinitions": {
          "ShippingMethodDetailsApi": {
            "filePath": "/api/shipping/shipping-method-details.ts",
            "name": "ShippingMethodDetailsApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/shipping/shipping-method-details.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "StatefulRemoteSubscribable<ShippingOption>",
                "description": "The shipping option the extension is attached to."
              },
              {
                "filePath": "/api/shipping/shipping-method-details.ts",
                "syntaxKind": "PropertySignature",
                "name": "targetSelected",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "Whether the shipping option the extension is attached to is currently selected in the UI."
              }
            ],
            "value": "export interface ShippingMethodDetailsApi {\n  /**\n   * The shipping option the extension is attached to.\n   */\n  target: StatefulRemoteSubscribable<ShippingOption>;\n\n  /**\n   * Whether the shipping option the extension is attached to is currently selected in the UI.\n   */\n  targetSelected: StatefulRemoteSubscribable<boolean>;\n}"
          },
          "ShippingOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "ShippingOption",
            "description": "Represents a delivery option that is a shipping option.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"shipping\" | \"local\"",
                "description": "The type of this delivery option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "carrier",
                "value": "ShippingOptionCarrier",
                "description": "Information about the carrier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "Money",
                "description": "The cost of the delivery."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "costAfterDiscounts",
                "value": "Money",
                "description": "The cost of the delivery including discounts."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "deliveryEstimate",
                "value": "DeliveryEstimate",
                "description": "Information about the estimated delivery time."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique identifier of the delivery option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the delivery option.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "description",
                "value": "string",
                "description": "The description of the delivery option.",
                "isOptional": true
              }
            ],
            "value": "export interface ShippingOption extends DeliveryOption {\n  /**\n   * The type of this delivery option.\n   */\n  type: 'shipping' | 'local';\n\n  /**\n   * Information about the carrier.\n   */\n  carrier: ShippingOptionCarrier;\n\n  /**\n   * The cost of the delivery.\n   */\n  cost: Money;\n\n  /**\n   * The cost of the delivery including discounts.\n   */\n  costAfterDiscounts: Money;\n\n  /**\n   * Information about the estimated delivery time.\n   */\n  deliveryEstimate: DeliveryEstimate;\n}"
          },
          "ShippingOptionCarrier": {
            "filePath": "/api/standard/standard.ts",
            "name": "ShippingOptionCarrier",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the carrier.",
                "isOptional": true
              }
            ],
            "value": "export interface ShippingOptionCarrier {\n  /**\n   * The name of the carrier.\n   */\n  name?: string;\n}"
          },
          "Money": {
            "filePath": "/api/standard/standard.ts",
            "name": "Money",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": "The price amount."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currencyCode",
                "value": "CurrencyCode",
                "description": "The ISO 4217 format for the currency."
              }
            ],
            "value": "export interface Money {\n  /**\n   * The price amount.\n   */\n  amount: number;\n  /**\n   * The ISO 4217 format for the currency.\n   * @example 'CAD' for Canadian dollar\n   */\n  currencyCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          },
          "DeliveryEstimate": {
            "filePath": "/api/standard/standard.ts",
            "name": "DeliveryEstimate",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "timeInTransit",
                "value": "NumberRange",
                "description": "The estimated time in transit for the delivery in seconds.",
                "isOptional": true
              }
            ],
            "value": "export interface DeliveryEstimate {\n  /**\n   * The estimated time in transit for the delivery in seconds.\n   */\n  timeInTransit?: NumberRange;\n}"
          },
          "NumberRange": {
            "filePath": "/api/standard/standard.ts",
            "name": "NumberRange",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lower",
                "value": "number",
                "description": "The lower bound of the number range.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "upper",
                "value": "number",
                "description": "The upper bound of the number range.",
                "isOptional": true
              }
            ],
            "value": "export interface NumberRange {\n  /**\n   * The lower bound of the number range.\n   */\n  lower?: number;\n\n  /**\n   * The upper bound of the number range.\n   */\n  upper?: number;\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "",
      "codeblock": {
        "title": "",
        "tabs": [
          {
            "code": "import React, {useState} from 'react';\nimport {\n  render,\n  Text,\n  useExtensionApi,\n  useSubscription,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender(\n  'Checkout::ShippingMethodDetails::RenderAfter',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const {target, targetSelected} =\n    useExtensionApi();\n  const {title} = useSubscription(target);\n\n  const selected = useSubscription(\n    targetSelected,\n  );\n\n  return (\n    <Text>\n      Shipping method: {title} is{' '}\n      {selected ? '' : 'not'} selected.\n    </Text>\n  );\n}\n",
            "language": "jsx",
            "title": "React"
          },
          {
            "code": "import {extend} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::ShippingMethodDetails::RenderAfter',\n  (root, {target, targetSelected}) => {\n    const titleText = root.createText(\n      `Shipping method title: ${target.current.title}`,\n    );\n    root.appendChild(titleText);\n\n    target.subscribe((updatedTarget) => {\n      titleText.updateText(\n        `Shipping method title: ${updatedTarget.title}`,\n      );\n    });\n\n    const selectedText = root.createText(\n      getSelectedText(targetSelected),\n    );\n    root.appendChild(selectedText);\n\n    targetSelected.subscribe(\n      (updatedSelected) => {\n        selectedText.updateText(\n          getSelectedText(updatedSelected),\n        );\n      },\n    );\n\n    function getSelectedText(selected) {\n      return selected\n        ? 'Selected'\n        : 'Not selected';\n    }\n  },\n);\n",
            "language": "js",
            "title": "JavaScript"
          }
        ]
      }
    },
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "StandardApi",
    "overviewPreviewDescription": "The base API for all extension points.",
    "description": "This base API object is provided to all extension points.",
    "requires": "access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) for some properties.",
    "isVisualComponent": false,
    "category": "APIs",
    "definitions": [
      {
        "title": "Properties",
        "description": "See [examples](#examples) for more information on how to use the API.",
        "type": "StandardApi",
        "typeDefinitions": {
          "StandardApi": {
            "filePath": "/api/standard/standard.ts",
            "name": "StandardApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "analytics",
                "value": "Analytics",
                "description": "Methods for interacting with [Web Pixels](/docs/apps/marketing), such as emitting an event."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "appliedGiftCards",
                "value": "StatefulRemoteSubscribable<AppliedGiftCard[]>",
                "description": "Gift Cards that have been applied to the checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "appMetafields",
                "value": "StatefulRemoteSubscribable<AppMetafieldEntry[]>",
                "description": "The metafields requested in the\n[`shopify.ui.extension.toml`](/docs/api/checkout-ui-extensions/configuration)\nfile. These metafields are updated when there's a change in the merchandise items\nbeing purchased by the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "StatefulRemoteSubscribable<Attribute[] | undefined>",
                "description": "Custom attributes left by the customer to the merchant, either in their cart or during checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "availablePaymentOptions",
                "value": "StatefulRemoteSubscribable<PaymentOption[]>",
                "description": "All available payment options."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "buyerIdentity",
                "value": "BuyerIdentity",
                "description": "Information about the buyer that is interacting with the checkout.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "buyerJourney",
                "value": "BuyerJourney",
                "description": "Provides details on the buyer's progression through the checkout.\n\nSee [buyer journey](/docs/api/checkout-ui-extensions/apis/standardapi#example-buyer-journey)\nexamples for more information."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartCost",
                "description": "Details on the costs the buyer will pay for this checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "deliveryGroups",
                "value": "StatefulRemoteSubscribable<DeliveryGroup[]>",
                "description": "A list of delivery groups containing information about the delivery of the items the customer intends to purchase."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountCodes",
                "value": "StatefulRemoteSubscribable<CartDiscountCode[]>",
                "description": "A list of discount codes currently applied to the checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountAllocations",
                "value": "StatefulRemoteSubscribable<CartDiscountAllocation[]>",
                "description": "Discounts that have been applied to the entire cart."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "extension",
                "value": "Extension",
                "description": "Meta information about the extension."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "extensionPoint",
                "value": "ExtensionPoint",
                "description": "The identifier of the running extension point."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "i18n",
                "value": "I18n",
                "description": "Utilities for translating content and formatting values according to the current\n[`localization`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-localization)\nof the checkout.\n\nSee [localization examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-localization)\nfor more information."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lines",
                "value": "StatefulRemoteSubscribable<CartLine[]>",
                "description": "A list of lines containing information about the items the customer intends to purchase."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "localization",
                "value": "Localization",
                "description": "Details about the location, language, and currency of the buyer. For utilities to easily\nformat and translate content based on these details, you can use the\n[`i18n`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-i18n)\nobject instead."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "metafields",
                "value": "StatefulRemoteSubscribable<Metafield[]>",
                "description": "The metafields that apply to the current checkout. The actual resource\non which these metafields exist depends on the source of the checkout:\n\n- If the source is an order, then the metafields are on the order.\n- If the source is a draft order, then the initial value of metafields are\n  from the draft order, and any new metafields you write are applied\n  to the order created by this checkout.\n- For all other sources, the metafields are only stored locally on the\n  client creating the checkout, and are applied to the order that\n  results from checkout.\n\nThese metafields are shared by all extensions running on checkout, and\npersist for as long as the customer is working on this checkout.\n\nOnce the order is created, you can query these metafields using the\n[GraphQL Admin API](/docs/admin-api/graphql/reference/orders/order#metafield-2021-01)"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "note",
                "value": "StatefulRemoteSubscribable<string | undefined>",
                "description": "A note left by the customer to the merchant, either in their cart or during checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "presentmentLines",
                "value": "StatefulRemoteSubscribable<PresentmentCartLine[]>",
                "description": "A list of the line items displayed in the checkout. These may be the same as lines, or may be a subset."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "query",
                "value": "<Data = unknown, Variables = { [key: string]: unknown; }>(query: string, options?: { variables?: Variables; version?: StorefrontApiVersion; }) => Promise<{ data?: Data; errors?: GraphQLError[]; }>",
                "description": "Used to query the Storefront GraphQL API with a prefetched token.\n\nSee [storefront api access examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-storefront-api-access) for more information."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "selectedPaymentOptions",
                "value": "StatefulRemoteSubscribable<SelectedPaymentOption[]>",
                "description": "Payment options selected by the buyer."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "sessionToken",
                "value": "SessionToken",
                "description": "Provides access to session tokens, which can be used to verify token claims on your app's server.\n\nSee [session token examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-session-token) for more information."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "settings",
                "value": "StatefulRemoteSubscribable<ExtensionSettings>",
                "description": "The settings matching the settings definition written in the\n[`shopify.ui.extension.toml`](/docs/api/checkout-ui-extensions/configuration) file.\n\n See [settings examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-settings) for more information.\n\n> Note: When an extension is being installed in the editor, the settings will be empty until\na merchant sets a value. In that case, this object will be updated in real time as a merchant fills in the settings."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "shippingAddress",
                "value": "StatefulRemoteSubscribable<MailingAddress | undefined>",
                "description": "The proposed buyer shipping address. During the information step, the address\nupdates when the field is committed (on change) rather than every keystroke.\nAn address value is only present if delivery is required. Otherwise, the\nsubscribable value is undefined.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "shop",
                "value": "Shop",
                "description": "Shop where the checkout is taking place."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "storage",
                "value": "Storage",
                "description": "Key-value storage for the extension point."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "ui",
                "value": "Ui",
                "description": "Methods to interact with the extension's UI."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "version",
                "value": "Version",
                "description": "The renderer version being used for the extension."
              }
            ],
            "value": "export interface StandardApi<\n  ExtensionPoint extends import('../../extension-points').ExtensionPoint,\n> {\n  /**\n   * Methods for interacting with [Web Pixels](/docs/apps/marketing), such as emitting an event.\n   */\n  analytics: Analytics;\n\n  /**\n   * Gift Cards that have been applied to the checkout.\n   */\n  appliedGiftCards: StatefulRemoteSubscribable<AppliedGiftCard[]>;\n\n  /**\n   * The metafields requested in the\n   * [`shopify.ui.extension.toml`](/docs/api/checkout-ui-extensions/configuration)\n   * file. These metafields are updated when there's a change in the merchandise items\n   * being purchased by the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  appMetafields: StatefulRemoteSubscribable<AppMetafieldEntry[]>;\n\n  /**\n   * Custom attributes left by the customer to the merchant, either in their cart or during checkout.\n   */\n  attributes: StatefulRemoteSubscribable<Attribute[] | undefined>;\n\n  /**\n   * All available payment options.\n   */\n  availablePaymentOptions: StatefulRemoteSubscribable<PaymentOption[]>;\n\n  /**\n   * Information about the buyer that is interacting with the checkout.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  buyerIdentity?: BuyerIdentity;\n\n  /**\n   * Provides details on the buyer's progression through the checkout.\n   *\n   * See [buyer journey](/docs/api/checkout-ui-extensions/apis/standardapi#example-buyer-journey)\n   * examples for more information.\n   */\n  buyerJourney: BuyerJourney;\n\n  /**\n   * Details on the costs the buyer will pay for this checkout.\n   */\n  cost: CartCost;\n\n  /**\n   * A list of delivery groups containing information about the delivery of the items the customer intends to purchase.\n   */\n  deliveryGroups: StatefulRemoteSubscribable<DeliveryGroup[]>;\n\n  /**\n   * A list of discount codes currently applied to the checkout.\n   */\n  discountCodes: StatefulRemoteSubscribable<CartDiscountCode[]>;\n\n  /**\n   * Discounts that have been applied to the entire cart.\n   */\n  discountAllocations: StatefulRemoteSubscribable<CartDiscountAllocation[]>;\n\n  /**\n   * Meta information about the extension.\n   */\n  extension: Extension;\n\n  /**\n   * The identifier of the running extension point.\n   * @example 'Checkout::PostPurchase::Render'\n   */\n  extensionPoint: ExtensionPoint;\n\n  /**\n   * Utilities for translating content and formatting values according to the current\n   * [`localization`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-localization)\n   * of the checkout.\n   *\n   * See [localization examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-localization)\n   * for more information.\n   */\n  i18n: I18n;\n\n  /**\n   * A list of lines containing information about the items the customer intends to purchase.\n   */\n  lines: StatefulRemoteSubscribable<CartLine[]>;\n\n  /**\n   * Details about the location, language, and currency of the buyer. For utilities to easily\n   * format and translate content based on these details, you can use the\n   * [`i18n`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-i18n)\n   * object instead.\n   */\n  localization: Localization;\n\n  /**\n   * The metafields that apply to the current checkout. The actual resource\n   * on which these metafields exist depends on the source of the checkout:\n   *\n   * - If the source is an order, then the metafields are on the order.\n   * - If the source is a draft order, then the initial value of metafields are\n   *   from the draft order, and any new metafields you write are applied\n   *   to the order created by this checkout.\n   * - For all other sources, the metafields are only stored locally on the\n   *   client creating the checkout, and are applied to the order that\n   *   results from checkout.\n   *\n   * These metafields are shared by all extensions running on checkout, and\n   * persist for as long as the customer is working on this checkout.\n   *\n   * Once the order is created, you can query these metafields using the\n   * [GraphQL Admin API](/docs/admin-api/graphql/reference/orders/order#metafield-2021-01)\n   */\n  metafields: StatefulRemoteSubscribable<Metafield[]>;\n\n  /**\n   * A note left by the customer to the merchant, either in their cart or during checkout.\n   */\n  note: StatefulRemoteSubscribable<string | undefined>;\n\n  /**\n   * A list of the line items displayed in the checkout. These may be the same as lines, or may be a subset.\n   */\n  presentmentLines: StatefulRemoteSubscribable<PresentmentCartLine[]>;\n\n  /**\n   * Used to query the Storefront GraphQL API with a prefetched token.\n   *\n   * See [storefront api access examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-storefront-api-access) for more information.\n   */\n  query: <Data = unknown, Variables = {[key: string]: unknown}>(\n    query: string,\n    options?: {variables?: Variables; version?: StorefrontApiVersion},\n  ) => Promise<{data?: Data; errors?: GraphQLError[]}>;\n\n  /**\n   * Payment options selected by the buyer.\n   */\n  selectedPaymentOptions: StatefulRemoteSubscribable<SelectedPaymentOption[]>;\n\n  /**\n   * Provides access to session tokens, which can be used to verify token claims on your app's server.\n   *\n   * See [session token examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-session-token) for more information.\n   */\n  sessionToken: SessionToken;\n\n  /**\n   * The settings matching the settings definition written in the\n   * [`shopify.ui.extension.toml`](/docs/api/checkout-ui-extensions/configuration) file.\n   *\n   *  See [settings examples](/docs/api/checkout-ui-extensions/apis/standardapi#example-settings) for more information.\n   *\n   * > Note: When an extension is being installed in the editor, the settings will be empty until\n   * a merchant sets a value. In that case, this object will be updated in real time as a merchant fills in the settings.\n   */\n  settings: StatefulRemoteSubscribable<ExtensionSettings>;\n\n  /**\n   * The proposed buyer shipping address. During the information step, the address\n   * updates when the field is committed (on change) rather than every keystroke.\n   * An address value is only present if delivery is required. Otherwise, the\n   * subscribable value is undefined.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  shippingAddress?: StatefulRemoteSubscribable<MailingAddress | undefined>;\n\n  /** Shop where the checkout is taking place. */\n  shop: Shop;\n\n  /**\n   * Key-value storage for the extension point.\n   */\n  storage: Storage;\n\n  /**\n   * Methods to interact with the extension's UI.\n   */\n  ui: Ui;\n\n  /**\n   * The renderer version being used for the extension.\n   *\n   * @example 'unstable'\n   */\n  version: Version;\n}"
          },
          "Analytics": {
            "filePath": "/api/standard/standard.ts",
            "name": "Analytics",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "publish",
                "value": "(name: string, data: { [key: string]: unknown; }) => Promise<boolean>",
                "description": "Publish method to emit analytics events to [Web Pixels](/docs/apps/marketing)."
              }
            ],
            "value": "export interface Analytics {\n  /**\n   * Publish method to emit analytics events to [Web Pixels](/docs/apps/marketing).\n   */\n  publish(name: string, data: {[key: string]: unknown}): Promise<boolean>;\n}"
          },
          "AppliedGiftCard": {
            "filePath": "/api/standard/standard.ts",
            "name": "AppliedGiftCard",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lastCharacters",
                "value": "string",
                "description": "The last four characters of the applied gift card's code."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amountUsed",
                "value": "Money",
                "description": "The amount of the applied gift card that will be used when the checkout is completed."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "balance",
                "value": "Money",
                "description": "The current balance of the applied gift card prior to checkout completion."
              }
            ],
            "value": "export interface AppliedGiftCard {\n  /**\n   * The last four characters of the applied gift card's code.\n   */\n  lastCharacters: string;\n\n  /**\n   * The amount of the applied gift card that will be used when the checkout is completed.\n   */\n  amountUsed: Money;\n\n  /**\n   * The current balance of the applied gift card prior to checkout completion.\n   */\n  balance: Money;\n}"
          },
          "Money": {
            "filePath": "/api/standard/standard.ts",
            "name": "Money",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": "The price amount."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currencyCode",
                "value": "CurrencyCode",
                "description": "The ISO 4217 format for the currency."
              }
            ],
            "value": "export interface Money {\n  /**\n   * The price amount.\n   */\n  amount: number;\n  /**\n   * The ISO 4217 format for the currency.\n   * @example 'CAD' for Canadian dollar\n   */\n  currencyCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          },
          "AppMetafieldEntry": {
            "filePath": "/api/standard/standard.ts",
            "name": "AppMetafieldEntry",
            "description": "A metafield associated with the shop or a resource on the checkout.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "AppMetafieldEntryTarget",
                "description": "The target that is associated to the metadata.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) when the type is `customer`."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "metafield",
                "value": "AppMetafield",
                "description": "The metadata information."
              }
            ],
            "value": "export interface AppMetafieldEntry {\n  /**\n   * The target that is associated to the metadata.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) when the type is `customer`.\n   */\n  target: AppMetafieldEntryTarget;\n\n  /** The metadata information. */\n  metafield: AppMetafield;\n}"
          },
          "AppMetafieldEntryTarget": {
            "filePath": "/api/standard/standard.ts",
            "name": "AppMetafieldEntryTarget",
            "description": "The metafield owner.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"customer\" | \"product\" | \"shop\" | \"variant\"",
                "description": "The type of the metafield owner.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) when the type is `customer`."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The numeric owner ID that is associated with the metafield."
              }
            ],
            "value": "export interface AppMetafieldEntryTarget {\n  /**\n   * The type of the metafield owner.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) when the type is `customer`.\n   */\n  type: 'customer' | 'product' | 'shop' | 'variant';\n\n  /** The numeric owner ID that is associated with the metafield. */\n  id: string;\n}"
          },
          "AppMetafield": {
            "filePath": "/api/standard/standard.ts",
            "name": "AppMetafield",
            "description": "Represents a custom metadata attached to a resource.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The key name of a metafield."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "The namespace for a metafield."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number | boolean",
                "description": "The value of a metafield."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"boolean\" | \"integer\" | \"json_string\" | \"float\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface AppMetafield {\n  /** The key name of a metafield. */\n  key: string;\n\n  /** The namespace for a metafield. */\n  namespace: string;\n\n  /** The value of a metafield. */\n  value: string | number | boolean;\n\n  /** The metafield’s information type. */\n  valueType: 'boolean' | 'float' | 'integer' | 'json_string' | 'string';\n}"
          },
          "Attribute": {
            "filePath": "/api/shared.ts",
            "name": "Attribute",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The key for the attribute."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value for the attribute."
              }
            ],
            "value": "export interface Attribute {\n  /**\n   * The key for the attribute.\n   */\n  key: string;\n\n  /**\n   * The value for the attribute.\n   */\n  value: string;\n}"
          },
          "PaymentOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "PaymentOption",
            "description": "A payment option presented to the buyer.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"creditCard\" | \"deferred\" | \"local\" | \"manualPayment\" | \"offsite\" | \"other\" | \"paymentOnDelivery\" | \"redeemable\" | \"wallet\" | \"customOnsite\"",
                "description": "The type of the payment option.\n\nShops can be configured to support many different payment options. Some options are only available to buyers in specific regions.\n\n| Type  | Description  |\n|---|---|\n| `creditCard`  |  A vaulted or manually entered credit card.  |\n| `deferred`  |  A [deferred payment](https://help.shopify.com/en/manual/orders/deferred-payments), such as invoicing the buyer and collecting payment at a later time.  |\n| `local`  |  A [local payment option](https://help.shopify.com/en/manual/payments/shopify-payments/local-payment-methods) specific to the current region or market  |\n| `manualPayment`  |  A manual payment option such as an in-person retail transaction.  |\n| `offsite`  |  A payment processed outside of Shopify's checkout, excluding integrated wallets.  |\n| `other`  |  Another type of payment not defined here.  |\n| `paymentOnDelivery`  |  A payment that will be collected on delivery.  |\n| `redeemable`  |  A redeemable payment option such as a gift card or store credit.  |\n| `wallet`  |  An integrated wallet such as PayPal, Google Pay, Apple Pay, etc.  |\n| `customOnsite` | A custom payment option that is processed through a checkout extension with a payments app. |"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique handle for the payment option.\n\nThis is not a globally unique identifier. It may be an identifier specific to the given checkout session or the current shop."
              }
            ],
            "value": "export interface PaymentOption {\n  /**\n   * The type of the payment option.\n   *\n   * Shops can be configured to support many different payment options. Some options are only available to buyers in specific regions.\n   *\n   * | Type  | Description  |\n   * |---|---|\n   * | `creditCard`  |  A vaulted or manually entered credit card.  |\n   * | `deferred`  |  A [deferred payment](https://help.shopify.com/en/manual/orders/deferred-payments), such as invoicing the buyer and collecting payment at a later time.  |\n   * | `local`  |  A [local payment option](https://help.shopify.com/en/manual/payments/shopify-payments/local-payment-methods) specific to the current region or market  |\n   * | `manualPayment`  |  A manual payment option such as an in-person retail transaction.  |\n   * | `offsite`  |  A payment processed outside of Shopify's checkout, excluding integrated wallets.  |\n   * | `other`  |  Another type of payment not defined here.  |\n   * | `paymentOnDelivery`  |  A payment that will be collected on delivery.  |\n   * | `redeemable`  |  A redeemable payment option such as a gift card or store credit.  |\n   * | `wallet`  |  An integrated wallet such as PayPal, Google Pay, Apple Pay, etc.  |\n   * | `customOnsite` | A custom payment option that is processed through a checkout extension with a payments app. |\n   */\n  type:\n    | 'creditCard'\n    | 'deferred'\n    | 'local'\n    | 'manualPayment'\n    | 'offsite'\n    | 'other'\n    | 'paymentOnDelivery'\n    | 'redeemable'\n    | 'wallet'\n    | 'customOnsite';\n\n  /**\n   * The unique handle for the payment option.\n   *\n   * This is not a globally unique identifier. It may be an identifier specific to the given checkout session or the current shop.\n   */\n  handle: string;\n}"
          },
          "BuyerIdentity": {
            "filePath": "/api/standard/standard.ts",
            "name": "BuyerIdentity",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "customer",
                "value": "StatefulRemoteSubscribable<Customer | undefined>",
                "description": "The buyer's customer account. The value is undefined if the buyer isn’t a\nknown customer for this shop or if they haven't logged in yet.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "email",
                "value": "StatefulRemoteSubscribable<string | undefined>",
                "description": "The email address of the buyer that is interacting with the cart.\nThe value is `undefined` if the app does not have access to customer data.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "phone",
                "value": "StatefulRemoteSubscribable<string | undefined>",
                "description": "The phone number of the buyer that is interacting with the cart.\nThe value is `undefined` if the app does not have access to customer data.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              }
            ],
            "value": "export interface BuyerIdentity {\n  /**\n   * The buyer's customer account. The value is undefined if the buyer isn’t a\n   * known customer for this shop or if they haven't logged in yet.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  customer: StatefulRemoteSubscribable<Customer | undefined>;\n\n  /**\n   * The email address of the buyer that is interacting with the cart.\n   * The value is `undefined` if the app does not have access to customer data.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  email: StatefulRemoteSubscribable<string | undefined>;\n\n  /**\n   * The phone number of the buyer that is interacting with the cart.\n   * The value is `undefined` if the app does not have access to customer data.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  phone: StatefulRemoteSubscribable<string | undefined>;\n}"
          },
          "Customer": {
            "filePath": "/api/standard/standard.ts",
            "name": "Customer",
            "description": "Information about a customer who has previously purchased from this shop.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Customer ID.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "email",
                "value": "string",
                "description": "The email of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "phone",
                "value": "string",
                "description": "The phone number of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "fullName",
                "value": "string",
                "description": "The full name of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "firstName",
                "value": "string",
                "description": "The first name of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lastName",
                "value": "string",
                "description": "The last name of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "The image associated with the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "acceptsMarketing",
                "value": "boolean",
                "description": "Defines if the customer accepts marketing activities.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "storeCreditAccounts",
                "value": "StoreCreditAccount[]",
                "description": "The Store Credit Accounts owned by the customer and usable during the checkout process.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isPrivate": true
              }
            ],
            "value": "export interface Customer {\n  /**\n   * Customer ID.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'gid://shopify/Customer/123'\n   */\n  id: string;\n  /**\n   * The email of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  email?: string;\n  /**\n   * The phone number of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  phone?: string;\n  /**\n   * The full name of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  fullName?: string;\n  /**\n   * The first name of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  firstName?: string;\n  /**\n   * The last name of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  lastName?: string;\n  /**\n   * The image associated with the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  image: ImageDetails;\n  /**\n   * Defines if the customer accepts marketing activities.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  acceptsMarketing: boolean;\n  /**\n   * The Store Credit Accounts owned by the customer and usable during the checkout process.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @private\n   */\n  storeCreditAccounts: StoreCreditAccount[];\n}"
          },
          "ImageDetails": {
            "filePath": "/api/standard/standard.ts",
            "name": "ImageDetails",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "url",
                "value": "string",
                "description": "The image URL."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "altText",
                "value": "string",
                "description": "The alternative text for the image.",
                "isOptional": true
              }
            ],
            "value": "export interface ImageDetails {\n  /**\n   * The image URL.\n   */\n  url: string;\n\n  /**\n   * The alternative text for the image.\n   */\n  altText?: string;\n}"
          },
          "StoreCreditAccount": {
            "filePath": "/api/standard/standard.ts",
            "name": "StoreCreditAccount",
            "description": "Information about a Store Credit Account.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "balance",
                "value": "Money",
                "description": "The current balance of the Store Credit Account."
              }
            ],
            "value": "export interface StoreCreditAccount {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/StoreCreditAccount/1'\n   */\n  id: string;\n  /**\n   * The current balance of the Store Credit Account.\n   */\n  balance: Money;\n}"
          },
          "BuyerJourney": {
            "filePath": "/api/standard/standard.ts",
            "name": "BuyerJourney",
            "description": "Provides details on the buyer's progression through the checkout.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "intercept",
                "value": "(interceptor: Interceptor) => Promise<() => void>",
                "description": "Installs a function for intercepting and preventing progress on checkout.\n\nThis returns a promise that resolves to a teardown function. Calling the\nteardown function will remove the interceptor.\n\nTo block checkout progress, you must set the [block_progress](/docs/api/checkout-ui-extensions/configuration#block-progress)\ncapability in your extension's configuration."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "completed",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "This subscribable value will be true if the buyer completed submitting their order.\n\nFor example, when viewing the order status page after submitting payment, the buyer will have completed their order."
              }
            ],
            "value": "export interface BuyerJourney {\n  /**\n   * Installs a function for intercepting and preventing progress on checkout.\n   *\n   * This returns a promise that resolves to a teardown function. Calling the\n   * teardown function will remove the interceptor.\n   *\n   * To block checkout progress, you must set the [block_progress](/docs/api/checkout-ui-extensions/configuration#block-progress)\n   * capability in your extension's configuration.\n   */\n  intercept(interceptor: Interceptor): Promise<() => void>;\n\n  /**\n   * This subscribable value will be true if the buyer completed submitting their order.\n   *\n   * For example, when viewing the order status page after submitting payment, the buyer will have completed their order.\n   */\n  completed: StatefulRemoteSubscribable<boolean>;\n}"
          },
          "Interceptor": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Interceptor",
            "value": "(\n  interceptorProps: InterceptorProps,\n) => InterceptorRequest | Promise<InterceptorRequest>",
            "description": "A function for intercepting and preventing navigation on checkout. You can block\nnavigation by returning an object with\n`{behavior: 'block', reason: InvalidResultReason.InvalidExtensionState, errors?: ValidationErrors[]}`.\nIf you do, then you're expected to also update some part of your UI to reflect the reason why navigation\nwas blocked, either by targeting checkout UI fields, passing errors to the page level or rendering the errors in your extension."
          },
          "InterceptorProps": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorProps",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "canBlockProgress",
                "value": "boolean",
                "description": "Whether the interceptor has the capability to block a buyer's progress through\ncheckout. This ability might be granted by a merchant in differing checkout contexts."
              }
            ],
            "value": "export interface InterceptorProps {\n  /**\n   * Whether the interceptor has the capability to block a buyer's progress through\n   * checkout. This ability might be granted by a merchant in differing checkout contexts.\n   */\n  canBlockProgress: boolean;\n}"
          },
          "InterceptorRequest": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InterceptorRequest",
            "value": "InterceptorRequestAllow | InterceptorRequestBlock",
            "description": ""
          },
          "InterceptorRequestAllow": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorRequestAllow",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"allow\"",
                "description": "Indicates that the interceptor will allow the buyer's journey to continue."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "perform",
                "value": "(result: InterceptorResult) => void | Promise<void>",
                "description": "This callback is called when all interceptors finish. We recommend\nsetting errors or reasons for blocking at this stage, so that all the errors in\nthe UI show up at once.",
                "isOptional": true
              }
            ],
            "value": "interface InterceptorRequestAllow {\n  /**\n   * Indicates that the interceptor will allow the buyer's journey to continue.\n   */\n  behavior: 'allow';\n\n  /**\n   * This callback is called when all interceptors finish. We recommend\n   * setting errors or reasons for blocking at this stage, so that all the errors in\n   * the UI show up at once.\n   * @param result InterceptorResult with behavior as either 'allow' or 'block'\n   */\n  perform?(result: InterceptorResult): void | Promise<void>;\n}"
          },
          "InterceptorResult": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InterceptorResult",
            "value": "InterceptorResultAllow | InterceptorResultBlock",
            "description": ""
          },
          "InterceptorResultAllow": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorResultAllow",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"allow\"",
                "description": "Indicates that the buyer was allowed to progress through checkout."
              }
            ],
            "value": "interface InterceptorResultAllow {\n  /**\n   * Indicates that the buyer was allowed to progress through checkout.\n   */\n  behavior: 'allow';\n}"
          },
          "InterceptorResultBlock": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorResultBlock",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"block\"",
                "description": "Indicates that some part of the checkout UI intercepted and prevented\nthe buyer’s progress. The buyer typically needs to take some action\nto resolve this issue and to move on to the next step."
              }
            ],
            "value": "interface InterceptorResultBlock {\n  /**\n   * Indicates that some part of the checkout UI intercepted and prevented\n   * the buyer’s progress. The buyer typically needs to take some action\n   * to resolve this issue and to move on to the next step.\n   */\n  behavior: 'block';\n}"
          },
          "InterceptorRequestBlock": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorRequestBlock",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"block\"",
                "description": "Indicates that the interceptor will block the buyer's journey from continuing."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "reason",
                "value": "string",
                "description": "The reason for blocking the interceptor request. This value isn't presented to\nthe buyer, so it doesn't need to be localized. The value is used only for Shopify’s\nown internal debugging and metrics."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "errors",
                "value": "ValidationError[]",
                "description": "Used to pass errors to the checkout UI, outside your extension's UI boundaries.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "perform",
                "value": "(result: InterceptorResult) => void | Promise<void>",
                "description": "This callback is called when all interceptors finish. We recommend\nsetting errors or reasons for blocking at this stage, so that all the errors in\nthe UI show up at once.",
                "isOptional": true
              }
            ],
            "value": "interface InterceptorRequestBlock {\n  /**\n   * Indicates that the interceptor will block the buyer's journey from continuing.\n   */\n  behavior: 'block';\n\n  /**\n   * The reason for blocking the interceptor request. This value isn't presented to\n   * the buyer, so it doesn't need to be localized. The value is used only for Shopify’s\n   * own internal debugging and metrics.\n   */\n  reason: string;\n\n  /**\n   * Used to pass errors to the checkout UI, outside your extension's UI boundaries.\n   */\n  errors?: ValidationError[];\n\n  /**\n   * This callback is called when all interceptors finish. We recommend\n   * setting errors or reasons for blocking at this stage, so that all the errors in\n   * the UI show up at once.\n   * @param result InterceptorResult with behavior as either 'allow' or 'block'\n   */\n  perform?(result: InterceptorResult): void | Promise<void>;\n}"
          },
          "ValidationError": {
            "filePath": "/api/shared.ts",
            "name": "ValidationError",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "Error message to be displayed to the buyer."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "string",
                "description": "The checkout UI field that the error is associated with.\n\nExample: `$.cart.deliveryGroups[0].deliveryAddress.countryCode`\n\nSee the [supported targets](/docs/api/functions/reference/cart-checkout-validation/graphql#supported-targets)\nfor more information.",
                "isOptional": true
              }
            ],
            "value": "export interface ValidationError {\n  /**\n   * Error message to be displayed to the buyer.\n   */\n  message: string;\n  /**\n   * The checkout UI field that the error is associated with.\n   *\n   * Example: `$.cart.deliveryGroups[0].deliveryAddress.countryCode`\n   *\n   * See the [supported targets](/docs/api/functions/reference/cart-checkout-validation/graphql#supported-targets)\n   * for more information.\n   */\n  target?: string;\n}"
          },
          "CartCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "StatefulRemoteSubscribable<Money>",
                "description": "A `Money` value representing the minimum a buyer can expect to pay at the current\nstep of checkout. This value excludes amounts yet to be negotiated. For example,\nthe information step might not have delivery costs calculated."
              }
            ],
            "value": "export interface CartCost {\n  /**\n   * A `Money` value representing the minimum a buyer can expect to pay at the current\n   * step of checkout. This value excludes amounts yet to be negotiated. For example,\n   * the information step might not have delivery costs calculated.\n   */\n  totalAmount: StatefulRemoteSubscribable<Money>;\n}"
          },
          "DeliveryGroup": {
            "filePath": "/api/standard/standard.ts",
            "name": "DeliveryGroup",
            "description": "Represents the delivery information and options available for one or\nmore cart lines.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "targetedCartLines",
                "value": "CartLineReference[]",
                "description": "The cart line references associated to the delivery group."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "deliveryOptions",
                "value": "DeliveryOption[]",
                "description": "The delivery options available for the delivery group."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "selectedDeliveryOption",
                "value": "DeliveryOptionReference",
                "description": "The selected delivery option for the delivery group.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "groupType",
                "value": "DeliveryGroupType",
                "description": "The type of the delivery group."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "deliveryRequired",
                "value": "boolean",
                "description": "Whether delivery is required for the delivery group."
              }
            ],
            "value": "export interface DeliveryGroup {\n  /**\n   * The cart line references associated to the delivery group.\n   */\n  targetedCartLines: CartLineReference[];\n\n  /**\n   * The delivery options available for the delivery group.\n   */\n  deliveryOptions: DeliveryOption[];\n\n  /**\n   * The selected delivery option for the delivery group.\n   */\n  selectedDeliveryOption?: DeliveryOptionReference;\n\n  /**\n   * The type of the delivery group.\n   */\n  groupType: DeliveryGroupType;\n\n  /**\n   * Whether delivery is required for the delivery group.\n   */\n  deliveryRequired: boolean;\n}"
          },
          "CartLineReference": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLineReference",
            "description": "Represents a reference to a cart line.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The unique identifier of the referenced cart line."
              }
            ],
            "value": "export interface CartLineReference {\n  /**\n   * The unique identifier of the referenced cart line.\n   */\n  id: string;\n}"
          },
          "DeliveryOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "DeliveryOption",
            "description": "Represents a base interface for a single delivery option.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique identifier of the delivery option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the delivery option.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "description",
                "value": "string",
                "description": "The description of the delivery option.",
                "isOptional": true
              }
            ],
            "value": "export interface DeliveryOption {\n  /**\n   * The unique identifier of the delivery option.\n   */\n  handle: string;\n\n  /**\n   * The title of the delivery option.\n   */\n  title?: string;\n\n  /**\n   * The description of the delivery option.\n   */\n  description?: string;\n}"
          },
          "DeliveryOptionReference": {
            "filePath": "/api/standard/standard.ts",
            "name": "DeliveryOptionReference",
            "description": "Represents a reference to a delivery option.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique identifier of the referenced delivery option."
              }
            ],
            "value": "export interface DeliveryOptionReference {\n  /**\n   * The unique identifier of the referenced delivery option.\n   */\n  handle: string;\n}"
          },
          "DeliveryGroupType": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DeliveryGroupType",
            "value": "'oneTimePurchase' | 'subscription'",
            "description": "The possible types of a delivery group."
          },
          "CartDiscountCode": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartDiscountCode",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              }
            ],
            "value": "export interface CartDiscountCode {\n  /**\n   * The code for the discount\n   */\n  code: string;\n}"
          },
          "CartDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartDiscountAllocation",
            "value": "CartCodeDiscountAllocation | CartAutomaticDiscountAllocation | CartCustomDiscountAllocation",
            "description": ""
          },
          "CartCodeDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCodeDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"code\"",
                "description": "The type of the code discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCodeDiscountAllocation extends CartDiscountAllocationBase {\n  /**\n   * The code for the discount\n   */\n  code: string;\n\n  /**\n   * The type of the code discount\n   */\n  type: 'code';\n}"
          },
          "CartAutomaticDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartAutomaticDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"automatic\"",
                "description": "The type of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartAutomaticDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the automatic discount\n   */\n  title: string;\n\n  /**\n   * The type of the automatic discount\n   */\n  type: 'automatic';\n}"
          },
          "CartCustomDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCustomDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"custom\"",
                "description": "The type of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCustomDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the custom discount\n   */\n  title: string;\n\n  /**\n   * The type of the custom discount\n   */\n  type: 'custom';\n}"
          },
          "Extension": {
            "filePath": "/api/standard/standard.ts",
            "name": "Extension",
            "description": "Meta information about an extension point.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "version",
                "value": "string",
                "description": "The published version of the running extension point.\n\nFor unpublished extensions, the value is `undefined`.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "apiVersion",
                "value": "ApiVersion",
                "description": "The API version that was set in the extension config file."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "scriptUrl",
                "value": "string",
                "description": "The URL to the script that started the extension point."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "rendered",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "Whether your extension is currently rendered to the screen.\n\nShopify might render your extension before it's visible in the UI,\ntypically to pre-render extensions that will appear on a later step of the\ncheckout.\n\nYour extension might also continue to run after the buyer has navigated away\nfrom where it was rendered. The extension continues running so that\nyour extension is immediately available to render if the buyer navigates back."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "capabilities",
                "value": "StatefulRemoteSubscribable<Capability[]>",
                "description": "The allowed capabilities of the extension, defined\nin your [shopify.ui.extension.toml](/docs/api/checkout-ui-extensions/configuration) file.\n\n* [`api_access`](/docs/api/checkout-ui-extensions/configuration#api-access): the extension can access the Storefront API.\n\n* [`network_access`](/docs/api/checkout-ui-extensions/configuration#network-access): the extension can make external network calls.\n\n* [`block_progress`](/docs/api/checkout-ui-extensions/configuration#block-progress): the extension can block a buyer's progress and the merchant has allowed this blocking behavior."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "editor",
                "value": "Editor",
                "description": "Information about the editor where the extension is being rendered.\n\nThe value is undefined if the extension is not rendering in an editor.",
                "isOptional": true
              }
            ],
            "value": "export interface Extension {\n  /**\n   * The published version of the running extension point.\n   *\n   * For unpublished extensions, the value is `undefined`.\n   *\n   * @example 3.0.10\n   */\n  version?: string;\n\n  /**\n   * The API version that was set in the extension config file.\n   *\n   * @example '2023-01', '2022-10'\n   */\n  apiVersion: ApiVersion;\n\n  /**\n   * The URL to the script that started the extension point.\n   */\n  scriptUrl: string;\n\n  /**\n   * Whether your extension is currently rendered to the screen.\n   *\n   * Shopify might render your extension before it's visible in the UI,\n   * typically to pre-render extensions that will appear on a later step of the\n   * checkout.\n   *\n   * Your extension might also continue to run after the buyer has navigated away\n   * from where it was rendered. The extension continues running so that\n   * your extension is immediately available to render if the buyer navigates back.\n   */\n  rendered: StatefulRemoteSubscribable<boolean>;\n\n  /**\n   * The allowed capabilities of the extension, defined\n   * in your [shopify.ui.extension.toml](/docs/api/checkout-ui-extensions/configuration) file.\n   *\n   * * [`api_access`](/docs/api/checkout-ui-extensions/configuration#api-access): the extension can access the Storefront API.\n   *\n   * * [`network_access`](/docs/api/checkout-ui-extensions/configuration#network-access): the extension can make external network calls.\n   *\n   * * [`block_progress`](/docs/api/checkout-ui-extensions/configuration#block-progress): the extension can block a buyer's progress and the merchant has allowed this blocking behavior.\n   */\n  capabilities: StatefulRemoteSubscribable<Capability[]>;\n\n  /**\n   * Information about the editor where the extension is being rendered.\n   *\n   * The value is undefined if the extension is not rendering in an editor.\n   */\n  editor?: Editor;\n}"
          },
          "ApiVersion": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ApiVersion",
            "value": "'2022-10' | '2023-01' | '2023-04' | 'unstable'",
            "description": ""
          },
          "Capability": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Capability",
            "value": "'api_access' | 'network_access' | 'block_progress'",
            "description": "The capabilities an extension has access to.\n\n* [`api_access`](/docs/api/checkout-ui-extensions/configuration#api-access): the extension can access the Storefront API.\n\n* [`network_access`](/docs/api/checkout-ui-extensions/configuration#network-access): the extension can make external network calls.\n\n* [`block_progress`](/docs/api/checkout-ui-extensions/configuration#block-progress): the extension can block a buyer's progress and the merchant has allowed this blocking behavior."
          },
          "Editor": {
            "filePath": "/api/standard/standard.ts",
            "name": "Editor",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"checkout\"",
                "description": "Indicates whether the extension is rendering in the checkout editor."
              }
            ],
            "value": "export interface Editor {\n  /**\n   * Indicates whether the extension is rendering in the checkout editor.\n   */\n  type: 'checkout';\n}"
          },
          "ExtensionPoint": {
            "filePath": "/extension-points.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ExtensionPoint",
            "value": "keyof ExtensionPoints",
            "description": ""
          },
          "ExtensionPoints": {
            "filePath": "/extension-points.ts",
            "name": "ExtensionPoints",
            "description": "A UI extension will register for one or more extension points using `shopify.extend()`.\nAn extension point in a UI extension is a plain JavaScript function.\nThis function receives some API for interacting with the application,\nand is expected to return a value in a specific shape.\nThe input arguments and the output type are different\nfor each extension point.",
            "members": [
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::Actions::RenderBefore",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Actions::RenderBefore'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered immediately before any actions within each step."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::CartLines::RenderAfter",
                "value": "RenderExtension<\n    CheckoutApi &\n      StandardApi<'Checkout::CartLines::RenderAfter'> &\n      OrderStatusApi,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after all line items."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::CartLineDetails::RenderAfter",
                "value": "RenderExtension<\n    CheckoutApi &\n      CartLineDetailsApi &\n      StandardApi<'Checkout::CartLineDetails::RenderAfter'> &\n      OrderStatusApi,\n    AllComponents\n  >",
                "description": "A static extension point that renders on every line item, inside the details\nunder the line item properties element."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::Contact::RenderAfter",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Contact::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered immediately after the contact form element."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::CustomerInformation::RenderAfter",
                "value": "RenderExtension<\n    OrderStatusApi &\n      CheckoutApi &\n      StandardApi<'Checkout::CustomerInformation::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after a purchase below the customer information."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::DeliveryAddress::RenderBefore",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::DeliveryAddress::RenderBefore'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered between the shipping address header\nand shipping address form elements."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::Dynamic::Render",
                "value": "RenderExtension<\n    CheckoutApi & OrderStatusApi & StandardApi<'Checkout::Dynamic::Render'>,\n    AllComponents\n  >",
                "description": "A [dynamic extension point](/docs/api/checkout-ui-extensions/extension-points-overview#dynamic-extension-points) that isn't tied to a specific checkout section or feature.\nUnlike static extension points, dynamic extension points render where the merchant\nsets them using the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n\nThe [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for dynamic extension points can be previewed during development\nby [using a URL parameter](/docs/apps/checkout/best-practices/testing-ui-extensions#dynamic-extension-points)."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ThankYou::Dynamic::Render",
                "value": "RenderExtension<\n    StandardApi<'Checkout::ThankYou::Dynamic::Render'>,\n    AllComponents\n  >",
                "description": "A [dynamic extension point](/docs/api/checkout-ui-extensions/extension-points-overview#dynamic-extension-points) that renders exclusively on the Thank You Page.\nUnlike static extension points, dynamic extension points render where the merchant\nsets them using the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n\nThe [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for dynamic extension points can be previewed during development\nby [using a URL parameter](/docs/apps/checkout/best-practices/testing-ui-extensions#dynamic-extension-points)."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ThankYou::CartLineDetails::RenderAfter",
                "value": "RenderExtension<\n    CartLineDetailsApi &\n      StandardApi<'Checkout::ThankYou::CartLineDetails::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that renders on every line item, inside the details\nunder the line item properties element on the Thank You Page."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ThankYou::CartLines::RenderAfter",
                "value": "RenderExtension<\n    StandardApi<'Checkout::ThankYou::CartLines::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after all line items on the Thank You page."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ThankYou::CustomerInformation::RenderAfter",
                "value": "RenderExtension<\n    StandardApi<'Checkout::ThankYou::CustomerInformation::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after a purchase below the customer information on the Thank You page."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::OrderStatus::Dynamic::Render",
                "value": "RenderExtension<\n    OrderStatusApi & StandardApi<'Checkout::OrderStatus::Dynamic::Render'>,\n    AllComponents\n  >",
                "description": "A [dynamic extension point](/docs/api/checkout-ui-extensions/extension-points-overview#dynamic-extension-points) that renders exclusively on the Order Status Page.\nUnlike static extension points, dynamic extension points render where the merchant\nsets them using the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n\nThe [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for dynamic extension points can be previewed during development\nby [using a URL parameter](/docs/apps/checkout/best-practices/testing-ui-extensions#dynamic-extension-points)."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::OrderStatus::CartLineDetails::RenderAfter",
                "value": "RenderExtension<\n    CartLineDetailsApi &\n      OrderStatusApi &\n      StandardApi<'Checkout::OrderStatus::CartLineDetails::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that renders on every line item, inside the details\nunder the line item properties element on the Order Status Page."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::OrderStatus::CartLines::RenderAfter",
                "value": "RenderExtension<\n    OrderStatusApi &\n      StandardApi<'Checkout::OrderStatus::CartLines::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after all line items on the Order Status page."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::OrderStatus::CustomerInformation::RenderAfter",
                "value": "RenderExtension<\n    OrderStatusApi &\n      StandardApi<'Checkout::OrderStatus::CustomerInformation::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after a purchase below the customer information on the Order Status page."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::GiftCard::Render",
                "value": "RenderExtension<\n    RedeemableRenderApi &\n      CheckoutApi &\n      StandardApi<'Checkout::GiftCard::Render'>,\n    AllComponents\n  >",
                "description": "A static extension point that renders the gift card entry form fields after\nthe buyer ticks a box to use a gift card. This does not replace the\nnative gift card entry form which is rendered in a separate part of checkout.",
                "isPrivate": true
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::PaymentMethod::Render",
                "value": "RenderExtension<\n    PaymentMethodRenderApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PaymentMethod::Render'>,\n    AllComponents\n  >",
                "description": "A static extension point that renders the form fields for a payment method when selected by the buyer.",
                "isPrivate": true
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::PaymentMethod::RenderRequiredAction",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::PaymentMethod::RenderRequiredAction'>,\n    AllComponents\n  >",
                "description": "A static extension point that renders a form modal when a buyer selects the custom onsite payment method.",
                "isPrivate": true
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::Reductions::RenderBefore",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Reductions::RenderBefore'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered in the order summary, before the discount form element."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::Reductions::RenderAfter",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Reductions::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered in the order summary, after the discount form\nand discount tag elements."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ShippingMethods::RenderBefore",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::ShippingMethods::RenderBefore'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered between the shipping method\nheader and shipping method options."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ShippingMethods::RenderAfter",
                "value": "RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::ShippingMethods::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after the shipping method\noptions."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::PickupLocations::RenderBefore",
                "value": "RenderExtension<\n    PickupLocationsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupLocations::RenderBefore'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered before pickup location options."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::PickupLocations::RenderAfter",
                "value": "RenderExtension<\n    PickupLocationsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupLocations::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after pickup location options."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ShippingMethodDetails::RenderAfter",
                "value": "RenderExtension<\n    ShippingMethodDetailsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::ShippingMethodDetails::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered after the shipping method\ndetails within the shipping method option list, for each option."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::ShippingMethodDetails::RenderExpanded",
                "value": "RenderExtension<\n    ShippingMethodDetailsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::ShippingMethodDetails::RenderExpanded'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered under the shipping method\nwithin the shipping method option list, for each option."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::PickupPoints::RenderBefore",
                "value": "RenderExtension<\n    PickupPointsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupPoints::RenderBefore'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered immediately before the pickup points."
              },
              {
                "filePath": "/extension-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "Checkout::PickupPoints::RenderAfter",
                "value": "RenderExtension<\n    PickupPointsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupPoints::RenderAfter'>,\n    AllComponents\n  >",
                "description": "A static extension point that is rendered immediately after the pickup points."
              }
            ],
            "value": "export interface ExtensionPoints {\n  /**\n   * A static extension point that is rendered immediately before any actions within each step.\n   */\n  'Checkout::Actions::RenderBefore': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Actions::RenderBefore'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after all line items.\n   */\n  'Checkout::CartLines::RenderAfter': RenderExtension<\n    CheckoutApi &\n      StandardApi<'Checkout::CartLines::RenderAfter'> &\n      OrderStatusApi,\n    AllComponents\n  >;\n  /**\n   * A static extension point that renders on every line item, inside the details\n   * under the line item properties element.\n   */\n  'Checkout::CartLineDetails::RenderAfter': RenderExtension<\n    CheckoutApi &\n      CartLineDetailsApi &\n      StandardApi<'Checkout::CartLineDetails::RenderAfter'> &\n      OrderStatusApi,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered immediately after the contact form element.\n   */\n  'Checkout::Contact::RenderAfter': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Contact::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after a purchase below the customer information.\n   */\n  'Checkout::CustomerInformation::RenderAfter': RenderExtension<\n    OrderStatusApi &\n      CheckoutApi &\n      StandardApi<'Checkout::CustomerInformation::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered between the shipping address header\n   * and shipping address form elements.\n   */\n  'Checkout::DeliveryAddress::RenderBefore': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::DeliveryAddress::RenderBefore'>,\n    AllComponents\n  >;\n  /**\n   * A [dynamic extension point](/docs/api/checkout-ui-extensions/extension-points-overview#dynamic-extension-points) that isn't tied to a specific checkout section or feature.\n   * Unlike static extension points, dynamic extension points render where the merchant\n   * sets them using the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n   *\n   * The [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for dynamic extension points can be previewed during development\n   * by [using a URL parameter](/docs/apps/checkout/best-practices/testing-ui-extensions#dynamic-extension-points).\n   */\n  'Checkout::Dynamic::Render': RenderExtension<\n    CheckoutApi & OrderStatusApi & StandardApi<'Checkout::Dynamic::Render'>,\n    AllComponents\n  >;\n  /**\n   * A [dynamic extension point](/docs/api/checkout-ui-extensions/extension-points-overview#dynamic-extension-points) that renders exclusively on the Thank You Page.\n   * Unlike static extension points, dynamic extension points render where the merchant\n   * sets them using the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n   *\n   * The [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for dynamic extension points can be previewed during development\n   * by [using a URL parameter](/docs/apps/checkout/best-practices/testing-ui-extensions#dynamic-extension-points).\n   *\n   */\n  'Checkout::ThankYou::Dynamic::Render': RenderExtension<\n    StandardApi<'Checkout::ThankYou::Dynamic::Render'>,\n    AllComponents\n  >;\n\n  /**\n   * A static extension point that renders on every line item, inside the details\n   * under the line item properties element on the Thank You Page.\n   *\n   */\n  'Checkout::ThankYou::CartLineDetails::RenderAfter': RenderExtension<\n    CartLineDetailsApi &\n      StandardApi<'Checkout::ThankYou::CartLineDetails::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after all line items on the Thank You page.\n   *\n   */\n  'Checkout::ThankYou::CartLines::RenderAfter': RenderExtension<\n    StandardApi<'Checkout::ThankYou::CartLines::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after a purchase below the customer information on the Thank You page.\n   *\n   */\n  'Checkout::ThankYou::CustomerInformation::RenderAfter': RenderExtension<\n    StandardApi<'Checkout::ThankYou::CustomerInformation::RenderAfter'>,\n    AllComponents\n  >;\n\n  /**\n   * A [dynamic extension point](/docs/api/checkout-ui-extensions/extension-points-overview#dynamic-extension-points) that renders exclusively on the Order Status Page.\n   * Unlike static extension points, dynamic extension points render where the merchant\n   * sets them using the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n   *\n   * The [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for dynamic extension points can be previewed during development\n   * by [using a URL parameter](/docs/apps/checkout/best-practices/testing-ui-extensions#dynamic-extension-points).\n   *\n   */\n  'Checkout::OrderStatus::Dynamic::Render': RenderExtension<\n    OrderStatusApi & StandardApi<'Checkout::OrderStatus::Dynamic::Render'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that renders on every line item, inside the details\n   * under the line item properties element on the Order Status Page.\n   *\n   */\n  'Checkout::OrderStatus::CartLineDetails::RenderAfter': RenderExtension<\n    CartLineDetailsApi &\n      OrderStatusApi &\n      StandardApi<'Checkout::OrderStatus::CartLineDetails::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after all line items on the Order Status page.\n   *\n   */\n  'Checkout::OrderStatus::CartLines::RenderAfter': RenderExtension<\n    OrderStatusApi &\n      StandardApi<'Checkout::OrderStatus::CartLines::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after a purchase below the customer information on the Order Status page.\n   *\n   */\n  'Checkout::OrderStatus::CustomerInformation::RenderAfter': RenderExtension<\n    OrderStatusApi &\n      StandardApi<'Checkout::OrderStatus::CustomerInformation::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that renders the gift card entry form fields after\n   * the buyer ticks a box to use a gift card. This does not replace the\n   * native gift card entry form which is rendered in a separate part of checkout.\n   *\n   * @private\n   */\n  'Checkout::GiftCard::Render': RenderExtension<\n    RedeemableRenderApi &\n      CheckoutApi &\n      StandardApi<'Checkout::GiftCard::Render'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that renders the form fields for a payment method when selected by the buyer.\n   *\n   * @private\n   */\n  'Checkout::PaymentMethod::Render': RenderExtension<\n    PaymentMethodRenderApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PaymentMethod::Render'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that renders a form modal when a buyer selects the custom onsite payment method.\n   *\n   * @private\n   */\n  'Checkout::PaymentMethod::RenderRequiredAction': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::PaymentMethod::RenderRequiredAction'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered in the order summary, before the discount form element.\n   */\n  'Checkout::Reductions::RenderBefore': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Reductions::RenderBefore'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered in the order summary, after the discount form\n   * and discount tag elements.\n   */\n  'Checkout::Reductions::RenderAfter': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::Reductions::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered between the shipping method\n   * header and shipping method options.\n   */\n  'Checkout::ShippingMethods::RenderBefore': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::ShippingMethods::RenderBefore'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after the shipping method\n   * options.\n   */\n  'Checkout::ShippingMethods::RenderAfter': RenderExtension<\n    CheckoutApi & StandardApi<'Checkout::ShippingMethods::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered before pickup location options.\n   */\n  'Checkout::PickupLocations::RenderBefore': RenderExtension<\n    PickupLocationsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupLocations::RenderBefore'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after pickup location options.\n   */\n  'Checkout::PickupLocations::RenderAfter': RenderExtension<\n    PickupLocationsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupLocations::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered after the shipping method\n   * details within the shipping method option list, for each option.\n   */\n  'Checkout::ShippingMethodDetails::RenderAfter': RenderExtension<\n    ShippingMethodDetailsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::ShippingMethodDetails::RenderAfter'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered under the shipping method\n   * within the shipping method option list, for each option.\n   */\n  'Checkout::ShippingMethodDetails::RenderExpanded': RenderExtension<\n    ShippingMethodDetailsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::ShippingMethodDetails::RenderExpanded'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered immediately before the pickup points.\n   */\n  'Checkout::PickupPoints::RenderBefore': RenderExtension<\n    PickupPointsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupPoints::RenderBefore'>,\n    AllComponents\n  >;\n  /**\n   * A static extension point that is rendered immediately after the pickup points.\n   */\n  'Checkout::PickupPoints::RenderAfter': RenderExtension<\n    PickupPointsApi &\n      CheckoutApi &\n      StandardApi<'Checkout::PickupPoints::RenderAfter'>,\n    AllComponents\n  >;\n}"
          },
          "CheckoutApi": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CheckoutApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyAttributeChange",
                "value": "(change: AttributeUpdateChange) => Promise<AttributeChangeResult>",
                "description": "Performs an update on an attribute attached to the cart and checkout. If\nsuccessful, this mutation results in an update to the value retrieved\nthrough the [`attributes`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-applyattributechange) property."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyCartLinesChange",
                "value": "(change: CartLineChange) => Promise<CartLineChangeResult>",
                "description": "Performs an update on the merchandise line items. It resolves when the new\nline items have been negotiated and results in an update to the value\nretrieved through the\n[`lines`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-lines)\nproperty."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyDiscountCodeChange",
                "value": "(change: DiscountCodeChange) => Promise<DiscountCodeChangeResult>",
                "description": "Performs an update on the discount codes.\nIt resolves when the new discount codes have been negotiated and results in an update\nto the value retrieved through the [`discountCodes`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-discountcodes) property.\n\n> Caution:\n> See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves discount codes through a network call."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyGiftCardChange",
                "value": "(change: GiftCardChange) => Promise<GiftCardChangeResult>",
                "description": "Performs an update on the gift cards.\nIt resolves when gift card change have been negotiated and results in an update\nto the value retrieved through the [`appliedGiftCards`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-appliedgiftcards) property.\n\n> Caution:\n> See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves gift card codes through a network call."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyMetafieldChange",
                "value": "(change: MetafieldChange) => Promise<MetafieldChangeResult>",
                "description": "Performs an update on a piece of metadata attached to the checkout. If\nsuccessful, this mutation results in an update to the value retrieved\nthrough the [`metafields`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-metafields) property."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyNoteChange",
                "value": "(change: NoteChange) => Promise<NoteChangeResult>",
                "description": "Performs an update on the note attached to the cart and checkout. If\nsuccessful, this mutation results in an update to the value retrieved\nthrough the [`note`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-note) property."
              }
            ],
            "value": "export interface CheckoutApi {\n  /**\n   * Performs an update on an attribute attached to the cart and checkout. If\n   * successful, this mutation results in an update to the value retrieved\n   * through the [`attributes`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-applyattributechange) property.\n   */\n  applyAttributeChange(change: AttributeChange): Promise<AttributeChangeResult>;\n\n  /**\n   * Performs an update on the merchandise line items. It resolves when the new\n   * line items have been negotiated and results in an update to the value\n   * retrieved through the\n   * [`lines`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-lines)\n   * property.\n   */\n  applyCartLinesChange(change: CartLineChange): Promise<CartLineChangeResult>;\n\n  /**\n   * Performs an update on the discount codes.\n   * It resolves when the new discount codes have been negotiated and results in an update\n   * to the value retrieved through the [`discountCodes`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-discountcodes) property.\n   *\n   * > Caution:\n   * > See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves discount codes through a network call.\n   */\n  applyDiscountCodeChange(\n    change: DiscountCodeChange,\n  ): Promise<DiscountCodeChangeResult>;\n\n  /**\n   * Performs an update on the gift cards.\n   * It resolves when gift card change have been negotiated and results in an update\n   * to the value retrieved through the [`appliedGiftCards`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-appliedgiftcards) property.\n   *\n   * > Caution:\n   * > See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves gift card codes through a network call.\n   */\n  applyGiftCardChange(change: GiftCardChange): Promise<GiftCardChangeResult>;\n\n  /**\n   * Performs an update on a piece of metadata attached to the checkout. If\n   * successful, this mutation results in an update to the value retrieved\n   * through the [`metafields`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-metafields) property.\n   */\n  applyMetafieldChange(change: MetafieldChange): Promise<MetafieldChangeResult>;\n\n  /**\n   * Performs an update on the note attached to the cart and checkout. If\n   * successful, this mutation results in an update to the value retrieved\n   * through the [`note`](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-note) property.\n   */\n  applyNoteChange(change: NoteChange): Promise<NoteChangeResult>;\n}"
          },
          "AttributeUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "AttributeUpdateChange",
            "description": "Updates an attribute on the order. If an attribute with the\nprovided key does not already exist, it gets created.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateAttribute\"",
                "description": "The type of the `AttributeUpdateChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "Key of the attribute to add or update"
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "Value for the attribute to add or update"
              }
            ],
            "value": "export interface AttributeUpdateChange {\n  /**\n   * The type of the `AttributeUpdateChange` API.\n   */\n  type: 'updateAttribute';\n\n  /**\n   * Key of the attribute to add or update\n   */\n  key: string;\n\n  /**\n   * Value for the attribute to add or update\n   */\n  value: string;\n}"
          },
          "AttributeChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AttributeChangeResult",
            "value": "AttributeChangeResultSuccess | AttributeChangeResultError",
            "description": ""
          },
          "AttributeChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "AttributeChangeResultSuccess",
            "description": "The returned result of a successful update to an attribute.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "The type of the `AttributeChangeResultSuccess` API."
              }
            ],
            "value": "export interface AttributeChangeResultSuccess {\n  /**\n   * The type of the `AttributeChangeResultSuccess` API.\n   */\n  type: 'success';\n}"
          },
          "AttributeChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "AttributeChangeResultError",
            "description": "The returned result of an unsuccessful update to an attribute\nwith a message detailing the type of error that occurred.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "The type of the `AttributeChangeResultError` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface AttributeChangeResultError {\n  /**\n   * The type of the `AttributeChangeResultError` API.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "CartLineChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartLineChange",
            "value": "CartLineAddChange | CartLineRemoveChange | CartLineUpdateChange",
            "description": ""
          },
          "CartLineAddChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineAddChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"addCartLine\"",
                "description": "An identifier for changes that add line items."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandiseId",
                "value": "string",
                "description": "The merchandise ID being added."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being added."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The attributes associated with the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlanId",
                "value": "string",
                "description": "The identifier of the selling plan that the merchandise is being purchased\nwith.",
                "isOptional": true
              }
            ],
            "value": "export interface CartLineAddChange {\n  /**\n   * An identifier for changes that add line items.\n   */\n  type: 'addCartLine';\n\n  /**\n   * The merchandise ID being added.\n   * @example 'gid://shopify/ProductVariant/123'\n   */\n  merchandiseId: string;\n\n  /**\n   * The quantity of the merchandise being added.\n   */\n  quantity: number;\n\n  /**\n   * The attributes associated with the line item.\n   */\n  attributes?: Attribute[];\n\n  /**\n   * The identifier of the selling plan that the merchandise is being purchased\n   * with.\n   */\n  sellingPlanId?: SellingPlan['id'];\n}"
          },
          "CartLine": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLine",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "These line item IDs are not stable at the moment, they might change after\nany operations on the line items. You should always look up for an updated\nID before any call to `applyCartLinesChange` because you'll need the ID to\ncreate a `CartLineChange` object."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The details about the cost components attributed to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The line item additional custom attributes."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountAllocations",
                "value": "CartDiscountAllocation[]",
                "description": "Discounts applied to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lineComponents",
                "value": "CartBundleLineComponent[]",
                "description": "Sub lines of the merchandise line. If no sub lines are present, this will be an empty array."
              }
            ],
            "value": "export interface CartLine {\n  /**\n   * These line item IDs are not stable at the moment, they might change after\n   * any operations on the line items. You should always look up for an updated\n   * ID before any call to `applyCartLinesChange` because you'll need the ID to\n   * create a `CartLineChange` object.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise being purchased.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of the merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The details about the cost components attributed to the cart line.\n   */\n  cost: CartLineCost;\n\n  /**\n   * The line item additional custom attributes.\n   */\n  attributes: Attribute[];\n\n  /**\n   * Discounts applied to the cart line.\n   */\n  discountAllocations: CartDiscountAllocation[];\n\n  /**\n   * Sub lines of the merchandise line. If no sub lines are present, this will be an empty array.\n   */\n  lineComponents: CartLineComponentType[];\n}"
          },
          "Merchandise": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Merchandise",
            "value": "ProductVariant",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"variant\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The product variant’s title."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "string",
                "description": "The product variant's subtitle.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "Image associated with the product variant. This field falls back to the product\nimage if no image is available.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "selectedOptions",
                "value": "SelectedOption[]",
                "description": "List of product options applied to the variant."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "product",
                "value": "Product",
                "description": "The product object that the product variant belongs to."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "requiresShipping",
                "value": "boolean",
                "description": "Whether or not the product requires shipping."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlan",
                "value": "SellingPlan",
                "description": "The selling plan associated with the merchandise.",
                "isOptional": true
              }
            ]
          },
          "SelectedOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "SelectedOption",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the merchandise option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value of the merchandise option."
              }
            ],
            "value": "export interface SelectedOption {\n  /**\n   * The name of the merchandise option.\n   */\n  name: string;\n\n  /**\n   * The value of the merchandise option.\n   */\n  value: string;\n}"
          },
          "Product": {
            "filePath": "/api/standard/standard.ts",
            "name": "Product",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "vendor",
                "value": "string",
                "description": "The product’s vendor name."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "productType",
                "value": "string",
                "description": "A categorization that a product can be tagged with, commonly used for filtering and searching."
              }
            ],
            "value": "export interface Product {\n  /**\n   * A globally-unique identifier.\n   */\n  id: string;\n\n  /**\n   * The product’s vendor name.\n   */\n  vendor: string;\n\n  /**\n   * A categorization that a product can be tagged with, commonly used for filtering and searching.\n   */\n  productType: string;\n}"
          },
          "SellingPlan": {
            "filePath": "/api/shared.ts",
            "name": "SellingPlan",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              }
            ],
            "value": "export interface SellingPlan {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/SellingPlan/1'\n   */\n  id: string;\n}"
          },
          "CartLineCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLineCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "Money",
                "description": "The total amount after reductions the buyer can expect to pay that is directly attributable to a single\ncart line."
              }
            ],
            "value": "export interface CartLineCost {\n  /**\n   * The total amount after reductions the buyer can expect to pay that is directly attributable to a single\n   * cart line.\n   */\n  totalAmount: Money;\n}"
          },
          "CartBundleLineComponent": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartBundleLineComponent",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"bundle\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the bundle line component.\n\nThis ID is not stable. If an operation updates the line items in any way, all IDs could change."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise of this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The cost attributed to this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "Additional custom attributes for the bundle line component."
              }
            ],
            "value": "export interface CartBundleLineComponent {\n  type: 'bundle';\n\n  /**\n   * A unique identifier for the bundle line component.\n   *\n   * This ID is not stable. If an operation updates the line items in any way, all IDs could change.\n   *\n   * @example 'gid://shopify/CartLineComponent/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise of this bundle line component.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The cost attributed to this bundle line component.\n   */\n  cost: CartLineCost;\n\n  /**\n   * Additional custom attributes for the bundle line component.\n   *\n   * @example [{key: 'engraving', value: 'hello world'}]\n   */\n  attributes: Attribute[];\n}"
          },
          "CartLineRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineRemoveChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeCartLine\"",
                "description": "An identifier for changes that remove line items."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Line Item ID."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity being removed for this line item."
              }
            ],
            "value": "export interface CartLineRemoveChange {\n  /**\n   * An identifier for changes that remove line items.\n   */\n  type: 'removeCartLine';\n\n  /**\n   * Line Item ID.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The quantity being removed for this line item.\n   */\n  quantity: number;\n}"
          },
          "CartLineUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineUpdateChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateCartLine\"",
                "description": "An identifier for changes that update line items."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Line Item ID."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandiseId",
                "value": "string",
                "description": "The new merchandise ID for the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The new quantity for the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The new attributes for the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlanId",
                "value": "string",
                "description": "The identifier of the selling plan that the merchandise is being purchased\nwith or `null` to remove the the product from the selling plan.",
                "isOptional": true
              }
            ],
            "value": "export interface CartLineUpdateChange {\n  /**\n   * An identifier for changes that update line items.\n   */\n  type: 'updateCartLine';\n\n  /**\n   * Line Item ID.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The new merchandise ID for the line item.\n   * @example 'gid://shopify/ProductVariant/123'\n   */\n\n  merchandiseId?: string;\n  /**\n   * The new quantity for the line item.\n   */\n  quantity?: number;\n\n  /**\n   * The new attributes for the line item.\n   */\n  attributes?: Attribute[];\n\n  /**\n   * The identifier of the selling plan that the merchandise is being purchased\n   * with or `null` to remove the the product from the selling plan.\n   */\n  sellingPlanId?: SellingPlan['id'] | null;\n}"
          },
          "CartLineChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartLineChangeResult",
            "value": "CartLineChangeResultSuccess | CartLineChangeResultError",
            "description": ""
          },
          "CartLineChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the line item was changed successfully."
              }
            ],
            "value": "export interface CartLineChangeResultSuccess {\n  /**\n   * Indicates that the line item was changed successfully.\n   */\n  type: 'success';\n}"
          },
          "CartLineChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the line item was not changed successfully. Refer to the `message` property for details about the error."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface CartLineChangeResultError {\n  /**\n   * Indicates that the line item was not changed successfully. Refer to the `message` property for details about the error.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "DiscountCodeChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DiscountCodeChange",
            "value": "DiscountCodeAddChange | DiscountCodeRemoveChange",
            "description": ""
          },
          "DiscountCodeAddChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeAddChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"addDiscountCode\"",
                "description": "The type of the `DiscountCodeChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              }
            ],
            "value": "export interface DiscountCodeAddChange {\n  /**\n   * The type of the `DiscountCodeChange` API.\n   */\n  type: 'addDiscountCode';\n\n  /**\n   * The code for the discount\n   */\n  code: string;\n}"
          },
          "DiscountCodeRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeRemoveChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeDiscountCode\"",
                "description": "The type of the `DiscountCodeChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              }
            ],
            "value": "export interface DiscountCodeRemoveChange {\n  /**\n   * The type of the `DiscountCodeChange` API.\n   */\n  type: 'removeDiscountCode';\n\n  /**\n   * The code for the discount\n   */\n  code: string;\n}"
          },
          "DiscountCodeChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DiscountCodeChangeResult",
            "value": "DiscountCodeChangeResultSuccess | DiscountCodeChangeResultError",
            "description": ""
          },
          "DiscountCodeChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the discount code change was applied successfully."
              }
            ],
            "value": "export interface DiscountCodeChangeResultSuccess {\n  /**\n   * Indicates that the discount code change was applied successfully.\n   */\n  type: 'success';\n}"
          },
          "DiscountCodeChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the discount code change failed."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface DiscountCodeChangeResultError {\n  /**\n   * Indicates that the discount code change failed.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "GiftCardChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "GiftCardChange",
            "value": "GiftCardAddChange | GiftCardRemoveChange",
            "description": ""
          },
          "GiftCardAddChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardAddChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"addGiftCard\"",
                "description": "The type of the `GiftCardChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "Gift card code."
              }
            ],
            "value": "export interface GiftCardAddChange {\n  /**\n   * The type of the `GiftCardChange` API.\n   */\n  type: 'addGiftCard';\n\n  /**\n   * Gift card code.\n   */\n  code: string;\n}"
          },
          "GiftCardRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardRemoveChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeGiftCard\"",
                "description": "The type of the `GiftCardChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "Gift card code."
              }
            ],
            "value": "export interface GiftCardRemoveChange {\n  /**\n   * The type of the `GiftCardChange` API.\n   */\n  type: 'removeGiftCard';\n\n  /**\n   * Gift card code.\n   */\n  code: string;\n}"
          },
          "GiftCardChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "GiftCardChangeResult",
            "value": "GiftCardChangeResultSuccess | GiftCardChangeResultError",
            "description": ""
          },
          "GiftCardChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the gift card change was applied successfully."
              }
            ],
            "value": "export interface GiftCardChangeResultSuccess {\n  /**\n   * Indicates that the gift card change was applied successfully.\n   */\n  type: 'success';\n}"
          },
          "GiftCardChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the gift card change failed."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface GiftCardChangeResultError {\n  /**\n   * Indicates that the gift card change failed.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "MetafieldChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MetafieldChange",
            "value": "MetafieldRemoveChange | MetafieldUpdateChange",
            "description": ""
          },
          "MetafieldRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldRemoveChange",
            "description": "Removes a metafield.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeMetafield\"",
                "description": "The type of the `MetafieldRemoveChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield to remove."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "The namespace of the metafield to remove."
              }
            ],
            "value": "export interface MetafieldRemoveChange {\n  /**\n   * The type of the `MetafieldRemoveChange` API.\n   */\n  type: 'removeMetafield';\n\n  /**\n   * The name of the metafield to remove.\n   */\n  key: string;\n\n  /**\n   * The namespace of the metafield to remove.\n   */\n  namespace: string;\n}"
          },
          "Metafield": {
            "filePath": "/api/standard/standard.ts",
            "name": "Metafield",
            "description": "Metadata associated with the checkout.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield. It must be between 3 and 30 characters in\nlength (inclusive)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "A container for a set of metafields. You need to define a custom\nnamespace for your metafields to distinguish them from the metafields\nused by other apps. This must be between 2 and 20 characters in length (inclusive)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number",
                "description": "The information to be stored as metadata."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"integer\" | \"json_string\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface Metafield {\n  /**\n   * The name of the metafield. It must be between 3 and 30 characters in\n   * length (inclusive).\n   */\n  key: string;\n\n  /**\n   * A container for a set of metafields. You need to define a custom\n   * namespace for your metafields to distinguish them from the metafields\n   * used by other apps. This must be between 2 and 20 characters in length (inclusive).\n   */\n  namespace: string;\n\n  /**\n   * The information to be stored as metadata.\n   */\n  value: string | number;\n\n  /** The metafield’s information type. */\n  valueType: 'integer' | 'string' | 'json_string';\n}"
          },
          "MetafieldUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldUpdateChange",
            "description": "Updates a metafield. If a metafield with the\nprovided key and namespace does not already exist, it gets created.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateMetafield\"",
                "description": "The type of the `MetafieldUpdateChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield to update."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "The namespace of the metafield to add."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number",
                "description": "The new information to store in the metafield."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"integer\" | \"json_string\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface MetafieldUpdateChange {\n  /**\n   * The type of the `MetafieldUpdateChange` API.\n   */\n  type: 'updateMetafield';\n\n  /** The name of the metafield to update. */\n  key: string;\n\n  /** The namespace of the metafield to add. */\n  namespace: string;\n\n  /** The new information to store in the metafield. */\n  value: string | number;\n\n  /**\n   * The metafield’s information type.\n   */\n  valueType: 'integer' | 'string' | 'json_string';\n}"
          },
          "MetafieldChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MetafieldChangeResult",
            "value": "MetafieldChangeResultSuccess | MetafieldChangeResultError",
            "description": ""
          },
          "MetafieldChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "The type of the `MetafieldChangeResultSuccess` API."
              }
            ],
            "value": "export interface MetafieldChangeResultSuccess {\n  /**\n   * The type of the `MetafieldChangeResultSuccess` API.\n   */\n  type: 'success';\n}"
          },
          "MetafieldChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "The type of the `MetafieldChangeResultError` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface MetafieldChangeResultError {\n  /**\n   * The type of the `MetafieldChangeResultError` API.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "NoteChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NoteChange",
            "value": "NoteRemoveChange | NoteUpdateChange",
            "description": ""
          },
          "NoteRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteRemoveChange",
            "description": "Removes a note",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeNote\"",
                "description": "The type of the `NoteRemoveChange` API."
              }
            ],
            "value": "export interface NoteRemoveChange {\n  /**\n   * The type of the `NoteRemoveChange` API.\n   */\n  type: 'removeNote';\n}"
          },
          "NoteUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteUpdateChange",
            "description": "An Update to a note on the order.\nfor example, the buyer could request detailed packaging instructions in an order note",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateNote\"",
                "description": "The type of the `NoteUpdateChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "note",
                "value": "string",
                "description": "The new value of the note."
              }
            ],
            "value": "export interface NoteUpdateChange {\n  /**\n   * The type of the `NoteUpdateChange` API.\n   */\n  type: 'updateNote';\n  /**\n   * The new value of the note.\n   */\n  note: string;\n}"
          },
          "NoteChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NoteChangeResult",
            "value": "NoteChangeResultSuccess | NoteChangeResultError",
            "description": ""
          },
          "NoteChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "The type of the `NoteChangeResultSuccess` API."
              }
            ],
            "value": "export interface NoteChangeResultSuccess {\n  /**\n   * The type of the `NoteChangeResultSuccess` API.\n   */\n  type: 'success';\n}"
          },
          "NoteChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "The type of the `NoteChangeResultError` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface NoteChangeResultError {\n  /**\n   * The type of the `NoteChangeResultError` API.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "AllComponents": {
            "filePath": "/extension-points.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AllComponents",
            "value": "Components[keyof Components]",
            "description": ""
          },
          "Components": {
            "filePath": "/extension-points.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Components",
            "value": "typeof import('./components')",
            "description": ""
          },
          "OrderStatusApi": {
            "filePath": "/api/order-status/order-status.ts",
            "name": "OrderStatusApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "order",
                "value": "StatefulRemoteSubscribable<Order | undefined>",
                "description": "Order information that's available post-checkout."
              }
            ],
            "value": "export interface OrderStatusApi {\n  /**\n   * Order information that's available post-checkout.\n   */\n  order: StatefulRemoteSubscribable<Order | undefined>;\n}"
          },
          "Order": {
            "filePath": "/api/order-status/order-status.ts",
            "name": "Order",
            "description": "Information about an order that was placed.",
            "members": [
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "Unique identifier for the order that appears on the order."
              },
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "cancelledAt",
                "value": "string",
                "description": "If cancelled, the time at which the order was cancelled.",
                "isOptional": true
              }
            ],
            "value": "export interface Order {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/Order/1'\n   */\n  id: string;\n  /**\n   * Unique identifier for the order that appears on the order.\n   * @example '#1000'\n   */\n  name: string;\n  /**\n   * If cancelled, the time at which the order was cancelled.\n   */\n  cancelledAt?: string;\n}"
          },
          "CartLineDetailsApi": {
            "filePath": "/api/cart-line/cart-line-details.ts",
            "name": "CartLineDetailsApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/cart-line/cart-line-details.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "StatefulRemoteSubscribable<PresentmentCartLine>",
                "description": "The cart line the extension is attached to."
              }
            ],
            "value": "export interface CartLineDetailsApi {\n  /**\n   * The cart line the extension is attached to.\n   */\n  target: StatefulRemoteSubscribable<PresentmentCartLine>;\n}"
          },
          "PresentmentCartLine": {
            "filePath": "/api/standard/standard.ts",
            "name": "PresentmentCartLine",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The ID of the present cart line. This ID isn't stable and might change after\nany operations on the line items."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "PresentmentCartLineCost",
                "description": "The details about the cost components attributed to the presentment cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the line item."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "string",
                "description": "The subtitle of the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "The image associated with the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lines",
                "value": "CartLine[]",
                "description": "The merchandise lines being purchased."
              }
            ],
            "value": "export interface PresentmentCartLine {\n  /**\n   * The ID of the present cart line. This ID isn't stable and might change after\n   * any operations on the line items.\n   * @example 'gid://shopify/PresentmentCartLine/123'\n   */\n  id: string;\n\n  /**\n   * The quantity of the merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The details about the cost components attributed to the presentment cart line.\n   */\n  cost: PresentmentCartLineCost;\n\n  /**\n   * The title of the line item.\n   */\n  title: string;\n\n  /**\n   * The subtitle of the line item.\n   */\n  subtitle?: string;\n\n  /**\n   * The image associated with the line item.\n   */\n  image?: ImageDetails;\n\n  /**\n   * The merchandise lines being purchased.\n   */\n  lines: CartLine[];\n}"
          },
          "PresentmentCartLineCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "PresentmentCartLineCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "Money",
                "description": "The total cost of the merchandise line."
              }
            ],
            "value": "export interface PresentmentCartLineCost {\n  /**\n   * The total cost of the merchandise line.\n   */\n  totalAmount: Money;\n}"
          },
          "RedeemableRenderApi": {
            "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
            "name": "RedeemableRenderApi",
            "description": "",
            "members": [
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyRedeemableChange",
                "value": "(change: RedeemableAddChange) => Promise<RedeemableChangeResult>",
                "description": "Applies a redeemable change to add a redeemable payment method."
              }
            ],
            "value": "export interface RedeemableRenderApi {\n  /**\n   * Applies a redeemable change to add a redeemable payment method.\n   */\n  applyRedeemableChange(\n    change: RedeemableChange,\n  ): Promise<RedeemableChangeResult>;\n}"
          },
          "RedeemableAddChange": {
            "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
            "name": "RedeemableAddChange",
            "description": "",
            "members": [
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"redeemableAddChange\"",
                "description": "The type of the `RedeemableChange` API."
              },
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "RedeemableAttribute[]",
                "description": "The redeemable attributes"
              }
            ],
            "value": "export interface RedeemableAddChange {\n  /**\n   * The type of the `RedeemableChange` API.\n   */\n  type: 'redeemableAddChange';\n\n  /**\n   * The redeemable attributes\n   */\n  attributes: RedeemableAttribute[];\n}"
          },
          "RedeemableAttribute": {
            "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
            "name": "RedeemableAttribute",
            "description": "A key-value pair that represents an attribute of a redeemable payment method.",
            "members": [
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": ""
              }
            ],
            "value": "export interface RedeemableAttribute {\n  key: string;\n  value: string;\n}"
          },
          "RedeemableChangeResult": {
            "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "RedeemableChangeResult",
            "value": "RedeemableChangeResultSuccess | RedeemableChangeResultError",
            "description": ""
          },
          "RedeemableChangeResultSuccess": {
            "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
            "name": "RedeemableChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the redeemable change was applied successfully."
              }
            ],
            "value": "export interface RedeemableChangeResultSuccess {\n  /**\n   * Indicates that the redeemable change was applied successfully.\n   */\n  type: 'success';\n}"
          },
          "RedeemableChangeResultError": {
            "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
            "name": "RedeemableChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the redeemable change was not applied successfully."
              },
              {
                "filePath": "home/spin/src/github.com/Shopify/ui-extensions/packages/checkout-ui-extensions/src/api/redeemable/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface RedeemableChangeResultError {\n  /**\n   * Indicates that the redeemable change was not applied successfully.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "PaymentMethodRenderApi": {
            "filePath": "/api/payment-method/render.ts",
            "name": "PaymentMethodRenderApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyPaymentMethodAttributesChange",
                "value": "(change: PaymentMethodAttributesUpdateChange) => Promise<PaymentMethodAttributesResult>",
                "description": "Sets the attributes of the related payment method."
              }
            ],
            "value": "export interface PaymentMethodRenderApi {\n  /**\n   * Sets the attributes of the related payment method.\n   */\n  applyPaymentMethodAttributesChange(\n    change: PaymentMethodAttributesChange,\n  ): Promise<PaymentMethodAttributesResult>;\n}"
          },
          "PaymentMethodAttributesUpdateChange": {
            "filePath": "/api/payment-method/render.ts",
            "name": "PaymentMethodAttributesUpdateChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updatePaymentMethodAttributes\"",
                "description": "The type of the `PaymentMethodAttributesChange` API."
              },
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "PaymentMethodAttribute[]",
                "description": "The payment method attributes"
              }
            ],
            "value": "export interface PaymentMethodAttributesUpdateChange {\n  /**\n   * The type of the `PaymentMethodAttributesChange` API.\n   */\n  type: 'updatePaymentMethodAttributes';\n\n  /**\n   * The payment method attributes\n   */\n  attributes: PaymentMethodAttribute[];\n}"
          },
          "PaymentMethodAttribute": {
            "filePath": "/api/payment-method/render.ts",
            "name": "PaymentMethodAttribute",
            "description": "A key-value pair that represents an attribute of a payment method.",
            "members": [
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number | boolean",
                "description": ""
              }
            ],
            "value": "export interface PaymentMethodAttribute {\n  key: string;\n  value: string | number | boolean;\n}"
          },
          "PaymentMethodAttributesResult": {
            "filePath": "/api/payment-method/render.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "PaymentMethodAttributesResult",
            "value": "PaymentMethodAttributesResultSuccess | PaymentMethodAttributesResultError",
            "description": ""
          },
          "PaymentMethodAttributesResultSuccess": {
            "filePath": "/api/payment-method/render.ts",
            "name": "PaymentMethodAttributesResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the payment method attributes were set successfully."
              }
            ],
            "value": "export interface PaymentMethodAttributesResultSuccess {\n  /**\n   * Indicates that the payment method attributes were set successfully.\n   */\n  type: 'success';\n}"
          },
          "PaymentMethodAttributesResultError": {
            "filePath": "/api/payment-method/render.ts",
            "name": "PaymentMethodAttributesResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the payment method attributes were not set successfully."
              },
              {
                "filePath": "/api/payment-method/render.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface PaymentMethodAttributesResultError {\n  /**\n   * Indicates that the payment method attributes were not set successfully.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          },
          "PickupLocationsApi": {
            "filePath": "/api/pickup/pickup-locations.ts",
            "name": "PickupLocationsApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/pickup/pickup-locations.ts",
                "syntaxKind": "PropertySignature",
                "name": "locationFormVisible",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "Whether the customer location input form is shown to the buyer."
              }
            ],
            "value": "export interface PickupLocationsApi {\n  /**\n   * Whether the customer location input form is shown to the buyer.\n   */\n  locationFormVisible: StatefulRemoteSubscribable<boolean>;\n}"
          },
          "ShippingMethodDetailsApi": {
            "filePath": "/api/shipping/shipping-method-details.ts",
            "name": "ShippingMethodDetailsApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/shipping/shipping-method-details.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "StatefulRemoteSubscribable<ShippingOption>",
                "description": "The shipping option the extension is attached to."
              },
              {
                "filePath": "/api/shipping/shipping-method-details.ts",
                "syntaxKind": "PropertySignature",
                "name": "targetSelected",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "Whether the shipping option the extension is attached to is currently selected in the UI."
              }
            ],
            "value": "export interface ShippingMethodDetailsApi {\n  /**\n   * The shipping option the extension is attached to.\n   */\n  target: StatefulRemoteSubscribable<ShippingOption>;\n\n  /**\n   * Whether the shipping option the extension is attached to is currently selected in the UI.\n   */\n  targetSelected: StatefulRemoteSubscribable<boolean>;\n}"
          },
          "ShippingOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "ShippingOption",
            "description": "Represents a delivery option that is a shipping option.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"shipping\" | \"local\"",
                "description": "The type of this delivery option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "carrier",
                "value": "ShippingOptionCarrier",
                "description": "Information about the carrier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "Money",
                "description": "The cost of the delivery."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "costAfterDiscounts",
                "value": "Money",
                "description": "The cost of the delivery including discounts."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "deliveryEstimate",
                "value": "DeliveryEstimate",
                "description": "Information about the estimated delivery time."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique identifier of the delivery option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the delivery option.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "description",
                "value": "string",
                "description": "The description of the delivery option.",
                "isOptional": true
              }
            ],
            "value": "export interface ShippingOption extends DeliveryOption {\n  /**\n   * The type of this delivery option.\n   */\n  type: 'shipping' | 'local';\n\n  /**\n   * Information about the carrier.\n   */\n  carrier: ShippingOptionCarrier;\n\n  /**\n   * The cost of the delivery.\n   */\n  cost: Money;\n\n  /**\n   * The cost of the delivery including discounts.\n   */\n  costAfterDiscounts: Money;\n\n  /**\n   * Information about the estimated delivery time.\n   */\n  deliveryEstimate: DeliveryEstimate;\n}"
          },
          "ShippingOptionCarrier": {
            "filePath": "/api/standard/standard.ts",
            "name": "ShippingOptionCarrier",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the carrier.",
                "isOptional": true
              }
            ],
            "value": "export interface ShippingOptionCarrier {\n  /**\n   * The name of the carrier.\n   */\n  name?: string;\n}"
          },
          "DeliveryEstimate": {
            "filePath": "/api/standard/standard.ts",
            "name": "DeliveryEstimate",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "timeInTransit",
                "value": "NumberRange",
                "description": "The estimated time in transit for the delivery in seconds.",
                "isOptional": true
              }
            ],
            "value": "export interface DeliveryEstimate {\n  /**\n   * The estimated time in transit for the delivery in seconds.\n   */\n  timeInTransit?: NumberRange;\n}"
          },
          "NumberRange": {
            "filePath": "/api/standard/standard.ts",
            "name": "NumberRange",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lower",
                "value": "number",
                "description": "The lower bound of the number range.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "upper",
                "value": "number",
                "description": "The upper bound of the number range.",
                "isOptional": true
              }
            ],
            "value": "export interface NumberRange {\n  /**\n   * The lower bound of the number range.\n   */\n  lower?: number;\n\n  /**\n   * The upper bound of the number range.\n   */\n  upper?: number;\n}"
          },
          "PickupPointsApi": {
            "filePath": "/api/pickup/pickup-points.ts",
            "name": "PickupPointsApi",
            "description": "",
            "members": [
              {
                "filePath": "/api/pickup/pickup-points.ts",
                "syntaxKind": "PropertySignature",
                "name": "locationFormVisible",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "Whether the customer location input form is shown to the buyer."
              }
            ],
            "value": "export interface PickupPointsApi {\n  /**\n   * Whether the customer location input form is shown to the buyer.\n   */\n  locationFormVisible: StatefulRemoteSubscribable<boolean>;\n}"
          },
          "I18n": {
            "filePath": "/api/standard/standard.ts",
            "name": "I18n",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "formatNumber",
                "value": "(number: number | bigint, options?: { inExtensionLocale?: boolean; } & NumberFormatOptions) => string",
                "description": "Returns a localized number.\n\nThis function behaves like the standard `Intl.NumberFormat()`\nwith a style of `decimal` applied. It uses the buyer's locale by default."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "formatCurrency",
                "value": "(number: number | bigint, options?: { inExtensionLocale?: boolean; } & NumberFormatOptions) => string",
                "description": "Returns a localized currency value.\n\nThis function behaves like the standard `Intl.NumberFormat()`\nwith a style of `currency` applied. It uses the buyer's locale by default."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "formatDate",
                "value": "(date: Date, options?: { inExtensionLocale?: boolean; } & DateTimeFormatOptions) => string",
                "description": "Returns a localized date value.\n\nThis function behaves like the standard `Intl.DateTimeFormatOptions()` and uses\nthe buyer's locale by default. Formatting options can be passed in as\noptions."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "translate",
                "value": "I18nTranslate",
                "description": "Returns translated content in the buyer's locale,\nas supported by the extension.\n\n- `options.count` is a special numeric value used in pluralization.\n- The other option keys and values are treated as replacements for interpolation.\n- If the replacements are all primitives, then `translate()` returns a single string.\n- If replacements contain UI components, then `translate()` returns an array of elements."
              }
            ],
            "value": "export interface I18n {\n  /**\n   * Returns a localized number.\n   *\n   * This function behaves like the standard `Intl.NumberFormat()`\n   * with a style of `decimal` applied. It uses the buyer's locale by default.\n   *\n   * @param options.inExtensionLocale - if true, use the extension's locale\n   */\n  formatNumber: (\n    number: number | bigint,\n    options?: {inExtensionLocale?: boolean} & Intl.NumberFormatOptions,\n  ) => string;\n\n  /**\n   * Returns a localized currency value.\n   *\n   * This function behaves like the standard `Intl.NumberFormat()`\n   * with a style of `currency` applied. It uses the buyer's locale by default.\n   *\n   * @param options.inExtensionLocale - if true, use the extension's locale\n   */\n  formatCurrency: (\n    number: number | bigint,\n    options?: {inExtensionLocale?: boolean} & Intl.NumberFormatOptions,\n  ) => string;\n\n  /**\n   * Returns a localized date value.\n   *\n   * This function behaves like the standard `Intl.DateTimeFormatOptions()` and uses\n   * the buyer's locale by default. Formatting options can be passed in as\n   * options.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat0\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options\n   *\n   * @param options.inExtensionLocale - if true, use the extension's locale\n   */\n  formatDate: (\n    date: Date,\n    options?: {inExtensionLocale?: boolean} & Intl.DateTimeFormatOptions,\n  ) => string;\n\n  /**\n   * Returns translated content in the buyer's locale,\n   * as supported by the extension.\n   *\n   * - `options.count` is a special numeric value used in pluralization.\n   * - The other option keys and values are treated as replacements for interpolation.\n   * - If the replacements are all primitives, then `translate()` returns a single string.\n   * - If replacements contain UI components, then `translate()` returns an array of elements.\n   */\n  translate: I18nTranslate;\n}"
          },
          "I18nTranslate": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "I18nTranslate",
            "value": "(\n  key: string,\n  options?: {[placeholderKey: string]: ReplacementType | string | number},\n) => ReplacementType extends string | number\n  ? string\n  : (string | ReplacementType)[]",
            "description": "This returns a translated string matching a key in a locale file."
          },
          "Localization": {
            "filePath": "/api/standard/standard.ts",
            "name": "Localization",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currency",
                "value": "StatefulRemoteSubscribable<Currency>",
                "description": "The currency that the buyer sees for money amounts in the checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "timezone",
                "value": "StatefulRemoteSubscribable<Timezone>",
                "description": "The buyer’s time zone."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "language",
                "value": "StatefulRemoteSubscribable<Language>",
                "description": "The language the buyer sees in the checkout."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "extensionLanguage",
                "value": "StatefulRemoteSubscribable<Language>",
                "description": "This is the buyer's language, as supported by the extension.\nIf the buyer's actual language is not supported by the extension,\nthis is the fallback locale used for translations.\n\nFor example, if the buyer's language is 'fr-CA' but your extension\nonly supports translations for 'fr', then the `isoCode` for this\nlanguage is 'fr'. If your extension does not provide french\ntranslations at all, this value is the default locale for your\nextension (that is, the one matching your .default.json file)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "country",
                "value": "StatefulRemoteSubscribable<Country | undefined>",
                "description": "The country context of the checkout. This value carries over from the\ncontext of the cart, where it was used to contextualize the storefront\nexperience. It will update if the buyer changes the country of their\nshipping address. The value is undefined if unknown."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "market",
                "value": "StatefulRemoteSubscribable<Market | undefined>",
                "description": "The [market](/docs/apps/markets) context of the\ncheckout. This value carries over from the context of the cart, where it\nwas used to contextualize the storefront experience. It will update if the\nbuyer changes the country of their shipping address. The value is undefined\nif unknown."
              }
            ],
            "value": "export interface Localization {\n  /**\n   * The currency that the buyer sees for money amounts in the checkout.\n   */\n  currency: StatefulRemoteSubscribable<Currency>;\n\n  /**\n   * The buyer’s time zone.\n   */\n  timezone: StatefulRemoteSubscribable<Timezone>;\n\n  /**\n   * The language the buyer sees in the checkout.\n   */\n  language: StatefulRemoteSubscribable<Language>;\n\n  /**\n   * This is the buyer's language, as supported by the extension.\n   * If the buyer's actual language is not supported by the extension,\n   * this is the fallback locale used for translations.\n   *\n   * For example, if the buyer's language is 'fr-CA' but your extension\n   * only supports translations for 'fr', then the `isoCode` for this\n   * language is 'fr'. If your extension does not provide french\n   * translations at all, this value is the default locale for your\n   * extension (that is, the one matching your .default.json file).\n   */\n  extensionLanguage: StatefulRemoteSubscribable<Language>;\n\n  /**\n   * The country context of the checkout. This value carries over from the\n   * context of the cart, where it was used to contextualize the storefront\n   * experience. It will update if the buyer changes the country of their\n   * shipping address. The value is undefined if unknown.\n   */\n  country: StatefulRemoteSubscribable<Country | undefined>;\n\n  /**\n   * The [market](/docs/apps/markets) context of the\n   * checkout. This value carries over from the context of the cart, where it\n   * was used to contextualize the storefront experience. It will update if the\n   * buyer changes the country of their shipping address. The value is undefined\n   * if unknown.\n   */\n  market: StatefulRemoteSubscribable<Market | undefined>;\n}"
          },
          "Currency": {
            "filePath": "/api/standard/standard.ts",
            "name": "Currency",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "isoCode",
                "value": "CurrencyCode",
                "description": "The ISO-4217 code for this currency."
              }
            ],
            "value": "export interface Currency {\n  /**\n   * The ISO-4217 code for this currency.\n   * @see https://www.iso.org/iso-4217-currency-codes.html\n   */\n  isoCode: CurrencyCode;\n}"
          },
          "Timezone": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Timezone",
            "value": "'Africa/Abidjan' | 'Africa/Algiers' | 'Africa/Bissau' | 'Africa/Cairo' | 'Africa/Casablanca' | 'Africa/Ceuta' | 'Africa/El_Aaiun' | 'Africa/Johannesburg' | 'Africa/Juba' | 'Africa/Khartoum' | 'Africa/Lagos' | 'Africa/Maputo' | 'Africa/Monrovia' | 'Africa/Nairobi' | 'Africa/Ndjamena' | 'Africa/Sao_Tome' | 'Africa/Tripoli' | 'Africa/Tunis' | 'Africa/Windhoek' | 'America/Adak' | 'America/Anchorage' | 'America/Araguaina' | 'America/Argentina/Buenos_Aires' | 'America/Argentina/Catamarca' | 'America/Argentina/Cordoba' | 'America/Argentina/Jujuy' | 'America/Argentina/La_Rioja' | 'America/Argentina/Mendoza' | 'America/Argentina/Rio_Gallegos' | 'America/Argentina/Salta' | 'America/Argentina/San_Juan' | 'America/Argentina/San_Luis' | 'America/Argentina/Tucuman' | 'America/Argentina/Ushuaia' | 'America/Asuncion' | 'America/Bahia' | 'America/Bahia_Banderas' | 'America/Barbados' | 'America/Belem' | 'America/Belize' | 'America/Boa_Vista' | 'America/Bogota' | 'America/Boise' | 'America/Cambridge_Bay' | 'America/Campo_Grande' | 'America/Cancun' | 'America/Caracas' | 'America/Cayenne' | 'America/Chicago' | 'America/Chihuahua' | 'America/Costa_Rica' | 'America/Cuiaba' | 'America/Danmarkshavn' | 'America/Dawson' | 'America/Dawson_Creek' | 'America/Denver' | 'America/Detroit' | 'America/Edmonton' | 'America/Eirunepe' | 'America/El_Salvador' | 'America/Fort_Nelson' | 'America/Fortaleza' | 'America/Glace_Bay' | 'America/Goose_Bay' | 'America/Grand_Turk' | 'America/Guatemala' | 'America/Guayaquil' | 'America/Guyana' | 'America/Halifax' | 'America/Havana' | 'America/Hermosillo' | 'America/Indiana/Indianapolis' | 'America/Indiana/Knox' | 'America/Indiana/Marengo' | 'America/Indiana/Petersburg' | 'America/Indiana/Tell_City' | 'America/Indiana/Vevay' | 'America/Indiana/Vincennes' | 'America/Indiana/Winamac' | 'America/Inuvik' | 'America/Iqaluit' | 'America/Jamaica' | 'America/Juneau' | 'America/Kentucky/Louisville' | 'America/Kentucky/Monticello' | 'America/La_Paz' | 'America/Lima' | 'America/Los_Angeles' | 'America/Maceio' | 'America/Managua' | 'America/Manaus' | 'America/Martinique' | 'America/Matamoros' | 'America/Mazatlan' | 'America/Menominee' | 'America/Merida' | 'America/Metlakatla' | 'America/Mexico_City' | 'America/Miquelon' | 'America/Moncton' | 'America/Monterrey' | 'America/Montevideo' | 'America/New_York' | 'America/Nipigon' | 'America/Nome' | 'America/Noronha' | 'America/North_Dakota/Beulah' | 'America/North_Dakota/Center' | 'America/North_Dakota/New_Salem' | 'America/Nuuk' | 'America/Ojinaga' | 'America/Panama' | 'America/Pangnirtung' | 'America/Paramaribo' | 'America/Phoenix' | 'America/Port-au-Prince' | 'America/Porto_Velho' | 'America/Puerto_Rico' | 'America/Punta_Arenas' | 'America/Rainy_River' | 'America/Rankin_Inlet' | 'America/Recife' | 'America/Regina' | 'America/Resolute' | 'America/Rio_Branco' | 'America/Santarem' | 'America/Santiago' | 'America/Santo_Domingo' | 'America/Sao_Paulo' | 'America/Scoresbysund' | 'America/Sitka' | 'America/St_Johns' | 'America/Swift_Current' | 'America/Tegucigalpa' | 'America/Thule' | 'America/Thunder_Bay' | 'America/Tijuana' | 'America/Toronto' | 'America/Vancouver' | 'America/Whitehorse' | 'America/Winnipeg' | 'America/Yakutat' | 'America/Yellowknife' | 'Antarctica/Casey' | 'Antarctica/Davis' | 'Antarctica/Macquarie' | 'Antarctica/Mawson' | 'Antarctica/Palmer' | 'Antarctica/Rothera' | 'Antarctica/Troll' | 'Antarctica/Vostok' | 'Asia/Almaty' | 'Asia/Amman' | 'Asia/Anadyr' | 'Asia/Aqtau' | 'Asia/Aqtobe' | 'Asia/Ashgabat' | 'Asia/Atyrau' | 'Asia/Baghdad' | 'Asia/Baku' | 'Asia/Bangkok' | 'Asia/Barnaul' | 'Asia/Beirut' | 'Asia/Bishkek' | 'Asia/Brunei' | 'Asia/Chita' | 'Asia/Choibalsan' | 'Asia/Colombo' | 'Asia/Damascus' | 'Asia/Dhaka' | 'Asia/Dili' | 'Asia/Dubai' | 'Asia/Dushanbe' | 'Asia/Famagusta' | 'Asia/Gaza' | 'Asia/Hebron' | 'Asia/Ho_Chi_Minh' | 'Asia/Hong_Kong' | 'Asia/Hovd' | 'Asia/Irkutsk' | 'Asia/Jakarta' | 'Asia/Jayapura' | 'Asia/Jerusalem' | 'Asia/Kabul' | 'Asia/Kamchatka' | 'Asia/Karachi' | 'Asia/Kathmandu' | 'Asia/Khandyga' | 'Asia/Kolkata' | 'Asia/Krasnoyarsk' | 'Asia/Kuala_Lumpur' | 'Asia/Kuching' | 'Asia/Macau' | 'Asia/Magadan' | 'Asia/Makassar' | 'Asia/Manila' | 'Asia/Nicosia' | 'Asia/Novokuznetsk' | 'Asia/Novosibirsk' | 'Asia/Omsk' | 'Asia/Oral' | 'Asia/Pontianak' | 'Asia/Pyongyang' | 'Asia/Qatar' | 'Asia/Qostanay' | 'Asia/Qyzylorda' | 'Asia/Riyadh' | 'Asia/Sakhalin' | 'Asia/Samarkand' | 'Asia/Seoul' | 'Asia/Shanghai' | 'Asia/Singapore' | 'Asia/Srednekolymsk' | 'Asia/Taipei' | 'Asia/Tashkent' | 'Asia/Tbilisi' | 'Asia/Tehran' | 'Asia/Thimphu' | 'Asia/Tokyo' | 'Asia/Tomsk' | 'Asia/Ulaanbaatar' | 'Asia/Urumqi' | 'Asia/Ust-Nera' | 'Asia/Vladivostok' | 'Asia/Yakutsk' | 'Asia/Yangon' | 'Asia/Yekaterinburg' | 'Asia/Yerevan' | 'Atlantic/Azores' | 'Atlantic/Bermuda' | 'Atlantic/Canary' | 'Atlantic/Cape_Verde' | 'Atlantic/Faroe' | 'Atlantic/Madeira' | 'Atlantic/Reykjavik' | 'Atlantic/South_Georgia' | 'Atlantic/Stanley' | 'Australia/Adelaide' | 'Australia/Brisbane' | 'Australia/Broken_Hill' | 'Australia/Darwin' | 'Australia/Eucla' | 'Australia/Hobart' | 'Australia/Lindeman' | 'Australia/Lord_Howe' | 'Australia/Melbourne' | 'Australia/Perth' | 'Australia/Sydney' | 'CET' | 'CST6CDT' | 'EET' | 'EST' | 'EST5EDT' | 'Etc/GMT' | 'Etc/GMT-1' | 'Etc/GMT-10' | 'Etc/GMT-11' | 'Etc/GMT-12' | 'Etc/GMT-13' | 'Etc/GMT-14' | 'Etc/GMT-2' | 'Etc/GMT-3' | 'Etc/GMT-4' | 'Etc/GMT-5' | 'Etc/GMT-6' | 'Etc/GMT-7' | 'Etc/GMT-8' | 'Etc/GMT-9' | 'Etc/GMT+1' | 'Etc/GMT+10' | 'Etc/GMT+11' | 'Etc/GMT+12' | 'Etc/GMT+2' | 'Etc/GMT+3' | 'Etc/GMT+4' | 'Etc/GMT+5' | 'Etc/GMT+6' | 'Etc/GMT+7' | 'Etc/GMT+8' | 'Etc/GMT+9' | 'Etc/UTC' | 'Europe/Amsterdam' | 'Europe/Andorra' | 'Europe/Astrakhan' | 'Europe/Athens' | 'Europe/Belgrade' | 'Europe/Berlin' | 'Europe/Brussels' | 'Europe/Bucharest' | 'Europe/Budapest' | 'Europe/Chisinau' | 'Europe/Copenhagen' | 'Europe/Dublin' | 'Europe/Gibraltar' | 'Europe/Helsinki' | 'Europe/Istanbul' | 'Europe/Kaliningrad' | 'Europe/Kiev' | 'Europe/Kirov' | 'Europe/Lisbon' | 'Europe/London' | 'Europe/Luxembourg' | 'Europe/Madrid' | 'Europe/Malta' | 'Europe/Minsk' | 'Europe/Monaco' | 'Europe/Moscow' | 'Europe/Oslo' | 'Europe/Paris' | 'Europe/Prague' | 'Europe/Riga' | 'Europe/Rome' | 'Europe/Samara' | 'Europe/Saratov' | 'Europe/Simferopol' | 'Europe/Sofia' | 'Europe/Stockholm' | 'Europe/Tallinn' | 'Europe/Tirane' | 'Europe/Ulyanovsk' | 'Europe/Uzhgorod' | 'Europe/Vienna' | 'Europe/Vilnius' | 'Europe/Volgograd' | 'Europe/Warsaw' | 'Europe/Zaporozhye' | 'Europe/Zurich' | 'HST' | 'Indian/Chagos' | 'Indian/Christmas' | 'Indian/Cocos' | 'Indian/Kerguelen' | 'Indian/Mahe' | 'Indian/Maldives' | 'Indian/Mauritius' | 'Indian/Reunion' | 'MET' | 'MST' | 'MST7MDT' | 'Pacific/Apia' | 'Pacific/Auckland' | 'Pacific/Bougainville' | 'Pacific/Chatham' | 'Pacific/Chuuk' | 'Pacific/Easter' | 'Pacific/Efate' | 'Pacific/Fakaofo' | 'Pacific/Fiji' | 'Pacific/Funafuti' | 'Pacific/Galapagos' | 'Pacific/Gambier' | 'Pacific/Guadalcanal' | 'Pacific/Guam' | 'Pacific/Honolulu' | 'Pacific/Kanton' | 'Pacific/Kiritimati' | 'Pacific/Kosrae' | 'Pacific/Kwajalein' | 'Pacific/Majuro' | 'Pacific/Marquesas' | 'Pacific/Nauru' | 'Pacific/Niue' | 'Pacific/Norfolk' | 'Pacific/Noumea' | 'Pacific/Pago_Pago' | 'Pacific/Palau' | 'Pacific/Pitcairn' | 'Pacific/Pohnpei' | 'Pacific/Port_Moresby' | 'Pacific/Rarotonga' | 'Pacific/Tahiti' | 'Pacific/Tarawa' | 'Pacific/Tongatapu' | 'Pacific/Wake' | 'Pacific/Wallis' | 'PST8PDT' | 'WET'",
            "description": ""
          },
          "Language": {
            "filePath": "/api/standard/standard.ts",
            "name": "Language",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "isoCode",
                "value": "string",
                "description": "The BCP-47 language tag. It may contain a dash followed by an ISO 3166-1 alpha-2 region code."
              }
            ],
            "value": "export interface Language {\n  /**\n   * The BCP-47 language tag. It may contain a dash followed by an ISO 3166-1 alpha-2 region code.\n   *\n   * @example 'en' for English, or 'en-US' for English local to United States.\n   * @see https://en.wikipedia.org/wiki/IETF_language_tag\n   * @see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n   */\n  isoCode: string;\n}"
          },
          "Country": {
            "filePath": "/api/standard/standard.ts",
            "name": "Country",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "isoCode",
                "value": "CountryCode",
                "description": "The ISO-3166-1 code for this country."
              }
            ],
            "value": "export interface Country {\n  /**\n   * The ISO-3166-1 code for this country.\n   * @see https://www.iso.org/iso-3166-country-codes.html\n   */\n  isoCode: CountryCode;\n}"
          },
          "CountryCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CountryCode",
            "value": "'AC' | 'AD' | 'AE' | 'AF' | 'AG' | 'AI' | 'AL' | 'AM' | 'AN' | 'AO' | 'AR' | 'AT' | 'AU' | 'AW' | 'AX' | 'AZ' | 'BA' | 'BB' | 'BD' | 'BE' | 'BF' | 'BG' | 'BH' | 'BI' | 'BJ' | 'BL' | 'BM' | 'BN' | 'BO' | 'BQ' | 'BR' | 'BS' | 'BT' | 'BV' | 'BW' | 'BY' | 'BZ' | 'CA' | 'CC' | 'CD' | 'CF' | 'CG' | 'CH' | 'CI' | 'CK' | 'CL' | 'CM' | 'CN' | 'CO' | 'CR' | 'CU' | 'CV' | 'CW' | 'CX' | 'CY' | 'CZ' | 'DE' | 'DJ' | 'DK' | 'DM' | 'DO' | 'DZ' | 'EC' | 'EE' | 'EG' | 'EH' | 'ER' | 'ES' | 'ET' | 'FI' | 'FJ' | 'FK' | 'FO' | 'FR' | 'GA' | 'GB' | 'GD' | 'GE' | 'GF' | 'GG' | 'GH' | 'GI' | 'GL' | 'GM' | 'GN' | 'GP' | 'GQ' | 'GR' | 'GS' | 'GT' | 'GW' | 'GY' | 'HK' | 'HM' | 'HN' | 'HR' | 'HT' | 'HU' | 'ID' | 'IE' | 'IL' | 'IM' | 'IN' | 'IO' | 'IQ' | 'IR' | 'IS' | 'IT' | 'JE' | 'JM' | 'JO' | 'JP' | 'KE' | 'KG' | 'KH' | 'KI' | 'KM' | 'KN' | 'KP' | 'KR' | 'KW' | 'KY' | 'KZ' | 'LA' | 'LB' | 'LC' | 'LI' | 'LK' | 'LR' | 'LS' | 'LT' | 'LU' | 'LV' | 'LY' | 'MA' | 'MC' | 'MD' | 'ME' | 'MF' | 'MG' | 'MK' | 'ML' | 'MM' | 'MN' | 'MO' | 'MQ' | 'MR' | 'MS' | 'MT' | 'MU' | 'MV' | 'MW' | 'MX' | 'MY' | 'MZ' | 'NA' | 'NC' | 'NE' | 'NF' | 'NG' | 'NI' | 'NL' | 'NO' | 'NP' | 'NR' | 'NU' | 'NZ' | 'OM' | 'PA' | 'PE' | 'PF' | 'PG' | 'PH' | 'PK' | 'PL' | 'PM' | 'PN' | 'PS' | 'PT' | 'PY' | 'QA' | 'RE' | 'RO' | 'RS' | 'RU' | 'RW' | 'SA' | 'SB' | 'SC' | 'SD' | 'SE' | 'SG' | 'SH' | 'SI' | 'SJ' | 'SK' | 'SL' | 'SM' | 'SN' | 'SO' | 'SR' | 'SS' | 'ST' | 'SV' | 'SX' | 'SY' | 'SZ' | 'TA' | 'TC' | 'TD' | 'TF' | 'TG' | 'TH' | 'TJ' | 'TK' | 'TL' | 'TM' | 'TN' | 'TO' | 'TR' | 'TT' | 'TV' | 'TW' | 'TZ' | 'UA' | 'UG' | 'UM' | 'US' | 'UY' | 'UZ' | 'VA' | 'VC' | 'VE' | 'VG' | 'VN' | 'VU' | 'WF' | 'WS' | 'XK' | 'YE' | 'YT' | 'ZA' | 'ZM' | 'ZW' | 'ZZ'",
            "description": ""
          },
          "Market": {
            "filePath": "/api/standard/standard.ts",
            "name": "Market",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier for a market."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The human-readable, shop-scoped identifier for the market."
              }
            ],
            "value": "export interface Market {\n  /**\n   * A globally-unique identifier for a market.\n   */\n  id: string;\n\n  /**\n   * The human-readable, shop-scoped identifier for the market.\n   */\n  handle: string;\n}"
          },
          "StorefrontApiVersion": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "StorefrontApiVersion",
            "value": "'2022-04' | '2022-07' | '2022-10' | '2023-01' | 'unstable'",
            "description": "Union of supported storefront API versions"
          },
          "SelectedPaymentOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "SelectedPaymentOption",
            "description": "A payment option selected by the buyer.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique handle referencing `PaymentOption.handle`.\n\nSee [availablePaymentOptions](/docs/api/checkout-ui-extensions/unstable/apis/standardapi#properties-propertydetail-availablepaymentoptions)."
              }
            ],
            "value": "export interface SelectedPaymentOption {\n  /**\n   * The unique handle referencing `PaymentOption.handle`.\n   *\n   * See [availablePaymentOptions](/docs/api/checkout-ui-extensions/unstable/apis/standardapi#properties-propertydetail-availablepaymentoptions).\n   */\n  handle: string;\n}"
          },
          "SessionToken": {
            "filePath": "/api/standard/standard.ts",
            "name": "SessionToken",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "get",
                "value": "() => Promise<string>",
                "description": "Requests a session token that hasn't expired. You should call this method every\ntime you need to make a request to your backend in order to get a valid token.\nThis method will return cached tokens when possible, so you don’t need to worry\nabout storing these tokens yourself."
              }
            ],
            "value": "export interface SessionToken {\n  /**\n   * Requests a session token that hasn't expired. You should call this method every\n   * time you need to make a request to your backend in order to get a valid token.\n   * This method will return cached tokens when possible, so you don’t need to worry\n   * about storing these tokens yourself.\n   */\n  get(): Promise<string>;\n}"
          },
          "ExtensionSettings": {
            "filePath": "/api/standard/standard.ts",
            "name": "ExtensionSettings",
            "description": "The merchant-defined setting values for the extension.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "name": "[key: string]",
                "value": "string | number | boolean | undefined"
              }
            ],
            "value": "export interface ExtensionSettings {\n  [key: string]: string | number | boolean | undefined;\n}"
          },
          "MailingAddress": {
            "filePath": "/api/standard/standard.ts",
            "name": "MailingAddress",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The buyer's full name.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "firstName",
                "value": "string",
                "description": "The buyer's first name.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lastName",
                "value": "string",
                "description": "The buyer's last name.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "company",
                "value": "string",
                "description": "The buyer's company name.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "address1",
                "value": "string",
                "description": "The first line of the buyer's address, including street name and number.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "address2",
                "value": "string",
                "description": "The second line of the buyer's address, like apartment number, suite, etc.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "city",
                "value": "string",
                "description": "The buyer's city.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "zip",
                "value": "string",
                "description": "The buyer's postal or ZIP code.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "countryCode",
                "value": "CountryCode",
                "description": "The ISO 3166 Alpha-2 format for the buyer's country. Refer to https://www.iso.org/iso-3166-country-codes.html.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "provinceCode",
                "value": "string",
                "description": "The buyer's zone code, such as state, province, prefecture, or region.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "phone",
                "value": "string",
                "description": "The buyer's phone number.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              }
            ],
            "value": "export interface MailingAddress {\n  /**\n   * The buyer's full name.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'John Doe'\n   */\n  name?: string;\n\n  /**\n   * The buyer's first name.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'John'\n   */\n  firstName?: string;\n\n  /**\n   * The buyer's last name.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'Doe'\n   */\n  lastName?: string;\n\n  /**\n   * The buyer's company name.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'Shopify'\n   */\n  company?: string;\n\n  /**\n   * The first line of the buyer's address, including street name and number.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example '151 O'Connor Street'\n   */\n  address1?: string;\n\n  /**\n   * The second line of the buyer's address, like apartment number, suite, etc.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'Ground floor'\n   */\n  address2?: string;\n\n  /**\n   * The buyer's city.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'Ottawa'\n   */\n  city?: string;\n\n  /**\n   * The buyer's postal or ZIP code.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'K2P 2L8'\n   */\n  zip?: string;\n\n  /**\n   * The ISO 3166 Alpha-2 format for the buyer's country. Refer to https://www.iso.org/iso-3166-country-codes.html.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'CA' for Canada.\n   */\n  countryCode?: CountryCode;\n\n  /**\n   * The buyer's zone code, such as state, province, prefecture, or region.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'ON' for Ontario.\n   */\n  provinceCode?: string;\n\n  /**\n   * The buyer's phone number.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example '+1 613 111 2222'.\n   */\n  phone?: string;\n}"
          },
          "Shop": {
            "filePath": "/api/standard/standard.ts",
            "name": "Shop",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The shop ID."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the shop."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "storefrontUrl",
                "value": "string",
                "description": "The primary storefront URL.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "myshopifyDomain",
                "value": "string",
                "description": "The shop's myshopify.com domain."
              }
            ],
            "value": "export interface Shop {\n  /**\n   * The shop ID.\n   * @example 'gid://shopify/Shop/123'\n   */\n  id: string;\n  /**\n   * The name of the shop.\n   */\n  name: string;\n  /**\n   * The primary storefront URL.\n   */\n  storefrontUrl?: string;\n  /**\n   * The shop's myshopify.com domain.\n   */\n  myshopifyDomain: string;\n}"
          },
          "Storage": {
            "filePath": "/api/standard/standard.ts",
            "name": "Storage",
            "description": "A key-value storage object for extension points.\n\nStored data is only available to this specific app\nat this specific extension point.\n\nThe storage backend is implemented with `localStorage` and\nshould persist across the buyer's checkout session.\nHowever, data persistence isn't guaranteed.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "read",
                "value": "<T = unknown>(key: string) => Promise<T>",
                "description": "Read and return a stored value by key.\n\nThe stored data is deserialized from JSON and returned as\nits original primitive.\n\nReturns `null` if no stored data exists."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "write",
                "value": "(key: string, data: any) => Promise<void>",
                "description": "Write stored data for this key.\n\nThe data must be serializable to JSON."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "delete",
                "value": "(key: string) => Promise<void>",
                "description": "Delete stored data by key."
              }
            ],
            "value": "export interface Storage {\n  /**\n   * Read and return a stored value by key.\n   *\n   * The stored data is deserialized from JSON and returned as\n   * its original primitive.\n   *\n   * Returns `null` if no stored data exists.\n   */\n  read<T = unknown>(key: string): Promise<T | null>;\n\n  /**\n   * Write stored data for this key.\n   *\n   * The data must be serializable to JSON.\n   */\n  write(key: string, data: any): Promise<void>;\n\n  /**\n   * Delete stored data by key.\n   */\n  delete(key: string): Promise<void>;\n}"
          },
          "Ui": {
            "filePath": "/api/standard/standard.ts",
            "name": "Ui",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "overlay",
                "value": "{ close(overlayId: string): void; }",
                "description": ""
              }
            ],
            "value": "export interface Ui {\n  overlay: {\n    close(overlayId: string): void;\n  };\n}"
          },
          "Version": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Version",
            "value": "string",
            "description": ""
          }
        }
      }
    ],
    "defaultExample": {
      "description": "The extension API allows you to access information about the merchant's store, the customer's cart, and make changes.",
      "codeblock": {
        "title": "How extensions work",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  BlockStack,\n  render,\n  Text,\n  useApi,\n} from '@shopify/checkout-ui-extensions-react';\n\n// 1. Choose an extension point\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  // 2. Use the extension API to gather context from the checkout and shop\n  const {cost, shop} = useApi();\n\n  // 3. Render a UI\n  return (\n    <BlockStack>\n      <Text>Shop name: {shop.name}</Text>\n      <Text>cost: {cost.totalAmount}</Text>\n    </BlockStack>\n  );\n}\n",
            "language": "jsx",
            "title": "React"
          },
          {
            "code": "import {\n  BlockStack,\n  Text,\n  extend,\n} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::Dynamic::Render',\n  (root, {shop, cost}) => {\n    root.appendChild(\n      root.createComponent(\n        BlockStack,\n        undefined,\n        [\n          root.createComponent(\n            Text,\n            undefined,\n            `Shop name: ${shop.name}`,\n          ),\n          root.createComponent(\n            Text,\n            undefined,\n            `Cost: ${cost.totalAmount}`,\n          ),\n        ],\n      ),\n    );\n  },\n);\n",
            "language": "js",
            "title": "JavaScript"
          }
        ]
      }
    },
    "examples": {
      "description": "Learn how to use the API with JavaScript (JS) and React. See [React Hooks](../react-hooks) for all available hooks.",
      "exampleGroups": [
        {
          "title": "Using the API",
          "examples": [
            {
              "description": "\nThe extension API is passed as a parameter to the extension point function.\nIn React, you can access it from any component through the `useApi()` hook.\n      ",
              "codeblock": {
                "title": "Accessing Properties",
                "tabs": [
                  {
                    "code": "import React from 'react';\nimport {\n  render,\n  Text,\n  useApi,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const {shop} = useApi();\n  return <Text>Shop name: {shop.name}</Text>;\n}\n",
                    "language": "jsx",
                    "title": "React"
                  },
                  {
                    "code": "import {extend} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::Dynamic::Render',\n  (root, {shop}) => {\n    root.appendChild(\n      root.createText(`Shop name: ${shop.name}`),\n    );\n  },\n);\n",
                    "language": "js",
                    "title": "JavaScript"
                  }
                ]
              }
            },
            {
              "description": "\nSome API property values may change after the extension is rendered.\n`StatefulRemoteSubscribable` properties allow you to subscribe to changes and perform a function or re-render your extension.\n\nIf you are using React, you can utilize the property's corresponding hook, or the [`useSubscription()`](/docs/api/checkout-ui-extensions/react-hooks/utilities/usesubscription) hook to subscribe to changes and automatically re-render your extension.\n      ",
              "codeblock": {
                "title": "Subscribing to changes",
                "tabs": [
                  {
                    "code": "import React from 'react';\nimport {\n  render,\n  Text,\n  useNote,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const note = useNote();\n  return <Text>Note: {note}</Text>;\n}\n",
                    "language": "jsx",
                    "title": "React"
                  },
                  {
                    "code": "import {extend} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::Dynamic::Render',\n  (root, {note}) => {\n    const text = root.createText('');\n    note.subscribe((value) => {\n      if (value) {\n        text.updateText(value);\n      }\n    });\n    root.appendChild(text);\n  },\n);\n",
                    "language": "js",
                    "title": "JavaScript"
                  }
                ]
              }
            }
          ]
        },
        {
          "title": "Localization",
          "examples": [
            {
              "description": "\nDefine strings in JSON files for each locale and render them using `translate()`.\nSee [localizing UI extensions](/docs/apps/checkout/best-practices/localizing-ui-extensions) for more information.\n      ",
              "codeblock": {
                "title": "Translating strings",
                "tabs": [
                  {
                    "code": "/* See the locales/en.default.json tab for the translation keys and values for this example */\nimport React from 'react';\nimport {\n  render,\n  Text,\n  useTranslate,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const translate = useTranslate();\n  return (\n    <Text>{translate('welcomeMessage')}</Text>\n  );\n}\n",
                    "language": "jsx",
                    "title": "React"
                  },
                  {
                    "code": "/* See the locales/en.default.json tab for the translation keys and values for this example */\nimport {extend} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::Dynamic::Render',\n  (root, {i18n}) => {\n    const welcomeMsg = i18n.translate(\n      'welcomeMessage',\n    );\n\n    root.appendChild(root.createText(welcomeMsg));\n  },\n);\n",
                    "language": "js",
                    "title": "JavaScript"
                  },
                  {
                    "code": "{\n  \"welcomeMessage\": \"Welcome to our store!\"\n}\n",
                    "language": "json",
                    "title": "locales/en.default.json"
                  }
                ]
              }
            },
            {
              "description": "\nYou can use the `count` option to get a pluralized string based on the current locale.\nSee [localizing UI extensions](/docs/apps/checkout/best-practices/localizing-ui-extensions) for more information.\n      ",
              "codeblock": {
                "title": "Translating strings with pluralization",
                "tabs": [
                  {
                    "code": "/* See the locales/en.default.json tab for the translation keys and values for this example */\nimport React from 'react';\nimport {\n  render,\n  Banner,\n  useApi,\n  useTranslate,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const {i18n} = useApi();\n  const translate = useTranslate();\n\n  const points = 10000;\n  const formattedPoints =\n    i18n.formatNumber(points);\n  // Translate the loyalty points message, using pluralization to differentiate messages\n  const loyaltyPointsMsg = translate(\n    'loyaltyPoints',\n    {\n      count: points,\n      formattedPoints,\n    },\n  );\n\n  return <Banner title={loyaltyPointsMsg} />;\n}\n",
                    "language": "jsx",
                    "title": "React"
                  },
                  {
                    "code": "/* See the locales/en.default.json tab for the translation keys and values for this example */\nimport {\n  extend,\n  Banner,\n} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::Dynamic::Render',\n  (root, {i18n}) => {\n    const points = 10000;\n    const formattedPoints =\n      i18n.formatNumber(points);\n    // Translate the loyalty points message, using pluralization to differentiate messages\n    const loyaltyPointsMsg = i18n.translate(\n      'loyaltyPoints',\n      {\n        count: points,\n        formattedPoints,\n      },\n    );\n\n    const app = root.createComponent(Banner, {\n      title: loyaltyPointsMsg,\n    });\n\n    root.appendChild(app);\n  },\n);\n",
                    "language": "js",
                    "title": "JavaScript"
                  },
                  {
                    "code": "{\n  \"loyaltyPoints\": {\n    \"one\": \"You have {{formattedPoints}} loyalty point\",\n    \"other\": \"You have {{formattedPoints}} loyalty points\"\n  }\n}\n",
                    "language": "json",
                    "title": "locales/en.default.json"
                  }
                ]
              }
            }
          ]
        },
        {
          "title": "Settings",
          "examples": [
            {
              "description": "\nYou can define settings that merchants can edit within the checkout editor.\nSee [settings](/docs/api/checkout-ui-extensions/configuration#settings-definition) for more information on how to define these.\n      ",
              "codeblock": {
                "title": "Define merchant settings",
                "tabs": [
                  {
                    "code": "type = \"checkout_ui_extension\"\nname = \"my-checkout-extension\"\n\nextension_points = [\n  'Checkout::Dynamic::Render'\n]\n\n[settings]\n  [[settings.fields]]\n  key = \"banner_title\"\n  type = \"single_line_text_field\"\n  name = \"Banner title\"\n  description = \"Enter a title for the banner.\"\n    [[settings.fields.validations]]\n    name = \"min\"\n    value = \"5\"\n    [[settings.fields.validations]]\n    name = \"max\"\n    value = \"20\"\n\n",
                    "language": "toml",
                    "title": "shopify.ui.extension.toml"
                  }
                ]
              }
            },
            {
              "description": "\nYou can retrieve settings values within your extension. In React, the `useSettings()` hook re-renders your extension with the latest values.\nIn JavaScript, subscribe to changes and update your UI directly.\n      ",
              "codeblock": {
                "title": "Accessing merchant settings",
                "tabs": [
                  {
                    "code": "import React from 'react';\nimport {\n  render,\n  Banner,\n  useSettings,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const {banner_title} = useSettings();\n  return <Banner title={banner_title} />;\n}\n",
                    "language": "jsx",
                    "title": "React"
                  },
                  {
                    "code": "import {\n  extend,\n  Banner,\n} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::Dynamic::Render',\n  (root, {settings}) => {\n    const banner = root.createComponent(Banner, {\n      title: settings.current.banner_title,\n    });\n\n    // When the merchant updates the banner title in the checkout editor, re-render the banner\n    settings.subscribe((newSettings) => {\n      banner.updateProps({\n        title: newSettings.banner_title,\n      });\n    });\n\n    root.appendChild(banner);\n  },\n);\n",
                    "language": "js",
                    "title": "JavaScript"
                  }
                ]
              }
            }
          ]
        },
        {
          "title": "Storefront API access",
          "examples": [
            {
              "description": "\nYou can access the [Storefront GraphQL API](/docs/api/storefront) via the `query()` helper function.\nEnsure your extension can use this API by [enabling the `api_access` capability](/docs/api/checkout-ui-extensions/configuration#api-access).\n      ",
              "codeblock": {
                "title": "Access the Storefront API with query",
                "tabs": [
                  {
                    "code": "import React, {useEffect, useState} from 'react';\nimport {\n  useApi,\n  render,\n  List,\n  ListItem,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const [data, setData] = useState();\n  const {query} = useApi();\n\n  useEffect(() => {\n    query(\n      `query ($first: Int!) {\n        products(first: $first) {\n          nodes {\n            id\n            title\n          }\n        }\n      }`,\n      {\n        variables: {first: 5},\n      },\n    )\n      .then(({data, errors}) => setData(data))\n      .catch(console.error);\n  }, [query]);\n\n  return (\n    <List>\n      {data?.products?.nodes.map((node) => (\n        <ListItem key={node.id}>\n          {node.title}\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n",
                    "language": "jsx",
                    "title": "React"
                  },
                  {
                    "code": "import {\n  extend,\n  List,\n  ListItem,\n} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::Dynamic::Render',\n  (root, {query}) => {\n    query<any>(\n      `query ($first: Int!) {\n      products(first: $first) {\n        nodes {\n          id\n          title\n        }\n      }\n    }`,\n      {\n        variables: {first: 5},\n      },\n    )\n      .then(({data}) => {\n        const listItems =\n          data?.products?.nodes.map((node) =>\n            root.createComponent(\n              ListItem,\n              undefined,\n              node.title,\n            ),\n          );\n\n        root.appendChild(\n          root.createComponent(\n            List,\n            undefined,\n            listItems,\n          ),\n        );\n      })\n      .catch(console.error);\n  },\n);\n",
                    "language": "js",
                    "title": "JavaScript"
                  }
                ]
              }
            },
            {
              "description": "\nYou can access the [Storefront GraphQL API](/docs/api/storefront) using global `fetch()`.\nEnsure your extension can access the Storefront API via the [`api_access` capability](/docs/api/checkout-ui-extensions/configuration#api-access).\n      ",
              "codeblock": {
                "title": "Accessing the Storefront API with fetch()",
                "tabs": [
                  {
                    "code": "import React, {useEffect, useState} from 'react';\nimport {\n  useApi,\n  render,\n  List,\n  ListItem,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const {shop} = useApi();\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    const getProductsQuery = {\n      query: `query ($first: Int!) {\n        products(first: $first) {\n          nodes {\n            id\n            title\n          }\n        }\n      }`,\n      variables: {first: 5},\n    };\n\n    const apiVersion = 'unstable';\n\n    fetch(\n      `${shop.storefrontUrl}api/${apiVersion}/graphql.json`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(getProductsQuery),\n      },\n    )\n      .then((response) => response.json())\n      .then(({data, errors}) => setData(data))\n      .catch(console.error);\n  }, [shop]);\n\n  return (\n    <List>\n      {data?.products?.nodes.map((node) => (\n        <ListItem key={node.id}>\n          {node.title}\n        </ListItem>\n      ))}\n    </List>\n  );\n}\n",
                    "language": "jsx",
                    "title": "React"
                  },
                  {
                    "code": "import {\n  extend,\n  List,\n  ListItem,\n} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::Dynamic::Render',\n  (root, {shop}) => {\n    const apiVersion = 'unstable';\n    const getProductsQuery = {\n      query: `query ($first: Int!) {\n      products(first: $first) {\n        nodes {\n          id\n          title\n        }\n      }\n    }`,\n      variables: {first: 5},\n    };\n\n    fetch(\n      `${shop.storefrontUrl}api/${apiVersion}/graphql.json`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(getProductsQuery),\n      },\n    )\n      .then((response) => response.json())\n      .then(({data}) => {\n        const listItems =\n          data?.products?.nodes.map((node) =>\n            root.createComponent(\n              ListItem,\n              undefined,\n              node.title,\n            ),\n          );\n\n        root.appendChild(\n          root.createComponent(\n            List,\n            undefined,\n            listItems,\n          ),\n        );\n      })\n      .catch(console.error);\n  },\n);\n",
                    "language": "js",
                    "title": "JavaScript"
                  }
                ]
              }
            }
          ]
        },
        {
          "title": "Buyer journey",
          "examples": [
            {
              "description": "Intercept and prevent a buyer's progress through checkout while targeting a specific checkout UI field.\n        See the [validation tutorial](/docs/apps/checkout/validation) for more examples and best practices.",
              "codeblock": {
                "title": "Block progress and show error for a checkout UI field",
                "tabs": [
                  {
                    "code": "import React from 'react';\nimport {\n  render,\n  useBuyerJourneyIntercept,\n  useShippingAddress,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender(\n  'Checkout::DeliveryAddress::RenderBefore',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const address = useShippingAddress();\n\n  useBuyerJourneyIntercept(\n    ({canBlockProgress}) => {\n      return canBlockProgress &&\n        address?.countryCode &&\n        address.countryCode !== 'CA'\n        ? {\n            behavior: 'block',\n            reason: 'Invalid shipping country',\n            errors: [\n              {\n                message:\n                  'Sorry, we can only ship to Canada',\n                // Show an error underneath the country code field\n                target:\n                  '$.cart.deliveryGroups[0].deliveryAddress.countryCode',\n              },\n              {\n                // In addition, show an error at the page level\n                message:\n                  'Please use a different address.',\n              },\n            ],\n          }\n        : {\n            behavior: 'allow',\n          };\n    },\n  );\n\n  return null;\n}\n",
                    "language": "jsx",
                    "title": "React"
                  },
                  {
                    "code": "import {extend} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::DeliveryAddress::RenderBefore',\n  (root, {buyerJourney, shippingAddress}) => {\n    let address = shippingAddress?.current;\n    shippingAddress?.subscribe((newAddress) => {\n      address = newAddress;\n    });\n\n    buyerJourney.intercept(\n      ({canBlockProgress}) => {\n        return canBlockProgress &&\n          address?.countryCode &&\n          address.countryCode !== 'CA'\n          ? {\n              behavior: 'block',\n              reason: 'Invalid shipping country',\n              errors: [\n                {\n                  message:\n                    'Sorry, we can only ship to Canada',\n                  // Show an error underneath the country code field\n                  target:\n                    '$.cart.deliveryGroups[0].deliveryAddress.countryCode',\n                },\n                {\n                  // In addition, show an error at the page level\n                  message:\n                    'Please use a different address.',\n                },\n              ],\n            }\n          : {\n              behavior: 'allow',\n            };\n      },\n    );\n  },\n);\n",
                    "language": "js",
                    "title": "JavaScript"
                  }
                ]
              }
            },
            {
              "description": "Intercept and prevent a buyer's progress through checkout while displaying an error message at the page level.\n        See the [validation tutorial](/docs/apps/checkout/validation) for more examples and best practices.",
              "codeblock": {
                "title": "Block progress and show error at page level",
                "tabs": [
                  {
                    "code": "import React from 'react';\nimport {\n  render,\n  useBuyerJourneyIntercept,\n  useShippingAddress,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender(\n  'Checkout::DeliveryAddress::RenderBefore',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const address = useShippingAddress();\n\n  useBuyerJourneyIntercept(\n    ({canBlockProgress}) => {\n      return canBlockProgress &&\n        address?.countryCode &&\n        address.countryCode !== 'CA'\n        ? {\n            behavior: 'block',\n            reason: 'Invalid shipping country',\n            errors: [\n              {\n                // An error without a `target` property is shown at page level\n                message:\n                  'Sorry, we can only ship to Canada',\n              },\n            ],\n          }\n        : {\n            behavior: 'allow',\n          };\n    },\n  );\n\n  return null;\n}\n",
                    "language": "jsx",
                    "title": "React"
                  },
                  {
                    "code": "import {extend} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::DeliveryAddress::RenderBefore',\n  (root, {buyerJourney, shippingAddress}) => {\n    let address = shippingAddress?.current;\n    shippingAddress?.subscribe((newAddress) => {\n      address = newAddress;\n    });\n\n    buyerJourney.intercept(\n      ({canBlockProgress}) => {\n        return canBlockProgress &&\n          address?.countryCode &&\n          address.countryCode !== 'CA'\n          ? {\n              behavior: 'block',\n              reason: 'Invalid shipping country',\n              errors: [\n                {\n                  // An error without a `target` property is shown at page level\n                  message:\n                    'Sorry, we can only ship to Canada',\n                },\n              ],\n            }\n          : {\n              behavior: 'allow',\n            };\n      },\n    );\n  },\n);\n",
                    "language": "js",
                    "title": "JavaScript"
                  }
                ]
              }
            },
            {
              "description": "Intercept and prevent a buyer's progress through checkout while displaying an error message in your extension.\n        See the [validation tutorial](/docs/apps/checkout/validation) for more examples and best practices.",
              "codeblock": {
                "title": "Block progress and show error in your extension",
                "tabs": [
                  {
                    "code": "import React, {useState} from 'react';\nimport {\n  render,\n  Banner,\n  useBuyerJourneyIntercept,\n  useTarget,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender(\n  'Checkout::CartLineDetails::RenderAfter',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const [showError, setShowError] =\n    useState(false);\n  const {quantity} = useTarget();\n\n  useBuyerJourneyIntercept(\n    ({canBlockProgress}) => {\n      return canBlockProgress && quantity > 1\n        ? {\n            behavior: 'block',\n            reason: 'limited stock',\n            perform: (result) => {\n              if (result.behavior === 'block') {\n                setShowError(true);\n              }\n            },\n          }\n        : {\n            behavior: 'allow',\n            perform: () => {\n              setShowError(false);\n            },\n          };\n    },\n  );\n\n  return showError ? (\n    <Banner>\n      This item has a limit of one per customer.\n    </Banner>\n  ) : null;\n}\n",
                    "language": "jsx",
                    "title": "React"
                  },
                  {
                    "code": "import {\n  extend,\n  Banner,\n} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::CartLineDetails::RenderAfter',\n  (root, {buyerJourney, target}) => {\n    const banner = root.createComponent(Banner);\n\n    let quantity = target.current.quantity;\n\n    target?.subscribe((newTarget) => {\n      quantity = newTarget.quantity;\n    });\n\n    buyerJourney.intercept(\n      ({canBlockProgress}) => {\n        return canBlockProgress && quantity > 1\n          ? {\n              behavior: 'block',\n              reason: 'limited stock',\n              perform: (result) => {\n                if (result.behavior === 'block') {\n                  banner.appendChild(\n                    'This item has a limit of one per customer.',\n                  );\n                  root.appendChild(banner);\n                }\n              },\n            }\n          : {\n              behavior: 'allow',\n              perform: () => {\n                root.removeChild(banner);\n              },\n            };\n      },\n    );\n  },\n);\n",
                    "language": "js",
                    "title": "JavaScript"
                  }
                ]
              }
            }
          ]
        },
        {
          "title": "Session Token",
          "examples": [
            {
              "description": "\nYou can request a session token from Shopify to use on your application server.  The contents of the token claims are signed using your shared app secret so you can trust the claims came from Shopify unaltered.\n\n> Note: You will need to [enable the `network_access` capability](/docs/api/checkout-ui-extensions/configuration#network-access) to use `fetch()`.\n",
              "codeblock": {
                "title": "Using a session token with fetch()",
                "tabs": [
                  {
                    "code": "import React, {useEffect} from 'react';\nimport {\n  render,\n  Banner,\n  useApi,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const {sessionToken} = useApi();\n\n  useEffect(() => {\n    async function queryApi() {\n      // Request a new (or cached) session token from Shopify\n      const token = await sessionToken.get();\n      console.log('sessionToken.get()', token);\n\n      const apiResponse = await fetchWithToken(\n        token,\n      );\n      // Use your response\n      console.log('API response', apiResponse);\n    }\n\n    function fetchWithToken(token) {\n      const result = fetch(\n        'https://myapp.com/api/session-token',\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        },\n      );\n      return result;\n    }\n\n    queryApi();\n  }, [sessionToken]);\n\n  return (\n    <Banner>See console for API response</Banner>\n  );\n}\n",
                    "language": "jsx",
                    "title": "React"
                  },
                  {
                    "code": "import {\n  extend,\n  Banner,\n  BlockStack,\n} from '@shopify/checkout-ui-extensions';\n\nextend(\n  'Checkout::Dynamic::Render',\n  (root, {sessionToken}) => {\n    async function queryApi() {\n      // Request a new (or cached) session token from Shopify\n      const token = await sessionToken.get();\n      console.log(token);\n\n      const apiResponse = await fetchWithToken(\n        token,\n      );\n\n      // Use your response\n      console.log(apiResponse);\n    }\n\n    function fetchWithToken(token) {\n      const result = fetch(\n        'https://myapp.com/api/session-token',\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        },\n      );\n\n      return result;\n    }\n\n    queryApi();\n\n    root.appendChild(\n      root.createComponent(Banner, {\n        title: 'Session Token Extension',\n      }),\n    );\n  },\n);\n",
                    "language": "js",
                    "title": "JavaScript"
                  }
                ]
              }
            },
            {
              "description": "\nThe contents of the token are signed using your shared app secret.  The optional `sub` claim contains the customer's `gid` if they are logged in and your app has permission to read customer accounts. For example, a loyalty app that needs to check a customer's point balance can use the `sub` claim to verify the customer's account.\n\n> Caution:\n> Your app server can only trust the claims within the session token. It cannot use the token to trust the entire HTTP request. See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) for details.\n",
              "codeblock": {
                "title": "Session token claims",
                "tabs": [
                  {
                    "code": "{\n  // Shopify URL\n  \"dest\": \"store-name.myshopify.com\",\n  // The Client ID of your app\n  \"aud\": \"<clientId>\",\n  // When the token expires.  Set at 5 minutes.\n  \"exp\": 1679954053,\n  // When the token was actived\n  \"nbf\": 1679953753,\n  // When the token was issued\n  \"iat\": 1679953753,\n  // A unique identifier (a nonce) to prevent replay attacks\n  \"jti\": \"6c992878-dbaf-48d1-bb9d-6d9b59814fd1\",\n  // Optional claim present when a customer is logged in and your app has permissions to read customer data\n  \"sub\": \"gid://shopify/Customer/<customerId>\"\n}\n",
                    "language": "json",
                    "title": "session-token.jwt"
                  }
                ]
              }
            }
          ]
        }
      ]
    },
    "related": [
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useApi",
    "description": "Returns the full API object that was passed in to your extension when it was created.\nDepending on the extension point, this object can contain different properties.\n\nFor example, the `Checkout::CartLineDetails::RenderAfter` extension point will return the [CartLineDetailsApi](/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi) object.\nWhereas others return the [StandardApi](/docs/api/checkout-ui-extensions/apis/standardapi) object.\n\nFor reference, see [ExtensionPoints](/docs/api/checkout-ui-extensions/apis/extensionpoints) to determine what API object will be returned by your extension point.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Utilities",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseApiGeneratedType",
        "typeDefinitions": {
          "UseApiGeneratedType": {
            "filePath": "/hooks/api.ts",
            "name": "UseApiGeneratedType",
            "description": "Returns the full API object that was passed in to your extension when it was created.\nDepending on the extension point, this object can contain different properties.\n\nFor example, the `Checkout::CartLineDetails::RenderAfter` extension point will return the [CartLineDetailsApi](/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi) object.\nWhereas others return the [StandardApi](/docs/api/checkout-ui-extensions/apis/standardapi) object.\n\nFor reference, see [ExtensionPoints](/docs/api/checkout-ui-extensions/apis/extensionpoints) to determine what API object will be returned by your extension point.",
            "params": [],
            "returns": {
              "filePath": "/hooks/api.ts",
              "description": "",
              "name": "ApiForRenderExtension<ID>",
              "value": "ApiForRenderExtension<ID>"
            },
            "value": "export function useApi<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): ApiForRenderExtension<ID> {\n  const api = useContext(ExtensionApiContext);\n\n  if (api == null) {\n    throw new CheckoutUIExtensionError(\n      'You can only call this hook when running as a UI extension.',\n    );\n  }\n\n  return api as ApiForRenderExtension<ID>;\n}"
          },
          "ApiForRenderExtension": {
            "filePath": "/extension-points.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ApiForRenderExtension",
            "value": "ApiForRenderExtension<ID>",
            "description": "For a given rendering extension point, returns the type of the API that the\nextension will receive at runtime. This API type is the second argument to\nthe callback for that extension point. The first callback for all of the rendering\nextension points each receive a `RemoteRoot` object."
          }
        }
      }
    ],
    "defaultExample": {
      "description": "\nThe extension API is passed as a parameter to the extension point function.\nIn React, you can access it from any component through the `useApi()` hook.\n      ",
      "codeblock": {
        "title": "Accessing Properties",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  render,\n  Text,\n  useApi,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const {shop} = useApi();\n  return <Text>Shop name: {shop.name}</Text>;\n}\n",
            "language": "jsx",
            "title": "React"
          }
        ]
      }
    },
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useAppMetafields",
    "description": "Returns the metafields configured with `shopify.ui.extension.toml`.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Metafields",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseAppMetafieldsGeneratedType",
        "typeDefinitions": {
          "UseAppMetafieldsGeneratedType": {
            "filePath": "/hooks/app-metafields.ts",
            "name": "UseAppMetafieldsGeneratedType",
            "description": "Returns the metafields configured with `shopify.ui.extension.toml`.",
            "params": [
              {
                "name": "filters",
                "description": "",
                "value": "AppMetafieldFilters",
                "isOptional": true,
                "defaultValue": "{}",
                "filePath": "/hooks/app-metafields.ts"
              }
            ],
            "returns": {
              "filePath": "/hooks/app-metafields.ts",
              "description": "",
              "name": "AppMetafieldEntry[]",
              "value": "AppMetafieldEntry[]"
            },
            "value": "export function useAppMetafields<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(filters: AppMetafieldFilters = {}): AppMetafieldEntry[] {\n  const appMetafields = useSubscription(useApi<ID>().appMetafields);\n\n  return useMemo(() => {\n    if (filters.key && !filters.namespace) {\n      throw new CheckoutUIExtensionError(\n        'You must pass in a namespace with a key',\n      );\n    }\n\n    const filterKeys = Object.keys(filters) as AppMetafieldFilterKeys[];\n\n    if (filterKeys.length) {\n      return appMetafields.filter((app) => {\n        return filterKeys.every((key) => {\n          if (key === 'id' || key === 'type') {\n            return app.target[key] === filters[key];\n          }\n\n          return app.metafield[key] === filters[key];\n        });\n      });\n    }\n\n    return appMetafields;\n  }, [filters, appMetafields]);\n}"
          },
          "AppMetafieldFilters": {
            "filePath": "/hooks/app-metafields.ts",
            "name": "AppMetafieldFilters",
            "description": "",
            "members": [
              {
                "filePath": "/hooks/app-metafields.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/hooks/app-metafields.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"customer\" | \"product\" | \"shop\" | \"variant\"",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/hooks/app-metafields.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/hooks/app-metafields.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "interface AppMetafieldFilters {\n  id?: AppMetafieldEntryTarget['id'];\n  type?: AppMetafieldEntryTarget['type'];\n  namespace?: Metafield['namespace'];\n  key?: Metafield['key'];\n}"
          },
          "AppMetafieldEntry": {
            "filePath": "/api/standard/standard.ts",
            "name": "AppMetafieldEntry",
            "description": "A metafield associated with the shop or a resource on the checkout.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "AppMetafieldEntryTarget",
                "description": "The target that is associated to the metadata.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) when the type is `customer`."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "metafield",
                "value": "AppMetafield",
                "description": "The metadata information."
              }
            ],
            "value": "export interface AppMetafieldEntry {\n  /**\n   * The target that is associated to the metadata.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) when the type is `customer`.\n   */\n  target: AppMetafieldEntryTarget;\n\n  /** The metadata information. */\n  metafield: AppMetafield;\n}"
          },
          "AppMetafieldEntryTarget": {
            "filePath": "/api/standard/standard.ts",
            "name": "AppMetafieldEntryTarget",
            "description": "The metafield owner.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"customer\" | \"product\" | \"shop\" | \"variant\"",
                "description": "The type of the metafield owner.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) when the type is `customer`."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The numeric owner ID that is associated with the metafield."
              }
            ],
            "value": "export interface AppMetafieldEntryTarget {\n  /**\n   * The type of the metafield owner.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) when the type is `customer`.\n   */\n  type: 'customer' | 'product' | 'shop' | 'variant';\n\n  /** The numeric owner ID that is associated with the metafield. */\n  id: string;\n}"
          },
          "AppMetafield": {
            "filePath": "/api/standard/standard.ts",
            "name": "AppMetafield",
            "description": "Represents a custom metadata attached to a resource.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The key name of a metafield."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "The namespace for a metafield."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number | boolean",
                "description": "The value of a metafield."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"boolean\" | \"integer\" | \"json_string\" | \"float\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface AppMetafield {\n  /** The key name of a metafield. */\n  key: string;\n\n  /** The namespace for a metafield. */\n  namespace: string;\n\n  /** The value of a metafield. */\n  value: string | number | boolean;\n\n  /** The metafield’s information type. */\n  valueType: 'boolean' | 'float' | 'integer' | 'json_string' | 'string';\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useAttributeValues",
    "description": "Returns the values for the specified `attributes` applied to the checkout.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Attributes",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseAttributeValuesGeneratedType",
        "typeDefinitions": {
          "UseAttributeValuesGeneratedType": {
            "filePath": "/hooks/attributes.ts",
            "name": "UseAttributeValuesGeneratedType",
            "description": "Returns the values for the specified `attributes` applied to the checkout.",
            "params": [
              {
                "name": "keys",
                "description": "An array of attribute keys.",
                "value": "string[]",
                "filePath": "/hooks/attributes.ts"
              }
            ],
            "returns": {
              "filePath": "/hooks/attributes.ts",
              "description": "",
              "name": "(string | undefined)[]",
              "value": "(string | undefined)[]"
            },
            "value": "export function useAttributeValues<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(keys: string[]): (string | undefined)[] {\n  const attributes = useAttributes<ID>();\n\n  if (!attributes?.length) {\n    return [];\n  }\n\n  return keys.map((key) => {\n    const attribute = attributes.find((attribute) => attribute.key === key);\n    return attribute?.value;\n  });\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useApplyAttributeChange",
    "description": "Returns a function to mutate the `attributes` property of the checkout.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Attributes",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseApplyAttributeChangeGeneratedType",
        "typeDefinitions": {
          "UseApplyAttributeChangeGeneratedType": {
            "filePath": "/hooks/attributes.ts",
            "name": "UseApplyAttributeChangeGeneratedType",
            "description": "Returns a function to mutate the `attributes` property of the checkout.",
            "params": [],
            "returns": {
              "filePath": "/hooks/attributes.ts",
              "description": "",
              "name": "(change: AttributeChange) => Promise<AttributeChangeResult>",
              "value": "(change: AttributeChange) => Promise<AttributeChangeResult>"
            },
            "value": "export function useApplyAttributeChange<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): (change: AttributeChange) => Promise<AttributeChangeResult> {\n  const api = useApi<ID>();\n\n  if ('applyAttributeChange' in api) {\n    return api.applyAttributeChange;\n  }\n\n  throw new ExtensionHasNoMethodError(\n    'applyAttributeChange',\n    api.extensionPoint,\n  );\n}"
          },
          "AttributeChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AttributeChange",
            "value": "AttributeUpdateChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateAttribute\"",
                "description": "The type of the `AttributeUpdateChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "Key of the attribute to add or update"
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "Value for the attribute to add or update"
              }
            ]
          },
          "Attribute": {
            "filePath": "/api/shared.ts",
            "name": "Attribute",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The key for the attribute."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value for the attribute."
              }
            ],
            "value": "export interface Attribute {\n  /**\n   * The key for the attribute.\n   */\n  key: string;\n\n  /**\n   * The value for the attribute.\n   */\n  value: string;\n}"
          },
          "AttributeChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AttributeChangeResult",
            "value": "AttributeChangeResultSuccess | AttributeChangeResultError",
            "description": ""
          },
          "AttributeChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "AttributeChangeResultSuccess",
            "description": "The returned result of a successful update to an attribute.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "The type of the `AttributeChangeResultSuccess` API."
              }
            ],
            "value": "export interface AttributeChangeResultSuccess {\n  /**\n   * The type of the `AttributeChangeResultSuccess` API.\n   */\n  type: 'success';\n}"
          },
          "AttributeChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "AttributeChangeResultError",
            "description": "The returned result of an unsuccessful update to an attribute\nwith a message detailing the type of error that occurred.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "The type of the `AttributeChangeResultError` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface AttributeChangeResultError {\n  /**\n   * The type of the `AttributeChangeResultError` API.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useAttributes",
    "description": "Returns the proposed `attributes` applied to the checkout.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Attributes",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseAttributesGeneratedType",
        "typeDefinitions": {
          "UseAttributesGeneratedType": {
            "filePath": "/hooks/attributes.ts",
            "name": "UseAttributesGeneratedType",
            "description": "Returns the proposed `attributes` applied to the checkout.",
            "params": [],
            "returns": {
              "filePath": "/hooks/attributes.ts",
              "description": "",
              "name": "Attribute[] | undefined",
              "value": "Attribute[] | undefined"
            },
            "value": "export function useAttributes<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): Attribute[] | undefined {\n  return useSubscription(useApi<ID>().attributes);\n}"
          },
          "Attribute": {
            "filePath": "/api/shared.ts",
            "name": "Attribute",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The key for the attribute."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value for the attribute."
              }
            ],
            "value": "export interface Attribute {\n  /**\n   * The key for the attribute.\n   */\n  key: string;\n\n  /**\n   * The value for the attribute.\n   */\n  value: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useCustomer",
    "description": "Returns the current `Customer`.\n\nThe value is `undefined` if the buyer isn't a known customer for this shop or if they haven't logged in yet.",
    "requires": "access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data) for some properties.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Buyer Identity",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseCustomerGeneratedType",
        "typeDefinitions": {
          "UseCustomerGeneratedType": {
            "filePath": "/hooks/buyer-identity.ts",
            "name": "UseCustomerGeneratedType",
            "description": "Returns the current `Customer`.\n\nThe value is `undefined` if the buyer isn't a known customer for this shop or if they haven't logged in yet.",
            "params": [],
            "returns": {
              "filePath": "/hooks/buyer-identity.ts",
              "description": "",
              "name": "Customer | undefined",
              "value": "Customer | undefined"
            },
            "value": "export function useCustomer<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): Customer | undefined {\n  const buyerIdentity = useApi<ID>().buyerIdentity;\n\n  if (!buyerIdentity) {\n    throw new ScopeNotGrantedError(\n      'Using buyer identity requires having personal customer data permissions granted to your app.',\n    );\n  }\n\n  return useSubscription(buyerIdentity.customer);\n}"
          },
          "Customer": {
            "filePath": "/api/standard/standard.ts",
            "name": "Customer",
            "description": "Information about a customer who has previously purchased from this shop.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Customer ID.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "email",
                "value": "string",
                "description": "The email of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "phone",
                "value": "string",
                "description": "The phone number of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "fullName",
                "value": "string",
                "description": "The full name of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "firstName",
                "value": "string",
                "description": "The first name of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lastName",
                "value": "string",
                "description": "The last name of the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "The image associated with the customer.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "acceptsMarketing",
                "value": "boolean",
                "description": "Defines if the customer accepts marketing activities.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "storeCreditAccounts",
                "value": "StoreCreditAccount[]",
                "description": "The Store Credit Accounts owned by the customer and usable during the checkout process.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isPrivate": true
              }
            ],
            "value": "export interface Customer {\n  /**\n   * Customer ID.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'gid://shopify/Customer/123'\n   */\n  id: string;\n  /**\n   * The email of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  email?: string;\n  /**\n   * The phone number of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  phone?: string;\n  /**\n   * The full name of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  fullName?: string;\n  /**\n   * The first name of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  firstName?: string;\n  /**\n   * The last name of the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  lastName?: string;\n  /**\n   * The image associated with the customer.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  image: ImageDetails;\n  /**\n   * Defines if the customer accepts marketing activities.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   */\n  acceptsMarketing: boolean;\n  /**\n   * The Store Credit Accounts owned by the customer and usable during the checkout process.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @private\n   */\n  storeCreditAccounts: StoreCreditAccount[];\n}"
          },
          "ImageDetails": {
            "filePath": "/api/standard/standard.ts",
            "name": "ImageDetails",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "url",
                "value": "string",
                "description": "The image URL."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "altText",
                "value": "string",
                "description": "The alternative text for the image.",
                "isOptional": true
              }
            ],
            "value": "export interface ImageDetails {\n  /**\n   * The image URL.\n   */\n  url: string;\n\n  /**\n   * The alternative text for the image.\n   */\n  altText?: string;\n}"
          },
          "StoreCreditAccount": {
            "filePath": "/api/standard/standard.ts",
            "name": "StoreCreditAccount",
            "description": "Information about a Store Credit Account.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "balance",
                "value": "Money",
                "description": "The current balance of the Store Credit Account."
              }
            ],
            "value": "export interface StoreCreditAccount {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/StoreCreditAccount/1'\n   */\n  id: string;\n  /**\n   * The current balance of the Store Credit Account.\n   */\n  balance: Money;\n}"
          },
          "Money": {
            "filePath": "/api/standard/standard.ts",
            "name": "Money",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": "The price amount."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currencyCode",
                "value": "CurrencyCode",
                "description": "The ISO 4217 format for the currency."
              }
            ],
            "value": "export interface Money {\n  /**\n   * The price amount.\n   */\n  amount: number;\n  /**\n   * The ISO 4217 format for the currency.\n   * @example 'CAD' for Canadian dollar\n   */\n  currencyCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useEmail",
    "description": "Returns the email address of the buyer that is interacting with the cart.\nThe value is `undefined` if the app does not have access to customer data.",
    "requires": "level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Buyer Identity",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseEmailGeneratedType",
        "typeDefinitions": {
          "UseEmailGeneratedType": {
            "filePath": "/hooks/buyer-identity.ts",
            "name": "UseEmailGeneratedType",
            "description": "Returns the email address of the buyer that is interacting with the cart.\nThe value is `undefined` if the app does not have access to customer data.",
            "params": [],
            "returns": {
              "filePath": "/hooks/buyer-identity.ts",
              "description": "",
              "name": "string | undefined",
              "value": "string | undefined"
            },
            "value": "export function useEmail<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): string | undefined {\n  const buyerIdentity = useApi<ID>().buyerIdentity;\n\n  if (!buyerIdentity) {\n    throw new ScopeNotGrantedError(\n      'Using buyer identity requires having personal customer data permissions granted to your app.',\n    );\n  }\n\n  return useSubscription(buyerIdentity.email);\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "usePhone",
    "description": "Returns the phone number of the buyer that is interacting with the cart.\nThe value is `undefined` if the app does not have access to customer data.",
    "requires": "level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Buyer Identity",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UsePhoneGeneratedType",
        "typeDefinitions": {
          "UsePhoneGeneratedType": {
            "filePath": "/hooks/buyer-identity.ts",
            "name": "UsePhoneGeneratedType",
            "description": "Returns the phone number of the buyer that is interacting with the cart.\nThe value is `undefined` if the app does not have access to customer data.",
            "params": [],
            "returns": {
              "filePath": "/hooks/buyer-identity.ts",
              "description": "",
              "name": "string | undefined",
              "value": "string | undefined"
            },
            "value": "export function usePhone<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): string | undefined {\n  const buyerIdentity = useApi<ID>().buyerIdentity;\n\n  if (!buyerIdentity) {\n    throw new ScopeNotGrantedError(\n      'Using buyer identity requires having personal customer data permissions granted to your app.',\n    );\n  }\n\n  return useSubscription(buyerIdentity.phone);\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useBuyerJourneyCompleted",
    "description": "Returns true if the buyer completed submitting their order.\n\nFor example, when viewing the order status page after submitting payment, the buyer will have completed their order.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Buyer Journey",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseBuyerJourneyCompletedGeneratedType",
        "typeDefinitions": {
          "UseBuyerJourneyCompletedGeneratedType": {
            "filePath": "/hooks/buyer-journey.ts",
            "name": "UseBuyerJourneyCompletedGeneratedType",
            "description": "Returns true if the buyer completed submitting their order.\n\nFor example, when viewing the order status page after submitting payment, the buyer will have completed their order.",
            "params": [],
            "returns": {
              "filePath": "/hooks/buyer-journey.ts",
              "description": "",
              "name": "false | true",
              "value": "false | true"
            },
            "value": "export function useBuyerJourneyCompleted<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): boolean {\n  const buyerJourney = useApi<ID>().buyerJourney;\n  const buyerJourneyCompleted = useSubscription(buyerJourney.completed);\n\n  return buyerJourneyCompleted;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useBuyerJourneyIntercept",
    "description": "Installs a function for intercepting and preventing progress on checkout.\n\nTo block checkout progress, you must set the [block_progress](/docs/api/checkout-ui-extensions/configuration#block-progress)\ncapability in your extension's configuration.\n\nIf you do, then you're expected to inform the buyer why navigation was blocked,\neither by passing validation errors to the checkout UI or rendering the errors in your extension.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Buyer Journey",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseBuyerJourneyInterceptGeneratedType",
        "typeDefinitions": {
          "UseBuyerJourneyInterceptGeneratedType": {
            "filePath": "/hooks/buyer-journey.ts",
            "name": "UseBuyerJourneyInterceptGeneratedType",
            "description": "Installs a function for intercepting and preventing progress on checkout.\n\nTo block checkout progress, you must set the [block_progress](/docs/api/checkout-ui-extensions/configuration#block-progress)\ncapability in your extension's configuration.\n\nIf you do, then you're expected to inform the buyer why navigation was blocked,\neither by passing validation errors to the checkout UI or rendering the errors in your extension.",
            "params": [
              {
                "name": "interceptor",
                "description": "",
                "value": "Interceptor",
                "filePath": "/hooks/buyer-journey.ts"
              }
            ],
            "returns": {
              "filePath": "/hooks/buyer-journey.ts",
              "description": "",
              "name": "void",
              "value": "void"
            },
            "value": "export function useBuyerJourneyIntercept<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(interceptor: Interceptor): void {\n  const buyerJourney = useApi<ID>().buyerJourney;\n  const interceptorRef = useRef(interceptor);\n  interceptorRef.current = interceptor;\n\n  useEffect(() => {\n    const teardownPromise = buyerJourney.intercept((interceptorProps) =>\n      interceptorRef.current(interceptorProps),\n    );\n\n    return () => {\n      teardownPromise.then((teardown) => teardown()).catch(() => {});\n    };\n  }, [buyerJourney]);\n}"
          },
          "Interceptor": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Interceptor",
            "value": "(\n  interceptorProps: InterceptorProps,\n) => InterceptorRequest | Promise<InterceptorRequest>",
            "description": "A function for intercepting and preventing navigation on checkout. You can block\nnavigation by returning an object with\n`{behavior: 'block', reason: InvalidResultReason.InvalidExtensionState, errors?: ValidationErrors[]}`.\nIf you do, then you're expected to also update some part of your UI to reflect the reason why navigation\nwas blocked, either by targeting checkout UI fields, passing errors to the page level or rendering the errors in your extension."
          },
          "InterceptorProps": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorProps",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "canBlockProgress",
                "value": "boolean",
                "description": "Whether the interceptor has the capability to block a buyer's progress through\ncheckout. This ability might be granted by a merchant in differing checkout contexts."
              }
            ],
            "value": "export interface InterceptorProps {\n  /**\n   * Whether the interceptor has the capability to block a buyer's progress through\n   * checkout. This ability might be granted by a merchant in differing checkout contexts.\n   */\n  canBlockProgress: boolean;\n}"
          },
          "InterceptorRequest": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InterceptorRequest",
            "value": "InterceptorRequestAllow | InterceptorRequestBlock",
            "description": ""
          },
          "InterceptorRequestAllow": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorRequestAllow",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"allow\"",
                "description": "Indicates that the interceptor will allow the buyer's journey to continue."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "perform",
                "value": "(result: InterceptorResult) => void | Promise<void>",
                "description": "This callback is called when all interceptors finish. We recommend\nsetting errors or reasons for blocking at this stage, so that all the errors in\nthe UI show up at once.",
                "isOptional": true
              }
            ],
            "value": "interface InterceptorRequestAllow {\n  /**\n   * Indicates that the interceptor will allow the buyer's journey to continue.\n   */\n  behavior: 'allow';\n\n  /**\n   * This callback is called when all interceptors finish. We recommend\n   * setting errors or reasons for blocking at this stage, so that all the errors in\n   * the UI show up at once.\n   * @param result InterceptorResult with behavior as either 'allow' or 'block'\n   */\n  perform?(result: InterceptorResult): void | Promise<void>;\n}"
          },
          "InterceptorResult": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InterceptorResult",
            "value": "InterceptorResultAllow | InterceptorResultBlock",
            "description": ""
          },
          "InterceptorResultAllow": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorResultAllow",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"allow\"",
                "description": "Indicates that the buyer was allowed to progress through checkout."
              }
            ],
            "value": "interface InterceptorResultAllow {\n  /**\n   * Indicates that the buyer was allowed to progress through checkout.\n   */\n  behavior: 'allow';\n}"
          },
          "InterceptorResultBlock": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorResultBlock",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"block\"",
                "description": "Indicates that some part of the checkout UI intercepted and prevented\nthe buyer’s progress. The buyer typically needs to take some action\nto resolve this issue and to move on to the next step."
              }
            ],
            "value": "interface InterceptorResultBlock {\n  /**\n   * Indicates that some part of the checkout UI intercepted and prevented\n   * the buyer’s progress. The buyer typically needs to take some action\n   * to resolve this issue and to move on to the next step.\n   */\n  behavior: 'block';\n}"
          },
          "InterceptorRequestBlock": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorRequestBlock",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"block\"",
                "description": "Indicates that the interceptor will block the buyer's journey from continuing."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "reason",
                "value": "string",
                "description": "The reason for blocking the interceptor request. This value isn't presented to\nthe buyer, so it doesn't need to be localized. The value is used only for Shopify’s\nown internal debugging and metrics."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "errors",
                "value": "ValidationError[]",
                "description": "Used to pass errors to the checkout UI, outside your extension's UI boundaries.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "perform",
                "value": "(result: InterceptorResult) => void | Promise<void>",
                "description": "This callback is called when all interceptors finish. We recommend\nsetting errors or reasons for blocking at this stage, so that all the errors in\nthe UI show up at once.",
                "isOptional": true
              }
            ],
            "value": "interface InterceptorRequestBlock {\n  /**\n   * Indicates that the interceptor will block the buyer's journey from continuing.\n   */\n  behavior: 'block';\n\n  /**\n   * The reason for blocking the interceptor request. This value isn't presented to\n   * the buyer, so it doesn't need to be localized. The value is used only for Shopify’s\n   * own internal debugging and metrics.\n   */\n  reason: string;\n\n  /**\n   * Used to pass errors to the checkout UI, outside your extension's UI boundaries.\n   */\n  errors?: ValidationError[];\n\n  /**\n   * This callback is called when all interceptors finish. We recommend\n   * setting errors or reasons for blocking at this stage, so that all the errors in\n   * the UI show up at once.\n   * @param result InterceptorResult with behavior as either 'allow' or 'block'\n   */\n  perform?(result: InterceptorResult): void | Promise<void>;\n}"
          },
          "ValidationError": {
            "filePath": "/api/shared.ts",
            "name": "ValidationError",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "Error message to be displayed to the buyer."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "string",
                "description": "The checkout UI field that the error is associated with.\n\nExample: `$.cart.deliveryGroups[0].deliveryAddress.countryCode`\n\nSee the [supported targets](/docs/api/functions/reference/cart-checkout-validation/graphql#supported-targets)\nfor more information.",
                "isOptional": true
              }
            ],
            "value": "export interface ValidationError {\n  /**\n   * Error message to be displayed to the buyer.\n   */\n  message: string;\n  /**\n   * The checkout UI field that the error is associated with.\n   *\n   * Example: `$.cart.deliveryGroups[0].deliveryAddress.countryCode`\n   *\n   * See the [supported targets](/docs/api/functions/reference/cart-checkout-validation/graphql#supported-targets)\n   * for more information.\n   */\n  target?: string;\n}"
          }
        }
      },
      {
        "title": "InterceptorRequestBlock",
        "description": "Block the buyer from proceeding further in the checkout",
        "type": "InterceptorRequestBlock",
        "typeDefinitions": {
          "InterceptorRequestBlock": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorRequestBlock",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"block\"",
                "description": "Indicates that the interceptor will block the buyer's journey from continuing."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "reason",
                "value": "string",
                "description": "The reason for blocking the interceptor request. This value isn't presented to\nthe buyer, so it doesn't need to be localized. The value is used only for Shopify’s\nown internal debugging and metrics."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "errors",
                "value": "ValidationError[]",
                "description": "Used to pass errors to the checkout UI, outside your extension's UI boundaries.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "perform",
                "value": "(result: InterceptorResult) => void | Promise<void>",
                "description": "This callback is called when all interceptors finish. We recommend\nsetting errors or reasons for blocking at this stage, so that all the errors in\nthe UI show up at once.",
                "isOptional": true
              }
            ],
            "value": "interface InterceptorRequestBlock {\n  /**\n   * Indicates that the interceptor will block the buyer's journey from continuing.\n   */\n  behavior: 'block';\n\n  /**\n   * The reason for blocking the interceptor request. This value isn't presented to\n   * the buyer, so it doesn't need to be localized. The value is used only for Shopify’s\n   * own internal debugging and metrics.\n   */\n  reason: string;\n\n  /**\n   * Used to pass errors to the checkout UI, outside your extension's UI boundaries.\n   */\n  errors?: ValidationError[];\n\n  /**\n   * This callback is called when all interceptors finish. We recommend\n   * setting errors or reasons for blocking at this stage, so that all the errors in\n   * the UI show up at once.\n   * @param result InterceptorResult with behavior as either 'allow' or 'block'\n   */\n  perform?(result: InterceptorResult): void | Promise<void>;\n}"
          },
          "ValidationError": {
            "filePath": "/api/shared.ts",
            "name": "ValidationError",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "Error message to be displayed to the buyer."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "string",
                "description": "The checkout UI field that the error is associated with.\n\nExample: `$.cart.deliveryGroups[0].deliveryAddress.countryCode`\n\nSee the [supported targets](/docs/api/functions/reference/cart-checkout-validation/graphql#supported-targets)\nfor more information.",
                "isOptional": true
              }
            ],
            "value": "export interface ValidationError {\n  /**\n   * Error message to be displayed to the buyer.\n   */\n  message: string;\n  /**\n   * The checkout UI field that the error is associated with.\n   *\n   * Example: `$.cart.deliveryGroups[0].deliveryAddress.countryCode`\n   *\n   * See the [supported targets](/docs/api/functions/reference/cart-checkout-validation/graphql#supported-targets)\n   * for more information.\n   */\n  target?: string;\n}"
          },
          "InterceptorResult": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InterceptorResult",
            "value": "InterceptorResultAllow | InterceptorResultBlock",
            "description": ""
          },
          "InterceptorResultAllow": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorResultAllow",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"allow\"",
                "description": "Indicates that the buyer was allowed to progress through checkout."
              }
            ],
            "value": "interface InterceptorResultAllow {\n  /**\n   * Indicates that the buyer was allowed to progress through checkout.\n   */\n  behavior: 'allow';\n}"
          },
          "InterceptorResultBlock": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorResultBlock",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"block\"",
                "description": "Indicates that some part of the checkout UI intercepted and prevented\nthe buyer’s progress. The buyer typically needs to take some action\nto resolve this issue and to move on to the next step."
              }
            ],
            "value": "interface InterceptorResultBlock {\n  /**\n   * Indicates that some part of the checkout UI intercepted and prevented\n   * the buyer’s progress. The buyer typically needs to take some action\n   * to resolve this issue and to move on to the next step.\n   */\n  behavior: 'block';\n}"
          }
        }
      },
      {
        "title": "InterceptorRequestAllow",
        "description": "Allow the buyer to proceed further in the checkout",
        "type": "InterceptorRequestAllow",
        "typeDefinitions": {
          "InterceptorRequestAllow": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorRequestAllow",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"allow\"",
                "description": "Indicates that the interceptor will allow the buyer's journey to continue."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "perform",
                "value": "(result: InterceptorResult) => void | Promise<void>",
                "description": "This callback is called when all interceptors finish. We recommend\nsetting errors or reasons for blocking at this stage, so that all the errors in\nthe UI show up at once.",
                "isOptional": true
              }
            ],
            "value": "interface InterceptorRequestAllow {\n  /**\n   * Indicates that the interceptor will allow the buyer's journey to continue.\n   */\n  behavior: 'allow';\n\n  /**\n   * This callback is called when all interceptors finish. We recommend\n   * setting errors or reasons for blocking at this stage, so that all the errors in\n   * the UI show up at once.\n   * @param result InterceptorResult with behavior as either 'allow' or 'block'\n   */\n  perform?(result: InterceptorResult): void | Promise<void>;\n}"
          },
          "InterceptorResult": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InterceptorResult",
            "value": "InterceptorResultAllow | InterceptorResultBlock",
            "description": ""
          },
          "InterceptorResultAllow": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorResultAllow",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"allow\"",
                "description": "Indicates that the buyer was allowed to progress through checkout."
              }
            ],
            "value": "interface InterceptorResultAllow {\n  /**\n   * Indicates that the buyer was allowed to progress through checkout.\n   */\n  behavior: 'allow';\n}"
          },
          "InterceptorResultBlock": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorResultBlock",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"block\"",
                "description": "Indicates that some part of the checkout UI intercepted and prevented\nthe buyer’s progress. The buyer typically needs to take some action\nto resolve this issue and to move on to the next step."
              }
            ],
            "value": "interface InterceptorResultBlock {\n  /**\n   * Indicates that some part of the checkout UI intercepted and prevented\n   * the buyer’s progress. The buyer typically needs to take some action\n   * to resolve this issue and to move on to the next step.\n   */\n  behavior: 'block';\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "Intercept and prevent a buyer's progress through checkout while targeting a specific checkout UI field.\n        See the [validation tutorial](/docs/apps/checkout/validation) for more examples and best practices.",
      "codeblock": {
        "title": "Block progress and show error for a checkout UI field",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  render,\n  useBuyerJourneyIntercept,\n  useShippingAddress,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender(\n  'Checkout::DeliveryAddress::RenderBefore',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const address = useShippingAddress();\n\n  useBuyerJourneyIntercept(\n    ({canBlockProgress}) => {\n      return canBlockProgress &&\n        address?.countryCode &&\n        address.countryCode !== 'CA'\n        ? {\n            behavior: 'block',\n            reason: 'Invalid shipping country',\n            errors: [\n              {\n                message:\n                  'Sorry, we can only ship to Canada',\n                // Show an error underneath the country code field\n                target:\n                  '$.cart.deliveryGroups[0].deliveryAddress.countryCode',\n              },\n              {\n                // In addition, show an error at the page level\n                message:\n                  'Please use a different address.',\n              },\n            ],\n          }\n        : {\n            behavior: 'allow',\n          };\n    },\n  );\n\n  return null;\n}\n",
            "language": "jsx",
            "title": "React"
          }
        ]
      }
    },
    "examples": {
      "description": "In addition to targeting checkout UI fields, you can also pass errors to the page level or render the error in your extension.",
      "examples": [
        {
          "description": "Intercept and prevent a buyer's progress through checkout while displaying an error message at the page level.\n        See the [validation tutorial](/docs/apps/checkout/validation) for more examples and best practices.",
          "codeblock": {
            "title": "Block progress and show error at page level",
            "tabs": [
              {
                "code": "import React from 'react';\nimport {\n  render,\n  useBuyerJourneyIntercept,\n  useShippingAddress,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender(\n  'Checkout::DeliveryAddress::RenderBefore',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const address = useShippingAddress();\n\n  useBuyerJourneyIntercept(\n    ({canBlockProgress}) => {\n      return canBlockProgress &&\n        address?.countryCode &&\n        address.countryCode !== 'CA'\n        ? {\n            behavior: 'block',\n            reason: 'Invalid shipping country',\n            errors: [\n              {\n                // An error without a `target` property is shown at page level\n                message:\n                  'Sorry, we can only ship to Canada',\n              },\n            ],\n          }\n        : {\n            behavior: 'allow',\n          };\n    },\n  );\n\n  return null;\n}\n",
                "language": "jsx",
                "title": "React"
              }
            ]
          }
        },
        {
          "description": "Intercept and prevent a buyer's progress through checkout while displaying an error message in your extension.\n        See the [validation tutorial](/docs/apps/checkout/validation) for more examples and best practices.",
          "codeblock": {
            "title": "Block progress and show error in your extension",
            "tabs": [
              {
                "code": "import React, {useState} from 'react';\nimport {\n  render,\n  Banner,\n  useBuyerJourneyIntercept,\n  useTarget,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender(\n  'Checkout::CartLineDetails::RenderAfter',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const [showError, setShowError] =\n    useState(false);\n  const {quantity} = useTarget();\n\n  useBuyerJourneyIntercept(\n    ({canBlockProgress}) => {\n      return canBlockProgress && quantity > 1\n        ? {\n            behavior: 'block',\n            reason: 'limited stock',\n            perform: (result) => {\n              if (result.behavior === 'block') {\n                setShowError(true);\n              }\n            },\n          }\n        : {\n            behavior: 'allow',\n            perform: () => {\n              setShowError(false);\n            },\n          };\n    },\n  );\n\n  return showError ? (\n    <Banner>\n      This item has a limit of one per customer.\n    </Banner>\n  ) : null;\n}\n",
                "language": "jsx",
                "title": "React"
              }
            ]
          }
        }
      ]
    },
    "related": [
      {
        "subtitle": "Tutorial",
        "name": "Validating fields at checkout",
        "url": "/docs/apps/checkout/validation/fields",
        "type": "tutorial"
      },
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useBuyerJourney",
    "description": "Returns the `buyerJourney` details on buyer progression in checkout.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Buyer Journey",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseBuyerJourneyGeneratedType",
        "typeDefinitions": {
          "UseBuyerJourneyGeneratedType": {
            "filePath": "/hooks/buyer-journey.ts",
            "name": "UseBuyerJourneyGeneratedType",
            "description": "Returns the `buyerJourney` details on buyer progression in checkout.",
            "params": [],
            "returns": {
              "filePath": "/hooks/buyer-journey.ts",
              "description": "",
              "name": "BuyerJourney",
              "value": "BuyerJourney"
            },
            "value": "export function useBuyerJourney<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): BuyerJourney {\n  return useApi<ID>().buyerJourney;\n}"
          },
          "BuyerJourney": {
            "filePath": "/api/standard/standard.ts",
            "name": "BuyerJourney",
            "description": "Provides details on the buyer's progression through the checkout.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "intercept",
                "value": "(interceptor: Interceptor) => Promise<() => void>",
                "description": "Installs a function for intercepting and preventing progress on checkout.\n\nThis returns a promise that resolves to a teardown function. Calling the\nteardown function will remove the interceptor.\n\nTo block checkout progress, you must set the [block_progress](/docs/api/checkout-ui-extensions/configuration#block-progress)\ncapability in your extension's configuration."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "completed",
                "value": "StatefulRemoteSubscribable<boolean>",
                "description": "This subscribable value will be true if the buyer completed submitting their order.\n\nFor example, when viewing the order status page after submitting payment, the buyer will have completed their order."
              }
            ],
            "value": "export interface BuyerJourney {\n  /**\n   * Installs a function for intercepting and preventing progress on checkout.\n   *\n   * This returns a promise that resolves to a teardown function. Calling the\n   * teardown function will remove the interceptor.\n   *\n   * To block checkout progress, you must set the [block_progress](/docs/api/checkout-ui-extensions/configuration#block-progress)\n   * capability in your extension's configuration.\n   */\n  intercept(interceptor: Interceptor): Promise<() => void>;\n\n  /**\n   * This subscribable value will be true if the buyer completed submitting their order.\n   *\n   * For example, when viewing the order status page after submitting payment, the buyer will have completed their order.\n   */\n  completed: StatefulRemoteSubscribable<boolean>;\n}"
          },
          "Interceptor": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Interceptor",
            "value": "(\n  interceptorProps: InterceptorProps,\n) => InterceptorRequest | Promise<InterceptorRequest>",
            "description": "A function for intercepting and preventing navigation on checkout. You can block\nnavigation by returning an object with\n`{behavior: 'block', reason: InvalidResultReason.InvalidExtensionState, errors?: ValidationErrors[]}`.\nIf you do, then you're expected to also update some part of your UI to reflect the reason why navigation\nwas blocked, either by targeting checkout UI fields, passing errors to the page level or rendering the errors in your extension."
          },
          "InterceptorProps": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorProps",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "canBlockProgress",
                "value": "boolean",
                "description": "Whether the interceptor has the capability to block a buyer's progress through\ncheckout. This ability might be granted by a merchant in differing checkout contexts."
              }
            ],
            "value": "export interface InterceptorProps {\n  /**\n   * Whether the interceptor has the capability to block a buyer's progress through\n   * checkout. This ability might be granted by a merchant in differing checkout contexts.\n   */\n  canBlockProgress: boolean;\n}"
          },
          "InterceptorRequest": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InterceptorRequest",
            "value": "InterceptorRequestAllow | InterceptorRequestBlock",
            "description": ""
          },
          "InterceptorRequestAllow": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorRequestAllow",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"allow\"",
                "description": "Indicates that the interceptor will allow the buyer's journey to continue."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "perform",
                "value": "(result: InterceptorResult) => void | Promise<void>",
                "description": "This callback is called when all interceptors finish. We recommend\nsetting errors or reasons for blocking at this stage, so that all the errors in\nthe UI show up at once.",
                "isOptional": true
              }
            ],
            "value": "interface InterceptorRequestAllow {\n  /**\n   * Indicates that the interceptor will allow the buyer's journey to continue.\n   */\n  behavior: 'allow';\n\n  /**\n   * This callback is called when all interceptors finish. We recommend\n   * setting errors or reasons for blocking at this stage, so that all the errors in\n   * the UI show up at once.\n   * @param result InterceptorResult with behavior as either 'allow' or 'block'\n   */\n  perform?(result: InterceptorResult): void | Promise<void>;\n}"
          },
          "InterceptorResult": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InterceptorResult",
            "value": "InterceptorResultAllow | InterceptorResultBlock",
            "description": ""
          },
          "InterceptorResultAllow": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorResultAllow",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"allow\"",
                "description": "Indicates that the buyer was allowed to progress through checkout."
              }
            ],
            "value": "interface InterceptorResultAllow {\n  /**\n   * Indicates that the buyer was allowed to progress through checkout.\n   */\n  behavior: 'allow';\n}"
          },
          "InterceptorResultBlock": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorResultBlock",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"block\"",
                "description": "Indicates that some part of the checkout UI intercepted and prevented\nthe buyer’s progress. The buyer typically needs to take some action\nto resolve this issue and to move on to the next step."
              }
            ],
            "value": "interface InterceptorResultBlock {\n  /**\n   * Indicates that some part of the checkout UI intercepted and prevented\n   * the buyer’s progress. The buyer typically needs to take some action\n   * to resolve this issue and to move on to the next step.\n   */\n  behavior: 'block';\n}"
          },
          "InterceptorRequestBlock": {
            "filePath": "/api/standard/standard.ts",
            "name": "InterceptorRequestBlock",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "behavior",
                "value": "\"block\"",
                "description": "Indicates that the interceptor will block the buyer's journey from continuing."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "reason",
                "value": "string",
                "description": "The reason for blocking the interceptor request. This value isn't presented to\nthe buyer, so it doesn't need to be localized. The value is used only for Shopify’s\nown internal debugging and metrics."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "errors",
                "value": "ValidationError[]",
                "description": "Used to pass errors to the checkout UI, outside your extension's UI boundaries.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "perform",
                "value": "(result: InterceptorResult) => void | Promise<void>",
                "description": "This callback is called when all interceptors finish. We recommend\nsetting errors or reasons for blocking at this stage, so that all the errors in\nthe UI show up at once.",
                "isOptional": true
              }
            ],
            "value": "interface InterceptorRequestBlock {\n  /**\n   * Indicates that the interceptor will block the buyer's journey from continuing.\n   */\n  behavior: 'block';\n\n  /**\n   * The reason for blocking the interceptor request. This value isn't presented to\n   * the buyer, so it doesn't need to be localized. The value is used only for Shopify’s\n   * own internal debugging and metrics.\n   */\n  reason: string;\n\n  /**\n   * Used to pass errors to the checkout UI, outside your extension's UI boundaries.\n   */\n  errors?: ValidationError[];\n\n  /**\n   * This callback is called when all interceptors finish. We recommend\n   * setting errors or reasons for blocking at this stage, so that all the errors in\n   * the UI show up at once.\n   * @param result InterceptorResult with behavior as either 'allow' or 'block'\n   */\n  perform?(result: InterceptorResult): void | Promise<void>;\n}"
          },
          "ValidationError": {
            "filePath": "/api/shared.ts",
            "name": "ValidationError",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "Error message to be displayed to the buyer."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "target",
                "value": "string",
                "description": "The checkout UI field that the error is associated with.\n\nExample: `$.cart.deliveryGroups[0].deliveryAddress.countryCode`\n\nSee the [supported targets](/docs/api/functions/reference/cart-checkout-validation/graphql#supported-targets)\nfor more information.",
                "isOptional": true
              }
            ],
            "value": "export interface ValidationError {\n  /**\n   * Error message to be displayed to the buyer.\n   */\n  message: string;\n  /**\n   * The checkout UI field that the error is associated with.\n   *\n   * Example: `$.cart.deliveryGroups[0].deliveryAddress.countryCode`\n   *\n   * See the [supported targets](/docs/api/functions/reference/cart-checkout-validation/graphql#supported-targets)\n   * for more information.\n   */\n  target?: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useExtensionCapability",
    "description": "Returns whether or not a given capability of an extension is granted.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Metadata",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseExtensionCapabilityGeneratedType",
        "typeDefinitions": {
          "UseExtensionCapabilityGeneratedType": {
            "filePath": "/hooks/capabilities.ts",
            "name": "UseExtensionCapabilityGeneratedType",
            "description": "Returns whether or not a given capability of an extension is granted.",
            "params": [
              {
                "name": "capability",
                "description": "",
                "value": "Capability",
                "filePath": "/hooks/capabilities.ts"
              }
            ],
            "returns": {
              "filePath": "/hooks/capabilities.ts",
              "description": "",
              "name": "boolean",
              "value": "boolean"
            },
            "value": "export function useExtensionCapability(capability: Capability): boolean {\n  return useExtensionCapabilities().includes(capability);\n}"
          },
          "Capability": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Capability",
            "value": "'api_access' | 'network_access' | 'block_progress'",
            "description": "The capabilities an extension has access to.\n\n* [`api_access`](/docs/api/checkout-ui-extensions/configuration#api-access): the extension can access the Storefront API.\n\n* [`network_access`](/docs/api/checkout-ui-extensions/configuration#network-access): the extension can make external network calls.\n\n* [`block_progress`](/docs/api/checkout-ui-extensions/configuration#block-progress): the extension can block a buyer's progress and the merchant has allowed this blocking behavior."
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useExtensionCapabilities",
    "description": "Returns a list of an extension's granted capabilities.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Metadata",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseExtensionCapabilitiesGeneratedType",
        "typeDefinitions": {
          "UseExtensionCapabilitiesGeneratedType": {
            "filePath": "/hooks/capabilities.ts",
            "name": "UseExtensionCapabilitiesGeneratedType",
            "description": "Returns a list of an extension's granted capabilities.",
            "params": [],
            "returns": {
              "filePath": "/hooks/capabilities.ts",
              "description": "",
              "name": "Capability[]",
              "value": "Capability[]"
            },
            "value": "export function useExtensionCapabilities(): Capability[] {\n  return useSubscription(useApi().extension.capabilities);\n}"
          },
          "Capability": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Capability",
            "value": "'api_access' | 'network_access' | 'block_progress'",
            "description": "The capabilities an extension has access to.\n\n* [`api_access`](/docs/api/checkout-ui-extensions/configuration#api-access): the extension can access the Storefront API.\n\n* [`network_access`](/docs/api/checkout-ui-extensions/configuration#network-access): the extension can make external network calls.\n\n* [`block_progress`](/docs/api/checkout-ui-extensions/configuration#block-progress): the extension can block a buyer's progress and the merchant has allowed this blocking behavior."
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useApplyCartLinesChange",
    "description": "Returns a function to mutate the `lines` property of checkout.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Cart",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseApplyCartLinesChangeGeneratedType",
        "typeDefinitions": {
          "UseApplyCartLinesChangeGeneratedType": {
            "filePath": "/hooks/cart-lines.ts",
            "name": "UseApplyCartLinesChangeGeneratedType",
            "description": "Returns a function to mutate the `lines` property of checkout.",
            "params": [],
            "returns": {
              "filePath": "/hooks/cart-lines.ts",
              "description": "",
              "name": "(change: CartLineChange) => Promise<CartLineChangeResult>",
              "value": "(change: CartLineChange) => Promise<CartLineChangeResult>"
            },
            "value": "export function useApplyCartLinesChange<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): (change: CartLineChange) => Promise<CartLineChangeResult> {\n  const api = useApi<ID>();\n\n  if ('applyCartLinesChange' in api) {\n    return api.applyCartLinesChange;\n  }\n\n  throw new ExtensionHasNoMethodError(\n    'applyCartLinesChange',\n    api.extensionPoint,\n  );\n}"
          },
          "CartLineChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartLineChange",
            "value": "CartLineAddChange | CartLineRemoveChange | CartLineUpdateChange",
            "description": ""
          },
          "CartLineAddChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineAddChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"addCartLine\"",
                "description": "An identifier for changes that add line items."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandiseId",
                "value": "string",
                "description": "The merchandise ID being added."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being added."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The attributes associated with the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlanId",
                "value": "string",
                "description": "The identifier of the selling plan that the merchandise is being purchased\nwith.",
                "isOptional": true
              }
            ],
            "value": "export interface CartLineAddChange {\n  /**\n   * An identifier for changes that add line items.\n   */\n  type: 'addCartLine';\n\n  /**\n   * The merchandise ID being added.\n   * @example 'gid://shopify/ProductVariant/123'\n   */\n  merchandiseId: string;\n\n  /**\n   * The quantity of the merchandise being added.\n   */\n  quantity: number;\n\n  /**\n   * The attributes associated with the line item.\n   */\n  attributes?: Attribute[];\n\n  /**\n   * The identifier of the selling plan that the merchandise is being purchased\n   * with.\n   */\n  sellingPlanId?: SellingPlan['id'];\n}"
          },
          "CartLine": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLine",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "These line item IDs are not stable at the moment, they might change after\nany operations on the line items. You should always look up for an updated\nID before any call to `applyCartLinesChange` because you'll need the ID to\ncreate a `CartLineChange` object."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The details about the cost components attributed to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The line item additional custom attributes."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountAllocations",
                "value": "CartDiscountAllocation[]",
                "description": "Discounts applied to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lineComponents",
                "value": "CartBundleLineComponent[]",
                "description": "Sub lines of the merchandise line. If no sub lines are present, this will be an empty array."
              }
            ],
            "value": "export interface CartLine {\n  /**\n   * These line item IDs are not stable at the moment, they might change after\n   * any operations on the line items. You should always look up for an updated\n   * ID before any call to `applyCartLinesChange` because you'll need the ID to\n   * create a `CartLineChange` object.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise being purchased.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of the merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The details about the cost components attributed to the cart line.\n   */\n  cost: CartLineCost;\n\n  /**\n   * The line item additional custom attributes.\n   */\n  attributes: Attribute[];\n\n  /**\n   * Discounts applied to the cart line.\n   */\n  discountAllocations: CartDiscountAllocation[];\n\n  /**\n   * Sub lines of the merchandise line. If no sub lines are present, this will be an empty array.\n   */\n  lineComponents: CartLineComponentType[];\n}"
          },
          "Merchandise": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Merchandise",
            "value": "ProductVariant",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"variant\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The product variant’s title."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "string",
                "description": "The product variant's subtitle.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "Image associated with the product variant. This field falls back to the product\nimage if no image is available.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "selectedOptions",
                "value": "SelectedOption[]",
                "description": "List of product options applied to the variant."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "product",
                "value": "Product",
                "description": "The product object that the product variant belongs to."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "requiresShipping",
                "value": "boolean",
                "description": "Whether or not the product requires shipping."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlan",
                "value": "SellingPlan",
                "description": "The selling plan associated with the merchandise.",
                "isOptional": true
              }
            ]
          },
          "ImageDetails": {
            "filePath": "/api/standard/standard.ts",
            "name": "ImageDetails",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "url",
                "value": "string",
                "description": "The image URL."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "altText",
                "value": "string",
                "description": "The alternative text for the image.",
                "isOptional": true
              }
            ],
            "value": "export interface ImageDetails {\n  /**\n   * The image URL.\n   */\n  url: string;\n\n  /**\n   * The alternative text for the image.\n   */\n  altText?: string;\n}"
          },
          "SelectedOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "SelectedOption",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the merchandise option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value of the merchandise option."
              }
            ],
            "value": "export interface SelectedOption {\n  /**\n   * The name of the merchandise option.\n   */\n  name: string;\n\n  /**\n   * The value of the merchandise option.\n   */\n  value: string;\n}"
          },
          "Product": {
            "filePath": "/api/standard/standard.ts",
            "name": "Product",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "vendor",
                "value": "string",
                "description": "The product’s vendor name."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "productType",
                "value": "string",
                "description": "A categorization that a product can be tagged with, commonly used for filtering and searching."
              }
            ],
            "value": "export interface Product {\n  /**\n   * A globally-unique identifier.\n   */\n  id: string;\n\n  /**\n   * The product’s vendor name.\n   */\n  vendor: string;\n\n  /**\n   * A categorization that a product can be tagged with, commonly used for filtering and searching.\n   */\n  productType: string;\n}"
          },
          "SellingPlan": {
            "filePath": "/api/shared.ts",
            "name": "SellingPlan",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              }
            ],
            "value": "export interface SellingPlan {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/SellingPlan/1'\n   */\n  id: string;\n}"
          },
          "CartLineCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLineCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "Money",
                "description": "The total amount after reductions the buyer can expect to pay that is directly attributable to a single\ncart line."
              }
            ],
            "value": "export interface CartLineCost {\n  /**\n   * The total amount after reductions the buyer can expect to pay that is directly attributable to a single\n   * cart line.\n   */\n  totalAmount: Money;\n}"
          },
          "Money": {
            "filePath": "/api/standard/standard.ts",
            "name": "Money",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": "The price amount."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currencyCode",
                "value": "CurrencyCode",
                "description": "The ISO 4217 format for the currency."
              }
            ],
            "value": "export interface Money {\n  /**\n   * The price amount.\n   */\n  amount: number;\n  /**\n   * The ISO 4217 format for the currency.\n   * @example 'CAD' for Canadian dollar\n   */\n  currencyCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          },
          "Attribute": {
            "filePath": "/api/shared.ts",
            "name": "Attribute",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The key for the attribute."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value for the attribute."
              }
            ],
            "value": "export interface Attribute {\n  /**\n   * The key for the attribute.\n   */\n  key: string;\n\n  /**\n   * The value for the attribute.\n   */\n  value: string;\n}"
          },
          "CartDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartDiscountAllocation",
            "value": "CartCodeDiscountAllocation | CartAutomaticDiscountAllocation | CartCustomDiscountAllocation",
            "description": ""
          },
          "CartCodeDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCodeDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"code\"",
                "description": "The type of the code discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCodeDiscountAllocation extends CartDiscountAllocationBase {\n  /**\n   * The code for the discount\n   */\n  code: string;\n\n  /**\n   * The type of the code discount\n   */\n  type: 'code';\n}"
          },
          "CartAutomaticDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartAutomaticDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"automatic\"",
                "description": "The type of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartAutomaticDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the automatic discount\n   */\n  title: string;\n\n  /**\n   * The type of the automatic discount\n   */\n  type: 'automatic';\n}"
          },
          "CartCustomDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCustomDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"custom\"",
                "description": "The type of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCustomDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the custom discount\n   */\n  title: string;\n\n  /**\n   * The type of the custom discount\n   */\n  type: 'custom';\n}"
          },
          "CartBundleLineComponent": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartBundleLineComponent",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"bundle\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the bundle line component.\n\nThis ID is not stable. If an operation updates the line items in any way, all IDs could change."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise of this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The cost attributed to this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "Additional custom attributes for the bundle line component."
              }
            ],
            "value": "export interface CartBundleLineComponent {\n  type: 'bundle';\n\n  /**\n   * A unique identifier for the bundle line component.\n   *\n   * This ID is not stable. If an operation updates the line items in any way, all IDs could change.\n   *\n   * @example 'gid://shopify/CartLineComponent/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise of this bundle line component.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The cost attributed to this bundle line component.\n   */\n  cost: CartLineCost;\n\n  /**\n   * Additional custom attributes for the bundle line component.\n   *\n   * @example [{key: 'engraving', value: 'hello world'}]\n   */\n  attributes: Attribute[];\n}"
          },
          "CartLineRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineRemoveChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeCartLine\"",
                "description": "An identifier for changes that remove line items."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Line Item ID."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity being removed for this line item."
              }
            ],
            "value": "export interface CartLineRemoveChange {\n  /**\n   * An identifier for changes that remove line items.\n   */\n  type: 'removeCartLine';\n\n  /**\n   * Line Item ID.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The quantity being removed for this line item.\n   */\n  quantity: number;\n}"
          },
          "CartLineUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineUpdateChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateCartLine\"",
                "description": "An identifier for changes that update line items."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Line Item ID."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandiseId",
                "value": "string",
                "description": "The new merchandise ID for the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The new quantity for the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The new attributes for the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlanId",
                "value": "string",
                "description": "The identifier of the selling plan that the merchandise is being purchased\nwith or `null` to remove the the product from the selling plan.",
                "isOptional": true
              }
            ],
            "value": "export interface CartLineUpdateChange {\n  /**\n   * An identifier for changes that update line items.\n   */\n  type: 'updateCartLine';\n\n  /**\n   * Line Item ID.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The new merchandise ID for the line item.\n   * @example 'gid://shopify/ProductVariant/123'\n   */\n\n  merchandiseId?: string;\n  /**\n   * The new quantity for the line item.\n   */\n  quantity?: number;\n\n  /**\n   * The new attributes for the line item.\n   */\n  attributes?: Attribute[];\n\n  /**\n   * The identifier of the selling plan that the merchandise is being purchased\n   * with or `null` to remove the the product from the selling plan.\n   */\n  sellingPlanId?: SellingPlan['id'] | null;\n}"
          },
          "CartLineChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartLineChangeResult",
            "value": "CartLineChangeResultSuccess | CartLineChangeResultError",
            "description": ""
          },
          "CartLineChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the line item was changed successfully."
              }
            ],
            "value": "export interface CartLineChangeResultSuccess {\n  /**\n   * Indicates that the line item was changed successfully.\n   */\n  type: 'success';\n}"
          },
          "CartLineChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "CartLineChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the line item was not changed successfully. Refer to the `message` property for details about the error."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface CartLineChangeResultError {\n  /**\n   * Indicates that the line item was not changed successfully. Refer to the `message` property for details about the error.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useCartLines",
    "description": "Returns the current line items for the checkout, and automatically re-renders\nyour component if line items are added, removed, or updated.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Cart",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseCartLinesGeneratedType",
        "typeDefinitions": {
          "UseCartLinesGeneratedType": {
            "filePath": "/hooks/cart-lines.ts",
            "name": "UseCartLinesGeneratedType",
            "description": "Returns the current line items for the checkout, and automatically re-renders\nyour component if line items are added, removed, or updated.",
            "params": [],
            "returns": {
              "filePath": "/hooks/cart-lines.ts",
              "description": "",
              "name": "CartLine[]",
              "value": "CartLine[]"
            },
            "value": "export function useCartLines<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): CartLine[] {\n  const {lines} = useApi<ID>();\n\n  return useSubscription(lines);\n}"
          },
          "CartLine": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLine",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "These line item IDs are not stable at the moment, they might change after\nany operations on the line items. You should always look up for an updated\nID before any call to `applyCartLinesChange` because you'll need the ID to\ncreate a `CartLineChange` object."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The details about the cost components attributed to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The line item additional custom attributes."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountAllocations",
                "value": "CartDiscountAllocation[]",
                "description": "Discounts applied to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lineComponents",
                "value": "CartBundleLineComponent[]",
                "description": "Sub lines of the merchandise line. If no sub lines are present, this will be an empty array."
              }
            ],
            "value": "export interface CartLine {\n  /**\n   * These line item IDs are not stable at the moment, they might change after\n   * any operations on the line items. You should always look up for an updated\n   * ID before any call to `applyCartLinesChange` because you'll need the ID to\n   * create a `CartLineChange` object.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise being purchased.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of the merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The details about the cost components attributed to the cart line.\n   */\n  cost: CartLineCost;\n\n  /**\n   * The line item additional custom attributes.\n   */\n  attributes: Attribute[];\n\n  /**\n   * Discounts applied to the cart line.\n   */\n  discountAllocations: CartDiscountAllocation[];\n\n  /**\n   * Sub lines of the merchandise line. If no sub lines are present, this will be an empty array.\n   */\n  lineComponents: CartLineComponentType[];\n}"
          },
          "Merchandise": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Merchandise",
            "value": "ProductVariant",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"variant\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The product variant’s title."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "string",
                "description": "The product variant's subtitle.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "Image associated with the product variant. This field falls back to the product\nimage if no image is available.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "selectedOptions",
                "value": "SelectedOption[]",
                "description": "List of product options applied to the variant."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "product",
                "value": "Product",
                "description": "The product object that the product variant belongs to."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "requiresShipping",
                "value": "boolean",
                "description": "Whether or not the product requires shipping."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlan",
                "value": "SellingPlan",
                "description": "The selling plan associated with the merchandise.",
                "isOptional": true
              }
            ]
          },
          "ImageDetails": {
            "filePath": "/api/standard/standard.ts",
            "name": "ImageDetails",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "url",
                "value": "string",
                "description": "The image URL."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "altText",
                "value": "string",
                "description": "The alternative text for the image.",
                "isOptional": true
              }
            ],
            "value": "export interface ImageDetails {\n  /**\n   * The image URL.\n   */\n  url: string;\n\n  /**\n   * The alternative text for the image.\n   */\n  altText?: string;\n}"
          },
          "SelectedOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "SelectedOption",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the merchandise option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value of the merchandise option."
              }
            ],
            "value": "export interface SelectedOption {\n  /**\n   * The name of the merchandise option.\n   */\n  name: string;\n\n  /**\n   * The value of the merchandise option.\n   */\n  value: string;\n}"
          },
          "Product": {
            "filePath": "/api/standard/standard.ts",
            "name": "Product",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "vendor",
                "value": "string",
                "description": "The product’s vendor name."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "productType",
                "value": "string",
                "description": "A categorization that a product can be tagged with, commonly used for filtering and searching."
              }
            ],
            "value": "export interface Product {\n  /**\n   * A globally-unique identifier.\n   */\n  id: string;\n\n  /**\n   * The product’s vendor name.\n   */\n  vendor: string;\n\n  /**\n   * A categorization that a product can be tagged with, commonly used for filtering and searching.\n   */\n  productType: string;\n}"
          },
          "SellingPlan": {
            "filePath": "/api/shared.ts",
            "name": "SellingPlan",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              }
            ],
            "value": "export interface SellingPlan {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/SellingPlan/1'\n   */\n  id: string;\n}"
          },
          "CartLineCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLineCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "Money",
                "description": "The total amount after reductions the buyer can expect to pay that is directly attributable to a single\ncart line."
              }
            ],
            "value": "export interface CartLineCost {\n  /**\n   * The total amount after reductions the buyer can expect to pay that is directly attributable to a single\n   * cart line.\n   */\n  totalAmount: Money;\n}"
          },
          "Money": {
            "filePath": "/api/standard/standard.ts",
            "name": "Money",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": "The price amount."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currencyCode",
                "value": "CurrencyCode",
                "description": "The ISO 4217 format for the currency."
              }
            ],
            "value": "export interface Money {\n  /**\n   * The price amount.\n   */\n  amount: number;\n  /**\n   * The ISO 4217 format for the currency.\n   * @example 'CAD' for Canadian dollar\n   */\n  currencyCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          },
          "Attribute": {
            "filePath": "/api/shared.ts",
            "name": "Attribute",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The key for the attribute."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value for the attribute."
              }
            ],
            "value": "export interface Attribute {\n  /**\n   * The key for the attribute.\n   */\n  key: string;\n\n  /**\n   * The value for the attribute.\n   */\n  value: string;\n}"
          },
          "CartDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartDiscountAllocation",
            "value": "CartCodeDiscountAllocation | CartAutomaticDiscountAllocation | CartCustomDiscountAllocation",
            "description": ""
          },
          "CartCodeDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCodeDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"code\"",
                "description": "The type of the code discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCodeDiscountAllocation extends CartDiscountAllocationBase {\n  /**\n   * The code for the discount\n   */\n  code: string;\n\n  /**\n   * The type of the code discount\n   */\n  type: 'code';\n}"
          },
          "CartAutomaticDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartAutomaticDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"automatic\"",
                "description": "The type of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartAutomaticDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the automatic discount\n   */\n  title: string;\n\n  /**\n   * The type of the automatic discount\n   */\n  type: 'automatic';\n}"
          },
          "CartCustomDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCustomDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"custom\"",
                "description": "The type of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCustomDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the custom discount\n   */\n  title: string;\n\n  /**\n   * The type of the custom discount\n   */\n  type: 'custom';\n}"
          },
          "CartBundleLineComponent": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartBundleLineComponent",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"bundle\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the bundle line component.\n\nThis ID is not stable. If an operation updates the line items in any way, all IDs could change."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise of this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The cost attributed to this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "Additional custom attributes for the bundle line component."
              }
            ],
            "value": "export interface CartBundleLineComponent {\n  type: 'bundle';\n\n  /**\n   * A unique identifier for the bundle line component.\n   *\n   * This ID is not stable. If an operation updates the line items in any way, all IDs could change.\n   *\n   * @example 'gid://shopify/CartLineComponent/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise of this bundle line component.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The cost attributed to this bundle line component.\n   */\n  cost: CartLineCost;\n\n  /**\n   * Additional custom attributes for the bundle line component.\n   *\n   * @example [{key: 'engraving', value: 'hello world'}]\n   */\n  attributes: Attribute[];\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useTotalAmount",
    "description": "Returns a `Money` value representing the minimum a buyer can expect to pay at the current\nstep of checkout. This value excludes amounts yet to be negotiated. For example,\nthe information step might not have delivery costs calculated.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Cart",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseTotalAmountGeneratedType",
        "typeDefinitions": {
          "UseTotalAmountGeneratedType": {
            "filePath": "/hooks/cost.ts",
            "name": "UseTotalAmountGeneratedType",
            "description": "Returns a `Money` value representing the minimum a buyer can expect to pay at the current\nstep of checkout. This value excludes amounts yet to be negotiated. For example,\nthe information step might not have delivery costs calculated.",
            "params": [],
            "returns": {
              "filePath": "/hooks/cost.ts",
              "description": "",
              "name": "Money",
              "value": "Money"
            },
            "value": "export function useTotalAmount<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): Money {\n  return useSubscription(useApi<ID>().cost.totalAmount);\n}"
          },
          "Money": {
            "filePath": "/api/standard/standard.ts",
            "name": "Money",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": "The price amount."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currencyCode",
                "value": "CurrencyCode",
                "description": "The ISO 4217 format for the currency."
              }
            ],
            "value": "export interface Money {\n  /**\n   * The price amount.\n   */\n  amount: number;\n  /**\n   * The ISO 4217 format for the currency.\n   * @example 'CAD' for Canadian dollar\n   */\n  currencyCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useLocalizationCountry",
    "description": "Returns the country of the checkout, and automatically re-renders\nyour component if the country changes.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Localization",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseLocalizationCountryGeneratedType",
        "typeDefinitions": {
          "UseLocalizationCountryGeneratedType": {
            "filePath": "/hooks/country.ts",
            "name": "UseLocalizationCountryGeneratedType",
            "description": "Returns the country of the checkout, and automatically re-renders\nyour component if the country changes.",
            "params": [],
            "returns": {
              "filePath": "/hooks/country.ts",
              "description": "",
              "name": "Country | undefined",
              "value": "Country | undefined"
            },
            "value": "export function useLocalizationCountry<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): Country | undefined {\n  const {localization} = useApi<ID>();\n\n  return useSubscription(localization.country);\n}"
          },
          "Country": {
            "filePath": "/api/standard/standard.ts",
            "name": "Country",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "isoCode",
                "value": "CountryCode",
                "description": "The ISO-3166-1 code for this country."
              }
            ],
            "value": "export interface Country {\n  /**\n   * The ISO-3166-1 code for this country.\n   * @see https://www.iso.org/iso-3166-country-codes.html\n   */\n  isoCode: CountryCode;\n}"
          },
          "CountryCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CountryCode",
            "value": "'AC' | 'AD' | 'AE' | 'AF' | 'AG' | 'AI' | 'AL' | 'AM' | 'AN' | 'AO' | 'AR' | 'AT' | 'AU' | 'AW' | 'AX' | 'AZ' | 'BA' | 'BB' | 'BD' | 'BE' | 'BF' | 'BG' | 'BH' | 'BI' | 'BJ' | 'BL' | 'BM' | 'BN' | 'BO' | 'BQ' | 'BR' | 'BS' | 'BT' | 'BV' | 'BW' | 'BY' | 'BZ' | 'CA' | 'CC' | 'CD' | 'CF' | 'CG' | 'CH' | 'CI' | 'CK' | 'CL' | 'CM' | 'CN' | 'CO' | 'CR' | 'CU' | 'CV' | 'CW' | 'CX' | 'CY' | 'CZ' | 'DE' | 'DJ' | 'DK' | 'DM' | 'DO' | 'DZ' | 'EC' | 'EE' | 'EG' | 'EH' | 'ER' | 'ES' | 'ET' | 'FI' | 'FJ' | 'FK' | 'FO' | 'FR' | 'GA' | 'GB' | 'GD' | 'GE' | 'GF' | 'GG' | 'GH' | 'GI' | 'GL' | 'GM' | 'GN' | 'GP' | 'GQ' | 'GR' | 'GS' | 'GT' | 'GW' | 'GY' | 'HK' | 'HM' | 'HN' | 'HR' | 'HT' | 'HU' | 'ID' | 'IE' | 'IL' | 'IM' | 'IN' | 'IO' | 'IQ' | 'IR' | 'IS' | 'IT' | 'JE' | 'JM' | 'JO' | 'JP' | 'KE' | 'KG' | 'KH' | 'KI' | 'KM' | 'KN' | 'KP' | 'KR' | 'KW' | 'KY' | 'KZ' | 'LA' | 'LB' | 'LC' | 'LI' | 'LK' | 'LR' | 'LS' | 'LT' | 'LU' | 'LV' | 'LY' | 'MA' | 'MC' | 'MD' | 'ME' | 'MF' | 'MG' | 'MK' | 'ML' | 'MM' | 'MN' | 'MO' | 'MQ' | 'MR' | 'MS' | 'MT' | 'MU' | 'MV' | 'MW' | 'MX' | 'MY' | 'MZ' | 'NA' | 'NC' | 'NE' | 'NF' | 'NG' | 'NI' | 'NL' | 'NO' | 'NP' | 'NR' | 'NU' | 'NZ' | 'OM' | 'PA' | 'PE' | 'PF' | 'PG' | 'PH' | 'PK' | 'PL' | 'PM' | 'PN' | 'PS' | 'PT' | 'PY' | 'QA' | 'RE' | 'RO' | 'RS' | 'RU' | 'RW' | 'SA' | 'SB' | 'SC' | 'SD' | 'SE' | 'SG' | 'SH' | 'SI' | 'SJ' | 'SK' | 'SL' | 'SM' | 'SN' | 'SO' | 'SR' | 'SS' | 'ST' | 'SV' | 'SX' | 'SY' | 'SZ' | 'TA' | 'TC' | 'TD' | 'TF' | 'TG' | 'TH' | 'TJ' | 'TK' | 'TL' | 'TM' | 'TN' | 'TO' | 'TR' | 'TT' | 'TV' | 'TW' | 'TZ' | 'UA' | 'UG' | 'UM' | 'US' | 'UY' | 'UZ' | 'VA' | 'VC' | 'VE' | 'VG' | 'VN' | 'VU' | 'WF' | 'WS' | 'XK' | 'YE' | 'YT' | 'ZA' | 'ZM' | 'ZW' | 'ZZ'",
            "description": ""
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useCurrency",
    "description": "Returns the currency of the checkout, and automatically re-renders\nyour component if the currency changes.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Localization",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseCurrencyGeneratedType",
        "typeDefinitions": {
          "UseCurrencyGeneratedType": {
            "filePath": "/hooks/currency.ts",
            "name": "UseCurrencyGeneratedType",
            "description": "Returns the currency of the checkout, and automatically re-renders\nyour component if the currency changes.",
            "params": [],
            "returns": {
              "filePath": "/hooks/currency.ts",
              "description": "",
              "name": "Currency",
              "value": "Currency"
            },
            "value": "export function useCurrency<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): Currency {\n  const {localization} = useApi<ID>();\n\n  return useSubscription(localization.currency);\n}"
          },
          "Currency": {
            "filePath": "/api/standard/standard.ts",
            "name": "Currency",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "isoCode",
                "value": "CurrencyCode",
                "description": "The ISO-4217 code for this currency."
              }
            ],
            "value": "export interface Currency {\n  /**\n   * The ISO-4217 code for this currency.\n   * @see https://www.iso.org/iso-4217-currency-codes.html\n   */\n  isoCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useDeliveryGroups",
    "description": "Returns the current delivery groups for the checkout, and automatically re-renders\nyour component when delivery address or delivery option selection changes.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Delivery",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseDeliveryGroupsGeneratedType",
        "typeDefinitions": {
          "UseDeliveryGroupsGeneratedType": {
            "filePath": "/hooks/delivery-groups.ts",
            "name": "UseDeliveryGroupsGeneratedType",
            "description": "Returns the current delivery groups for the checkout, and automatically re-renders\nyour component when delivery address or delivery option selection changes.",
            "params": [],
            "returns": {
              "filePath": "/hooks/delivery-groups.ts",
              "description": "",
              "name": "DeliveryGroup[]",
              "value": "DeliveryGroup[]"
            },
            "value": "export function useDeliveryGroups<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): DeliveryGroup[] {\n  const {deliveryGroups} = useApi<ID>();\n\n  return useSubscription(deliveryGroups);\n}"
          },
          "DeliveryGroup": {
            "filePath": "/api/standard/standard.ts",
            "name": "DeliveryGroup",
            "description": "Represents the delivery information and options available for one or\nmore cart lines.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "targetedCartLines",
                "value": "CartLineReference[]",
                "description": "The cart line references associated to the delivery group."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "deliveryOptions",
                "value": "DeliveryOption[]",
                "description": "The delivery options available for the delivery group."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "selectedDeliveryOption",
                "value": "DeliveryOptionReference",
                "description": "The selected delivery option for the delivery group.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "groupType",
                "value": "DeliveryGroupType",
                "description": "The type of the delivery group."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "deliveryRequired",
                "value": "boolean",
                "description": "Whether delivery is required for the delivery group."
              }
            ],
            "value": "export interface DeliveryGroup {\n  /**\n   * The cart line references associated to the delivery group.\n   */\n  targetedCartLines: CartLineReference[];\n\n  /**\n   * The delivery options available for the delivery group.\n   */\n  deliveryOptions: DeliveryOption[];\n\n  /**\n   * The selected delivery option for the delivery group.\n   */\n  selectedDeliveryOption?: DeliveryOptionReference;\n\n  /**\n   * The type of the delivery group.\n   */\n  groupType: DeliveryGroupType;\n\n  /**\n   * Whether delivery is required for the delivery group.\n   */\n  deliveryRequired: boolean;\n}"
          },
          "CartLineReference": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLineReference",
            "description": "Represents a reference to a cart line.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The unique identifier of the referenced cart line."
              }
            ],
            "value": "export interface CartLineReference {\n  /**\n   * The unique identifier of the referenced cart line.\n   */\n  id: string;\n}"
          },
          "DeliveryOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "DeliveryOption",
            "description": "Represents a base interface for a single delivery option.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique identifier of the delivery option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the delivery option.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "description",
                "value": "string",
                "description": "The description of the delivery option.",
                "isOptional": true
              }
            ],
            "value": "export interface DeliveryOption {\n  /**\n   * The unique identifier of the delivery option.\n   */\n  handle: string;\n\n  /**\n   * The title of the delivery option.\n   */\n  title?: string;\n\n  /**\n   * The description of the delivery option.\n   */\n  description?: string;\n}"
          },
          "DeliveryOptionReference": {
            "filePath": "/api/standard/standard.ts",
            "name": "DeliveryOptionReference",
            "description": "Represents a reference to a delivery option.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique identifier of the referenced delivery option."
              }
            ],
            "value": "export interface DeliveryOptionReference {\n  /**\n   * The unique identifier of the referenced delivery option.\n   */\n  handle: string;\n}"
          },
          "DeliveryGroupType": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DeliveryGroupType",
            "value": "'oneTimePurchase' | 'subscription'",
            "description": "The possible types of a delivery group."
          }
        }
      }
    ],
    "defaultExample": {
      "description": "",
      "codeblock": {
        "title": "Delivery groups",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  render,\n  Banner,\n  useDeliveryGroups,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const deliveryGroups = useDeliveryGroups();\n  const deliveryOptions =\n    deliveryGroups[0].deliveryOptions;\n\n  return (\n    <Banner>\n      First delivery option:{' '}\n      {deliveryOptions[0].title}\n    </Banner>\n  );\n}\n",
            "language": "jsx",
            "title": "React"
          }
        ]
      }
    },
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useDiscountAllocations",
    "description": "Returns the current discount allocations applied to the cart, and automatically re-renders\nyour component if discount allocations changed.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Reductions",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseDiscountAllocationsGeneratedType",
        "typeDefinitions": {
          "UseDiscountAllocationsGeneratedType": {
            "filePath": "/hooks/discounts.ts",
            "name": "UseDiscountAllocationsGeneratedType",
            "description": "Returns the current discount allocations applied to the cart, and automatically re-renders\nyour component if discount allocations changed.",
            "params": [],
            "returns": {
              "filePath": "/hooks/discounts.ts",
              "description": "",
              "name": "CartDiscountAllocation[]",
              "value": "CartDiscountAllocation[]"
            },
            "value": "export function useDiscountAllocations<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): CartDiscountAllocation[] {\n  const {discountAllocations} = useApi<ID>();\n\n  return useSubscription(discountAllocations);\n}"
          },
          "CartDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartDiscountAllocation",
            "value": "CartCodeDiscountAllocation | CartAutomaticDiscountAllocation | CartCustomDiscountAllocation",
            "description": ""
          },
          "CartCodeDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCodeDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"code\"",
                "description": "The type of the code discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCodeDiscountAllocation extends CartDiscountAllocationBase {\n  /**\n   * The code for the discount\n   */\n  code: string;\n\n  /**\n   * The type of the code discount\n   */\n  type: 'code';\n}"
          },
          "Money": {
            "filePath": "/api/standard/standard.ts",
            "name": "Money",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": "The price amount."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currencyCode",
                "value": "CurrencyCode",
                "description": "The ISO 4217 format for the currency."
              }
            ],
            "value": "export interface Money {\n  /**\n   * The price amount.\n   */\n  amount: number;\n  /**\n   * The ISO 4217 format for the currency.\n   * @example 'CAD' for Canadian dollar\n   */\n  currencyCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          },
          "CartAutomaticDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartAutomaticDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"automatic\"",
                "description": "The type of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartAutomaticDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the automatic discount\n   */\n  title: string;\n\n  /**\n   * The type of the automatic discount\n   */\n  type: 'automatic';\n}"
          },
          "CartCustomDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCustomDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"custom\"",
                "description": "The type of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCustomDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the custom discount\n   */\n  title: string;\n\n  /**\n   * The type of the custom discount\n   */\n  type: 'custom';\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useApplyDiscountCodeChange",
    "description": "Returns a function to add or remove discount codes.\n\n> Caution:\n> See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves discount codes through a network call.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Reductions",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseApplyDiscountCodeChangeGeneratedType",
        "typeDefinitions": {
          "UseApplyDiscountCodeChangeGeneratedType": {
            "filePath": "/hooks/discounts.ts",
            "name": "UseApplyDiscountCodeChangeGeneratedType",
            "description": "Returns a function to add or remove discount codes.\n\n> Caution:\n> See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves discount codes through a network call.",
            "params": [],
            "returns": {
              "filePath": "/hooks/discounts.ts",
              "description": "",
              "name": "(change: DiscountCodeChange) => Promise<DiscountCodeChangeResult>",
              "value": "(change: DiscountCodeChange) => Promise<DiscountCodeChangeResult>"
            },
            "value": "export function useApplyDiscountCodeChange<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): (change: DiscountCodeChange) => Promise<DiscountCodeChangeResult> {\n  const api = useApi<ID>();\n\n  if ('applyDiscountCodeChange' in api) {\n    return api.applyDiscountCodeChange;\n  }\n\n  throw new ExtensionHasNoMethodError(\n    'applyDiscountCodeChange',\n    api.extensionPoint,\n  );\n}"
          },
          "DiscountCodeChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DiscountCodeChange",
            "value": "DiscountCodeAddChange | DiscountCodeRemoveChange",
            "description": ""
          },
          "DiscountCodeAddChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeAddChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"addDiscountCode\"",
                "description": "The type of the `DiscountCodeChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              }
            ],
            "value": "export interface DiscountCodeAddChange {\n  /**\n   * The type of the `DiscountCodeChange` API.\n   */\n  type: 'addDiscountCode';\n\n  /**\n   * The code for the discount\n   */\n  code: string;\n}"
          },
          "DiscountCodeRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeRemoveChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeDiscountCode\"",
                "description": "The type of the `DiscountCodeChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              }
            ],
            "value": "export interface DiscountCodeRemoveChange {\n  /**\n   * The type of the `DiscountCodeChange` API.\n   */\n  type: 'removeDiscountCode';\n\n  /**\n   * The code for the discount\n   */\n  code: string;\n}"
          },
          "DiscountCodeChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DiscountCodeChangeResult",
            "value": "DiscountCodeChangeResultSuccess | DiscountCodeChangeResultError",
            "description": ""
          },
          "DiscountCodeChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the discount code change was applied successfully."
              }
            ],
            "value": "export interface DiscountCodeChangeResultSuccess {\n  /**\n   * Indicates that the discount code change was applied successfully.\n   */\n  type: 'success';\n}"
          },
          "DiscountCodeChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "DiscountCodeChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the discount code change failed."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface DiscountCodeChangeResultError {\n  /**\n   * Indicates that the discount code change failed.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useDiscountCodes",
    "description": "Returns the current discount codes applied to the cart, and automatically re-renders\nyour component if discount codes are added or removed.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Reductions",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseDiscountCodesGeneratedType",
        "typeDefinitions": {
          "UseDiscountCodesGeneratedType": {
            "filePath": "/hooks/discounts.ts",
            "name": "UseDiscountCodesGeneratedType",
            "description": "Returns the current discount codes applied to the cart, and automatically re-renders\nyour component if discount codes are added or removed.",
            "params": [],
            "returns": {
              "filePath": "/hooks/discounts.ts",
              "description": "",
              "name": "CartDiscountCode[]",
              "value": "CartDiscountCode[]"
            },
            "value": "export function useDiscountCodes<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): CartDiscountCode[] {\n  const {discountCodes} = useApi<ID>();\n\n  return useSubscription(discountCodes);\n}"
          },
          "CartDiscountCode": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartDiscountCode",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              }
            ],
            "value": "export interface CartDiscountCode {\n  /**\n   * The code for the discount\n   */\n  code: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useExtensionApi",
    "description": "Returns the full API object that was passed in to your extension when it was created.\nDepending on the extension point, this object can contain different properties.\n\nFor example, the `Checkout::CartLineDetails::RenderAfter` extension point will return the [CartLineDetailsApi](/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi) object.\nWhereas others return the [StandardApi](/docs/api/checkout-ui-extensions/apis/standardapi) object.\n\nFor reference, see [ExtensionPoints](/docs/api/checkout-ui-extensions/apis/extensionpoints) to determine what API object will be returned by your extension point.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Utilities",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseExtensionApiGeneratedType",
        "typeDefinitions": {
          "UseExtensionApiGeneratedType": {
            "filePath": "/hooks/api.ts",
            "name": "UseExtensionApiGeneratedType",
            "description": "Returns the full API object that was passed in to your extension when it was created.\nDepending on the extension point, this object can contain different properties.\n\nFor example, the `Checkout::CartLineDetails::RenderAfter` extension point will return the [CartLineDetailsApi](/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi) object.\nWhereas others return the [StandardApi](/docs/api/checkout-ui-extensions/apis/standardapi) object.\n\nFor reference, see [ExtensionPoints](/docs/api/checkout-ui-extensions/apis/extensionpoints) to determine what API object will be returned by your extension point.",
            "params": [],
            "returns": {
              "filePath": "/hooks/api.ts",
              "description": "",
              "name": "ApiForRenderExtension<ID>",
              "value": "ApiForRenderExtension<ID>"
            },
            "value": "export function useExtensionApi<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): ApiForRenderExtension<ID> {\n  return useApi();\n}"
          },
          "ApiForRenderExtension": {
            "filePath": "/extension-points.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ApiForRenderExtension",
            "value": "ApiForRenderExtension<ID>",
            "description": "For a given rendering extension point, returns the type of the API that the\nextension will receive at runtime. This API type is the second argument to\nthe callback for that extension point. The first callback for all of the rendering\nextension points each receive a `RemoteRoot` object."
          }
        }
      }
    ],
    "defaultExample": {
      "description": "\nThe extension API is passed as a parameter to the extension point function.\nIn React, you can access it from any component through the `useApi()` hook.\n      ",
      "codeblock": {
        "title": "Accessing Properties",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  render,\n  Text,\n  useApi,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const {shop} = useApi();\n  return <Text>Shop name: {shop.name}</Text>;\n}\n",
            "language": "jsx",
            "title": "React"
          }
        ]
      }
    },
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useExtensionData",
    "description": "Returns the metadata about the extension.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Metadata",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseExtensionDataGeneratedType",
        "typeDefinitions": {
          "UseExtensionDataGeneratedType": {
            "filePath": "/hooks/extension-data.ts",
            "name": "UseExtensionDataGeneratedType",
            "description": "Returns the metadata about the extension.",
            "params": [],
            "returns": {
              "filePath": "/hooks/extension-data.ts",
              "description": "",
              "name": "Extension",
              "value": "Extension"
            },
            "value": "export function useExtensionData<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): Extension {\n  return useApi<ID>().extension;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useExtensionEditor",
    "description": "Returns information about the editor where the extension is being rendered.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Metadata",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseExtensionEditorGeneratedType",
        "typeDefinitions": {
          "UseExtensionEditorGeneratedType": {
            "filePath": "/hooks/extension-editor.ts",
            "name": "UseExtensionEditorGeneratedType",
            "description": "Returns information about the editor where the extension is being rendered.",
            "params": [],
            "returns": {
              "filePath": "/hooks/extension-editor.ts",
              "description": "",
              "name": "Editor | undefined",
              "value": "Editor | undefined"
            },
            "value": "export function useExtensionEditor(): Editor | undefined {\n  return useApi().extension.editor;\n}"
          },
          "Editor": {
            "filePath": "/api/standard/standard.ts",
            "name": "Editor",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"checkout\"",
                "description": "Indicates whether the extension is rendering in the checkout editor."
              }
            ],
            "value": "export interface Editor {\n  /**\n   * Indicates whether the extension is rendering in the checkout editor.\n   */\n  type: 'checkout';\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useExtensionLanguage",
    "description": "Returns the buyer's language, as supported by the extension.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Localization",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseExtensionLanguageGeneratedType",
        "typeDefinitions": {
          "UseExtensionLanguageGeneratedType": {
            "filePath": "/hooks/extension-language.ts",
            "name": "UseExtensionLanguageGeneratedType",
            "description": "Returns the buyer's language, as supported by the extension.",
            "params": [],
            "returns": {
              "filePath": "/hooks/extension-language.ts",
              "description": "",
              "name": "Language",
              "value": "Language"
            },
            "value": "export function useExtensionLanguage<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): Language {\n  const {localization} = useApi<ID>();\n\n  return useSubscription(localization.extensionLanguage);\n}"
          },
          "Language": {
            "filePath": "/api/standard/standard.ts",
            "name": "Language",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "isoCode",
                "value": "string",
                "description": "The BCP-47 language tag. It may contain a dash followed by an ISO 3166-1 alpha-2 region code."
              }
            ],
            "value": "export interface Language {\n  /**\n   * The BCP-47 language tag. It may contain a dash followed by an ISO 3166-1 alpha-2 region code.\n   *\n   * @example 'en' for English, or 'en-US' for English local to United States.\n   * @see https://en.wikipedia.org/wiki/IETF_language_tag\n   * @see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n   */\n  isoCode: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useAppliedGiftCards",
    "description": "Returns the current gift cards applied to the cart, and automatically re-renders\nyour component if gift cards are added or removed.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Reductions",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseAppliedGiftCardsGeneratedType",
        "typeDefinitions": {
          "UseAppliedGiftCardsGeneratedType": {
            "filePath": "/hooks/gift-cards.ts",
            "name": "UseAppliedGiftCardsGeneratedType",
            "description": "Returns the current gift cards applied to the cart, and automatically re-renders\nyour component if gift cards are added or removed.",
            "params": [],
            "returns": {
              "filePath": "/hooks/gift-cards.ts",
              "description": "",
              "name": "AppliedGiftCard[]",
              "value": "AppliedGiftCard[]"
            },
            "value": "export function useAppliedGiftCards<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): AppliedGiftCard[] {\n  const {appliedGiftCards} = useApi<ID>();\n\n  return useSubscription(appliedGiftCards);\n}"
          },
          "AppliedGiftCard": {
            "filePath": "/api/standard/standard.ts",
            "name": "AppliedGiftCard",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lastCharacters",
                "value": "string",
                "description": "The last four characters of the applied gift card's code."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amountUsed",
                "value": "Money",
                "description": "The amount of the applied gift card that will be used when the checkout is completed."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "balance",
                "value": "Money",
                "description": "The current balance of the applied gift card prior to checkout completion."
              }
            ],
            "value": "export interface AppliedGiftCard {\n  /**\n   * The last four characters of the applied gift card's code.\n   */\n  lastCharacters: string;\n\n  /**\n   * The amount of the applied gift card that will be used when the checkout is completed.\n   */\n  amountUsed: Money;\n\n  /**\n   * The current balance of the applied gift card prior to checkout completion.\n   */\n  balance: Money;\n}"
          },
          "Money": {
            "filePath": "/api/standard/standard.ts",
            "name": "Money",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": "The price amount."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currencyCode",
                "value": "CurrencyCode",
                "description": "The ISO 4217 format for the currency."
              }
            ],
            "value": "export interface Money {\n  /**\n   * The price amount.\n   */\n  amount: number;\n  /**\n   * The ISO 4217 format for the currency.\n   * @example 'CAD' for Canadian dollar\n   */\n  currencyCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useApplyGiftCardChange",
    "description": "Returns a function to add or remove gift cards.\n\n> Caution:\n> See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves gift card codes through a network call.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Reductions",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseApplyGiftCardChangeGeneratedType",
        "typeDefinitions": {
          "UseApplyGiftCardChangeGeneratedType": {
            "filePath": "/hooks/gift-cards.ts",
            "name": "UseApplyGiftCardChangeGeneratedType",
            "description": "Returns a function to add or remove gift cards.\n\n> Caution:\n> See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) if your extension retrieves gift card codes through a network call.",
            "params": [],
            "returns": {
              "filePath": "/hooks/gift-cards.ts",
              "description": "",
              "name": "(change: GiftCardChange) => Promise<GiftCardChangeResult>",
              "value": "(change: GiftCardChange) => Promise<GiftCardChangeResult>"
            },
            "value": "export function useApplyGiftCardChange<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): (change: GiftCardChange) => Promise<GiftCardChangeResult> {\n  const api = useApi<ID>();\n\n  if ('applyGiftCardChange' in api) {\n    return api.applyGiftCardChange;\n  }\n\n  throw new ExtensionHasNoMethodError(\n    'applyGiftCardChange',\n    api.extensionPoint,\n  );\n}"
          },
          "GiftCardChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "GiftCardChange",
            "value": "GiftCardAddChange | GiftCardRemoveChange",
            "description": ""
          },
          "GiftCardAddChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardAddChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"addGiftCard\"",
                "description": "The type of the `GiftCardChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "Gift card code."
              }
            ],
            "value": "export interface GiftCardAddChange {\n  /**\n   * The type of the `GiftCardChange` API.\n   */\n  type: 'addGiftCard';\n\n  /**\n   * Gift card code.\n   */\n  code: string;\n}"
          },
          "GiftCardRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardRemoveChange",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeGiftCard\"",
                "description": "The type of the `GiftCardChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "Gift card code."
              }
            ],
            "value": "export interface GiftCardRemoveChange {\n  /**\n   * The type of the `GiftCardChange` API.\n   */\n  type: 'removeGiftCard';\n\n  /**\n   * Gift card code.\n   */\n  code: string;\n}"
          },
          "GiftCardChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "GiftCardChangeResult",
            "value": "GiftCardChangeResultSuccess | GiftCardChangeResultError",
            "description": ""
          },
          "GiftCardChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "Indicates that the gift card change was applied successfully."
              }
            ],
            "value": "export interface GiftCardChangeResultSuccess {\n  /**\n   * Indicates that the gift card change was applied successfully.\n   */\n  type: 'success';\n}"
          },
          "GiftCardChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "GiftCardChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "Indicates that the gift card change failed."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface GiftCardChangeResultError {\n  /**\n   * Indicates that the gift card change failed.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useLanguage",
    "description": "Returns the current language of the checkout, and automatically re-renders\nyour component if the language changes.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Localization",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseLanguageGeneratedType",
        "typeDefinitions": {
          "UseLanguageGeneratedType": {
            "filePath": "/hooks/language.ts",
            "name": "UseLanguageGeneratedType",
            "description": "Returns the current language of the checkout, and automatically re-renders\nyour component if the language changes.",
            "params": [],
            "returns": {
              "filePath": "/hooks/language.ts",
              "description": "",
              "name": "Language",
              "value": "Language"
            },
            "value": "export function useLanguage<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): Language {\n  const {localization} = useApi<ID>();\n\n  return useSubscription(localization.language);\n}"
          },
          "Language": {
            "filePath": "/api/standard/standard.ts",
            "name": "Language",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "isoCode",
                "value": "string",
                "description": "The BCP-47 language tag. It may contain a dash followed by an ISO 3166-1 alpha-2 region code."
              }
            ],
            "value": "export interface Language {\n  /**\n   * The BCP-47 language tag. It may contain a dash followed by an ISO 3166-1 alpha-2 region code.\n   *\n   * @example 'en' for English, or 'en-US' for English local to United States.\n   * @see https://en.wikipedia.org/wiki/IETF_language_tag\n   * @see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n   */\n  isoCode: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useMetafield",
    "description": "Returns a single filtered `Metafield` or `undefined`.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Metafields",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseMetafieldGeneratedType",
        "typeDefinitions": {
          "UseMetafieldGeneratedType": {
            "filePath": "/hooks/metafield.ts",
            "name": "UseMetafieldGeneratedType",
            "description": "Returns a single filtered `Metafield` or `undefined`.",
            "params": [
              {
                "name": "filters",
                "description": "",
                "value": "MetafieldFilter",
                "filePath": "/hooks/metafield.ts"
              }
            ],
            "returns": {
              "filePath": "/hooks/metafield.ts",
              "description": "",
              "name": "Metafield | undefined",
              "value": "Metafield | undefined"
            },
            "value": "export function useMetafield(filters: MetafieldFilter): Metafield | undefined {\n  const {namespace, key} = filters;\n\n  if (!namespace || !key) {\n    throw new CheckoutUIExtensionError(\n      'You must pass in both a namespace and key',\n    );\n  }\n\n  const metafields = useMetafields({namespace, key});\n\n  return metafields.length ? metafields[0] : undefined;\n}"
          },
          "MetafieldFilter": {
            "filePath": "/hooks/metafield.ts",
            "name": "MetafieldFilter",
            "description": "",
            "members": [
              {
                "filePath": "/hooks/metafield.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "/hooks/metafield.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": ""
              }
            ],
            "value": "interface MetafieldFilter {\n  namespace: string;\n  key: string;\n}"
          },
          "Metafield": {
            "filePath": "/api/standard/standard.ts",
            "name": "Metafield",
            "description": "Metadata associated with the checkout.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield. It must be between 3 and 30 characters in\nlength (inclusive)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "A container for a set of metafields. You need to define a custom\nnamespace for your metafields to distinguish them from the metafields\nused by other apps. This must be between 2 and 20 characters in length (inclusive)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number",
                "description": "The information to be stored as metadata."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"integer\" | \"json_string\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface Metafield {\n  /**\n   * The name of the metafield. It must be between 3 and 30 characters in\n   * length (inclusive).\n   */\n  key: string;\n\n  /**\n   * A container for a set of metafields. You need to define a custom\n   * namespace for your metafields to distinguish them from the metafields\n   * used by other apps. This must be between 2 and 20 characters in length (inclusive).\n   */\n  namespace: string;\n\n  /**\n   * The information to be stored as metadata.\n   */\n  value: string | number;\n\n  /** The metafield’s information type. */\n  valueType: 'integer' | 'string' | 'json_string';\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useApplyMetafieldsChange",
    "description": "Returns a function to mutate the `metafields` property of the checkout.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Metafields",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseApplyMetafieldsChangeGeneratedType",
        "typeDefinitions": {
          "UseApplyMetafieldsChangeGeneratedType": {
            "filePath": "/hooks/metafields.ts",
            "name": "UseApplyMetafieldsChangeGeneratedType",
            "description": "Returns a function to mutate the `metafields` property of the checkout.",
            "params": [],
            "returns": {
              "filePath": "/hooks/metafields.ts",
              "description": "",
              "name": "(change: MetafieldChange) => Promise<MetafieldChangeResult>",
              "value": "(change: MetafieldChange) => Promise<MetafieldChangeResult>"
            },
            "value": "export function useApplyMetafieldsChange<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): (change: MetafieldChange) => Promise<MetafieldChangeResult> {\n  const api = useApi<ID>();\n\n  if ('applyMetafieldChange' in api) {\n    return api.applyMetafieldChange;\n  }\n\n  throw new ExtensionHasNoMethodError(\n    'applyMetafieldChange',\n    api.extensionPoint,\n  );\n}"
          },
          "MetafieldChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MetafieldChange",
            "value": "MetafieldRemoveChange | MetafieldUpdateChange",
            "description": ""
          },
          "MetafieldRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldRemoveChange",
            "description": "Removes a metafield.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeMetafield\"",
                "description": "The type of the `MetafieldRemoveChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield to remove."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "The namespace of the metafield to remove."
              }
            ],
            "value": "export interface MetafieldRemoveChange {\n  /**\n   * The type of the `MetafieldRemoveChange` API.\n   */\n  type: 'removeMetafield';\n\n  /**\n   * The name of the metafield to remove.\n   */\n  key: string;\n\n  /**\n   * The namespace of the metafield to remove.\n   */\n  namespace: string;\n}"
          },
          "Metafield": {
            "filePath": "/api/standard/standard.ts",
            "name": "Metafield",
            "description": "Metadata associated with the checkout.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield. It must be between 3 and 30 characters in\nlength (inclusive)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "A container for a set of metafields. You need to define a custom\nnamespace for your metafields to distinguish them from the metafields\nused by other apps. This must be between 2 and 20 characters in length (inclusive)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number",
                "description": "The information to be stored as metadata."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"integer\" | \"json_string\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface Metafield {\n  /**\n   * The name of the metafield. It must be between 3 and 30 characters in\n   * length (inclusive).\n   */\n  key: string;\n\n  /**\n   * A container for a set of metafields. You need to define a custom\n   * namespace for your metafields to distinguish them from the metafields\n   * used by other apps. This must be between 2 and 20 characters in length (inclusive).\n   */\n  namespace: string;\n\n  /**\n   * The information to be stored as metadata.\n   */\n  value: string | number;\n\n  /** The metafield’s information type. */\n  valueType: 'integer' | 'string' | 'json_string';\n}"
          },
          "MetafieldUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldUpdateChange",
            "description": "Updates a metafield. If a metafield with the\nprovided key and namespace does not already exist, it gets created.",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateMetafield\"",
                "description": "The type of the `MetafieldUpdateChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield to update."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "The namespace of the metafield to add."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number",
                "description": "The new information to store in the metafield."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"integer\" | \"json_string\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface MetafieldUpdateChange {\n  /**\n   * The type of the `MetafieldUpdateChange` API.\n   */\n  type: 'updateMetafield';\n\n  /** The name of the metafield to update. */\n  key: string;\n\n  /** The namespace of the metafield to add. */\n  namespace: string;\n\n  /** The new information to store in the metafield. */\n  value: string | number;\n\n  /**\n   * The metafield’s information type.\n   */\n  valueType: 'integer' | 'string' | 'json_string';\n}"
          },
          "MetafieldChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MetafieldChangeResult",
            "value": "MetafieldChangeResultSuccess | MetafieldChangeResultError",
            "description": ""
          },
          "MetafieldChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "The type of the `MetafieldChangeResultSuccess` API."
              }
            ],
            "value": "export interface MetafieldChangeResultSuccess {\n  /**\n   * The type of the `MetafieldChangeResultSuccess` API.\n   */\n  type: 'success';\n}"
          },
          "MetafieldChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "MetafieldChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "The type of the `MetafieldChangeResultError` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface MetafieldChangeResultError {\n  /**\n   * The type of the `MetafieldChangeResultError` API.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useMetafields",
    "description": "Returns the current array of `metafields` applied to the checkout.\nYou can optionally filter the list.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Metafields",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseMetafieldsGeneratedType",
        "typeDefinitions": {
          "UseMetafieldsGeneratedType": {
            "filePath": "/hooks/metafields.ts",
            "name": "UseMetafieldsGeneratedType",
            "description": "Returns the current array of `metafields` applied to the checkout.\nYou can optionally filter the list.",
            "params": [
              {
                "name": "filters",
                "description": "",
                "value": "MetafieldsFilters",
                "isOptional": true,
                "filePath": "/hooks/metafields.ts"
              }
            ],
            "returns": {
              "filePath": "/hooks/metafields.ts",
              "description": "",
              "name": "Metafield[]",
              "value": "Metafield[]"
            },
            "value": "export function useMetafields<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(filters?: MetafieldsFilters): Metafield[] {\n  const metaFields = useSubscription(useApi<ID>().metafields);\n\n  return useMemo(() => {\n    if (filters) {\n      const {namespace, key} = filters;\n\n      if (!namespace) {\n        throw new CheckoutUIExtensionError(\n          'You must pass in a namespace with a key',\n        );\n      }\n\n      const filteredResults = metaFields.filter(\n        (metafield) =>\n          metafield.namespace === namespace && (!key || metafield.key === key),\n      );\n\n      return filteredResults;\n    }\n\n    return metaFields;\n  }, [filters, metaFields]);\n}"
          },
          "MetafieldsFilters": {
            "filePath": "/hooks/metafields.ts",
            "name": "MetafieldsFilters",
            "description": "",
            "members": [
              {
                "filePath": "/hooks/metafields.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "/hooks/metafields.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "interface MetafieldsFilters {\n  namespace: string;\n  key?: string;\n}"
          },
          "Metafield": {
            "filePath": "/api/standard/standard.ts",
            "name": "Metafield",
            "description": "Metadata associated with the checkout.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The name of the metafield. It must be between 3 and 30 characters in\nlength (inclusive)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "namespace",
                "value": "string",
                "description": "A container for a set of metafields. You need to define a custom\nnamespace for your metafields to distinguish them from the metafields\nused by other apps. This must be between 2 and 20 characters in length (inclusive)."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string | number",
                "description": "The information to be stored as metadata."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "valueType",
                "value": "\"string\" | \"integer\" | \"json_string\"",
                "description": "The metafield’s information type."
              }
            ],
            "value": "export interface Metafield {\n  /**\n   * The name of the metafield. It must be between 3 and 30 characters in\n   * length (inclusive).\n   */\n  key: string;\n\n  /**\n   * A container for a set of metafields. You need to define a custom\n   * namespace for your metafields to distinguish them from the metafields\n   * used by other apps. This must be between 2 and 20 characters in length (inclusive).\n   */\n  namespace: string;\n\n  /**\n   * The information to be stored as metadata.\n   */\n  value: string | number;\n\n  /** The metafield’s information type. */\n  valueType: 'integer' | 'string' | 'json_string';\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useApplyNoteChange",
    "description": "Returns a function to mutate the `note` property of the checkout.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Notes",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseApplyNoteChangeGeneratedType",
        "typeDefinitions": {
          "UseApplyNoteChangeGeneratedType": {
            "filePath": "/hooks/note.ts",
            "name": "UseApplyNoteChangeGeneratedType",
            "description": "Returns a function to mutate the `note` property of the checkout.",
            "params": [],
            "returns": {
              "filePath": "/hooks/note.ts",
              "description": "",
              "name": "(change: NoteChange) => Promise<NoteChangeResult>",
              "value": "(change: NoteChange) => Promise<NoteChangeResult>"
            },
            "value": "export function useApplyNoteChange<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): (change: NoteChange) => Promise<NoteChangeResult> {\n  const api = useApi<ID>();\n\n  if ('applyNoteChange' in api) {\n    return api.applyNoteChange;\n  }\n\n  throw new ExtensionHasNoMethodError('applyNoteChange', api.extensionPoint);\n}"
          },
          "NoteChange": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NoteChange",
            "value": "NoteRemoveChange | NoteUpdateChange",
            "description": ""
          },
          "NoteRemoveChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteRemoveChange",
            "description": "Removes a note",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"removeNote\"",
                "description": "The type of the `NoteRemoveChange` API."
              }
            ],
            "value": "export interface NoteRemoveChange {\n  /**\n   * The type of the `NoteRemoveChange` API.\n   */\n  type: 'removeNote';\n}"
          },
          "NoteUpdateChange": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteUpdateChange",
            "description": "An Update to a note on the order.\nfor example, the buyer could request detailed packaging instructions in an order note",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"updateNote\"",
                "description": "The type of the `NoteUpdateChange` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "note",
                "value": "string",
                "description": "The new value of the note."
              }
            ],
            "value": "export interface NoteUpdateChange {\n  /**\n   * The type of the `NoteUpdateChange` API.\n   */\n  type: 'updateNote';\n  /**\n   * The new value of the note.\n   */\n  note: string;\n}"
          },
          "NoteChangeResult": {
            "filePath": "/api/checkout/checkout.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NoteChangeResult",
            "value": "NoteChangeResultSuccess | NoteChangeResultError",
            "description": ""
          },
          "NoteChangeResultSuccess": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteChangeResultSuccess",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"success\"",
                "description": "The type of the `NoteChangeResultSuccess` API."
              }
            ],
            "value": "export interface NoteChangeResultSuccess {\n  /**\n   * The type of the `NoteChangeResultSuccess` API.\n   */\n  type: 'success';\n}"
          },
          "NoteChangeResultError": {
            "filePath": "/api/checkout/checkout.ts",
            "name": "NoteChangeResultError",
            "description": "",
            "members": [
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"error\"",
                "description": "The type of the `NoteChangeResultError` API."
              },
              {
                "filePath": "/api/checkout/checkout.ts",
                "syntaxKind": "PropertySignature",
                "name": "message",
                "value": "string",
                "description": "A message that explains the error. This message is useful for debugging.\nIt is **not** localized, and therefore should not be presented directly\nto the buyer."
              }
            ],
            "value": "export interface NoteChangeResultError {\n  /**\n   * The type of the `NoteChangeResultError` API.\n   */\n  type: 'error';\n\n  /**\n   * A message that explains the error. This message is useful for debugging.\n   * It is **not** localized, and therefore should not be presented directly\n   * to the buyer.\n   */\n  message: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useNote",
    "description": "Returns the proposed `note` applied to the checkout.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Notes",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseNoteGeneratedType",
        "typeDefinitions": {
          "UseNoteGeneratedType": {
            "filePath": "/hooks/note.ts",
            "name": "UseNoteGeneratedType",
            "description": "Returns the proposed `note` applied to the checkout.",
            "params": [],
            "returns": {
              "filePath": "/hooks/note.ts",
              "description": "",
              "name": "string | undefined",
              "value": "string | undefined"
            },
            "value": "export function useNote<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): string | undefined {\n  return useSubscription(useApi<ID>().note);\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useOrder",
    "description": "Returns the order information that's available post-checkout.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Orders",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseOrderGeneratedType",
        "typeDefinitions": {
          "UseOrderGeneratedType": {
            "filePath": "/hooks/order.ts",
            "name": "UseOrderGeneratedType",
            "description": "Returns the order information that's available post-checkout.",
            "params": [],
            "returns": {
              "filePath": "/hooks/order.ts",
              "description": "",
              "name": "Order | undefined",
              "value": "Order | undefined"
            },
            "value": "export function useOrder<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): Order | undefined {\n  const api = useApi<ID>();\n\n  if ('order' in api) {\n    return useSubscription(api.order);\n  }\n\n  throw new ExtensionHasNoMethodError('order', api.extensionPoint);\n}"
          },
          "Order": {
            "filePath": "/api/order-status/order-status.ts",
            "name": "Order",
            "description": "Information about an order that was placed.",
            "members": [
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "Unique identifier for the order that appears on the order."
              },
              {
                "filePath": "/api/order-status/order-status.ts",
                "syntaxKind": "PropertySignature",
                "name": "cancelledAt",
                "value": "string",
                "description": "If cancelled, the time at which the order was cancelled.",
                "isOptional": true
              }
            ],
            "value": "export interface Order {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/Order/1'\n   */\n  id: string;\n  /**\n   * Unique identifier for the order that appears on the order.\n   * @example '#1000'\n   */\n  name: string;\n  /**\n   * If cancelled, the time at which the order was cancelled.\n   */\n  cancelledAt?: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useAvailablePaymentOptions",
    "description": "Returns all available payment options.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Payments",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseAvailablePaymentOptionsGeneratedType",
        "typeDefinitions": {
          "UseAvailablePaymentOptionsGeneratedType": {
            "filePath": "/hooks/payment-options.ts",
            "name": "UseAvailablePaymentOptionsGeneratedType",
            "description": "Returns all available payment options.",
            "params": [],
            "returns": {
              "filePath": "/hooks/payment-options.ts",
              "description": "",
              "name": "PaymentOption[]",
              "value": "PaymentOption[]"
            },
            "value": "export function useAvailablePaymentOptions<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): PaymentOption[] {\n  const {availablePaymentOptions} = useApi<ID>();\n\n  return useSubscription(availablePaymentOptions);\n}"
          },
          "PaymentOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "PaymentOption",
            "description": "A payment option presented to the buyer.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"creditCard\" | \"deferred\" | \"local\" | \"manualPayment\" | \"offsite\" | \"other\" | \"paymentOnDelivery\" | \"redeemable\" | \"wallet\" | \"customOnsite\"",
                "description": "The type of the payment option.\n\nShops can be configured to support many different payment options. Some options are only available to buyers in specific regions.\n\n| Type  | Description  |\n|---|---|\n| `creditCard`  |  A vaulted or manually entered credit card.  |\n| `deferred`  |  A [deferred payment](https://help.shopify.com/en/manual/orders/deferred-payments), such as invoicing the buyer and collecting payment at a later time.  |\n| `local`  |  A [local payment option](https://help.shopify.com/en/manual/payments/shopify-payments/local-payment-methods) specific to the current region or market  |\n| `manualPayment`  |  A manual payment option such as an in-person retail transaction.  |\n| `offsite`  |  A payment processed outside of Shopify's checkout, excluding integrated wallets.  |\n| `other`  |  Another type of payment not defined here.  |\n| `paymentOnDelivery`  |  A payment that will be collected on delivery.  |\n| `redeemable`  |  A redeemable payment option such as a gift card or store credit.  |\n| `wallet`  |  An integrated wallet such as PayPal, Google Pay, Apple Pay, etc.  |\n| `customOnsite` | A custom payment option that is processed through a checkout extension with a payments app. |"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique handle for the payment option.\n\nThis is not a globally unique identifier. It may be an identifier specific to the given checkout session or the current shop."
              }
            ],
            "value": "export interface PaymentOption {\n  /**\n   * The type of the payment option.\n   *\n   * Shops can be configured to support many different payment options. Some options are only available to buyers in specific regions.\n   *\n   * | Type  | Description  |\n   * |---|---|\n   * | `creditCard`  |  A vaulted or manually entered credit card.  |\n   * | `deferred`  |  A [deferred payment](https://help.shopify.com/en/manual/orders/deferred-payments), such as invoicing the buyer and collecting payment at a later time.  |\n   * | `local`  |  A [local payment option](https://help.shopify.com/en/manual/payments/shopify-payments/local-payment-methods) specific to the current region or market  |\n   * | `manualPayment`  |  A manual payment option such as an in-person retail transaction.  |\n   * | `offsite`  |  A payment processed outside of Shopify's checkout, excluding integrated wallets.  |\n   * | `other`  |  Another type of payment not defined here.  |\n   * | `paymentOnDelivery`  |  A payment that will be collected on delivery.  |\n   * | `redeemable`  |  A redeemable payment option such as a gift card or store credit.  |\n   * | `wallet`  |  An integrated wallet such as PayPal, Google Pay, Apple Pay, etc.  |\n   * | `customOnsite` | A custom payment option that is processed through a checkout extension with a payments app. |\n   */\n  type:\n    | 'creditCard'\n    | 'deferred'\n    | 'local'\n    | 'manualPayment'\n    | 'offsite'\n    | 'other'\n    | 'paymentOnDelivery'\n    | 'redeemable'\n    | 'wallet'\n    | 'customOnsite';\n\n  /**\n   * The unique handle for the payment option.\n   *\n   * This is not a globally unique identifier. It may be an identifier specific to the given checkout session or the current shop.\n   */\n  handle: string;\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "",
      "codeblock": {
        "title": "Available payment options",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  render,\n  Banner,\n  useAvailablePaymentOptions,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const options = useAvailablePaymentOptions();\n\n  if (\n    options.some(\n      (option) => option.type === 'wallet',\n    )\n  ) {\n    return (\n      <Banner>\n        Select an express payment method for\n        faster checkout\n      </Banner>\n    );\n  }\n\n  return null;\n}\n",
            "language": "jsx",
            "title": "React"
          }
        ]
      }
    },
    "related": [
      {
        "name": "useSelectedPaymentOptions",
        "subtitle": "Hook",
        "url": "/docs/api/checkout-ui-extensions/unstable/react-hooks/payments/useselectedpaymentoptions",
        "type": "UseSelectedPaymentOptionsGeneratedType"
      },
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useSelectedPaymentOptions",
    "description": "Returns payment options selected by the buyer.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Payments",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseSelectedPaymentOptionsGeneratedType",
        "typeDefinitions": {
          "UseSelectedPaymentOptionsGeneratedType": {
            "filePath": "/hooks/payment-options.ts",
            "name": "UseSelectedPaymentOptionsGeneratedType",
            "description": "Returns payment options selected by the buyer.",
            "params": [],
            "returns": {
              "filePath": "/hooks/payment-options.ts",
              "description": "",
              "name": "PaymentOption[]",
              "value": "PaymentOption[]"
            },
            "value": "export function useSelectedPaymentOptions<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): PaymentOption[] {\n  const selectedPaymentOptions = useSubscription(\n    useApi<ID>().selectedPaymentOptions,\n  );\n  const availablePaymentOptions = useSubscription(\n    useApi<ID>().availablePaymentOptions,\n  );\n\n  return useMemo(() => {\n    const availablePaymentOptionsMap: {[key: string]: PaymentOption} = {};\n\n    for (const option of availablePaymentOptions) {\n      availablePaymentOptionsMap[option.handle] = option;\n    }\n\n    return selectedPaymentOptions.map((paymentOption) => {\n      return {\n        handle: paymentOption.handle,\n        type: availablePaymentOptionsMap[paymentOption.handle]?.type,\n      };\n    });\n  }, [availablePaymentOptions, selectedPaymentOptions]);\n}"
          },
          "PaymentOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "PaymentOption",
            "description": "A payment option presented to the buyer.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"creditCard\" | \"deferred\" | \"local\" | \"manualPayment\" | \"offsite\" | \"other\" | \"paymentOnDelivery\" | \"redeemable\" | \"wallet\" | \"customOnsite\"",
                "description": "The type of the payment option.\n\nShops can be configured to support many different payment options. Some options are only available to buyers in specific regions.\n\n| Type  | Description  |\n|---|---|\n| `creditCard`  |  A vaulted or manually entered credit card.  |\n| `deferred`  |  A [deferred payment](https://help.shopify.com/en/manual/orders/deferred-payments), such as invoicing the buyer and collecting payment at a later time.  |\n| `local`  |  A [local payment option](https://help.shopify.com/en/manual/payments/shopify-payments/local-payment-methods) specific to the current region or market  |\n| `manualPayment`  |  A manual payment option such as an in-person retail transaction.  |\n| `offsite`  |  A payment processed outside of Shopify's checkout, excluding integrated wallets.  |\n| `other`  |  Another type of payment not defined here.  |\n| `paymentOnDelivery`  |  A payment that will be collected on delivery.  |\n| `redeemable`  |  A redeemable payment option such as a gift card or store credit.  |\n| `wallet`  |  An integrated wallet such as PayPal, Google Pay, Apple Pay, etc.  |\n| `customOnsite` | A custom payment option that is processed through a checkout extension with a payments app. |"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "handle",
                "value": "string",
                "description": "The unique handle for the payment option.\n\nThis is not a globally unique identifier. It may be an identifier specific to the given checkout session or the current shop."
              }
            ],
            "value": "export interface PaymentOption {\n  /**\n   * The type of the payment option.\n   *\n   * Shops can be configured to support many different payment options. Some options are only available to buyers in specific regions.\n   *\n   * | Type  | Description  |\n   * |---|---|\n   * | `creditCard`  |  A vaulted or manually entered credit card.  |\n   * | `deferred`  |  A [deferred payment](https://help.shopify.com/en/manual/orders/deferred-payments), such as invoicing the buyer and collecting payment at a later time.  |\n   * | `local`  |  A [local payment option](https://help.shopify.com/en/manual/payments/shopify-payments/local-payment-methods) specific to the current region or market  |\n   * | `manualPayment`  |  A manual payment option such as an in-person retail transaction.  |\n   * | `offsite`  |  A payment processed outside of Shopify's checkout, excluding integrated wallets.  |\n   * | `other`  |  Another type of payment not defined here.  |\n   * | `paymentOnDelivery`  |  A payment that will be collected on delivery.  |\n   * | `redeemable`  |  A redeemable payment option such as a gift card or store credit.  |\n   * | `wallet`  |  An integrated wallet such as PayPal, Google Pay, Apple Pay, etc.  |\n   * | `customOnsite` | A custom payment option that is processed through a checkout extension with a payments app. |\n   */\n  type:\n    | 'creditCard'\n    | 'deferred'\n    | 'local'\n    | 'manualPayment'\n    | 'offsite'\n    | 'other'\n    | 'paymentOnDelivery'\n    | 'redeemable'\n    | 'wallet'\n    | 'customOnsite';\n\n  /**\n   * The unique handle for the payment option.\n   *\n   * This is not a globally unique identifier. It may be an identifier specific to the given checkout session or the current shop.\n   */\n  handle: string;\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "",
      "codeblock": {
        "title": "Selected payment options",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  render,\n  Banner,\n  useSelectedPaymentOptions,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const options = useSelectedPaymentOptions();\n\n  if (\n    options.some(\n      (option) => option.type === 'creditCard',\n    )\n  ) {\n    return (\n      <Banner>\n        All credit card transactions are secure\n      </Banner>\n    );\n  }\n\n  return null;\n}\n",
            "language": "jsx",
            "title": "React"
          }
        ]
      }
    },
    "related": [
      {
        "name": "useAvailablePaymentOptions",
        "subtitle": "Hook",
        "url": "/docs/api/checkout-ui-extensions/unstable/react-hooks/payments/useavailablepaymentoptions",
        "type": "UseAvailablePaymentOptionsGeneratedType"
      },
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useSessionToken",
    "description": "Provides access to session tokens, which can be used to verify token claims on your app's server.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Sessions",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseSessionTokenGeneratedType",
        "typeDefinitions": {
          "UseSessionTokenGeneratedType": {
            "filePath": "/hooks/session-token.ts",
            "name": "UseSessionTokenGeneratedType",
            "description": "Provides access to session tokens, which can be used to verify token claims on your app's server.",
            "params": [],
            "returns": {
              "filePath": "/hooks/session-token.ts",
              "description": "",
              "name": "SessionToken",
              "value": "SessionToken"
            },
            "value": "export function useSessionToken<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): SessionToken {\n  return useApi<ID>().sessionToken;\n}"
          },
          "SessionToken": {
            "filePath": "/api/standard/standard.ts",
            "name": "SessionToken",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "get",
                "value": "() => Promise<string>",
                "description": "Requests a session token that hasn't expired. You should call this method every\ntime you need to make a request to your backend in order to get a valid token.\nThis method will return cached tokens when possible, so you don’t need to worry\nabout storing these tokens yourself."
              }
            ],
            "value": "export interface SessionToken {\n  /**\n   * Requests a session token that hasn't expired. You should call this method every\n   * time you need to make a request to your backend in order to get a valid token.\n   * This method will return cached tokens when possible, so you don’t need to worry\n   * about storing these tokens yourself.\n   */\n  get(): Promise<string>;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ],
    "defaultExample": {
      "description": "\nYou can request a session token from Shopify to use on your application server.  The contents of the token claims are signed using your shared app secret so you can trust the claims came from Shopify unaltered.\n\n> Note: You will need to [enable the `network_access` capability](/docs/api/checkout-ui-extensions/configuration#network-access) to use `fetch()`.\n",
      "codeblock": {
        "title": "Using a session token with fetch()",
        "tabs": [
          {
            "code": "import React, {useEffect} from 'react';\nimport {\n  render,\n  Banner,\n  useApi,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const {sessionToken} = useApi();\n\n  useEffect(() => {\n    async function queryApi() {\n      // Request a new (or cached) session token from Shopify\n      const token = await sessionToken.get();\n      console.log('sessionToken.get()', token);\n\n      const apiResponse = await fetchWithToken(\n        token,\n      );\n      // Use your response\n      console.log('API response', apiResponse);\n    }\n\n    function fetchWithToken(token) {\n      const result = fetch(\n        'https://myapp.com/api/session-token',\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        },\n      );\n      return result;\n    }\n\n    queryApi();\n  }, [sessionToken]);\n\n  return (\n    <Banner>See console for API response</Banner>\n  );\n}\n",
            "language": "jsx",
            "title": "React"
          }
        ]
      }
    },
    "examples": {
      "description": "",
      "examples": [
        {
          "description": "\nThe contents of the token are signed using your shared app secret.  The optional `sub` claim contains the customer's `gid` if they are logged in and your app has permission to read customer accounts. For example, a loyalty app that needs to check a customer's point balance can use the `sub` claim to verify the customer's account.\n\n> Caution:\n> Your app server can only trust the claims within the session token. It cannot use the token to trust the entire HTTP request. See [security considerations](/docs/api/checkout-ui-extensions/configuration#network-access) for details.\n",
          "codeblock": {
            "title": "Session token claims",
            "tabs": [
              {
                "code": "{\n  // Shopify URL\n  \"dest\": \"store-name.myshopify.com\",\n  // The Client ID of your app\n  \"aud\": \"<clientId>\",\n  // When the token expires.  Set at 5 minutes.\n  \"exp\": 1679954053,\n  // When the token was actived\n  \"nbf\": 1679953753,\n  // When the token was issued\n  \"iat\": 1679953753,\n  // A unique identifier (a nonce) to prevent replay attacks\n  \"jti\": \"6c992878-dbaf-48d1-bb9d-6d9b59814fd1\",\n  // Optional claim present when a customer is logged in and your app has permissions to read customer data\n  \"sub\": \"gid://shopify/Customer/<customerId>\"\n}\n",
                "language": "json",
                "title": "session-token.jwt"
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "useSettings",
    "description": "Returns the setting values defined by the merchant for the extension.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Storage",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseSettingsGeneratedType",
        "typeDefinitions": {
          "UseSettingsGeneratedType": {
            "filePath": "/hooks/settings.ts",
            "name": "UseSettingsGeneratedType",
            "description": "Returns the setting values defined by the merchant for the extension.",
            "params": [],
            "returns": {
              "filePath": "/hooks/settings.ts",
              "description": "",
              "name": "Partial<Settings extends ExtensionSettings>",
              "value": "Partial<Settings extends ExtensionSettings>"
            },
            "value": "export function useSettings<\n  Settings extends ExtensionSettings,\n>(): Partial<Settings> {\n  const settings = useSubscription(useApi().settings);\n\n  return settings as Settings;\n}"
          },
          "ExtensionSettings": {
            "filePath": "/api/standard/standard.ts",
            "name": "ExtensionSettings",
            "description": "The merchant-defined setting values for the extension.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "name": "[key: string]",
                "value": "string | number | boolean | undefined"
              }
            ],
            "value": "export interface ExtensionSettings {\n  [key: string]: string | number | boolean | undefined;\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "\nYou can retrieve settings values within your extension. In React, the `useSettings()` hook re-renders your extension with the latest values.\nIn JavaScript, subscribe to changes and update your UI directly.\n      ",
      "codeblock": {
        "title": "Accessing merchant settings",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  render,\n  Banner,\n  useSettings,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const {banner_title} = useSettings();\n  return <Banner title={banner_title} />;\n}\n",
            "language": "jsx",
            "title": "React"
          }
        ]
      }
    },
    "examples": {
      "description": "",
      "examples": [
        {
          "description": "\nYou can define settings that merchants can edit within the checkout editor.\nSee [settings](/docs/api/checkout-ui-extensions/configuration#settings-definition) for more information on how to define these.\n      ",
          "codeblock": {
            "title": "Define merchant settings",
            "tabs": [
              {
                "code": "type = \"checkout_ui_extension\"\nname = \"my-checkout-extension\"\n\nextension_points = [\n  'Checkout::Dynamic::Render'\n]\n\n[settings]\n  [[settings.fields]]\n  key = \"banner_title\"\n  type = \"single_line_text_field\"\n  name = \"Banner title\"\n  description = \"Enter a title for the banner.\"\n    [[settings.fields.validations]]\n    name = \"min\"\n    value = \"5\"\n    [[settings.fields.validations]]\n    name = \"max\"\n    value = \"20\"\n\n",
                "language": "toml",
                "title": "shopify.ui.extension.toml"
              }
            ]
          }
        }
      ]
    },
    "related": [
      {
        "name": "Configuration",
        "subtitle": "Overview",
        "url": "/docs/api/checkout-ui-extensions/configuration",
        "type": "Configuration"
      },
      {
        "name": "Settings Definition",
        "subtitle": "Configuration",
        "url": "/docs/api/checkout-ui-extensions/configuration#settings-definition",
        "type": "SettingsDefinition"
      },
      {
        "name": "Settings Examples",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi#example-settings",
        "type": "SettingsExamples"
      }
    ]
  },
  {
    "name": "useShippingAddress",
    "description": "Returns the proposed `shippingAddress` applied to the checkout.",
    "requires": "level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Buyer Identity",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseShippingAddressGeneratedType",
        "typeDefinitions": {
          "UseShippingAddressGeneratedType": {
            "filePath": "/hooks/shipping-address.ts",
            "name": "UseShippingAddressGeneratedType",
            "description": "Returns the proposed `shippingAddress` applied to the checkout.",
            "params": [],
            "returns": {
              "filePath": "/hooks/shipping-address.ts",
              "description": "",
              "name": "MailingAddress | undefined",
              "value": "MailingAddress | undefined"
            },
            "value": "export function useShippingAddress<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): MailingAddress | undefined {\n  const shippingAddress = useApi<ID>().shippingAddress;\n\n  if (!shippingAddress) {\n    throw new ScopeNotGrantedError(\n      'Using shipping address requires having shipping address permissions granted to your app.',\n    );\n  }\n\n  return useSubscription(shippingAddress);\n}"
          },
          "MailingAddress": {
            "filePath": "/api/standard/standard.ts",
            "name": "MailingAddress",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The buyer's full name.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "firstName",
                "value": "string",
                "description": "The buyer's first name.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lastName",
                "value": "string",
                "description": "The buyer's last name.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "company",
                "value": "string",
                "description": "The buyer's company name.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "address1",
                "value": "string",
                "description": "The first line of the buyer's address, including street name and number.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "address2",
                "value": "string",
                "description": "The second line of the buyer's address, like apartment number, suite, etc.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "city",
                "value": "string",
                "description": "The buyer's city.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "zip",
                "value": "string",
                "description": "The buyer's postal or ZIP code.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "countryCode",
                "value": "CountryCode",
                "description": "The ISO 3166 Alpha-2 format for the buyer's country. Refer to https://www.iso.org/iso-3166-country-codes.html.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "provinceCode",
                "value": "string",
                "description": "The buyer's zone code, such as state, province, prefecture, or region.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "phone",
                "value": "string",
                "description": "The buyer's phone number.\n\n{% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).",
                "isOptional": true
              }
            ],
            "value": "export interface MailingAddress {\n  /**\n   * The buyer's full name.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'John Doe'\n   */\n  name?: string;\n\n  /**\n   * The buyer's first name.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'John'\n   */\n  firstName?: string;\n\n  /**\n   * The buyer's last name.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'Doe'\n   */\n  lastName?: string;\n\n  /**\n   * The buyer's company name.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 1 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'Shopify'\n   */\n  company?: string;\n\n  /**\n   * The first line of the buyer's address, including street name and number.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example '151 O'Connor Street'\n   */\n  address1?: string;\n\n  /**\n   * The second line of the buyer's address, like apartment number, suite, etc.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'Ground floor'\n   */\n  address2?: string;\n\n  /**\n   * The buyer's city.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'Ottawa'\n   */\n  city?: string;\n\n  /**\n   * The buyer's postal or ZIP code.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'K2P 2L8'\n   */\n  zip?: string;\n\n  /**\n   * The ISO 3166 Alpha-2 format for the buyer's country. Refer to https://www.iso.org/iso-3166-country-codes.html.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'CA' for Canada.\n   */\n  countryCode?: CountryCode;\n\n  /**\n   * The buyer's zone code, such as state, province, prefecture, or region.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example 'ON' for Ontario.\n   */\n  provinceCode?: string;\n\n  /**\n   * The buyer's phone number.\n   *\n   * {% include /apps/checkout/privacy-icon.md %} Requires level 2 access to [protected customer data](/docs/apps/store/data-protection/protected-customer-data).\n   *\n   * @example '+1 613 111 2222'.\n   */\n  phone?: string;\n}"
          },
          "CountryCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CountryCode",
            "value": "'AC' | 'AD' | 'AE' | 'AF' | 'AG' | 'AI' | 'AL' | 'AM' | 'AN' | 'AO' | 'AR' | 'AT' | 'AU' | 'AW' | 'AX' | 'AZ' | 'BA' | 'BB' | 'BD' | 'BE' | 'BF' | 'BG' | 'BH' | 'BI' | 'BJ' | 'BL' | 'BM' | 'BN' | 'BO' | 'BQ' | 'BR' | 'BS' | 'BT' | 'BV' | 'BW' | 'BY' | 'BZ' | 'CA' | 'CC' | 'CD' | 'CF' | 'CG' | 'CH' | 'CI' | 'CK' | 'CL' | 'CM' | 'CN' | 'CO' | 'CR' | 'CU' | 'CV' | 'CW' | 'CX' | 'CY' | 'CZ' | 'DE' | 'DJ' | 'DK' | 'DM' | 'DO' | 'DZ' | 'EC' | 'EE' | 'EG' | 'EH' | 'ER' | 'ES' | 'ET' | 'FI' | 'FJ' | 'FK' | 'FO' | 'FR' | 'GA' | 'GB' | 'GD' | 'GE' | 'GF' | 'GG' | 'GH' | 'GI' | 'GL' | 'GM' | 'GN' | 'GP' | 'GQ' | 'GR' | 'GS' | 'GT' | 'GW' | 'GY' | 'HK' | 'HM' | 'HN' | 'HR' | 'HT' | 'HU' | 'ID' | 'IE' | 'IL' | 'IM' | 'IN' | 'IO' | 'IQ' | 'IR' | 'IS' | 'IT' | 'JE' | 'JM' | 'JO' | 'JP' | 'KE' | 'KG' | 'KH' | 'KI' | 'KM' | 'KN' | 'KP' | 'KR' | 'KW' | 'KY' | 'KZ' | 'LA' | 'LB' | 'LC' | 'LI' | 'LK' | 'LR' | 'LS' | 'LT' | 'LU' | 'LV' | 'LY' | 'MA' | 'MC' | 'MD' | 'ME' | 'MF' | 'MG' | 'MK' | 'ML' | 'MM' | 'MN' | 'MO' | 'MQ' | 'MR' | 'MS' | 'MT' | 'MU' | 'MV' | 'MW' | 'MX' | 'MY' | 'MZ' | 'NA' | 'NC' | 'NE' | 'NF' | 'NG' | 'NI' | 'NL' | 'NO' | 'NP' | 'NR' | 'NU' | 'NZ' | 'OM' | 'PA' | 'PE' | 'PF' | 'PG' | 'PH' | 'PK' | 'PL' | 'PM' | 'PN' | 'PS' | 'PT' | 'PY' | 'QA' | 'RE' | 'RO' | 'RS' | 'RU' | 'RW' | 'SA' | 'SB' | 'SC' | 'SD' | 'SE' | 'SG' | 'SH' | 'SI' | 'SJ' | 'SK' | 'SL' | 'SM' | 'SN' | 'SO' | 'SR' | 'SS' | 'ST' | 'SV' | 'SX' | 'SY' | 'SZ' | 'TA' | 'TC' | 'TD' | 'TF' | 'TG' | 'TH' | 'TJ' | 'TK' | 'TL' | 'TM' | 'TN' | 'TO' | 'TR' | 'TT' | 'TV' | 'TW' | 'TZ' | 'UA' | 'UG' | 'UM' | 'US' | 'UY' | 'UZ' | 'VA' | 'VC' | 'VE' | 'VG' | 'VN' | 'VU' | 'WF' | 'WS' | 'XK' | 'YE' | 'YT' | 'ZA' | 'ZM' | 'ZW' | 'ZZ'",
            "description": ""
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useShop",
    "description": "Returns the `Shop` where the checkout is taking place.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Metadata",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseShopGeneratedType",
        "typeDefinitions": {
          "UseShopGeneratedType": {
            "filePath": "/hooks/shop.ts",
            "name": "UseShopGeneratedType",
            "description": "Returns the `Shop` where the checkout is taking place.",
            "params": [],
            "returns": {
              "filePath": "/hooks/shop.ts",
              "description": "",
              "name": "Shop",
              "value": "Shop"
            },
            "value": "export function useShop<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): Shop {\n  return useApi<ID>().shop;\n}"
          },
          "Shop": {
            "filePath": "/api/standard/standard.ts",
            "name": "Shop",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The shop ID."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the shop."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "storefrontUrl",
                "value": "string",
                "description": "The primary storefront URL.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "myshopifyDomain",
                "value": "string",
                "description": "The shop's myshopify.com domain."
              }
            ],
            "value": "export interface Shop {\n  /**\n   * The shop ID.\n   * @example 'gid://shopify/Shop/123'\n   */\n  id: string;\n  /**\n   * The name of the shop.\n   */\n  name: string;\n  /**\n   * The primary storefront URL.\n   */\n  storefrontUrl?: string;\n  /**\n   * The shop's myshopify.com domain.\n   */\n  myshopifyDomain: string;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useStorage",
    "description": "Returns the key-value `Storage` interface for the extension point.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Storage",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseStorageGeneratedType",
        "typeDefinitions": {
          "UseStorageGeneratedType": {
            "filePath": "/hooks/storage.ts",
            "name": "UseStorageGeneratedType",
            "description": "Returns the key-value `Storage` interface for the extension point.",
            "params": [],
            "returns": {
              "filePath": "/hooks/storage.ts",
              "description": "",
              "name": "Storage",
              "value": "Storage"
            },
            "value": "export function useStorage<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): Storage {\n  return useApi<ID>().storage;\n}"
          },
          "Storage": {
            "filePath": "/api/standard/standard.ts",
            "name": "Storage",
            "description": "A key-value storage object for extension points.\n\nStored data is only available to this specific app\nat this specific extension point.\n\nThe storage backend is implemented with `localStorage` and\nshould persist across the buyer's checkout session.\nHowever, data persistence isn't guaranteed.",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "read",
                "value": "<T = unknown>(key: string) => Promise<T>",
                "description": "Read and return a stored value by key.\n\nThe stored data is deserialized from JSON and returned as\nits original primitive.\n\nReturns `null` if no stored data exists."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "write",
                "value": "(key: string, data: any) => Promise<void>",
                "description": "Write stored data for this key.\n\nThe data must be serializable to JSON."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "MethodSignature",
                "name": "delete",
                "value": "(key: string) => Promise<void>",
                "description": "Delete stored data by key."
              }
            ],
            "value": "export interface Storage {\n  /**\n   * Read and return a stored value by key.\n   *\n   * The stored data is deserialized from JSON and returned as\n   * its original primitive.\n   *\n   * Returns `null` if no stored data exists.\n   */\n  read<T = unknown>(key: string): Promise<T | null>;\n\n  /**\n   * Write stored data for this key.\n   *\n   * The data must be serializable to JSON.\n   */\n  write(key: string, data: any): Promise<void>;\n\n  /**\n   * Delete stored data by key.\n   */\n  delete(key: string): Promise<void>;\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useSubscription",
    "description": "Subscribes to the special wrapper type that all “changeable” values in the\ncheckout use. This hook extracts the most recent value from that object,\nand subscribes to update the value when changes occur in the checkout.\n\n> Note:\n> You generally shouldn’t need to use this directly, as there are dedicated hooks\n> for accessing the current value of each individual resource in the checkout.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Utilities",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseSubscriptionGeneratedType",
        "typeDefinitions": {
          "UseSubscriptionGeneratedType": {
            "filePath": "/hooks/subscription.ts",
            "name": "UseSubscriptionGeneratedType",
            "description": "Subscribes to the special wrapper type that all “changeable” values in the\ncheckout use. This hook extracts the most recent value from that object,\nand subscribes to update the value when changes occur in the checkout.\n\n> Note:\n> You generally shouldn’t need to use this directly, as there are dedicated hooks\n> for accessing the current value of each individual resource in the checkout.",
            "params": [
              {
                "name": "subscription",
                "description": "",
                "value": "StatefulRemoteSubscribable<Value>",
                "filePath": "/hooks/subscription.ts"
              }
            ],
            "returns": {
              "filePath": "/hooks/subscription.ts",
              "description": "",
              "name": "Value",
              "value": "Value"
            },
            "value": "export function useSubscription<Value>(\n  subscription: StatefulRemoteSubscribable<Value>,\n): Value {\n  const [, setValue] = useState(subscription.current);\n\n  useEffect(() => {\n    let didUnsubscribe = false;\n\n    const checkForUpdates: Subscriber<Value> = (newValue) => {\n      if (didUnsubscribe) {\n        return;\n      }\n\n      setValue(newValue);\n    };\n\n    const unsubscribe = subscription.subscribe(checkForUpdates);\n\n    // Because we're subscribing in a passive effect,\n    // it's possible for an update to occur between render and the effect handler.\n    // Check for this and schedule an update if work has occurred.\n    checkForUpdates(subscription.current);\n\n    return () => {\n      didUnsubscribe = true;\n      unsubscribe();\n    };\n  }, [subscription]);\n\n  return subscription.current;\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "",
      "codeblock": {
        "title": "Subscribing to changes",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  render,\n  Banner,\n  useApi,\n  useSubscription,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const {cost} = useApi();\n\n  // Equivalent to the useTotalAmount() hook to subscribe and re-render your extension on changes\n  const totalAmount = useSubscription(\n    cost.totalAmount,\n  );\n\n  return <Banner>{totalAmount.amount}</Banner>;\n}\n",
            "language": "jsx",
            "title": "React"
          }
        ]
      }
    },
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useTarget",
    "description": "Returns the cart line the extension is attached to. This is only applicable to the `Checkout::CartLineDetails::RenderAfter` extension point.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Cart",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseTargetGeneratedType",
        "typeDefinitions": {
          "UseTargetGeneratedType": {
            "filePath": "/hooks/target.ts",
            "name": "UseTargetGeneratedType",
            "description": "Returns the cart line the extension is attached to. This is only applicable to the `Checkout::CartLineDetails::RenderAfter` extension point.",
            "params": [],
            "returns": {
              "filePath": "/hooks/target.ts",
              "description": "",
              "name": "PresentmentCartLine",
              "value": "PresentmentCartLine"
            },
            "value": "export function useTarget(): PresentmentCartLine {\n  const api = useApi<'Checkout::CartLineDetails::RenderAfter'>();\n  if (!api.target) {\n    throw new ExtensionHasNoTargetError(api.extensionPoint);\n  }\n  return useSubscription(api.target);\n}"
          },
          "PresentmentCartLine": {
            "filePath": "/api/standard/standard.ts",
            "name": "PresentmentCartLine",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The ID of the present cart line. This ID isn't stable and might change after\nany operations on the line items."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "PresentmentCartLineCost",
                "description": "The details about the cost components attributed to the presentment cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the line item."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "string",
                "description": "The subtitle of the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "The image associated with the line item.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lines",
                "value": "CartLine[]",
                "description": "The merchandise lines being purchased."
              }
            ],
            "value": "export interface PresentmentCartLine {\n  /**\n   * The ID of the present cart line. This ID isn't stable and might change after\n   * any operations on the line items.\n   * @example 'gid://shopify/PresentmentCartLine/123'\n   */\n  id: string;\n\n  /**\n   * The quantity of the merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The details about the cost components attributed to the presentment cart line.\n   */\n  cost: PresentmentCartLineCost;\n\n  /**\n   * The title of the line item.\n   */\n  title: string;\n\n  /**\n   * The subtitle of the line item.\n   */\n  subtitle?: string;\n\n  /**\n   * The image associated with the line item.\n   */\n  image?: ImageDetails;\n\n  /**\n   * The merchandise lines being purchased.\n   */\n  lines: CartLine[];\n}"
          },
          "PresentmentCartLineCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "PresentmentCartLineCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "Money",
                "description": "The total cost of the merchandise line."
              }
            ],
            "value": "export interface PresentmentCartLineCost {\n  /**\n   * The total cost of the merchandise line.\n   */\n  totalAmount: Money;\n}"
          },
          "Money": {
            "filePath": "/api/standard/standard.ts",
            "name": "Money",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": "The price amount."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "currencyCode",
                "value": "CurrencyCode",
                "description": "The ISO 4217 format for the currency."
              }
            ],
            "value": "export interface Money {\n  /**\n   * The price amount.\n   */\n  amount: number;\n  /**\n   * The ISO 4217 format for the currency.\n   * @example 'CAD' for Canadian dollar\n   */\n  currencyCode: CurrencyCode;\n}"
          },
          "CurrencyCode": {
            "filePath": "/api/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CurrencyCode",
            "value": "'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BOV' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHE' | 'CHF' | 'CHW' | 'CLF' | 'CLP' | 'CNY' | 'COP' | 'COU' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRU' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MXV' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SRD' | 'SSP' | 'STN' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'USN' | 'UYI' | 'UYU' | 'UYW' | 'UZS' | 'VES' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XAG' | 'XAU' | 'XBA' | 'XBB' | 'XBC' | 'XBD' | 'XCD' | 'XDR' | 'XOF' | 'XPD' | 'XPF' | 'XPT' | 'XSU' | 'XTS' | 'XUA' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWL'",
            "description": ""
          },
          "ImageDetails": {
            "filePath": "/api/standard/standard.ts",
            "name": "ImageDetails",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "url",
                "value": "string",
                "description": "The image URL."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "altText",
                "value": "string",
                "description": "The alternative text for the image.",
                "isOptional": true
              }
            ],
            "value": "export interface ImageDetails {\n  /**\n   * The image URL.\n   */\n  url: string;\n\n  /**\n   * The alternative text for the image.\n   */\n  altText?: string;\n}"
          },
          "CartLine": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLine",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "These line item IDs are not stable at the moment, they might change after\nany operations on the line items. You should always look up for an updated\nID before any call to `applyCartLinesChange` because you'll need the ID to\ncreate a `CartLineChange` object."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of the merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The details about the cost components attributed to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "The line item additional custom attributes."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountAllocations",
                "value": "CartDiscountAllocation[]",
                "description": "Discounts applied to the cart line."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "lineComponents",
                "value": "CartBundleLineComponent[]",
                "description": "Sub lines of the merchandise line. If no sub lines are present, this will be an empty array."
              }
            ],
            "value": "export interface CartLine {\n  /**\n   * These line item IDs are not stable at the moment, they might change after\n   * any operations on the line items. You should always look up for an updated\n   * ID before any call to `applyCartLinesChange` because you'll need the ID to\n   * create a `CartLineChange` object.\n   * @example 'gid://shopify/CartLine/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise being purchased.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of the merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The details about the cost components attributed to the cart line.\n   */\n  cost: CartLineCost;\n\n  /**\n   * The line item additional custom attributes.\n   */\n  attributes: Attribute[];\n\n  /**\n   * Discounts applied to the cart line.\n   */\n  discountAllocations: CartDiscountAllocation[];\n\n  /**\n   * Sub lines of the merchandise line. If no sub lines are present, this will be an empty array.\n   */\n  lineComponents: CartLineComponentType[];\n}"
          },
          "Merchandise": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Merchandise",
            "value": "ProductVariant",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"variant\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The product variant’s title."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "string",
                "description": "The product variant's subtitle.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "ImageDetails",
                "description": "Image associated with the product variant. This field falls back to the product\nimage if no image is available.",
                "isOptional": true
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "selectedOptions",
                "value": "SelectedOption[]",
                "description": "List of product options applied to the variant."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "product",
                "value": "Product",
                "description": "The product object that the product variant belongs to."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "requiresShipping",
                "value": "boolean",
                "description": "Whether or not the product requires shipping."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "sellingPlan",
                "value": "SellingPlan",
                "description": "The selling plan associated with the merchandise.",
                "isOptional": true
              }
            ]
          },
          "SelectedOption": {
            "filePath": "/api/standard/standard.ts",
            "name": "SelectedOption",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the merchandise option."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value of the merchandise option."
              }
            ],
            "value": "export interface SelectedOption {\n  /**\n   * The name of the merchandise option.\n   */\n  name: string;\n\n  /**\n   * The value of the merchandise option.\n   */\n  value: string;\n}"
          },
          "Product": {
            "filePath": "/api/standard/standard.ts",
            "name": "Product",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "vendor",
                "value": "string",
                "description": "The product’s vendor name."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "productType",
                "value": "string",
                "description": "A categorization that a product can be tagged with, commonly used for filtering and searching."
              }
            ],
            "value": "export interface Product {\n  /**\n   * A globally-unique identifier.\n   */\n  id: string;\n\n  /**\n   * The product’s vendor name.\n   */\n  vendor: string;\n\n  /**\n   * A categorization that a product can be tagged with, commonly used for filtering and searching.\n   */\n  productType: string;\n}"
          },
          "SellingPlan": {
            "filePath": "/api/shared.ts",
            "name": "SellingPlan",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A globally-unique identifier."
              }
            ],
            "value": "export interface SellingPlan {\n  /**\n   * A globally-unique identifier.\n   * @example 'gid://shopify/SellingPlan/1'\n   */\n  id: string;\n}"
          },
          "CartLineCost": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartLineCost",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAmount",
                "value": "Money",
                "description": "The total amount after reductions the buyer can expect to pay that is directly attributable to a single\ncart line."
              }
            ],
            "value": "export interface CartLineCost {\n  /**\n   * The total amount after reductions the buyer can expect to pay that is directly attributable to a single\n   * cart line.\n   */\n  totalAmount: Money;\n}"
          },
          "Attribute": {
            "filePath": "/api/shared.ts",
            "name": "Attribute",
            "description": "",
            "members": [
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "key",
                "value": "string",
                "description": "The key for the attribute."
              },
              {
                "filePath": "/api/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value for the attribute."
              }
            ],
            "value": "export interface Attribute {\n  /**\n   * The key for the attribute.\n   */\n  key: string;\n\n  /**\n   * The value for the attribute.\n   */\n  value: string;\n}"
          },
          "CartDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartDiscountAllocation",
            "value": "CartCodeDiscountAllocation | CartAutomaticDiscountAllocation | CartCustomDiscountAllocation",
            "description": ""
          },
          "CartCodeDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCodeDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "code",
                "value": "string",
                "description": "The code for the discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"code\"",
                "description": "The type of the code discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCodeDiscountAllocation extends CartDiscountAllocationBase {\n  /**\n   * The code for the discount\n   */\n  code: string;\n\n  /**\n   * The type of the code discount\n   */\n  type: 'code';\n}"
          },
          "CartAutomaticDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartAutomaticDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"automatic\"",
                "description": "The type of the automatic discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartAutomaticDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the automatic discount\n   */\n  title: string;\n\n  /**\n   * The type of the automatic discount\n   */\n  type: 'automatic';\n}"
          },
          "CartCustomDiscountAllocation": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartCustomDiscountAllocation",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"custom\"",
                "description": "The type of the custom discount"
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountedAmount",
                "value": "Money",
                "description": "The money amount that has been discounted from the order"
              }
            ],
            "value": "export interface CartCustomDiscountAllocation\n  extends CartDiscountAllocationBase {\n  /**\n   * The title of the custom discount\n   */\n  title: string;\n\n  /**\n   * The type of the custom discount\n   */\n  type: 'custom';\n}"
          },
          "CartBundleLineComponent": {
            "filePath": "/api/standard/standard.ts",
            "name": "CartBundleLineComponent",
            "description": "",
            "members": [
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "\"bundle\"",
                "description": ""
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the bundle line component.\n\nThis ID is not stable. If an operation updates the line items in any way, all IDs could change."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "merchandise",
                "value": "Merchandise",
                "description": "The merchandise of this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": "The quantity of merchandise being purchased."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "cost",
                "value": "CartLineCost",
                "description": "The cost attributed to this bundle line component."
              },
              {
                "filePath": "/api/standard/standard.ts",
                "syntaxKind": "PropertySignature",
                "name": "attributes",
                "value": "Attribute[]",
                "description": "Additional custom attributes for the bundle line component."
              }
            ],
            "value": "export interface CartBundleLineComponent {\n  type: 'bundle';\n\n  /**\n   * A unique identifier for the bundle line component.\n   *\n   * This ID is not stable. If an operation updates the line items in any way, all IDs could change.\n   *\n   * @example 'gid://shopify/CartLineComponent/123'\n   */\n  id: string;\n\n  /**\n   * The merchandise of this bundle line component.\n   */\n  merchandise: Merchandise;\n\n  /**\n   * The quantity of merchandise being purchased.\n   */\n  quantity: number;\n\n  /**\n   * The cost attributed to this bundle line component.\n   */\n  cost: CartLineCost;\n\n  /**\n   * Additional custom attributes for the bundle line component.\n   *\n   * @example [{key: 'engraving', value: 'hello world'}]\n   */\n  attributes: Attribute[];\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "description": "",
      "codeblock": {
        "title": "",
        "tabs": [
          {
            "code": "import React from 'react';\nimport {\n  render,\n  Text,\n  useTarget,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender(\n  'Checkout::CartLineDetails::RenderAfter',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const {title} = useTarget();\n  return <Text>Line item title: {title}</Text>;\n}\n",
            "language": "jsx",
            "title": "React"
          }
        ]
      }
    },
    "related": [
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      }
    ]
  },
  {
    "name": "useTimezone",
    "description": "Returns the time zone of the checkout, and automatically re-renders\nyour component if the time zone changes.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Localization",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseTimezoneGeneratedType",
        "typeDefinitions": {
          "UseTimezoneGeneratedType": {
            "filePath": "/hooks/timezone.ts",
            "name": "UseTimezoneGeneratedType",
            "description": "Returns the time zone of the checkout, and automatically re-renders\nyour component if the time zone changes.",
            "params": [],
            "returns": {
              "filePath": "/hooks/timezone.ts",
              "description": "",
              "name": "\"Africa/Abidjan\" | \"Africa/Algiers\" | \"Africa/Bissau\" | \"Africa/Cairo\" | \"Africa/Casablanca\" | \"Africa/Ceuta\" | \"Africa/El_Aaiun\" | \"Africa/Johannesburg\" | \"Africa/Juba\" | \"Africa/Khartoum\" | \"Africa/Lagos\" | \"Africa/Maputo\" | \"Africa/Monrovia\" | \"Africa/Nairobi\" | \"Africa/Ndjamena\" | \"Africa/Sao_Tome\" | \"Africa/Tripoli\" | \"Africa/Tunis\" | \"Africa/Windhoek\" | \"America/Adak\" | \"America/Anchorage\" | \"America/Araguaina\" | \"America/Argentina/Buenos_Aires\" | \"America/Argentina/Catamarca\" | \"America/Argentina/Cordoba\" | \"America/Argentina/Jujuy\" | \"America/Argentina/La_Rioja\" | \"America/Argentina/Mendoza\" | \"America/Argentina/Rio_Gallegos\" | \"America/Argentina/Salta\" | \"America/Argentina/San_Juan\" | \"America/Argentina/San_Luis\" | \"America/Argentina/Tucuman\" | \"America/Argentina/Ushuaia\" | \"America/Asuncion\" | \"America/Bahia\" | \"America/Bahia_Banderas\" | \"America/Barbados\" | \"America/Belem\" | \"America/Belize\" | \"America/Boa_Vista\" | \"America/Bogota\" | \"America/Boise\" | \"America/Cambridge_Bay\" | \"America/Campo_Grande\" | \"America/Cancun\" | \"America/Caracas\" | \"America/Cayenne\" | \"America/Chicago\" | \"America/Chihuahua\" | \"America/Costa_Rica\" | \"America/Cuiaba\" | \"America/Danmarkshavn\" | \"America/Dawson\" | \"America/Dawson_Creek\" | \"America/Denver\" | \"America/Detroit\" | \"America/Edmonton\" | \"America/Eirunepe\" | \"America/El_Salvador\" | \"America/Fort_Nelson\" | \"America/Fortaleza\" | \"America/Glace_Bay\" | \"America/Goose_Bay\" | \"America/Grand_Turk\" | \"America/Guatemala\" | \"America/Guayaquil\" | \"America/Guyana\" | \"America/Halifax\" | \"America/Havana\" | \"America/Hermosillo\" | \"America/Indiana/Indianapolis\" | \"America/Indiana/Knox\" | \"America/Indiana/Marengo\" | \"America/Indiana/Petersburg\" | \"America/Indiana/Tell_City\" | \"America/Indiana/Vevay\" | \"America/Indiana/Vincennes\" | \"America/Indiana/Winamac\" | \"America/Inuvik\" | \"America/Iqaluit\" | \"America/Jamaica\" | \"America/Juneau\" | \"America/Kentucky/Louisville\" | \"America/Kentucky/Monticello\" | \"America/La_Paz\" | \"America/Lima\" | \"America/Los_Angeles\" | \"America/Maceio\" | \"America/Managua\" | \"America/Manaus\" | \"America/Martinique\" | \"America/Matamoros\" | \"America/Mazatlan\" | \"America/Menominee\" | \"America/Merida\" | \"America/Metlakatla\" | \"America/Mexico_City\" | \"America/Miquelon\" | \"America/Moncton\" | \"America/Monterrey\" | \"America/Montevideo\" | \"America/New_York\" | \"America/Nipigon\" | \"America/Nome\" | \"America/Noronha\" | \"America/North_Dakota/Beulah\" | \"America/North_Dakota/Center\" | \"America/North_Dakota/New_Salem\" | \"America/Nuuk\" | \"America/Ojinaga\" | \"America/Panama\" | \"America/Pangnirtung\" | \"America/Paramaribo\" | \"America/Phoenix\" | \"America/Port-au-Prince\" | \"America/Porto_Velho\" | \"America/Puerto_Rico\" | \"America/Punta_Arenas\" | \"America/Rainy_River\" | \"America/Rankin_Inlet\" | \"America/Recife\" | \"America/Regina\" | \"America/Resolute\" | \"America/Rio_Branco\" | \"America/Santarem\" | \"America/Santiago\" | \"America/Santo_Domingo\" | \"America/Sao_Paulo\" | \"America/Scoresbysund\" | \"America/Sitka\" | \"America/St_Johns\" | \"America/Swift_Current\" | \"America/Tegucigalpa\" | \"America/Thule\" | \"America/Thunder_Bay\" | \"America/Tijuana\" | \"America/Toronto\" | \"America/Vancouver\" | \"America/Whitehorse\" | \"America/Winnipeg\" | \"America/Yakutat\" | \"America/Yellowknife\" | \"Antarctica/Casey\" | \"Antarctica/Davis\" | \"Antarctica/Macquarie\" | \"Antarctica/Mawson\" | \"Antarctica/Palmer\" | \"Antarctica/Rothera\" | \"Antarctica/Troll\" | \"Antarctica/Vostok\" | \"Asia/Almaty\" | \"Asia/Amman\" | \"Asia/Anadyr\" | \"Asia/Aqtau\" | \"Asia/Aqtobe\" | \"Asia/Ashgabat\" | \"Asia/Atyrau\" | \"Asia/Baghdad\" | \"Asia/Baku\" | \"Asia/Bangkok\" | \"Asia/Barnaul\" | \"Asia/Beirut\" | \"Asia/Bishkek\" | \"Asia/Brunei\" | \"Asia/Chita\" | \"Asia/Choibalsan\" | \"Asia/Colombo\" | \"Asia/Damascus\" | \"Asia/Dhaka\" | \"Asia/Dili\" | \"Asia/Dubai\" | \"Asia/Dushanbe\" | \"Asia/Famagusta\" | \"Asia/Gaza\" | \"Asia/Hebron\" | \"Asia/Ho_Chi_Minh\" | \"Asia/Hong_Kong\" | \"Asia/Hovd\" | \"Asia/Irkutsk\" | \"Asia/Jakarta\" | \"Asia/Jayapura\" | \"Asia/Jerusalem\" | \"Asia/Kabul\" | \"Asia/Kamchatka\" | \"Asia/Karachi\" | \"Asia/Kathmandu\" | \"Asia/Khandyga\" | \"Asia/Kolkata\" | \"Asia/Krasnoyarsk\" | \"Asia/Kuala_Lumpur\" | \"Asia/Kuching\" | \"Asia/Macau\" | \"Asia/Magadan\" | \"Asia/Makassar\" | \"Asia/Manila\" | \"Asia/Nicosia\" | \"Asia/Novokuznetsk\" | \"Asia/Novosibirsk\" | \"Asia/Omsk\" | \"Asia/Oral\" | \"Asia/Pontianak\" | \"Asia/Pyongyang\" | \"Asia/Qatar\" | \"Asia/Qostanay\" | \"Asia/Qyzylorda\" | \"Asia/Riyadh\" | \"Asia/Sakhalin\" | \"Asia/Samarkand\" | \"Asia/Seoul\" | \"Asia/Shanghai\" | \"Asia/Singapore\" | \"Asia/Srednekolymsk\" | \"Asia/Taipei\" | \"Asia/Tashkent\" | \"Asia/Tbilisi\" | \"Asia/Tehran\" | \"Asia/Thimphu\" | \"Asia/Tokyo\" | \"Asia/Tomsk\" | \"Asia/Ulaanbaatar\" | \"Asia/Urumqi\" | \"Asia/Ust-Nera\" | \"Asia/Vladivostok\" | \"Asia/Yakutsk\" | \"Asia/Yangon\" | \"Asia/Yekaterinburg\" | \"Asia/Yerevan\" | \"Atlantic/Azores\" | \"Atlantic/Bermuda\" | \"Atlantic/Canary\" | \"Atlantic/Cape_Verde\" | \"Atlantic/Faroe\" | \"Atlantic/Madeira\" | \"Atlantic/Reykjavik\" | \"Atlantic/South_Georgia\" | \"Atlantic/Stanley\" | \"Australia/Adelaide\" | \"Australia/Brisbane\" | \"Australia/Broken_Hill\" | \"Australia/Darwin\" | \"Australia/Eucla\" | \"Australia/Hobart\" | \"Australia/Lindeman\" | \"Australia/Lord_Howe\" | \"Australia/Melbourne\" | \"Australia/Perth\" | \"Australia/Sydney\" | \"CET\" | \"CST6CDT\" | \"EET\" | \"EST\" | \"EST5EDT\" | \"Etc/GMT\" | \"Etc/GMT-1\" | \"Etc/GMT-10\" | \"Etc/GMT-11\" | \"Etc/GMT-12\" | \"Etc/GMT-13\" | \"Etc/GMT-14\" | \"Etc/GMT-2\" | \"Etc/GMT-3\" | \"Etc/GMT-4\" | \"Etc/GMT-5\" | \"Etc/GMT-6\" | \"Etc/GMT-7\" | \"Etc/GMT-8\" | \"Etc/GMT-9\" | \"Etc/GMT+1\" | \"Etc/GMT+10\" | \"Etc/GMT+11\" | \"Etc/GMT+12\" | \"Etc/GMT+2\" | \"Etc/GMT+3\" | \"Etc/GMT+4\" | \"Etc/GMT+5\" | \"Etc/GMT+6\" | \"Etc/GMT+7\" | \"Etc/GMT+8\" | \"Etc/GMT+9\" | \"Etc/UTC\" | \"Europe/Amsterdam\" | \"Europe/Andorra\" | \"Europe/Astrakhan\" | \"Europe/Athens\" | \"Europe/Belgrade\" | \"Europe/Berlin\" | \"Europe/Brussels\" | \"Europe/Bucharest\" | \"Europe/Budapest\" | \"Europe/Chisinau\" | \"Europe/Copenhagen\" | \"Europe/Dublin\" | \"Europe/Gibraltar\" | \"Europe/Helsinki\" | \"Europe/Istanbul\" | \"Europe/Kaliningrad\" | \"Europe/Kiev\" | \"Europe/Kirov\" | \"Europe/Lisbon\" | \"Europe/London\" | \"Europe/Luxembourg\" | \"Europe/Madrid\" | \"Europe/Malta\" | \"Europe/Minsk\" | \"Europe/Monaco\" | \"Europe/Moscow\" | \"Europe/Oslo\" | \"Europe/Paris\" | \"Europe/Prague\" | \"Europe/Riga\" | \"Europe/Rome\" | \"Europe/Samara\" | \"Europe/Saratov\" | \"Europe/Simferopol\" | \"Europe/Sofia\" | \"Europe/Stockholm\" | \"Europe/Tallinn\" | \"Europe/Tirane\" | \"Europe/Ulyanovsk\" | \"Europe/Uzhgorod\" | \"Europe/Vienna\" | \"Europe/Vilnius\" | \"Europe/Volgograd\" | \"Europe/Warsaw\" | \"Europe/Zaporozhye\" | \"Europe/Zurich\" | \"HST\" | \"Indian/Chagos\" | \"Indian/Christmas\" | \"Indian/Cocos\" | \"Indian/Kerguelen\" | \"Indian/Mahe\" | \"Indian/Maldives\" | \"Indian/Mauritius\" | \"Indian/Reunion\" | \"MET\" | \"MST\" | \"MST7MDT\" | \"Pacific/Apia\" | \"Pacific/Auckland\" | \"Pacific/Bougainville\" | \"Pacific/Chatham\" | \"Pacific/Chuuk\" | \"Pacific/Easter\" | \"Pacific/Efate\" | \"Pacific/Fakaofo\" | \"Pacific/Fiji\" | \"Pacific/Funafuti\" | \"Pacific/Galapagos\" | \"Pacific/Gambier\" | \"Pacific/Guadalcanal\" | \"Pacific/Guam\" | \"Pacific/Honolulu\" | \"Pacific/Kanton\" | \"Pacific/Kiritimati\" | \"Pacific/Kosrae\" | \"Pacific/Kwajalein\" | \"Pacific/Majuro\" | \"Pacific/Marquesas\" | \"Pacific/Nauru\" | \"Pacific/Niue\" | \"Pacific/Norfolk\" | \"Pacific/Noumea\" | \"Pacific/Pago_Pago\" | \"Pacific/Palau\" | \"Pacific/Pitcairn\" | \"Pacific/Pohnpei\" | \"Pacific/Port_Moresby\" | \"Pacific/Rarotonga\" | \"Pacific/Tahiti\" | \"Pacific/Tarawa\" | \"Pacific/Tongatapu\" | \"Pacific/Wake\" | \"Pacific/Wallis\" | \"PST8PDT\" | \"WET\"",
              "value": "\"Africa/Abidjan\" | \"Africa/Algiers\" | \"Africa/Bissau\" | \"Africa/Cairo\" | \"Africa/Casablanca\" | \"Africa/Ceuta\" | \"Africa/El_Aaiun\" | \"Africa/Johannesburg\" | \"Africa/Juba\" | \"Africa/Khartoum\" | \"Africa/Lagos\" | \"Africa/Maputo\" | \"Africa/Monrovia\" | \"Africa/Nairobi\" | \"Africa/Ndjamena\" | \"Africa/Sao_Tome\" | \"Africa/Tripoli\" | \"Africa/Tunis\" | \"Africa/Windhoek\" | \"America/Adak\" | \"America/Anchorage\" | \"America/Araguaina\" | \"America/Argentina/Buenos_Aires\" | \"America/Argentina/Catamarca\" | \"America/Argentina/Cordoba\" | \"America/Argentina/Jujuy\" | \"America/Argentina/La_Rioja\" | \"America/Argentina/Mendoza\" | \"America/Argentina/Rio_Gallegos\" | \"America/Argentina/Salta\" | \"America/Argentina/San_Juan\" | \"America/Argentina/San_Luis\" | \"America/Argentina/Tucuman\" | \"America/Argentina/Ushuaia\" | \"America/Asuncion\" | \"America/Bahia\" | \"America/Bahia_Banderas\" | \"America/Barbados\" | \"America/Belem\" | \"America/Belize\" | \"America/Boa_Vista\" | \"America/Bogota\" | \"America/Boise\" | \"America/Cambridge_Bay\" | \"America/Campo_Grande\" | \"America/Cancun\" | \"America/Caracas\" | \"America/Cayenne\" | \"America/Chicago\" | \"America/Chihuahua\" | \"America/Costa_Rica\" | \"America/Cuiaba\" | \"America/Danmarkshavn\" | \"America/Dawson\" | \"America/Dawson_Creek\" | \"America/Denver\" | \"America/Detroit\" | \"America/Edmonton\" | \"America/Eirunepe\" | \"America/El_Salvador\" | \"America/Fort_Nelson\" | \"America/Fortaleza\" | \"America/Glace_Bay\" | \"America/Goose_Bay\" | \"America/Grand_Turk\" | \"America/Guatemala\" | \"America/Guayaquil\" | \"America/Guyana\" | \"America/Halifax\" | \"America/Havana\" | \"America/Hermosillo\" | \"America/Indiana/Indianapolis\" | \"America/Indiana/Knox\" | \"America/Indiana/Marengo\" | \"America/Indiana/Petersburg\" | \"America/Indiana/Tell_City\" | \"America/Indiana/Vevay\" | \"America/Indiana/Vincennes\" | \"America/Indiana/Winamac\" | \"America/Inuvik\" | \"America/Iqaluit\" | \"America/Jamaica\" | \"America/Juneau\" | \"America/Kentucky/Louisville\" | \"America/Kentucky/Monticello\" | \"America/La_Paz\" | \"America/Lima\" | \"America/Los_Angeles\" | \"America/Maceio\" | \"America/Managua\" | \"America/Manaus\" | \"America/Martinique\" | \"America/Matamoros\" | \"America/Mazatlan\" | \"America/Menominee\" | \"America/Merida\" | \"America/Metlakatla\" | \"America/Mexico_City\" | \"America/Miquelon\" | \"America/Moncton\" | \"America/Monterrey\" | \"America/Montevideo\" | \"America/New_York\" | \"America/Nipigon\" | \"America/Nome\" | \"America/Noronha\" | \"America/North_Dakota/Beulah\" | \"America/North_Dakota/Center\" | \"America/North_Dakota/New_Salem\" | \"America/Nuuk\" | \"America/Ojinaga\" | \"America/Panama\" | \"America/Pangnirtung\" | \"America/Paramaribo\" | \"America/Phoenix\" | \"America/Port-au-Prince\" | \"America/Porto_Velho\" | \"America/Puerto_Rico\" | \"America/Punta_Arenas\" | \"America/Rainy_River\" | \"America/Rankin_Inlet\" | \"America/Recife\" | \"America/Regina\" | \"America/Resolute\" | \"America/Rio_Branco\" | \"America/Santarem\" | \"America/Santiago\" | \"America/Santo_Domingo\" | \"America/Sao_Paulo\" | \"America/Scoresbysund\" | \"America/Sitka\" | \"America/St_Johns\" | \"America/Swift_Current\" | \"America/Tegucigalpa\" | \"America/Thule\" | \"America/Thunder_Bay\" | \"America/Tijuana\" | \"America/Toronto\" | \"America/Vancouver\" | \"America/Whitehorse\" | \"America/Winnipeg\" | \"America/Yakutat\" | \"America/Yellowknife\" | \"Antarctica/Casey\" | \"Antarctica/Davis\" | \"Antarctica/Macquarie\" | \"Antarctica/Mawson\" | \"Antarctica/Palmer\" | \"Antarctica/Rothera\" | \"Antarctica/Troll\" | \"Antarctica/Vostok\" | \"Asia/Almaty\" | \"Asia/Amman\" | \"Asia/Anadyr\" | \"Asia/Aqtau\" | \"Asia/Aqtobe\" | \"Asia/Ashgabat\" | \"Asia/Atyrau\" | \"Asia/Baghdad\" | \"Asia/Baku\" | \"Asia/Bangkok\" | \"Asia/Barnaul\" | \"Asia/Beirut\" | \"Asia/Bishkek\" | \"Asia/Brunei\" | \"Asia/Chita\" | \"Asia/Choibalsan\" | \"Asia/Colombo\" | \"Asia/Damascus\" | \"Asia/Dhaka\" | \"Asia/Dili\" | \"Asia/Dubai\" | \"Asia/Dushanbe\" | \"Asia/Famagusta\" | \"Asia/Gaza\" | \"Asia/Hebron\" | \"Asia/Ho_Chi_Minh\" | \"Asia/Hong_Kong\" | \"Asia/Hovd\" | \"Asia/Irkutsk\" | \"Asia/Jakarta\" | \"Asia/Jayapura\" | \"Asia/Jerusalem\" | \"Asia/Kabul\" | \"Asia/Kamchatka\" | \"Asia/Karachi\" | \"Asia/Kathmandu\" | \"Asia/Khandyga\" | \"Asia/Kolkata\" | \"Asia/Krasnoyarsk\" | \"Asia/Kuala_Lumpur\" | \"Asia/Kuching\" | \"Asia/Macau\" | \"Asia/Magadan\" | \"Asia/Makassar\" | \"Asia/Manila\" | \"Asia/Nicosia\" | \"Asia/Novokuznetsk\" | \"Asia/Novosibirsk\" | \"Asia/Omsk\" | \"Asia/Oral\" | \"Asia/Pontianak\" | \"Asia/Pyongyang\" | \"Asia/Qatar\" | \"Asia/Qostanay\" | \"Asia/Qyzylorda\" | \"Asia/Riyadh\" | \"Asia/Sakhalin\" | \"Asia/Samarkand\" | \"Asia/Seoul\" | \"Asia/Shanghai\" | \"Asia/Singapore\" | \"Asia/Srednekolymsk\" | \"Asia/Taipei\" | \"Asia/Tashkent\" | \"Asia/Tbilisi\" | \"Asia/Tehran\" | \"Asia/Thimphu\" | \"Asia/Tokyo\" | \"Asia/Tomsk\" | \"Asia/Ulaanbaatar\" | \"Asia/Urumqi\" | \"Asia/Ust-Nera\" | \"Asia/Vladivostok\" | \"Asia/Yakutsk\" | \"Asia/Yangon\" | \"Asia/Yekaterinburg\" | \"Asia/Yerevan\" | \"Atlantic/Azores\" | \"Atlantic/Bermuda\" | \"Atlantic/Canary\" | \"Atlantic/Cape_Verde\" | \"Atlantic/Faroe\" | \"Atlantic/Madeira\" | \"Atlantic/Reykjavik\" | \"Atlantic/South_Georgia\" | \"Atlantic/Stanley\" | \"Australia/Adelaide\" | \"Australia/Brisbane\" | \"Australia/Broken_Hill\" | \"Australia/Darwin\" | \"Australia/Eucla\" | \"Australia/Hobart\" | \"Australia/Lindeman\" | \"Australia/Lord_Howe\" | \"Australia/Melbourne\" | \"Australia/Perth\" | \"Australia/Sydney\" | \"CET\" | \"CST6CDT\" | \"EET\" | \"EST\" | \"EST5EDT\" | \"Etc/GMT\" | \"Etc/GMT-1\" | \"Etc/GMT-10\" | \"Etc/GMT-11\" | \"Etc/GMT-12\" | \"Etc/GMT-13\" | \"Etc/GMT-14\" | \"Etc/GMT-2\" | \"Etc/GMT-3\" | \"Etc/GMT-4\" | \"Etc/GMT-5\" | \"Etc/GMT-6\" | \"Etc/GMT-7\" | \"Etc/GMT-8\" | \"Etc/GMT-9\" | \"Etc/GMT+1\" | \"Etc/GMT+10\" | \"Etc/GMT+11\" | \"Etc/GMT+12\" | \"Etc/GMT+2\" | \"Etc/GMT+3\" | \"Etc/GMT+4\" | \"Etc/GMT+5\" | \"Etc/GMT+6\" | \"Etc/GMT+7\" | \"Etc/GMT+8\" | \"Etc/GMT+9\" | \"Etc/UTC\" | \"Europe/Amsterdam\" | \"Europe/Andorra\" | \"Europe/Astrakhan\" | \"Europe/Athens\" | \"Europe/Belgrade\" | \"Europe/Berlin\" | \"Europe/Brussels\" | \"Europe/Bucharest\" | \"Europe/Budapest\" | \"Europe/Chisinau\" | \"Europe/Copenhagen\" | \"Europe/Dublin\" | \"Europe/Gibraltar\" | \"Europe/Helsinki\" | \"Europe/Istanbul\" | \"Europe/Kaliningrad\" | \"Europe/Kiev\" | \"Europe/Kirov\" | \"Europe/Lisbon\" | \"Europe/London\" | \"Europe/Luxembourg\" | \"Europe/Madrid\" | \"Europe/Malta\" | \"Europe/Minsk\" | \"Europe/Monaco\" | \"Europe/Moscow\" | \"Europe/Oslo\" | \"Europe/Paris\" | \"Europe/Prague\" | \"Europe/Riga\" | \"Europe/Rome\" | \"Europe/Samara\" | \"Europe/Saratov\" | \"Europe/Simferopol\" | \"Europe/Sofia\" | \"Europe/Stockholm\" | \"Europe/Tallinn\" | \"Europe/Tirane\" | \"Europe/Ulyanovsk\" | \"Europe/Uzhgorod\" | \"Europe/Vienna\" | \"Europe/Vilnius\" | \"Europe/Volgograd\" | \"Europe/Warsaw\" | \"Europe/Zaporozhye\" | \"Europe/Zurich\" | \"HST\" | \"Indian/Chagos\" | \"Indian/Christmas\" | \"Indian/Cocos\" | \"Indian/Kerguelen\" | \"Indian/Mahe\" | \"Indian/Maldives\" | \"Indian/Mauritius\" | \"Indian/Reunion\" | \"MET\" | \"MST\" | \"MST7MDT\" | \"Pacific/Apia\" | \"Pacific/Auckland\" | \"Pacific/Bougainville\" | \"Pacific/Chatham\" | \"Pacific/Chuuk\" | \"Pacific/Easter\" | \"Pacific/Efate\" | \"Pacific/Fakaofo\" | \"Pacific/Fiji\" | \"Pacific/Funafuti\" | \"Pacific/Galapagos\" | \"Pacific/Gambier\" | \"Pacific/Guadalcanal\" | \"Pacific/Guam\" | \"Pacific/Honolulu\" | \"Pacific/Kanton\" | \"Pacific/Kiritimati\" | \"Pacific/Kosrae\" | \"Pacific/Kwajalein\" | \"Pacific/Majuro\" | \"Pacific/Marquesas\" | \"Pacific/Nauru\" | \"Pacific/Niue\" | \"Pacific/Norfolk\" | \"Pacific/Noumea\" | \"Pacific/Pago_Pago\" | \"Pacific/Palau\" | \"Pacific/Pitcairn\" | \"Pacific/Pohnpei\" | \"Pacific/Port_Moresby\" | \"Pacific/Rarotonga\" | \"Pacific/Tahiti\" | \"Pacific/Tarawa\" | \"Pacific/Tongatapu\" | \"Pacific/Wake\" | \"Pacific/Wallis\" | \"PST8PDT\" | \"WET\""
            },
            "value": "export function useTimezone<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): Timezone {\n  const {localization} = useApi<ID>();\n\n  return useSubscription(localization.timezone);\n}"
          }
        }
      }
    ],
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "useTranslate",
    "description": "Returns the `I18nTranslate` interface used to translate strings.",
    "isVisualComponent": false,
    "type": "hook",
    "category": "React Hooks",
    "subCategory": "Localization",
    "definitions": [
      {
        "title": "",
        "description": "",
        "type": "UseTranslateGeneratedType",
        "typeDefinitions": {
          "UseTranslateGeneratedType": {
            "filePath": "/hooks/translate.ts",
            "name": "UseTranslateGeneratedType",
            "description": "Returns the `I18nTranslate` interface used to translate strings.",
            "params": [],
            "returns": {
              "filePath": "/hooks/translate.ts",
              "description": "",
              "name": "I18nTranslate",
              "value": "I18nTranslate"
            },
            "value": "export function useTranslate<\n  ID extends RenderExtensionPoint = RenderExtensionPoint,\n>(): I18nTranslate {\n  const {i18n} = useApi<ID>();\n\n  const translate = useCallback<I18nTranslate>(\n    (...args) => {\n      const translation = i18n.translate(...args);\n\n      if (!Array.isArray(translation)) {\n        return translation as any;\n      }\n\n      return translation.map((part, index) => {\n        if (isValidElement(part)) {\n          // eslint-disable-next-line react/no-array-index-key\n          return cloneElement(part as RemoteComponentType<any>, {key: index});\n        }\n        return part;\n      });\n    },\n    [i18n],\n  );\n\n  return translate;\n}"
          },
          "I18nTranslate": {
            "filePath": "/api/standard/standard.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "I18nTranslate",
            "value": "(\n  key: string,\n  options?: {[placeholderKey: string]: ReplacementType | string | number},\n) => ReplacementType extends string | number\n  ? string\n  : (string | ReplacementType)[]",
            "description": "This returns a translated string matching a key in a locale file."
          }
        }
      }
    ],
    "defaultExample": {
      "description": "\nDefine strings in JSON files for each locale and render them using `translate()`.\nSee [localizing UI extensions](/docs/apps/checkout/best-practices/localizing-ui-extensions) for more information.\n      ",
      "codeblock": {
        "title": "Translating strings",
        "tabs": [
          {
            "code": "/* See the locales/en.default.json tab for the translation keys and values for this example */\nimport React from 'react';\nimport {\n  render,\n  Text,\n  useTranslate,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const translate = useTranslate();\n  return (\n    <Text>{translate('welcomeMessage')}</Text>\n  );\n}\n",
            "language": "jsx",
            "title": "React"
          },
          {
            "code": "{\n  \"welcomeMessage\": \"Welcome to our store!\"\n}\n",
            "language": "json",
            "title": "locales/en.default.json"
          }
        ]
      }
    },
    "examples": {
      "description": "",
      "examples": [
        {
          "description": "\nYou can use the `count` option to get a pluralized string based on the current locale.\nSee [localizing UI extensions](/docs/apps/checkout/best-practices/localizing-ui-extensions) for more information.\n      ",
          "codeblock": {
            "title": "Translating strings with pluralization",
            "tabs": [
              {
                "code": "/* See the locales/en.default.json tab for the translation keys and values for this example */\nimport React from 'react';\nimport {\n  render,\n  Banner,\n  useApi,\n  useTranslate,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <Extension />\n));\n\nfunction Extension() {\n  const {i18n} = useApi();\n  const translate = useTranslate();\n\n  const points = 10000;\n  const formattedPoints =\n    i18n.formatNumber(points);\n  // Translate the loyalty points message, using pluralization to differentiate messages\n  const loyaltyPointsMsg = translate(\n    'loyaltyPoints',\n    {\n      count: points,\n      formattedPoints,\n    },\n  );\n\n  return <Banner title={loyaltyPointsMsg} />;\n}\n",
                "language": "jsx",
                "title": "React"
              },
              {
                "code": "{\n  \"loyaltyPoints\": {\n    \"one\": \"You have {{formattedPoints}} loyalty point\",\n    \"other\": \"You have {{formattedPoints}} loyalty points\"\n  }\n}\n",
                "language": "json",
                "title": "locales/en.default.json"
              }
            ]
          }
        }
      ]
    },
    "related": [
      {
        "name": "StandardApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
        "type": "StandardApi"
      },
      {
        "name": "CheckoutApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/checkoutapi",
        "type": "CheckoutApi"
      },
      {
        "name": "OrderStatusApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/orderstatusapi",
        "type": "OrderStatusApi"
      },
      {
        "name": "CartLineDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/cartlinedetailsapi",
        "type": "CartLineDetailsApi"
      },
      {
        "name": "PickupPointsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuppointsapi",
        "type": "PickupPointsApi"
      },
      {
        "name": "PickupLocationsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/pickuplocationsapi",
        "type": "PickupLocationsApi"
      },
      {
        "name": "ShippingMethodDetailsApi",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/shippingmethoddetailsapi",
        "type": "ShippingMethodDetailsApi"
      },
      {
        "name": "ExtensionPoints",
        "subtitle": "APIs",
        "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
        "type": "ExtensionPoints"
      }
    ]
  },
  {
    "name": "Banner",
    "description": "Use banners to communicate important messages to customers in a prominent way.",
    "isVisualComponent": true,
    "thumbnail": "banner-thumbnail.png",
    "requires": "",
    "type": "",
    "definitions": [
      {
        "title": "BannerProps",
        "description": "",
        "type": "BannerProps",
        "typeDefinitions": {
          "BannerProps": {
            "filePath": "/components/Banner/Banner.ts",
            "name": "BannerProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Banner/Banner.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "Banners have an optional title. Use a title to grab the buyer’s attention\nwith a short, concise message. Banners with no title should have child elements\nto convey the banner’s purpose to the buyer.",
                "isOptional": true
              },
              {
                "filePath": "/components/Banner/Banner.ts",
                "syntaxKind": "PropertySignature",
                "name": "status",
                "value": "Status",
                "description": "Sets the status of the banner.",
                "isOptional": true,
                "defaultValue": "'info'"
              },
              {
                "filePath": "/components/Banner/Banner.ts",
                "syntaxKind": "PropertySignature",
                "name": "collapsible",
                "value": "boolean",
                "description": "Makes the content collapsible. A collapsible banner will conceal child\nelements initially, but allow the user to expand the banner to see them.",
                "isOptional": true,
                "defaultValue": "false"
              },
              {
                "filePath": "/components/Banner/Banner.ts",
                "syntaxKind": "MethodSignature",
                "name": "onDismiss",
                "value": "() => void",
                "description": "Callback when banner is dismissed. This component is\n[controlled](https://reactjs.org/docs/forms.html#controlled-components),\nso you must manage the visibility of the banner in state by using\nthe onDismiss callback.",
                "isOptional": true
              },
              {
                "filePath": "/components/Banner/Banner.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface BannerProps extends IdProps {\n  /**\n   * Banners have an optional title. Use a title to grab the buyer’s attention\n   * with a short, concise message. Banners with no title should have child elements\n   * to convey the banner’s purpose to the buyer.\n   */\n  title?: string;\n  /**\n   * Sets the status of the banner.\n   *\n   * @defaultValue 'info'\n   */\n  status?: Status;\n  /**\n   * Makes the content collapsible. A collapsible banner will conceal child\n   * elements initially, but allow the user to expand the banner to see them.\n   *\n   * @defaultValue false\n   */\n  collapsible?: boolean;\n  /**\n   * Callback when banner is dismissed. This component is\n   * [controlled](https://reactjs.org/docs/forms.html#controlled-components),\n   * so you must manage the visibility of the banner in state by using\n   * the onDismiss callback.\n   */\n  onDismiss?(): void;\n}"
          },
          "Status": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Status",
            "value": "'info' | 'success' | 'warning' | 'critical'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Feedback",
    "defaultExample": {
      "image": "banner-default.png",
      "codeblock": {
        "title": "Basic Banner",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Banner} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Banner\n      status=\"critical\"\n      title=\"Your payment details couldn’t be verified. Check your card details and try again.\"\n    />\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Banner} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const banner = root.createComponent(Banner, {\n    status: 'critical',\n    title:\n      'Your payment details couldn’t be verified. Check your card details and try again.',\n  });\n\n  root.appendChild(banner);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Use banners thoughtfully and sparingly, and only for the most important information. Too many banners distract customers from completing checkout.\n\n- Banners are typically displayed at the top of a page or a section, if they relate to specific content. Place banners below the relevant page or section header.\n\n- Include a Button component with next steps when possible.\n\n- Make banners dismissible, unless they contain critical information or an important step that customers need to take.\n\n- Use the `info` banner to update customers about a change or to give them advice.\n\n- Use the `warning` banner to display information that needs attention or that customers need to take action on. Warning banners can be stressful for customers, so be cautious about using them.\n\n- Use the `critical` banner to communicate problems that customers need to resolve immediately to complete checkout."
      },
      {
        "type": "Generic",
        "anchorLink": "status",
        "title": "Status",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"info\"</code> | Convey general information or actions that aren’t critical or tied to a particular action.. |\n| <code>\"success\"</code> | Use rarely, only if you need additional visual confirmation that a non-standard action has been completed successfully, for example adding an item to an order as an upsell. |\n| <code>\"warning\"</code> | Display information that needs attention or that customers should take action on. Seeing these banners can be stressful for customers so be cautious about using them. Should not block progress to next step. |\n| <code>\"critical\"</code> | Communicate problems that have to be resolved immediately for customers to complete a task. For example, using a different payment method if card details couldn’t be processed. Seeing these banners can be stressful for customers so be cautious about using them. |"
      }
    ],
    "related": []
  },
  {
    "name": "BlockLayout",
    "description": "BlockLayout is used to lay out content over multiple rows.\n\nBy default, all rows fill the available block space, sharing it equally.",
    "thumbnail": "blocklayout-thumbnail.png",
    "isVisualComponent": true,
    "requires": "",
    "type": "",
    "definitions": [
      {
        "title": "BlockLayoutProps",
        "description": "",
        "type": "BlockLayoutProps",
        "typeDefinitions": {
          "BlockLayoutProps": {
            "filePath": "/components/BlockLayout/BlockLayout.ts",
            "name": "BlockLayoutProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "rows",
                "value": "MaybeResponsiveConditionalStyle<Rows>",
                "description": "Sizes for each row of the layout.\n\n\n`auto`: intrinsic size of the element.\n\n`fill`: fills the remaining available space. When multiple elements are set to `fill`, the remaining space is shared equally.\n\n`` `${number}%` ``: size in percentages.\n\n`` `${number}fr` ``: size in fractions.\n\n`number`: size in pixels.\n\n\n- When the sum of the defined sizes is larger than the available space, elements will shrink to avoid overflow.\n\n- When the size of an element is not explicitly set, it will fill the remaining space available.\n\n- When only one size is set and outside of an array, all elements of the layout will take that size.",
                "isOptional": true,
                "defaultValue": "'fill'"
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "spacing",
                "value": "MaybeResponsiveConditionalStyle<Spacing | [Spacing, Spacing]>",
                "description": "Adjust spacing between children.\n\n- `base` means the space between rows and columns is `base`.\n\n- [`base`, `none`] means the space between rows is `base`, space between columns is `none`.",
                "isOptional": true,
                "defaultValue": "'none'"
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "blockAlignment",
                "value": "MaybeResponsiveConditionalStyle<BlockAlignment>",
                "description": "Position children along the cross axis.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineAlignment",
                "value": "MaybeResponsiveConditionalStyle<InlineAlignment>",
                "description": "Position children along the main axis.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityRole",
                "value": "ViewLikeAccessibilityRole",
                "description": "Sets the semantic meaning of the component’s content. When set,\nthe role will be used by assistive technologies to help buyers\nnavigate the page.\n\n\nFor example:\n\n- In an HTML host a `['listItem', 'separator']` tuple will render: `<li role='separator'>`\n\n- In an HTML host a `listItem` string will render: `<li>`",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label that describes the purpose or contents of the element. When set,\nit will be announced to buyers using assistive technologies and will\nprovide them with more context.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "overflow",
                "value": "\"hidden\" | \"visible\"",
                "description": "Sets the overflow behavior of the element.\n\n`hidden`: clips the content when it is larger than the element’s container.\nThe element will not be scrollable and the users will not be able\nto access the clipped content by dragging or using a scroll wheel.\n\n`visible`: the content that extends beyond the element’s container is visible.",
                "isOptional": true,
                "defaultValue": "'visible'"
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "border",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<BorderStyle>>",
                "description": "Adjust the border style.\n\nTo shorten the code, it is possible to specify all the border style properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border styles are `base`\n\n- `['base', 'none']` means blockStart and blockEnd border styles are `base`, inlineStart and inlineEnd border styles are `none`\n\n- `['base', 'none', 'dotted', 'base']` means blockStart border style is `base`, inlineEnd border style is `none`, blockEnd border style is `dotted` and  blockStart border style is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderWidth",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<BorderWidth>\n  >",
                "description": "Adjust the border width.\n\nTo shorten the code, it is possible to specify all the border width properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border widths are `base`\n\n- `['base', 'medium']` means blockStart and blockEnd border widths are `base`, inlineStart and inlineEnd border widths are `medium`\n\n- `['base', 'medium', 'medium', 'base']` means blockStart border width is `base`, inlineEnd border width is `medium`, blockEnd border width is `medium` and  blockStart border width is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "",
                "isOptional": true,
                "isPrivate": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "cornerRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "Adjust the corner radius.\n\nProvide a single value to apply the same corner radius to all four corners, two values to apply different corner radii to opposing corners, or four values to apply different corner radii to each individual corner.\n\nFor example:\n\n- `base` means all 4 corner radii are `base`\n\n- `['base', 'none']` means the StartStart and EndEnd corner radii are `base`, StartEnd and EndStart corner radii are `none`.\n   When the context’s language direction is left to right, StartStart and EndEnd corners are the top left and bottom right corners\n   while StartEnd and EndStart corners are the top right and bottom left corners.\n\n- `['base', 'none', 'small', 'base']` means StartStart corner radius is `base`, StartEnd corner radius is `none`, EndEnd corner radius is `small` and  EndStart corner radius is `base`\n\nA `borderRadius` alias is available for this property. When both are specified, `cornerRadius` takes precedence.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "minInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the minimum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "minBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockLayout/BlockLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "padding",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<Spacing>>",
                "description": "Adjust the padding.\n\nTo shorten the code, it is possible to specify all the padding properties in one property.\n\n\nExamples:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart paddings are `base`\n\n- [`base`, `none`] means blockStart and blockEnd paddings are `base`, inlineStart and inlineEnd paddings are `none`\n\n- [`base`, `none`, `large200`, `small200`] means blockStart padding is `base`, inlineEnd padding is `none`, blockEnd padding is `large200` and  blockStart padding is `small200`",
                "isOptional": true
              }
            ],
            "value": "export interface BlockLayoutProps extends Omit<GridProps, 'columns' | 'rows'> {\n  /**\n   * Sizes for each row of the layout.\n   *\n   *\n   * `auto`: intrinsic size of the element.\n   *\n   * `fill`: fills the remaining available space. When multiple elements are set to `fill`, the remaining space is shared equally.\n   *\n   * `` `${number}%` ``: size in percentages.\n   *\n   * `` `${number}fr` ``: size in fractions.\n   *\n   * `number`: size in pixels.\n   *\n   *\n   * - When the sum of the defined sizes is larger than the available space, elements will shrink to avoid overflow.\n   *\n   * - When the size of an element is not explicitly set, it will fill the remaining space available.\n   *\n   * - When only one size is set and outside of an array, all elements of the layout will take that size.\n   *\n   *\n   * @defaultValue 'fill'\n   */\n  rows?: MaybeResponsiveConditionalStyle<Rows>;\n}"
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "Rows": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Rows",
            "value": "GridItemSize[] | GridItemSize",
            "description": ""
          },
          "GridItemSize": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "GridItemSize",
            "value": "'auto' | 'fill' | number | `${number}fr` | `${number}%`",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          },
          "BlockAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BlockAlignment",
            "value": "Alignment | 'baseline'",
            "description": ""
          },
          "Alignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Alignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "InlineAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InlineAlignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "ViewLikeAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ViewLikeAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole | [NonPresentationalAccessibilityRole, NonPresentationalAccessibilityRole]",
            "description": ""
          },
          "NonPresentationalAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NonPresentationalAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole",
            "description": ""
          },
          "MaybeShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeShorthandProperty",
            "value": "T | ShorthandProperty<T>",
            "description": ""
          },
          "ShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShorthandProperty",
            "value": "[T, T] | [T, T, T, T]",
            "description": ""
          },
          "BorderStyle": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderStyle",
            "value": "'base' | 'dotted' | 'none'",
            "description": ""
          },
          "BorderWidth": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderWidth",
            "value": "'base' | 'medium'",
            "description": ""
          },
          "CornerRadius": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadius",
            "value": "'base' | 'small' | 'large' | 'fullyRounded' | 'none' | CornerRadiusDeprecated",
            "description": ""
          },
          "CornerRadiusDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadiusDeprecated",
            "value": "'tight' | 'loose'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Structure",
    "defaultExample": {
      "image": "blocklayout-default.png",
      "codeblock": {
        "title": "Basic BlockLayout",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, BlockLayout, View} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <BlockLayout rows={[60, 'fill']}>\n      <View border=\"base\" padding=\"base\">\n        60\n      </View>\n      <View border=\"base\" padding=\"base\">\n        fill\n      </View>\n    </BlockLayout>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, BlockLayout, View} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const blockLayout = root.createComponent(\n    BlockLayout,\n    {\n      rows: [60, 'fill'],\n    },\n    [\n      root.createComponent(View, {border: 'base', padding: 'base'}, '60'),\n      root.createComponent(View, {border: 'base', padding: 'base'}, 'fill'),\n    ],\n  );\n\n  root.appendChild(blockLayout);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "accessibility-roles",
        "title": "Accessibility roles",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"main\"</code> | Used to indicate the primary content. |\n| <code>\"header\"</code> | Used to indicate the component is a header. |\n| <code>\"footer\"</code> | Used to display information such as copyright information, navigation links, and privacy statements. |\n| <code>\"section\"</code> | Used to indicate a generic section. |\n| <code>\"complementary\"</code> | Used to designate a supporting section that relates to the main content. |\n| <code>\"navigation\"</code> | Used to identify major groups of links used for navigating. |\n| <code>\"orderedList\"</code> | Used to identify a list of ordered items. |\n| <code>\"listItem\"</code> | Used to identify an item inside a list of items. |\n| <code>\"unorderedList\"</code> | Used to identify a list of unordered items. |\n| <code>\"separator\"</code> | Used to indicates the component acts as a divider that separates and distinguishes sections of content. |\n| <code>\"status\"</code> | Used to define a live region containing advisory information for the user that is not important enough to be an alert. |\n| <code>\"alert\"</code> | Used for important, and usually time-sensitive, information. |"
      }
    ],
    "related": []
  },
  {
    "name": "BlockSpacer",
    "description": "BlockSpacer is used to create empty block space, typically when variable spacing is needed between multiple elements.\n\nNote that you should favor BlockStack when spacing between all elements is the same.",
    "isVisualComponent": true,
    "thumbnail": "blockspacer-thumbnail.png",
    "requires": "",
    "type": "",
    "definitions": [
      {
        "title": "BlockSpacerProps",
        "description": "",
        "type": "BlockSpacerProps",
        "typeDefinitions": {
          "BlockSpacerProps": {
            "filePath": "/components/BlockSpacer/BlockSpacer.ts",
            "name": "BlockSpacerProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/BlockSpacer/BlockSpacer.ts",
                "syntaxKind": "PropertySignature",
                "name": "spacing",
                "value": "MaybeResponsiveConditionalStyle<Exclude<Spacing, 'none'>>",
                "description": "Adjust size of the spacer",
                "isOptional": true,
                "defaultValue": "'base'"
              },
              {
                "filePath": "/components/BlockSpacer/BlockSpacer.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface BlockSpacerProps extends IdProps {\n  /**\n   * Adjust size of the spacer\n   *\n   * @defaultValue 'base'\n   **/\n  spacing?: MaybeResponsiveConditionalStyle<Exclude<Spacing, 'none'>>;\n}"
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          }
        }
      },
      {
        "title": "StyleHelper",
        "description": "Style is a helper for authoring conditional values for prop styles.\n\nWrite complex conditional styles based on one or more conditions, such as viewport sizes and interactive states, in a concise and expressive way.",
        "type": "DocsStyle",
        "typeDefinitions": {
          "DocsStyle": {
            "filePath": "/style/style.ts",
            "name": "DocsStyle",
            "description": "",
            "members": [
              {
                "filePath": "/style/style.ts",
                "syntaxKind": "PropertySignature",
                "name": "default",
                "value": "<T>(defaultValue: T) => ConditionalStyle<T, Conditions>",
                "description": ""
              },
              {
                "filePath": "/style/style.ts",
                "syntaxKind": "PropertySignature",
                "name": "when",
                "value": "<T>(conditions: Conditions, value: T) => ConditionalStyle<T, Conditions>",
                "description": ""
              }
            ],
            "value": "export interface DocsStyle {\n  default: <T>(defaultValue: T) => ConditionalStyle<T>;\n  when: <T>(conditions: Conditions, value: T) => ConditionalStyle<T>;\n}"
          },
          "ConditionalStyle": {
            "filePath": "/style/types.ts",
            "name": "ConditionalStyle",
            "description": "",
            "members": [
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "default",
                "value": "T",
                "description": "The default value applied when none of the conditional values\nspecified in `conditionals` are met.",
                "isOptional": true
              },
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "conditionals",
                "value": "ConditionalValue<T, AcceptedConditions>[]",
                "description": "An array of conditional values."
              }
            ],
            "value": "export interface ConditionalStyle<\n  T,\n  AcceptedConditions extends BaseConditions = Conditions,\n> {\n  /**\n   * The default value applied when none of the conditional values\n   * specified in `conditionals` are met.\n   */\n  default?: T;\n  /**\n   * An array of conditional values.\n   */\n  conditionals: ConditionalValue<T, AcceptedConditions>[];\n}"
          },
          "ConditionalValue": {
            "filePath": "/style/types.ts",
            "name": "ConditionalValue",
            "description": "",
            "members": [
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "conditions",
                "value": "AcceptedConditions",
                "description": "The conditions that must be met for the value to be applied. At least one\ncondition must be specified."
              },
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "T",
                "description": "The value that will be applied if the conditions are met."
              }
            ],
            "value": "export interface ConditionalValue<\n  T,\n  AcceptedConditions extends BaseConditions = Conditions,\n> {\n  /**\n   * The conditions that must be met for the value to be applied. At least one\n   * condition must be specified.\n   */\n  conditions: AcceptedConditions;\n  /**\n   * The value that will be applied if the conditions are met.\n   */\n  value: T;\n}"
          },
          "Conditions": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Conditions",
            "value": "Conditions",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Structure",
    "defaultExample": {
      "image": "blockspacer-default.png",
      "codeblock": {
        "title": "Basic BlockSpacer",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, BlockSpacer, View} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <>\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n      <BlockSpacer spacing=\"loose\" />\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n    </>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, BlockSpacer, View} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const blockSpacer = root.createComponent(View, undefined, [\n    root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n    root.createComponent(BlockSpacer, {spacing: 'loose'}),\n    root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n  ]);\n\n  root.appendChild(blockSpacer);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "related": []
  },
  {
    "name": "BlockStack",
    "description": "BlockStack is used to vertically stack elements.",
    "thumbnail": "blockstack-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "BlockStackProps",
        "description": "",
        "type": "BlockStackProps",
        "typeDefinitions": {
          "BlockStackProps": {
            "filePath": "/components/BlockStack/BlockStack.ts",
            "name": "BlockStackProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineAlignment",
                "value": "MaybeResponsiveConditionalStyle<InlineAlignment>",
                "description": "Position children along the main axis",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "spacing",
                "value": "MaybeResponsiveConditionalStyle<Spacing>",
                "description": "Adjust spacing between children",
                "isOptional": true,
                "defaultValue": "'base'"
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityRole",
                "value": "ViewLikeAccessibilityRole",
                "description": "Sets the semantic meaning of the component’s content. When set,\nthe role will be used by assistive technologies to help buyers\nnavigate the page.\n\n\nFor example:\n\n- In an HTML host a `['listItem', 'separator']` tuple will render: `<li role='separator'>`\n\n- In an HTML host a `listItem` string will render: `<li>`",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label that describes the purpose or contents of the element. When set,\nit will be announced to buyers using assistive technologies and will\nprovide them with more context.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "overflow",
                "value": "\"hidden\" | \"visible\"",
                "description": "Sets the overflow behavior of the element.\n\n`hidden`: clips the content when it is larger than the element’s container.\nThe element will not be scrollable and the users will not be able\nto access the clipped content by dragging or using a scroll wheel.\n\n`visible`: the content that extends beyond the element’s container is visible.",
                "isOptional": true,
                "defaultValue": "'visible'"
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "border",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<BorderStyle>>",
                "description": "Adjust the border style.\n\nTo shorten the code, it is possible to specify all the border style properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border styles are `base`\n\n- `['base', 'none']` means blockStart and blockEnd border styles are `base`, inlineStart and inlineEnd border styles are `none`\n\n- `['base', 'none', 'dotted', 'base']` means blockStart border style is `base`, inlineEnd border style is `none`, blockEnd border style is `dotted` and  blockStart border style is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderWidth",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<BorderWidth>\n  >",
                "description": "Adjust the border width.\n\nTo shorten the code, it is possible to specify all the border width properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border widths are `base`\n\n- `['base', 'medium']` means blockStart and blockEnd border widths are `base`, inlineStart and inlineEnd border widths are `medium`\n\n- `['base', 'medium', 'medium', 'base']` means blockStart border width is `base`, inlineEnd border width is `medium`, blockEnd border width is `medium` and  blockStart border width is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "",
                "isOptional": true,
                "isPrivate": true
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "cornerRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "Adjust the corner radius.\n\nProvide a single value to apply the same corner radius to all four corners, two values to apply different corner radii to opposing corners, or four values to apply different corner radii to each individual corner.\n\nFor example:\n\n- `base` means all 4 corner radii are `base`\n\n- `['base', 'none']` means the StartStart and EndEnd corner radii are `base`, StartEnd and EndStart corner radii are `none`.\n   When the context’s language direction is left to right, StartStart and EndEnd corners are the top left and bottom right corners\n   while StartEnd and EndStart corners are the top right and bottom left corners.\n\n- `['base', 'none', 'small', 'base']` means StartStart corner radius is `base`, StartEnd corner radius is `none`, EndEnd corner radius is `small` and  EndStart corner radius is `base`\n\nA `borderRadius` alias is available for this property. When both are specified, `cornerRadius` takes precedence.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "minInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the minimum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "minBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/BlockStack/BlockStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "padding",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<Spacing>>",
                "description": "Adjust the padding.\n\nTo shorten the code, it is possible to specify all the padding properties in one property.\n\n\nExamples:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart paddings are `base`\n\n- [`base`, `none`] means blockStart and blockEnd paddings are `base`, inlineStart and inlineEnd paddings are `none`\n\n- [`base`, `none`, `large200`, `small200`] means blockStart padding is `base`, inlineEnd padding is `none`, blockEnd padding is `large200` and  blockStart padding is `small200`",
                "isOptional": true
              }
            ],
            "value": "export interface BlockStackProps\n  extends BorderProps,\n    CornerProps,\n    SizingProps,\n    SpacingProps {\n  /**\n   * Position children along the main axis\n   */\n  inlineAlignment?: MaybeResponsiveConditionalStyle<InlineAlignment>;\n  /**\n   * Adjust spacing between children\n   *\n   * @defaultValue 'base'\n   */\n  spacing?: MaybeResponsiveConditionalStyle<Spacing>;\n  /**\n   * Sets the semantic meaning of the component’s content. When set,\n   * the role will be used by assistive technologies to help buyers\n   * navigate the page.\n   *\n   *\n   * For example:\n   *\n   * - In an HTML host a `['listItem', 'separator']` tuple will render: `<li role='separator'>`\n   *\n   * - In an HTML host a `listItem` string will render: `<li>`\n   */\n  accessibilityRole?: ViewLikeAccessibilityRole;\n  /**\n   * A label that describes the purpose or contents of the element. When set,\n   * it will be announced to buyers using assistive technologies and will\n   * provide them with more context.\n   */\n  accessibilityLabel?: string;\n  /**\n   * A unique identifier for the component.\n   */\n  id?: string;\n  /**\n   * Sets the overflow behavior of the element.\n   *\n   * `hidden`: clips the content when it is larger than the element’s container.\n   * The element will not be scrollable and the users will not be able\n   * to access the clipped content by dragging or using a scroll wheel.\n   *\n   * `visible`: the content that extends beyond the element’s container is visible.\n   *\n   * @default 'visible'\n   */\n  overflow?: 'hidden' | 'visible';\n}"
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "InlineAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InlineAlignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          },
          "ViewLikeAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ViewLikeAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole | [NonPresentationalAccessibilityRole, NonPresentationalAccessibilityRole]",
            "description": ""
          },
          "NonPresentationalAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NonPresentationalAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole",
            "description": ""
          },
          "MaybeShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeShorthandProperty",
            "value": "T | ShorthandProperty<T>",
            "description": ""
          },
          "ShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShorthandProperty",
            "value": "[T, T] | [T, T, T, T]",
            "description": ""
          },
          "BorderStyle": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderStyle",
            "value": "'base' | 'dotted' | 'none'",
            "description": ""
          },
          "BorderWidth": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderWidth",
            "value": "'base' | 'medium'",
            "description": ""
          },
          "CornerRadius": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadius",
            "value": "'base' | 'small' | 'large' | 'fullyRounded' | 'none' | CornerRadiusDeprecated",
            "description": ""
          },
          "CornerRadiusDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadiusDeprecated",
            "value": "'tight' | 'loose'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Structure",
    "defaultExample": {
      "image": "blockstack-default.png",
      "codeblock": {
        "title": "Basic BlockStack",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, BlockStack, View} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <BlockStack>\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n    </BlockStack>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, BlockStack, View} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const blockStack = root.createComponent(BlockStack, undefined, [\n    root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n    root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n    root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n  ]);\n\n  root.appendChild(blockStack);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "examples": {
      "description": "",
      "examples": [
        {
          "description": "Use the Disclosure component to simplify the user experience and reveal interfaces only when the customer requests it. It also demonstrates how a combination of inline and block layout components can improve the readability of information. By employing these strategies, users can easily scan and comprehend the content, making for a better user experience overall.",
          "image": "disclosure-and-alignment.gif",
          "codeblock": {
            "title": "Strategies for simplifying layout and aligning content using Disclosure and Inline/Block Layout components.",
            "tabs": [
              {
                "code": "import React from 'react';\nimport {\n  render,\n  View,\n  Image,\n  Icon,\n  Pressable,\n  Disclosure,\n  InlineLayout,\n  BlockStack,\n  Text,\n  Form,\n  TextField,\n  Button,\n  Divider,\n  InlineStack,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <DisclosureAndAlignment />\n));\n\nexport const DisclosureAndAlignment = () => {\n  const openIds = ['one'];\n  return (\n    <View\n      maxInlineSize={400}\n      cornerRadius=\"large\"\n      border=\"base\"\n    >\n      <BlockStack spacing=\"none\">\n        <Disclosure\n          defaultOpen=\"one\"\n          onToggle={(open) =>\n            console.log('onToggle event', open)\n          }\n        >\n          <Pressable toggles=\"one\" padding=\"base\">\n            <InlineLayout\n              blockAlignment=\"center\"\n              spacing=\"base\"\n              columns={['auto', 'fill', 'auto']}\n            >\n              <Icon\n                source=\"gift\"\n                appearance=\"subdued\"\n              />\n              Gift message\n              <Icon\n                source={\n                  openIds.includes('one')\n                    ? 'chevronUp'\n                    : 'chevronDown'\n                }\n                appearance=\"subdued\"\n              />\n            </InlineLayout>\n          </Pressable>\n          <View\n            id=\"one\"\n            padding={[\n              'none',\n              'base',\n              'base',\n              'base',\n            ]}\n          >\n            <Form\n              onSubmit={() =>\n                console.log('onSubmit event')\n              }\n            >\n              <BlockStack>\n                <InlineLayout\n                  columns={['fill', 'fill']}\n                  spacing=\"base\"\n                >\n                  <TextField\n                    label=\"From\"\n                    name=\"from0\"\n                    id=\"from0\"\n                  />\n                  <TextField\n                    label=\"To\"\n                    name=\"to0\"\n                    id=\"to0\"\n                  />\n                </InlineLayout>\n                <TextField\n                  label=\"Message\"\n                  name=\"message0\"\n                  id=\"message0\"\n                />\n                <View>\n                  <Button\n                    accessibilityRole=\"submit\"\n                    kind=\"secondary\"\n                  >\n                    Save\n                  </Button>\n                </View>\n              </BlockStack>\n            </Form>\n          </View>\n        </Disclosure>\n        <Divider />\n        <InlineLayout\n          blockAlignment=\"baseline\"\n          spacing=\"base\"\n          columns={['auto', 'fill', 'auto']}\n          padding=\"base\"\n        >\n          <Icon\n            source=\"profile\"\n            appearance=\"subdued\"\n          />\n          <BlockStack spacing=\"none\">\n            <InlineStack blockAlignment=\"center\">\n              <Text>Verify with</Text>\n              <Image source=\"https://via.placeholder.com/50x15\" />\n            </InlineStack>\n            <Text\n              appearance=\"subdued\"\n              size=\"small\"\n            >\n              15% savings for students and\n              military\n            </Text>\n          </BlockStack>\n          <Pressable to=\"https://www.shopify.com\">\n            <Icon\n              source=\"external\"\n              appearance=\"subdued\"\n            />\n          </Pressable>\n        </InlineLayout>\n      </BlockStack>\n    </View>\n  );\n};\n",
                "language": "jsx",
                "title": "React"
              },
              {
                "code": "import {\n  extend,\n  BlockStack,\n  View,\n  InlineLayout,\n  InlineStack,\n  Image,\n  Pressable,\n  Icon,\n  Text,\n  TextField,\n  Form,\n  Button,\n  Disclosure,\n  Divider,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const openIds = ['one'];\n\n  const pressable = root.createComponent(\n    Pressable,\n    {\n      toggles: 'one',\n      padding: 'base',\n    },\n    [\n      root.createComponent(\n        InlineLayout,\n        {\n          blockAlignment: 'center',\n          spacing: 'base',\n          columns: ['auto', 'fill', 'auto'],\n        },\n        [\n          root.createComponent(Icon, {\n            source: 'gift',\n            appearance: 'subdued',\n          }),\n          'Gift message',\n          root.createComponent(Icon, {\n            source: openIds.includes('one')\n              ? 'chevronUp'\n              : 'chevronDown',\n            size: 'small',\n          }),\n        ],\n      ),\n    ],\n  );\n\n  const disclosureView = root.createComponent(\n    View,\n    {\n      id: 'one',\n      padding: ['none', 'base', 'base', 'base'],\n    },\n    [\n      root.createComponent(\n        Form,\n        {\n          onSubmit: () =>\n            console.log('onSubmit event'),\n        },\n        [\n          root.createComponent(BlockStack, {}, [\n            root.createComponent(\n              InlineLayout,\n              {\n                columns: ['fill', 'fill'],\n                spacing: 'base',\n              },\n              [\n                root.createComponent(TextField, {\n                  label: 'From',\n                  name: 'from0',\n                  id: 'from0',\n                }),\n                root.createComponent(TextField, {\n                  label: 'To',\n                  name: 'to0',\n                  id: 'to0',\n                }),\n              ],\n            ),\n            root.createComponent(TextField, {\n              label: 'Message',\n              name: 'message0',\n              id: 'message0',\n            }),\n            root.createComponent(View, {}, [\n              root.createComponent(\n                Button,\n                {\n                  accessibilityRole: 'submit',\n                  kind: 'secondary',\n                },\n                'Save',\n              ),\n            ]),\n          ]),\n        ],\n      ),\n    ],\n  );\n\n  const disclosure = root.createComponent(\n    Disclosure,\n    {\n      defaultOpen: 'one',\n      onToggle: (open) =>\n        console.log('onToggle event', open),\n    },\n    [pressable, disclosureView],\n  );\n\n  const inlineLayout = root.createComponent(\n    InlineLayout,\n    {\n      blockAlignment: 'baseline',\n      spacing: 'base',\n      columns: ['auto', 'fill', 'auto'],\n      padding: 'base',\n    },\n    [\n      root.createComponent(Icon, {\n        source: 'profile',\n        appearance: 'subdued',\n      }),\n      root.createComponent(\n        BlockStack,\n        {\n          spacing: 'none',\n        },\n        [\n          root.createComponent(\n            InlineStack,\n            {\n              blockAlignment: 'center',\n            },\n            [\n              root.createComponent(\n                Text,\n                {},\n                'Verify with',\n              ),\n              root.createComponent(Image, {\n                source:\n                  'https://via.placeholder.com/50x15',\n              }),\n            ],\n          ),\n          root.createComponent(\n            Text,\n            {\n              appearance: 'subdued',\n              size: 'small',\n            },\n            '15% savings for students and military',\n          ),\n        ],\n      ),\n      root.createComponent(\n        Pressable,\n        {\n          to: 'https://www.shopify.com',\n        },\n        [\n          root.createComponent(Icon, {\n            source: 'external',\n            appearance: 'subdued',\n          }),\n        ],\n      ),\n    ],\n  );\n  const view = root.createComponent(\n    View,\n    {\n      maxInlineSize: 400,\n      cornerRadius: 'large',\n      border: 'base',\n    },\n    [\n      root.createComponent(\n        BlockStack,\n        {\n          spacing: 'none',\n        },\n        [\n          disclosure,\n          root.createComponent(Divider),\n          inlineLayout,\n        ],\n      ),\n    ],\n  );\n\n  root.appendChild(view);\n});\n",
                "language": "js",
                "title": "JavaScript"
              }
            ]
          }
        }
      ]
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "accessibility-roles",
        "title": "Accessibility roles",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"main\"</code> | Used to indicate the primary content. |\n| <code>\"header\"</code> | Used to indicate the component is a header. |\n| <code>\"footer\"</code> | Used to display information such as copyright information, navigation links, and privacy statements. |\n| <code>\"section\"</code> | Used to indicate a generic section. |\n| <code>\"complementary\"</code> | Used to designate a supporting section that relates to the main content. |\n| <code>\"navigation\"</code> | Used to identify major groups of links used for navigating. |\n| <code>\"orderedList\"</code> | Used to identify a list of ordered items. |\n| <code>\"listItem\"</code> | Used to identify an item inside a list of items. |\n| <code>\"unorderedList\"</code> | Used to identify a list of unordered items. |\n| <code>\"separator\"</code> | Used to indicates the component acts as a divider that separates and distinguishes sections of content. |\n| <code>\"status\"</code> | Used to define a live region containing advisory information for the user that is not important enough to be an alert. |\n| <code>\"alert\"</code> | Used for important, and usually time-sensitive, information. |"
      }
    ],
    "related": []
  },
  {
    "name": "Button",
    "description": "Buttons are used for actions, such as “Add”, “Continue”, “Pay now”, or “Save”.",
    "thumbnail": "button-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "ButtonProps",
        "description": "",
        "type": "ButtonProps",
        "typeDefinitions": {
          "ButtonProps": {
            "filePath": "/components/Button/Button.ts",
            "name": "ButtonProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "kind",
                "value": "\"primary\" | \"secondary\" | \"plain\"",
                "description": "The type of button that will be rendered. The visual presentation of the button type\nis controlled by merchants through the Branding API.\n\n\n`primary`: button used for main actions. For example: \"Continue to next step\".\n\n`secondary`: button used for secondary actions not blocking user progress. For example: \"Download Shop app\".\n\n`plain`: renders a button that visually looks like a link.",
                "isOptional": true,
                "defaultValue": "'primary'"
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "appearance",
                "value": "Extract<Appearance, 'monochrome' | 'critical'>",
                "description": "Specify the color treatment of the Button.",
                "isOptional": true
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "submit",
                "value": "boolean",
                "description": "Allows the button to submit a form.",
                "isOptional": true,
                "deprecationMessage": "use `accessibilityRole=\"submit\"` instead"
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "to",
                "value": "string",
                "description": "Destination URL to link to. If this value is set, the button will render as a Link.",
                "isOptional": true
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineAlignment",
                "value": "InlineAlignment",
                "description": "Specifies the inline alignment of the content.",
                "isOptional": true,
                "defaultValue": "'center'"
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "loading",
                "value": "boolean",
                "description": "Replaces content with a loading indicator.",
                "isOptional": true,
                "defaultValue": "false"
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "loadingLabel",
                "value": "string",
                "description": "Accessible label for the loading indicator when user prefers reduced motion. This value is\nonly used if `loading` is true.",
                "isOptional": true
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label used for buyers using assistive technologies. When set, any\n`children` supplied to this component will not be announced to screen reader users.",
                "isOptional": true
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityRole",
                "value": "ButtonAccessibilityRole",
                "description": "The role of the button that will be rendered.\n\n`button`: renders a regular button.\n\n`submit`: renders a button that submits a form.",
                "isOptional": true,
                "defaultValue": "'button'"
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Disables the button, disallowing any interaction.",
                "isOptional": true,
                "defaultValue": "false"
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "MethodSignature",
                "name": "onPress",
                "value": "() => void",
                "description": "Callback that is run when the button is pressed.",
                "isOptional": true
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "overlay",
                "value": "RemoteFragment",
                "description": "An overlay component to render when the user interacts with the component.",
                "isOptional": true
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "toggles",
                "value": "string",
                "description": "The component's identifier whose visibility will be toggled when this component is actioned.",
                "isOptional": true
              },
              {
                "filePath": "/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface ButtonProps\n  extends OverlayActivatorProps,\n    DisclosureActivatorProps,\n    IdProps {\n  /**\n   * The type of button that will be rendered. The visual presentation of the button type\n   * is controlled by merchants through the Branding API.\n   *\n   *\n   * `primary`: button used for main actions. For example: \"Continue to next step\".\n   *\n   * `secondary`: button used for secondary actions not blocking user progress. For example: \"Download Shop app\".\n   *\n   * `plain`: renders a button that visually looks like a link.\n   *\n   *\n   * @defaultValue 'primary'\n   */\n  kind?: 'primary' | 'secondary' | 'plain';\n  /**\n   * Specify the color treatment of the Button.\n   */\n  appearance?: Extract<Appearance, 'monochrome' | 'critical'>;\n  /**\n   * Allows the button to submit a form.\n   * @deprecated use `accessibilityRole=\"submit\"` instead\n   */\n  submit?: boolean;\n  /**\n   * Destination URL to link to. If this value is set, the button will render as a Link.\n   */\n  to?: string;\n  /**\n   * Specifies the inline alignment of the content.\n   *\n   * @defaultValue 'center'\n   */\n  inlineAlignment?: InlineAlignment;\n  /**\n   * Replaces content with a loading indicator.\n   *\n   * @defaultValue false\n   */\n  loading?: boolean;\n  /**\n   * Accessible label for the loading indicator when user prefers reduced motion. This value is\n   * only used if `loading` is true.\n   */\n  loadingLabel?: string;\n  /**\n   * A label used for buyers using assistive technologies. When set, any\n   * `children` supplied to this component will not be announced to screen reader users.\n   */\n  accessibilityLabel?: string;\n  /**\n   * The role of the button that will be rendered.\n   *\n   * `button`: renders a regular button.\n   *\n   * `submit`: renders a button that submits a form.\n   *\n   * @defaultValue 'button'\n   */\n  accessibilityRole?: ButtonAccessibilityRole;\n  /**\n   * Disables the button, disallowing any interaction.\n   *\n   * @defaultValue false\n   */\n  disabled?: boolean;\n  /**\n   * Callback that is run when the button is pressed.\n   */\n  onPress?(): void;\n}"
          },
          "Appearance": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Appearance",
            "value": "'accent' | 'interactive' | 'subdued' | 'info' | 'success' | 'warning' | 'critical' | 'monochrome'",
            "description": ""
          },
          "InlineAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InlineAlignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "ButtonAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ButtonAccessibilityRole",
            "value": "'button' | 'submit'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Actions",
    "defaultExample": {
      "image": "button-default.png",
      "codeblock": {
        "title": "Basic Button",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Button} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Button\n      onPress={() => {\n        console.log('onPress event');\n      }}\n    >\n      Pay now\n    </Button>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Button} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const button = root.createComponent(\n    Button,\n    {onPress: () => console.log('onPress event')},\n    'Pay now',\n  );\n\n  root.appendChild(button);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "appearance",
        "title": "Appearance",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"critical\"</code> | Conveys a problem has arisen. |\n| <code>\"monochrome\"</code> | Takes the color of its parent.|"
      },
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "**Content Best Practices**\n\n- Clearly label each button to accurately represent the action associated with it.\n\n- Use strong actionable verbs at the beginning of button text to make it clear to the user what action will occur when the button is clicked.\n\n**Hierarchy Best Practices**\n\n- Establish a visual hierarchy between buttons to minimize confusion and help users understand which actions are most important.\n\n- Use only one high-emphasis button (primary button) per context to make it clear that other buttons have less importance.\n\n- Use lower-emphasis buttons for secondary calls to action.\n\n- Use primary buttons for actions that progress users through checkout such as “Pay now” or for concluding an action in a modal such as “Apply”.\n\n- Use secondary buttons to provide alternative actions to the primary button, without disrupting the primary flow such as “Track your order”.\n\n- Use plain buttons for least prominent, non-critical actions such as “Login to your account”.\n\n**When to Use Buttons**\n\n- Use buttons to communicate actions the user can take.\n\n- Use buttons to allow users to interact with the page.\n\n**When Not to Use Buttons**\n\n- Don’t use buttons as navigational elements. Use links instead when the desired action is to take the user to a new page."
      }
    ],
    "related": [
      {
        "name": "Link",
        "subtitle": "Component",
        "url": "link",
        "type": "Component"
      }
    ]
  },
  {
    "name": "Checkbox",
    "description": "Use checkboxes to give customers a single binary option, such as signing up for marketing, or agreeing to terms and conditions.",
    "thumbnail": "checkbox-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "CheckboxProps",
        "description": "",
        "type": "CheckboxProps",
        "typeDefinitions": {
          "CheckboxProps": {
            "filePath": "/components/Checkbox/Checkbox.ts",
            "name": "CheckboxProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Checkbox/Checkbox.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the field. When no `id` is set,\na globally unique value will be used instead.",
                "isOptional": true
              },
              {
                "filePath": "/components/Checkbox/Checkbox.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "An identifier for the field that is unique within the nearest\ncontaining `Form` component.",
                "isOptional": true
              },
              {
                "filePath": "/components/Checkbox/Checkbox.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "boolean",
                "description": "Whether the checkbox is active. This prop is an alias for `checked`,\nand can be useful in form libraries that provide a normalized API for\ndealing with both `boolean` and `string` values. If both `value` and\n`checked` are set, `checked` takes precedence.",
                "isOptional": true
              },
              {
                "filePath": "/components/Checkbox/Checkbox.ts",
                "syntaxKind": "PropertySignature",
                "name": "checked",
                "value": "boolean",
                "description": "Whether the checkbox is active.",
                "isOptional": true
              },
              {
                "filePath": "/components/Checkbox/Checkbox.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the checkbox can be changed.",
                "isOptional": true
              },
              {
                "filePath": "/components/Checkbox/Checkbox.ts",
                "syntaxKind": "PropertySignature",
                "name": "error",
                "value": "string",
                "description": "Indicate an error to the user. The field will be given a specific stylistic treatment\nto communicate problems that have to be resolved immediately.",
                "isOptional": true
              },
              {
                "filePath": "/components/Checkbox/Checkbox.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label used for buyers using assistive technologies. When set, any\n`children` supplied to this component will not be announced to screen reader users.",
                "isOptional": true
              },
              {
                "filePath": "/components/Checkbox/Checkbox.ts",
                "syntaxKind": "MethodSignature",
                "name": "onChange",
                "value": "(value: boolean) => void",
                "description": "A callback that is run whenever the checkbox is changed. This callback\nis called with a boolean indicating whether the checkbox should now be\nactive or inactive. This component is [controlled](https://reactjs.org/docs/forms.html#controlled-components),\nso you must store this value in state and reflect it back in the\n`checked` or `value` props.",
                "isOptional": true
              },
              {
                "filePath": "/components/Checkbox/Checkbox.ts",
                "syntaxKind": "PropertySignature",
                "name": "toggles",
                "value": "string",
                "description": "The component's identifier whose visibility will be toggled when this component is actioned.",
                "isOptional": true
              }
            ],
            "value": "export interface CheckboxProps extends DisclosureActivatorProps {\n  /**\n   * A unique identifier for the field. When no `id` is set,\n   * a globally unique value will be used instead.\n   */\n  id?: string;\n\n  /**\n   * An identifier for the field that is unique within the nearest\n   * containing `Form` component.\n   */\n  name?: string;\n\n  /**\n   * Whether the checkbox is active. This prop is an alias for `checked`,\n   * and can be useful in form libraries that provide a normalized API for\n   * dealing with both `boolean` and `string` values. If both `value` and\n   * `checked` are set, `checked` takes precedence.\n   */\n  value?: boolean;\n\n  /**\n   * Whether the checkbox is active.\n   */\n  checked?: boolean;\n\n  /**\n   * Whether the checkbox can be changed.\n   */\n  disabled?: boolean;\n\n  /**\n   * Indicate an error to the user. The field will be given a specific stylistic treatment\n   * to communicate problems that have to be resolved immediately.\n   */\n  error?: string;\n\n  /**\n   * A label used for buyers using assistive technologies. When set, any\n   * `children` supplied to this component will not be announced to screen reader users.\n   */\n  accessibilityLabel?: string;\n\n  /**\n   * A callback that is run whenever the checkbox is changed. This callback\n   * is called with a boolean indicating whether the checkbox should now be\n   * active or inactive. This component is [controlled](https://reactjs.org/docs/forms.html#controlled-components),\n   * so you must store this value in state and reflect it back in the\n   * `checked` or `value` props.\n   */\n  onChange?(value: boolean): void;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Forms",
    "defaultExample": {
      "image": "checkbox-default.png",
      "codeblock": {
        "title": "Basic Checkbox",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Checkbox} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Checkbox id=\"checkbox\" name=\"checkbox\">\n      Save this information for next time\n    </Checkbox>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Checkbox} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const checkbox = root.createComponent(\n    Checkbox,\n    {id: 'checkbox', name: 'checkbox'},\n    'Save this information for next time',\n  );\n\n  root.appendChild(checkbox);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "examples": {
      "description": "",
      "examples": [
        {
          "description": "To provide buyers with additional information or references, couple it with link components seamlessly within checkbox components. This can be done by including links as part of the checkbox label in the checkbox. This will provide an easy way to access relevant content that buyers may need.",
          "image": "checkbox-links.png",
          "codeblock": {
            "title": "Embedding links in checkbox components",
            "tabs": [
              {
                "code": "import React from 'react';\nimport {\n  render,\n  Checkbox,\n  Link,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <CheckBoxLinks />\n));\n\nexport const CheckBoxLinks = () => {\n  return (\n    <Checkbox\n      id=\"checkbox1\"\n      name=\"checkboxchoices\"\n    >\n      I agree to the{' '}\n      <Link to=\"https://www.shopify.com\">\n        terms and conditions\n      </Link>{' '}\n      and{' '}\n      <Link to=\"https://www.shopify.com\">\n        privacy policy\n      </Link>{' '}\n      of the store related to pricing, payment,\n      shipping, returns, and liability set forth\n      by Ride Sports\n    </Checkbox>\n  );\n};\n",
                "language": "jsx",
                "title": "React"
              },
              {
                "code": "import {\n  extend,\n  Checkbox,\n  Link,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const checkbox = root.createComponent(\n    Checkbox,\n    {\n      id: 'checkbox1',\n      name: 'checkboxchoices',\n    },\n    [\n      ' I agree to the ',\n      root.createComponent(\n        Link,\n        {to: 'https://www.shopify.com'},\n        'terms and conditions',\n      ),\n      ' and ',\n      root.createComponent(\n        Link,\n        {to: 'https://www.shopify.com'},\n        'privacy policy',\n      ),\n      ' of the store related to pricing, payment, shipping, returns, and liability set forth by Ride Sports.',\n    ],\n  );\n\n  root.appendChild(checkbox);\n});\n",
                "language": "js",
                "title": "JavaScript"
              }
            ]
          }
        }
      ]
    },
    "related": []
  },
  {
    "name": "Choice",
    "description": "Options inside a `ChoiceList`.\n\nThe wrapping `ChoiceList` component will dictate if the choice renders as radio buttons or checkboxes.",
    "thumbnail": "choice-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "ChoiceProps",
        "description": "",
        "type": "ChoiceProps",
        "typeDefinitions": {
          "ChoiceProps": {
            "filePath": "/components/Choice/Choice.ts",
            "name": "ChoiceProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Choice/Choice.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the choice."
              },
              {
                "filePath": "/components/Choice/Choice.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the choice can be changed.",
                "isOptional": true
              },
              {
                "filePath": "/components/Choice/Choice.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label used for buyers using assistive technologies. When set, any\n`children` supplied to this component will not be announced to screen reader users.",
                "isOptional": true
              }
            ],
            "value": "export interface ChoiceProps {\n  /**\n   * A unique identifier for the choice.\n   */\n  id: string;\n  /**\n   * Whether the choice can be changed.\n   */\n  disabled?: boolean;\n  /**\n   * A label used for buyers using assistive technologies. When set, any\n   * `children` supplied to this component will not be announced to screen reader users.\n   */\n  accessibilityLabel?: string;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Forms",
    "defaultExample": {
      "image": "choice-default.png",
      "codeblock": {
        "title": "Basic Choice",
        "tabs": [
          {
            "title": "React",
            "code": "import {\n  render,\n  ChoiceList,\n  Choice,\n  BlockStack,\n  InlineStack,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <InlineStack>\n      <ChoiceList\n        name=\"choice\"\n        value=\"first\"\n        onChange={(value) => {\n          console.log(`onChange event with value: ${value}`);\n        }}\n      >\n        <BlockStack>\n          <Choice id=\"first\">Ship</Choice>\n          <Choice id=\"second\">Pickup</Choice>\n        </BlockStack>\n      </ChoiceList>\n\n      <ChoiceList\n        name=\"choiceMultiple\"\n        value={['multipleFirst']}\n        onChange={(value) => {\n          console.log(`onChange event with value: ${value}`);\n        }}\n      >\n        <BlockStack>\n          <Choice id=\"multipleFirst\">Gift message</Choice>\n          <Choice id=\"multipleSecond\">Gift wrapping</Choice>\n        </BlockStack>\n      </ChoiceList>\n    </InlineStack>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {\n  extend,\n  ChoiceList,\n  Choice,\n  BlockStack,\n  InlineStack,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const choiceList = root.createComponent(\n    ChoiceList,\n    {\n      name: 'choice',\n      value: 'first',\n      onChange: (value) => {\n        console.log(`onChange event with value: ${value}`);\n      },\n    },\n    [\n      root.createComponent(BlockStack, undefined, [\n        root.createComponent(Choice, {id: 'first'}, 'Ship'),\n        root.createComponent(Choice, {id: 'second'}, 'Pickup'),\n      ]),\n    ],\n  );\n\n  const multipleChoiceList = root.createComponent(\n    ChoiceList,\n    {\n      name: 'multipleChoice',\n      value: ['multipleFirst'],\n      onChange: (value) => {\n        console.log(`onChange event with value: ${value}`);\n      },\n    },\n    [\n      root.createComponent(BlockStack, undefined, [\n        root.createComponent(Choice, {id: 'multipleFirst'}, 'Gift message'),\n        root.createComponent(Choice, {id: 'multipleSecond'}, 'Gift wrapping'),\n      ]),\n    ],\n  );\n\n  const layout = root.createComponent(InlineStack, undefined, [\n    choiceList,\n    multipleChoiceList,\n  ]);\n\n  root.appendChild(layout);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Include a title that either tells customers what to do or explains their available options.\n\n- Label options clearly based on what the option will do.\n\n- Avoid options that contradict each other when you’re allowing for multiple selections."
      }
    ],
    "related": [
      {
        "name": "ChoiceList",
        "subtitle": "Component",
        "url": "choicelist",
        "type": "Component"
      }
    ]
  },
  {
    "name": "ChoiceList",
    "description": "Use choice lists to present a list of choices where buyers can make a single selection or multiple selections.",
    "thumbnail": "choicelist-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "ChoiceListProps",
        "description": "",
        "type": "ChoiceListProps",
        "typeDefinitions": {
          "ChoiceListProps": {
            "filePath": "/components/ChoiceList/ChoiceList.ts",
            "name": "ChoiceListProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/ChoiceList/ChoiceList.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "An identifier for the field that is unique within the nearest\ncontaining `Form` component."
              },
              {
                "filePath": "/components/ChoiceList/ChoiceList.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "T",
                "description": "A `string` or `string[]` indicating the ids of selected choices. When\na string is set, choices render as radios. When a string array is\nset, choices render as checkboxes."
              },
              {
                "filePath": "/components/ChoiceList/ChoiceList.ts",
                "syntaxKind": "MethodSignature",
                "name": "onChange",
                "value": "(value: T) => void",
                "description": "A callback that is run whenever the choice list is changed. This callback\nis called with a string or array of strings indicating the ids of choices\nthat should now be selected. This component is\n[controlled](https://reactjs.org/docs/forms.html#controlled-components),\nso you must store this value in state and reflect it back in the\n`value` prop."
              }
            ],
            "value": "export interface ChoiceListProps<T extends string | string[]> {\n  /**\n   * An identifier for the field that is unique within the nearest\n   * containing `Form` component.\n   */\n  name: string;\n  /**\n   * A `string` or `string[]` indicating the ids of selected choices. When\n   * a string is set, choices render as radios. When a string array is\n   * set, choices render as checkboxes.\n   */\n  value: T;\n  /**\n   * A callback that is run whenever the choice list is changed. This callback\n   * is called with a string or array of strings indicating the ids of choices\n   * that should now be selected. This component is\n   * [controlled](https://reactjs.org/docs/forms.html#controlled-components),\n   * so you must store this value in state and reflect it back in the\n   * `value` prop.\n   */\n  onChange(value: T): void;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Forms",
    "defaultExample": {
      "image": "choicelist-default.png",
      "codeblock": {
        "title": "Basic ChoiceList",
        "tabs": [
          {
            "title": "JS",
            "code": "import {\n  extend,\n  ChoiceList,\n  Choice,\n  BlockStack,\n  InlineStack,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const choiceList = root.createComponent(\n    ChoiceList,\n    {\n      name: 'choice',\n      value: 'first',\n      onChange: (value) => {\n        console.log(`onChange event with value: ${value}`);\n      },\n    },\n    [\n      root.createComponent(BlockStack, undefined, [\n        root.createComponent(Choice, {id: 'first'}, 'Ship'),\n        root.createComponent(Choice, {id: 'second'}, 'Pickup'),\n      ]),\n    ],\n  );\n\n  const multipleChoiceList = root.createComponent(\n    ChoiceList,\n    {\n      name: 'multipleChoice',\n      value: ['multipleFirst'],\n      onChange: (value) => {\n        console.log(`onChange event with value: ${value}`);\n      },\n    },\n    [\n      root.createComponent(BlockStack, undefined, [\n        root.createComponent(Choice, {id: 'multipleFirst'}, 'Gift message'),\n        root.createComponent(Choice, {id: 'multipleSecond'}, 'Gift wrapping'),\n      ]),\n    ],\n  );\n\n  const layout = root.createComponent(InlineStack, undefined, [\n    choiceList,\n    multipleChoiceList,\n  ]);\n\n  root.appendChild(layout);\n});\n",
            "language": "js"
          },
          {
            "title": "React",
            "code": "import {\n  render,\n  ChoiceList,\n  Choice,\n  BlockStack,\n  InlineStack,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <InlineStack>\n      <ChoiceList\n        name=\"choice\"\n        value=\"first\"\n        onChange={(value) => {\n          console.log(`onChange event with value: ${value}`);\n        }}\n      >\n        <BlockStack>\n          <Choice id=\"first\">Ship</Choice>\n          <Choice id=\"second\">Pickup</Choice>\n        </BlockStack>\n      </ChoiceList>\n\n      <ChoiceList\n        name=\"choiceMultiple\"\n        value={['multipleFirst']}\n        onChange={(value) => {\n          console.log(`onChange event with value: ${value}`);\n        }}\n      >\n        <BlockStack>\n          <Choice id=\"multipleFirst\">Gift message</Choice>\n          <Choice id=\"multipleSecond\">Gift wrapping</Choice>\n        </BlockStack>\n      </ChoiceList>\n    </InlineStack>\n  );\n}\n",
            "language": "tsx"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Include a title that either tells customers what to do or explains their available options.\n\n- Label options clearly based on what the option will do.\n\n- Avoid options that contradict each other when you’re allowing for multiple selections."
      }
    ],
    "related": [
      {
        "name": "Choice",
        "subtitle": "Component",
        "url": "choice",
        "type": "Component"
      },
      {
        "name": "Checkbox",
        "subtitle": "Component",
        "url": "checkox",
        "type": "Component"
      }
    ]
  },
  {
    "name": "DateField",
    "description": "Use a date field to get a date input from a customer.",
    "thumbnail": "datefield-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "DateFieldProps",
        "description": "",
        "type": "DateFieldProps",
        "typeDefinitions": {
          "DateFieldProps": {
            "filePath": "/components/DateField/DateField.ts",
            "name": "DateFieldProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onInvalid",
                "value": "() => void",
                "description": "Callback when the field has an invalid date.\nThis callback will be called, if the date typed is invalid or disabled.\n\nDates that don’t exist or have formatting errors are considered invalid. Some examples of invalid dates are:\n- 2021-02-31: February doesn’t have 31 days\n- 2021-02-00: The day can’t be 00\n\nDates and ranges specified in the `disabled` property are considered disabled dates.\nIf the `disabled` property is `2021-06-14`, and the user types `2021-06-14`,\nthis callback will be called as this date is disabled.\n\nNote that this will be called only when the user **finishes editing** the date,\nafter the `onChange` callback.\nThe field is **not** validated on every change to the input. Once the buyer has signalled that\nthey have finished editing the field (typically, by blurring the field), the field gets validated and the callback is run if the value is invalid.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the field. When no `id` is set,\na globally unique value will be used instead.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "An identifier for the field that is unique within the nearest\ncontaining `Form` component.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "Content to use as the field label. This value is also used as the placeholder\nwhen the field is empty."
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "T",
                "description": "The current value for the field. If omitted, the field will be empty. You should\nupdate this value in response to the `onChange` callback.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "error",
                "value": "string",
                "description": "Indicate an error to the user. The field will be given a specific stylistic treatment\nto communicate problems that have to be resolved immediately.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "readonly",
                "value": "boolean",
                "description": "Whether the field is read-only.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onFocus",
                "value": "() => void",
                "description": "Callback when input is focused.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onBlur",
                "value": "() => void",
                "description": "Callback when focus is removed.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onChange",
                "value": "(value: string) => void",
                "description": "Callback when the buyer has **finished editing** a field. Unlike `onChange`\ncallbacks you may be familiar with from Polaris or other React component libraries,\nthis callback is **not** run on every change to the input. Text fields are\n“partially controlled” components, which means that while the buyer edits the\nfield, its state is controlled by the component. Once the buyer has signalled that\nthey have finished editing the field (typically, by blurring the field), `onChange`\nis called if the input actually changed from the most recent `value` property. At\nthat point, you are expected to store this “committed value” in state, and reflect\nit in the text field’s `value` property.\n\nThis state management model is important given how UI Extensions are rendered. UI Extension components\nrun on a separate thread from the UI, so they can’t respond to input synchronously.\nA pattern popularized by [controlled React components](https://reactjs.org/docs/forms.html#controlled-components)\nis to have the component be the source of truth for the input `value`, and update\nthe `value` on every user input. The delay in responding to events from a UI\nextension is only a few milliseconds, but attempting to strictly store state with\nthis delay can cause issues if a user types quickly, or if the buyer is using a\nlower-powered device. Having the UI thread take ownership for “in progress” input,\nand only synchronizing when the user is finished with a field, avoids this risk.\n\nIt can still sometimes be useful to be notified when the user makes any input in\nthe field. If you need this capability, you can use the `onInput` prop. However,\nnever use that property to create tightly controlled state for the `value`.\n\nThis callback is called with the current value of the field. If the value of a field\nis the same as the current `value` prop provided to the field, the `onChange` callback\nwill not be run.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onInput",
                "value": "(value: string) => void",
                "description": "Callback when the user makes any changes in the field. As noted in the documentation\nfor `onChange`, you **must not** use this to update `state` — use the `onChange`\ncallback for that purpose. Use the `onInput` prop when you need to do something\nas soon as the buyer makes a change, like clearing validation errors that apply to\nthe field as soon as the user begins making the necessary adjustments.\n\nThis callback is called with the current value of the field.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "yearMonth",
                "value": "YearMonth",
                "description": "[Controlled](https://reactjs.org/docs/forms.html#controlled-components) year and month to display.\nUse in combination with `onYearMonthChange`.\nMakes year/month navigation controlled.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "defaultYearMonth",
                "value": "YearMonth",
                "description": "Default [uncontrolled](https://reactjs.org/docs/forms.html#controlled-components) year and month to display.\nIgnored when year/month navigation is controlled.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean | DisabledDate[]",
                "description": "Disabled dates, days, and/or ranges, or the date picker.\nUnbound range disables all dates either from `start` date or to `end` date.\n`true` disables the date picker.",
                "isOptional": true
              },
              {
                "filePath": "/components/DateField/DateField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onYearMonthChange",
                "value": "(yearMonth: { year: number; month: number; }) => void",
                "description": "A callback that is run whenever the month is changed. This callback\nis called with an object indicating the year/month the UI should change to.\nWhen year/month navigation is controlled you must store these values in state and\nreflect it back in the `yearMonth` prop.",
                "isOptional": true
              }
            ],
            "value": "export interface DateFieldProps\n  extends Pick<\n      TextFieldProps<string>,\n      | 'label'\n      | 'error'\n      | 'name'\n      | 'id'\n      | 'readonly'\n      | 'onFocus'\n      | 'onInput'\n      | 'onBlur'\n      | 'onChange'\n      | 'value'\n    >,\n    Pick<\n      DatePickerProps<SelectedDate>,\n      'yearMonth' | 'defaultYearMonth' | 'disabled' | 'onYearMonthChange'\n    > {\n  /**\n   * Callback when the field has an invalid date.\n   * This callback will be called, if the date typed is invalid or disabled.\n   *\n   * Dates that don’t exist or have formatting errors are considered invalid. Some examples of invalid dates are:\n   * - 2021-02-31: February doesn’t have 31 days\n   * - 2021-02-00: The day can’t be 00\n   *\n   * Dates and ranges specified in the `disabled` property are considered disabled dates.\n   * If the `disabled` property is `2021-06-14`, and the user types `2021-06-14`,\n   * this callback will be called as this date is disabled.\n   *\n   * Note that this will be called only when the user **finishes editing** the date,\n   * after the `onChange` callback.\n   * The field is **not** validated on every change to the input. Once the buyer has signalled that\n   * they have finished editing the field (typically, by blurring the field), the field gets validated and the callback is run if the value is invalid.\n   */\n  onInvalid?(): void;\n}"
          },
          "YearMonth": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "YearMonth",
            "value": "{year: number; month: number} | YearMonthString",
            "description": ""
          },
          "YearMonthString": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "YearMonthString",
            "value": "string",
            "description": "A year/month string using the simplified ISO 8601 format (`YYYY-MM`)"
          },
          "DisabledDate": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DisabledDate",
            "value": "DateString | DateRange | DayString",
            "description": ""
          },
          "DateString": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DateString",
            "value": "string",
            "description": ""
          },
          "DateRange": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "name": "DateRange",
            "description": "",
            "members": [
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "start",
                "value": "DateString",
                "description": "First day (inclusive) of the selected range",
                "isOptional": true
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "end",
                "value": "DateString",
                "description": "Last day (inclusive) of the selected range",
                "isOptional": true
              }
            ],
            "value": "export interface DateRange {\n  /** First day (inclusive) of the selected range */\n  start?: DateString;\n  /** Last day (inclusive) of the selected range */\n  end?: DateString;\n}"
          },
          "DayString": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DayString",
            "value": "keyof typeof Day",
            "description": ""
          },
          "Day": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "syntaxKind": "EnumDeclaration",
            "name": "Day",
            "value": "export enum Day {\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n}",
            "members": [
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Sunday",
                "value": 0
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Monday",
                "value": 1
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Tuesday",
                "value": 2
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Wednesday",
                "value": 3
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Thursday",
                "value": 4
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Friday",
                "value": 5
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Saturday",
                "value": 6
              }
            ]
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Forms",
    "defaultExample": {
      "image": "datefield-default.png",
      "codeblock": {
        "title": "Basic DateField",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, DateField} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <App />);\n\nfunction App() {\n  return <DateField label=\"Select a date\" />;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, DateField} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const datefield = root.createComponent(DateField, {\n    label: 'Select a date',\n  });\n\n  root.appendChild(datefield);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Use clear and concise labels for the DateField component to help customers understand what information is expected.\n\n**When to use a DateField**\n\n- Use when the dates are memorable to the customer.\n\n- Use when all dates are available to be chosen by the customer.\n\n**When not to use a DateField**\n\n- Don’t use when customers require a visual representation of the dates, rather than manual entry, consider using a DatePicker component instead.\n\n- Don’t use when date availability logic is in place. Customers may find it difficult to determine which dates are available if they’re typing. Use a DatePicker instead."
      }
    ],
    "related": []
  },
  {
    "name": "DatePicker",
    "description": "The DatePicker component is a calendar picker UI that allows users to select a single date or a date range",
    "thumbnail": "datepicker-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "DatePickerProps",
        "description": "",
        "type": "DatePickerProps",
        "typeDefinitions": {
          "DatePickerProps": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "name": "DatePickerProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "yearMonth",
                "value": "YearMonth",
                "description": "[Controlled](https://reactjs.org/docs/forms.html#controlled-components) year and month to display.\nUse in combination with `onYearMonthChange`.\nMakes year/month navigation controlled.",
                "isOptional": true
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "defaultYearMonth",
                "value": "YearMonth",
                "description": "Default [uncontrolled](https://reactjs.org/docs/forms.html#controlled-components) year and month to display.\nIgnored when year/month navigation is controlled.",
                "isOptional": true
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean | DisabledDate[]",
                "description": "Disabled dates, days, and/or ranges, or the date picker.\nUnbound range disables all dates either from `start` date or to `end` date.\n`true` disables the date picker.",
                "isOptional": true
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "readOnly",
                "value": "boolean",
                "description": "Whether the date picker is read-only.",
                "isOptional": true
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "selected",
                "value": "T",
                "description": "A date, an array of dates, or a range object with `start` and/or `end` keys indicating the selected dates.\nWhen a range is set, dates between the boundaries will be selected."
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "syntaxKind": "MethodSignature",
                "name": "onChange",
                "value": "(selected: T) => void",
                "description": "A callback that is run whenever a date is selected or unselected. This callback\nis called with a string, an array of strings or a range object representing the selected dates.\nThis component is [controlled](https://reactjs.org/docs/forms.html#controlled-components),\nso you must store these values in state and reflect it back in the\n`selected` props.",
                "isOptional": true
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "syntaxKind": "MethodSignature",
                "name": "onYearMonthChange",
                "value": "(yearMonth: { year: number; month: number; }) => void",
                "description": "A callback that is run whenever the month is changed. This callback\nis called with an object indicating the year/month the UI should change to.\nWhen year/month navigation is controlled you must store these values in state and\nreflect it back in the `yearMonth` prop.",
                "isOptional": true
              }
            ],
            "value": "export interface DatePickerProps<T extends SelectedDate> {\n  /**\n   * [Controlled](https://reactjs.org/docs/forms.html#controlled-components) year and month to display.\n   * Use in combination with `onYearMonthChange`.\n   * Makes year/month navigation controlled.\n   */\n  yearMonth?: YearMonth;\n  /**\n   * Default [uncontrolled](https://reactjs.org/docs/forms.html#controlled-components) year and month to display.\n   * Ignored when year/month navigation is controlled.\n   */\n  defaultYearMonth?: YearMonth;\n  /**\n   * Disabled dates, days, and/or ranges, or the date picker.\n   * Unbound range disables all dates either from `start` date or to `end` date.\n   * `true` disables the date picker.\n   */\n  disabled?: DisabledDate[] | boolean;\n  /**\n   * Whether the date picker is read-only.\n   */\n  readOnly?: boolean;\n  /**\n   * A date, an array of dates, or a range object with `start` and/or `end` keys indicating the selected dates.\n   * When a range is set, dates between the boundaries will be selected.\n   */\n  selected: T;\n  /**\n   * A callback that is run whenever a date is selected or unselected. This callback\n   * is called with a string, an array of strings or a range object representing the selected dates.\n   * This component is [controlled](https://reactjs.org/docs/forms.html#controlled-components),\n   * so you must store these values in state and reflect it back in the\n   * `selected` props.\n   */\n  onChange?(selected: T): void;\n  /**\n   * A callback that is run whenever the month is changed. This callback\n   * is called with an object indicating the year/month the UI should change to.\n   * When year/month navigation is controlled you must store these values in state and\n   * reflect it back in the `yearMonth` prop.\n   */\n  onYearMonthChange?(yearMonth: {year: number; month: number}): void;\n}"
          },
          "YearMonth": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "YearMonth",
            "value": "{year: number; month: number} | YearMonthString",
            "description": ""
          },
          "YearMonthString": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "YearMonthString",
            "value": "string",
            "description": "A year/month string using the simplified ISO 8601 format (`YYYY-MM`)"
          },
          "DisabledDate": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DisabledDate",
            "value": "DateString | DateRange | DayString",
            "description": ""
          },
          "DateString": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DateString",
            "value": "string",
            "description": ""
          },
          "DateRange": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "name": "DateRange",
            "description": "",
            "members": [
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "start",
                "value": "DateString",
                "description": "First day (inclusive) of the selected range",
                "isOptional": true
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "end",
                "value": "DateString",
                "description": "Last day (inclusive) of the selected range",
                "isOptional": true
              }
            ],
            "value": "export interface DateRange {\n  /** First day (inclusive) of the selected range */\n  start?: DateString;\n  /** Last day (inclusive) of the selected range */\n  end?: DateString;\n}"
          },
          "DayString": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DayString",
            "value": "keyof typeof Day",
            "description": ""
          },
          "Day": {
            "filePath": "/components/DatePicker/DatePicker.ts",
            "syntaxKind": "EnumDeclaration",
            "name": "Day",
            "value": "export enum Day {\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n}",
            "members": [
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Sunday",
                "value": 0
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Monday",
                "value": 1
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Tuesday",
                "value": 2
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Wednesday",
                "value": 3
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Thursday",
                "value": 4
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Friday",
                "value": 5
              },
              {
                "filePath": "/components/DatePicker/DatePicker.ts",
                "name": "Saturday",
                "value": 6
              }
            ]
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Forms",
    "defaultExample": {
      "image": "datepicker-default.png",
      "codeblock": {
        "title": "Basic DatePicker",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, DatePicker} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return <DatePicker selected=\"2021-06-01\" />;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, DatePicker} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const datepicker = root.createComponent(DatePicker, {\n    selected: '2021-06-01',\n  });\n\n  root.appendChild(datepicker);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "By adhering to these design guidelines, the DatePicker component can offer a seamless and efficient method for users to select dates, thereby enhancing the overall user experience.\n\n- Default to showing today’s date if available.\n\n- Display the first available date when selecting future dates.\n\n- To minimize errors, the process of selecting a date range may require multiple steps. Therefore, providing a way for users to explicitly confirm their selection is recommended.\n\n**When to use a DatePicker**\n\nThe DatePicker component is well-suited for the following scenarios:\n\n- Specifying shipping or delivery dates\n\n- Scheduling pick-up dates\n\n- Booking dates for service providers\n\n- Selecting event dates for ticket offerings\n\n- Specifying rental dates to determine start and end dates for renting a product\n\n**When not to use a DatePicker component**\n\nA DatePicker component might not be the most appropriate choice in the following situations:\n\n- When the date to be entered is several years in the future or the past.\n\n- When the date is easily memorable and can be quickly typed using the keyboard e.g. Date of birth."
      }
    ],
    "related": []
  },
  {
    "name": "Disclosure",
    "description": "Disclosure is an optionally controlled component used to put long sections of information under content blocks that users can expand or collapse by pressing an activator. The activator can be specified as children using an action component (`Button`, `Link` or `Pressable`) or `Checkbox` component. The content blocks can be specified as children inside a structure component (`View`, `InlineLayout`, `BlockStack`, `Grid`, etc.).\n\nThe library takes care of applying the WAI-ARIA Accordion pattern automatically for the activator and the toggled content.",
    "thumbnail": "disclosure-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "DisclosureProps",
        "description": "",
        "type": "DisclosureProps",
        "typeDefinitions": {
          "DisclosureProps": {
            "filePath": "/components/Disclosure/Disclosure.ts",
            "name": "DisclosureProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Disclosure/Disclosure.ts",
                "syntaxKind": "PropertySignature",
                "name": "defaultOpen",
                "value": "MaybeResponsiveConditionalStyle<DisclosureOpen | undefined>",
                "description": "For uncontrolled disclosure components, the default `open` state on the initial render.\n\nIt's possible to specify a boolean value, a string value, or an array of string values:\n\n- `true` will expand all content\n- `false` will collapse all content\n- `string` will expand the content with the matching `id`\n- `string[]` will expand the content with the matching `id`s",
                "isOptional": true
              },
              {
                "filePath": "/components/Disclosure/Disclosure.ts",
                "syntaxKind": "PropertySignature",
                "name": "open",
                "value": "DisclosureOpen",
                "description": "For controlled disclosure components, the open state. The `open` prop should be used\nalong with `onToggle` to create a controlled disclosure component.",
                "isOptional": true
              },
              {
                "filePath": "/components/Disclosure/Disclosure.ts",
                "syntaxKind": "MethodSignature",
                "name": "onToggle",
                "value": "(open: string[]) => void",
                "description": "Callback fired when the open state of the disclosure changes.",
                "isOptional": true
              },
              {
                "filePath": "/components/Disclosure/Disclosure.ts",
                "syntaxKind": "PropertySignature",
                "name": "transition",
                "value": "\"none\"",
                "description": "Set to 'none' to disable the default transition animation.",
                "isOptional": true
              }
            ],
            "value": "export interface DisclosureProps {\n  /**\n   * For uncontrolled disclosure components, the default `open` state on the initial render.\n   *\n   * It's possible to specify a boolean value, a string value, or an array of string values:\n   *\n   * - `true` will expand all content\n   * - `false` will collapse all content\n   * - `string` will expand the content with the matching `id`\n   * - `string[]` will expand the content with the matching `id`s\n   */\n  defaultOpen?: MaybeResponsiveConditionalStyle<DisclosureOpen | undefined>;\n  /**\n   * For controlled disclosure components, the open state. The `open` prop should be used\n   * along with `onToggle` to create a controlled disclosure component.\n   */\n  open?: DisclosureOpen;\n  /**\n   * Callback fired when the open state of the disclosure changes.\n   */\n  onToggle?(open: string[]): void;\n  /**\n   * Set to 'none' to disable the default transition animation.\n   */\n  transition?: 'none';\n}"
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "DisclosureOpen": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DisclosureOpen",
            "value": "boolean | string | string[]",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Interactive",
    "defaultExample": {
      "image": "disclosure-default.png",
      "codeblock": {
        "title": "Basic Disclosure",
        "tabs": [
          {
            "title": "React",
            "code": "import {\n  render,\n  Disclosure,\n  Button,\n  View,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Disclosure>\n      <Button toggles=\"one\">Toggle</Button>\n      <View id=\"one\">Content</View>\n    </Disclosure>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {\n  extend,\n  Button,\n  View,\n  Disclosure,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const disclosure = root.createComponent(Disclosure, {}, [\n    root.createComponent(Button, {toggles: 'one'}, 'Toggle'),\n    root.createComponent(\n      View,\n      {border: 'base', padding: 'base', id: 'one'},\n      'Content',\n    ),\n  ]);\n\n  root.appendChild(disclosure);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "examples": {
      "description": "",
      "examples": [
        {
          "description": "Use the Disclosure component to simplify the user experience and reveal interfaces only when the customer requests it. It also demonstrates how a combination of inline and block layout components can improve the readability of information. By employing these strategies, users can easily scan and comprehend the content, making for a better user experience overall.",
          "image": "disclosure-and-alignment.gif",
          "codeblock": {
            "title": "Strategies for simplifying layout and aligning content using Disclosure and Inline/Block Layout components.",
            "tabs": [
              {
                "code": "import React from 'react';\nimport {\n  render,\n  View,\n  Image,\n  Icon,\n  Pressable,\n  Disclosure,\n  InlineLayout,\n  BlockStack,\n  Text,\n  Form,\n  TextField,\n  Button,\n  Divider,\n  InlineStack,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <DisclosureAndAlignment />\n));\n\nexport const DisclosureAndAlignment = () => {\n  const openIds = ['one'];\n  return (\n    <View\n      maxInlineSize={400}\n      cornerRadius=\"large\"\n      border=\"base\"\n    >\n      <BlockStack spacing=\"none\">\n        <Disclosure\n          defaultOpen=\"one\"\n          onToggle={(open) =>\n            console.log('onToggle event', open)\n          }\n        >\n          <Pressable toggles=\"one\" padding=\"base\">\n            <InlineLayout\n              blockAlignment=\"center\"\n              spacing=\"base\"\n              columns={['auto', 'fill', 'auto']}\n            >\n              <Icon\n                source=\"gift\"\n                appearance=\"subdued\"\n              />\n              Gift message\n              <Icon\n                source={\n                  openIds.includes('one')\n                    ? 'chevronUp'\n                    : 'chevronDown'\n                }\n                appearance=\"subdued\"\n              />\n            </InlineLayout>\n          </Pressable>\n          <View\n            id=\"one\"\n            padding={[\n              'none',\n              'base',\n              'base',\n              'base',\n            ]}\n          >\n            <Form\n              onSubmit={() =>\n                console.log('onSubmit event')\n              }\n            >\n              <BlockStack>\n                <InlineLayout\n                  columns={['fill', 'fill']}\n                  spacing=\"base\"\n                >\n                  <TextField\n                    label=\"From\"\n                    name=\"from0\"\n                    id=\"from0\"\n                  />\n                  <TextField\n                    label=\"To\"\n                    name=\"to0\"\n                    id=\"to0\"\n                  />\n                </InlineLayout>\n                <TextField\n                  label=\"Message\"\n                  name=\"message0\"\n                  id=\"message0\"\n                />\n                <View>\n                  <Button\n                    accessibilityRole=\"submit\"\n                    kind=\"secondary\"\n                  >\n                    Save\n                  </Button>\n                </View>\n              </BlockStack>\n            </Form>\n          </View>\n        </Disclosure>\n        <Divider />\n        <InlineLayout\n          blockAlignment=\"baseline\"\n          spacing=\"base\"\n          columns={['auto', 'fill', 'auto']}\n          padding=\"base\"\n        >\n          <Icon\n            source=\"profile\"\n            appearance=\"subdued\"\n          />\n          <BlockStack spacing=\"none\">\n            <InlineStack blockAlignment=\"center\">\n              <Text>Verify with</Text>\n              <Image source=\"https://via.placeholder.com/50x15\" />\n            </InlineStack>\n            <Text\n              appearance=\"subdued\"\n              size=\"small\"\n            >\n              15% savings for students and\n              military\n            </Text>\n          </BlockStack>\n          <Pressable to=\"https://www.shopify.com\">\n            <Icon\n              source=\"external\"\n              appearance=\"subdued\"\n            />\n          </Pressable>\n        </InlineLayout>\n      </BlockStack>\n    </View>\n  );\n};\n",
                "language": "jsx",
                "title": "React"
              },
              {
                "code": "import {\n  extend,\n  BlockStack,\n  View,\n  InlineLayout,\n  InlineStack,\n  Image,\n  Pressable,\n  Icon,\n  Text,\n  TextField,\n  Form,\n  Button,\n  Disclosure,\n  Divider,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const openIds = ['one'];\n\n  const pressable = root.createComponent(\n    Pressable,\n    {\n      toggles: 'one',\n      padding: 'base',\n    },\n    [\n      root.createComponent(\n        InlineLayout,\n        {\n          blockAlignment: 'center',\n          spacing: 'base',\n          columns: ['auto', 'fill', 'auto'],\n        },\n        [\n          root.createComponent(Icon, {\n            source: 'gift',\n            appearance: 'subdued',\n          }),\n          'Gift message',\n          root.createComponent(Icon, {\n            source: openIds.includes('one')\n              ? 'chevronUp'\n              : 'chevronDown',\n            size: 'small',\n          }),\n        ],\n      ),\n    ],\n  );\n\n  const disclosureView = root.createComponent(\n    View,\n    {\n      id: 'one',\n      padding: ['none', 'base', 'base', 'base'],\n    },\n    [\n      root.createComponent(\n        Form,\n        {\n          onSubmit: () =>\n            console.log('onSubmit event'),\n        },\n        [\n          root.createComponent(BlockStack, {}, [\n            root.createComponent(\n              InlineLayout,\n              {\n                columns: ['fill', 'fill'],\n                spacing: 'base',\n              },\n              [\n                root.createComponent(TextField, {\n                  label: 'From',\n                  name: 'from0',\n                  id: 'from0',\n                }),\n                root.createComponent(TextField, {\n                  label: 'To',\n                  name: 'to0',\n                  id: 'to0',\n                }),\n              ],\n            ),\n            root.createComponent(TextField, {\n              label: 'Message',\n              name: 'message0',\n              id: 'message0',\n            }),\n            root.createComponent(View, {}, [\n              root.createComponent(\n                Button,\n                {\n                  accessibilityRole: 'submit',\n                  kind: 'secondary',\n                },\n                'Save',\n              ),\n            ]),\n          ]),\n        ],\n      ),\n    ],\n  );\n\n  const disclosure = root.createComponent(\n    Disclosure,\n    {\n      defaultOpen: 'one',\n      onToggle: (open) =>\n        console.log('onToggle event', open),\n    },\n    [pressable, disclosureView],\n  );\n\n  const inlineLayout = root.createComponent(\n    InlineLayout,\n    {\n      blockAlignment: 'baseline',\n      spacing: 'base',\n      columns: ['auto', 'fill', 'auto'],\n      padding: 'base',\n    },\n    [\n      root.createComponent(Icon, {\n        source: 'profile',\n        appearance: 'subdued',\n      }),\n      root.createComponent(\n        BlockStack,\n        {\n          spacing: 'none',\n        },\n        [\n          root.createComponent(\n            InlineStack,\n            {\n              blockAlignment: 'center',\n            },\n            [\n              root.createComponent(\n                Text,\n                {},\n                'Verify with',\n              ),\n              root.createComponent(Image, {\n                source:\n                  'https://via.placeholder.com/50x15',\n              }),\n            ],\n          ),\n          root.createComponent(\n            Text,\n            {\n              appearance: 'subdued',\n              size: 'small',\n            },\n            '15% savings for students and military',\n          ),\n        ],\n      ),\n      root.createComponent(\n        Pressable,\n        {\n          to: 'https://www.shopify.com',\n        },\n        [\n          root.createComponent(Icon, {\n            source: 'external',\n            appearance: 'subdued',\n          }),\n        ],\n      ),\n    ],\n  );\n  const view = root.createComponent(\n    View,\n    {\n      maxInlineSize: 400,\n      cornerRadius: 'large',\n      border: 'base',\n    },\n    [\n      root.createComponent(\n        BlockStack,\n        {\n          spacing: 'none',\n        },\n        [\n          disclosure,\n          root.createComponent(Divider),\n          inlineLayout,\n        ],\n      ),\n    ],\n  );\n\n  root.appendChild(view);\n});\n",
                "language": "js",
                "title": "JavaScript"
              }
            ]
          }
        }
      ]
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Disclosures should be initiated by the buyer.\n\n- Use disclosures to hide content until they are relevant to the buyer.\n\n- Avoid hiding critical information that buyers need to complete their checkout.\n\n- Keep content inside disclosures concise.\n\n- Avoid nesting of disclosures.\n\n- Keep the activator and the content it toggles in close proximity to each other."
      }
    ],
    "related": []
  },
  {
    "name": "Divider",
    "description": "A divider separates content and represents a thematic break between elements.",
    "thumbnail": "divider-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "DividerProps",
        "description": "",
        "type": "DividerProps",
        "typeDefinitions": {
          "DividerProps": {
            "filePath": "/components/Divider/Divider.ts",
            "name": "DividerProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Divider/Divider.ts",
                "syntaxKind": "PropertySignature",
                "name": "size",
                "value": "Extract<Size, 'small' | 'base' | 'large' | 'extraLarge'>",
                "description": "Use to create dividers with varying widths.",
                "isOptional": true,
                "defaultValue": "'small'"
              },
              {
                "filePath": "/components/Divider/Divider.ts",
                "syntaxKind": "PropertySignature",
                "name": "direction",
                "value": "Direction",
                "description": "Use to specify direction of divider.",
                "isOptional": true,
                "defaultValue": "'inline'"
              },
              {
                "filePath": "/components/Divider/Divider.ts",
                "syntaxKind": "PropertySignature",
                "name": "alignment",
                "value": "Alignment",
                "description": "Use to specify alignment of contents of divider.",
                "isOptional": true,
                "defaultValue": "'center'"
              },
              {
                "filePath": "/components/Divider/Divider.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface DividerProps extends IdProps {\n  /**\n   * Use to create dividers with varying widths.\n   *\n   * @defaultValue 'small'\n   */\n  size?: Extract<Size, 'small' | 'base' | 'large' | 'extraLarge'>;\n\n  /**\n   * Use to specify direction of divider.\n   *\n   * @defaultValue 'inline'\n   */\n  direction?: Direction;\n\n  /**\n   * Use to specify alignment of contents of divider.\n   *\n   * @defaultValue 'center'\n   */\n  alignment?: Alignment;\n}"
          },
          "Size": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Size",
            "value": "'extraSmall' | 'small' | 'base' | 'large' | 'extraLarge' | 'fill'",
            "description": ""
          },
          "Direction": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Direction",
            "value": "'inline' | 'block'",
            "description": ""
          },
          "Alignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Alignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Structure",
    "defaultExample": {
      "image": "divider-default.png",
      "codeblock": {
        "title": "Basic Divider",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Divider} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return <Divider />;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Divider} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const divider = root.createComponent(Divider);\n\n  root.appendChild(divider);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "related": []
  },
  {
    "name": "Form",
    "description": "The form component should be used to wrap one or more form controls. This component provides an \"implicit submit\" behavior, where customers can submit the form from any input by pressing \"Enter\" on their keyboards. This behavior is widely expected, and should be respected as often as possible.\n\nUnlike an HTML `form` element, this component does not support configuring the descendant fields to be submitted via HTTP automatically. Instead, you must provide an `onSubmit` callback that will perform the necessary HTTP requests in JavaScript.",
    "thumbnail": "form-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "FormProps",
        "description": "",
        "type": "FormProps",
        "typeDefinitions": {
          "FormProps": {
            "filePath": "/components/Form/Form.ts",
            "name": "FormProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Form/Form.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the form is able to be submitted. When set to `true`, this will\ndisable the implicit submit behavior of the form.",
                "isOptional": true
              },
              {
                "filePath": "/components/Form/Form.ts",
                "syntaxKind": "MethodSignature",
                "name": "onSubmit",
                "value": "() => void",
                "description": "A callback that is run when the form is submitted."
              },
              {
                "filePath": "/components/Form/Form.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "An optional override for the autogenerated form ID.",
                "isOptional": true
              }
            ],
            "value": "export interface FormProps {\n  /**\n   * Whether the form is able to be submitted. When set to `true`, this will\n   * disable the implicit submit behavior of the form.\n   */\n  disabled?: boolean;\n  /**\n   * A callback that is run when the form is submitted.\n   */\n  onSubmit(): void;\n  /**\n   * An optional override for the autogenerated form ID.\n   */\n  id?: string;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Forms",
    "defaultExample": {
      "image": "form-default.png",
      "codeblock": {
        "title": "Basic Form",
        "tabs": [
          {
            "title": "React",
            "code": "import {\n  render,\n  BlockSpacer,\n  Button,\n  Form,\n  Grid,\n  GridItem,\n  TextField,\n  View,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Form onSubmit={() => console.log('onSubmit event')}>\n      <Grid columns={['50%', '50%']} spacing=\"base\">\n        <View>\n          <TextField label=\"First name\" />\n        </View>\n        <View>\n          <TextField label=\"Last name\" />\n        </View>\n        <GridItem columnSpan={2}>\n          <TextField label=\"Company\" />\n        </GridItem>\n      </Grid>\n      <BlockSpacer spacing=\"base\" />\n      <Button accessibilityRole=\"submit\">Submit</Button>\n    </Form>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {\n  extend,\n  BlockSpacer,\n  Button,\n  Form,\n  Grid,\n  GridItem,\n  TextField,\n  View,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const fields = root.createComponent(\n    Grid,\n    {columns: ['50%', '50%'], spacing: 'base'},\n    [\n      root.createComponent(\n        View,\n        undefined,\n        root.createComponent(TextField, {label: 'First name'}),\n      ),\n      root.createComponent(\n        View,\n        undefined,\n        root.createComponent(TextField, {label: 'Last name'}),\n      ),\n      root.createComponent(\n        GridItem,\n        {columnSpan: 2},\n        root.createComponent(TextField, {label: 'Company'}),\n      ),\n    ],\n  );\n  const spacer = root.createComponent(BlockSpacer, {spacing: 'base'});\n  const button = root.createComponent(\n    Button,\n    {accessibilityRole: 'submit'},\n    'Submit',\n  );\n\n  const form = root.createComponent(\n    Form,\n    {onSubmit: () => console.log('onSubmit event')},\n    [fields, spacer, button],\n  );\n\n  root.appendChild(form);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Wrap around all form input elements.\n\n- Forms can have only one submit button and it must be at the end of the form."
      }
    ],
    "related": []
  },
  {
    "name": "Grid",
    "description": "Grid is used to lay out content in a matrix of rows and columns.",
    "thumbnail": "grid-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "GridProps",
        "description": "",
        "type": "GridProps",
        "typeDefinitions": {
          "GridProps": {
            "filePath": "/components/Grid/Grid.ts",
            "name": "GridProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "columns",
                "value": "MaybeResponsiveConditionalStyle<Columns>",
                "description": "Sizes for each column of the layout.\n\n\n`auto`: intrinsic size of the content.\n\n`fill`: fills the remaining available space. When multiple columns are set to `fill`, the remaining space is shared equally.\n\n`` `${number}%` ``: size in percentages.\n\n`` `${number}fr` ``: size in fractions.\n\n`number`: size in pixels.\n\n\n- When the sum of the defined sizes is larger than the available space, elements will shrink to avoid overflow.\n- Except when in scrollview, where the grid will fill the space with the defined sizes.\n\n- When only one size is set and outside of an array, the grid will have one column of that size.",
                "isOptional": true,
                "defaultValue": "'fill'"
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "rows",
                "value": "MaybeResponsiveConditionalStyle<Rows>",
                "description": "Sizes for each row of the layout.\n\n\n`auto`: intrinsic size of the content.\n\n`fill`: fills the remaining available space. When multiple rows are set to `fill`, the remaining space is shared equally.\n\n`` `${number}%` ``: size in percentages.\n\n`` `${number}fr` ``: size in fractions.\n\n`number`: size in pixels.\n\n\n- When the sum of the defined sizes is larger than the available space, elements will shrink to avoid overflow.\n\n- When only one size is set and outside of an array, the grid will have one row of that size.",
                "isOptional": true,
                "defaultValue": "'fill'"
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "spacing",
                "value": "MaybeResponsiveConditionalStyle<Spacing | [Spacing, Spacing]>",
                "description": "Adjust spacing between children.\n\n- `base` means the space between rows and columns is `base`.\n\n- [`base`, `none`] means the space between rows is `base`, space between columns is `none`.",
                "isOptional": true,
                "defaultValue": "'none'"
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "blockAlignment",
                "value": "MaybeResponsiveConditionalStyle<BlockAlignment>",
                "description": "Position children along the cross axis.",
                "isOptional": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineAlignment",
                "value": "MaybeResponsiveConditionalStyle<InlineAlignment>",
                "description": "Position children along the main axis.",
                "isOptional": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityRole",
                "value": "ViewLikeAccessibilityRole",
                "description": "Sets the semantic meaning of the component’s content. When set,\nthe role will be used by assistive technologies to help buyers\nnavigate the page.\n\n\nFor example:\n\n- In an HTML host a `['listItem', 'separator']` tuple will render: `<li role='separator'>`\n\n- In an HTML host a `listItem` string will render: `<li>`",
                "isOptional": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label that describes the purpose or contents of the element. When set,\nit will be announced to buyers using assistive technologies and will\nprovide them with more context.",
                "isOptional": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "overflow",
                "value": "\"hidden\" | \"visible\"",
                "description": "Sets the overflow behavior of the element.\n\n`hidden`: clips the content when it is larger than the element’s container.\nThe element will not be scrollable and the users will not be able\nto access the clipped content by dragging or using a scroll wheel.\n\n`visible`: the content that extends beyond the element’s container is visible.",
                "isOptional": true,
                "defaultValue": "'visible'"
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "border",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<BorderStyle>>",
                "description": "Adjust the border style.\n\nTo shorten the code, it is possible to specify all the border style properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border styles are `base`\n\n- `['base', 'none']` means blockStart and blockEnd border styles are `base`, inlineStart and inlineEnd border styles are `none`\n\n- `['base', 'none', 'dotted', 'base']` means blockStart border style is `base`, inlineEnd border style is `none`, blockEnd border style is `dotted` and  blockStart border style is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderWidth",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<BorderWidth>\n  >",
                "description": "Adjust the border width.\n\nTo shorten the code, it is possible to specify all the border width properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border widths are `base`\n\n- `['base', 'medium']` means blockStart and blockEnd border widths are `base`, inlineStart and inlineEnd border widths are `medium`\n\n- `['base', 'medium', 'medium', 'base']` means blockStart border width is `base`, inlineEnd border width is `medium`, blockEnd border width is `medium` and  blockStart border width is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "",
                "isOptional": true,
                "isPrivate": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "cornerRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "Adjust the corner radius.\n\nProvide a single value to apply the same corner radius to all four corners, two values to apply different corner radii to opposing corners, or four values to apply different corner radii to each individual corner.\n\nFor example:\n\n- `base` means all 4 corner radii are `base`\n\n- `['base', 'none']` means the StartStart and EndEnd corner radii are `base`, StartEnd and EndStart corner radii are `none`.\n   When the context’s language direction is left to right, StartStart and EndEnd corners are the top left and bottom right corners\n   while StartEnd and EndStart corners are the top right and bottom left corners.\n\n- `['base', 'none', 'small', 'base']` means StartStart corner radius is `base`, StartEnd corner radius is `none`, EndEnd corner radius is `small` and  EndStart corner radius is `base`\n\nA `borderRadius` alias is available for this property. When both are specified, `cornerRadius` takes precedence.",
                "isOptional": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "minInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the minimum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "minBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/Grid/Grid.ts",
                "syntaxKind": "PropertySignature",
                "name": "padding",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<Spacing>>",
                "description": "Adjust the padding.\n\nTo shorten the code, it is possible to specify all the padding properties in one property.\n\n\nExamples:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart paddings are `base`\n\n- [`base`, `none`] means blockStart and blockEnd paddings are `base`, inlineStart and inlineEnd paddings are `none`\n\n- [`base`, `none`, `large200`, `small200`] means blockStart padding is `base`, inlineEnd padding is `none`, blockEnd padding is `large200` and  blockStart padding is `small200`",
                "isOptional": true
              }
            ],
            "value": "export interface GridProps\n  extends BorderProps,\n    CornerProps,\n    SizingProps,\n    SpacingProps {\n  /**\n   * Sizes for each column of the layout.\n   *\n   *\n   * `auto`: intrinsic size of the content.\n   *\n   * `fill`: fills the remaining available space. When multiple columns are set to `fill`, the remaining space is shared equally.\n   *\n   * `` `${number}%` ``: size in percentages.\n   *\n   * `` `${number}fr` ``: size in fractions.\n   *\n   * `number`: size in pixels.\n   *\n   *\n   * - When the sum of the defined sizes is larger than the available space, elements will shrink to avoid overflow.\n   * - Except when in scrollview, where the grid will fill the space with the defined sizes.\n   *\n   * - When only one size is set and outside of an array, the grid will have one column of that size.\n   *\n   * @defaultValue 'fill'\n   */\n  columns?: MaybeResponsiveConditionalStyle<Columns>;\n  /**\n   * Sizes for each row of the layout.\n   *\n   *\n   * `auto`: intrinsic size of the content.\n   *\n   * `fill`: fills the remaining available space. When multiple rows are set to `fill`, the remaining space is shared equally.\n   *\n   * `` `${number}%` ``: size in percentages.\n   *\n   * `` `${number}fr` ``: size in fractions.\n   *\n   * `number`: size in pixels.\n   *\n   *\n   * - When the sum of the defined sizes is larger than the available space, elements will shrink to avoid overflow.\n   *\n   * - When only one size is set and outside of an array, the grid will have one row of that size.\n   *\n   * @defaultValue 'fill'\n   */\n  rows?: MaybeResponsiveConditionalStyle<Rows>;\n  /**\n   * Adjust spacing between children.\n   *\n   * - `base` means the space between rows and columns is `base`.\n   *\n   * - [`base`, `none`] means the space between rows is `base`, space between columns is `none`.\n   *\n   * @defaultValue 'none'\n   **/\n  spacing?: MaybeResponsiveConditionalStyle<Spacing | [Spacing, Spacing]>;\n  /**\n   * Position children along the cross axis.\n   */\n  blockAlignment?: MaybeResponsiveConditionalStyle<BlockAlignment>;\n  /**\n   * Position children along the main axis.\n   */\n  inlineAlignment?: MaybeResponsiveConditionalStyle<InlineAlignment>;\n  /**\n   * Sets the semantic meaning of the component’s content. When set,\n   * the role will be used by assistive technologies to help buyers\n   * navigate the page.\n   *\n   *\n   * For example:\n   *\n   * - In an HTML host a `['listItem', 'separator']` tuple will render: `<li role='separator'>`\n   *\n   * - In an HTML host a `listItem` string will render: `<li>`\n   */\n  accessibilityRole?: ViewLikeAccessibilityRole;\n  /**\n   * A label that describes the purpose or contents of the element. When set,\n   * it will be announced to buyers using assistive technologies and will\n   * provide them with more context.\n   */\n  accessibilityLabel?: string;\n  /**\n   * A unique identifier for the component.\n   */\n  id?: string;\n  /**\n   * Sets the overflow behavior of the element.\n   *\n   * `hidden`: clips the content when it is larger than the element’s container.\n   * The element will not be scrollable and the users will not be able\n   * to access the clipped content by dragging or using a scroll wheel.\n   *\n   * `visible`: the content that extends beyond the element’s container is visible.\n   *\n   * @default 'visible'\n   */\n  overflow?: 'hidden' | 'visible';\n}"
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "Columns": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Columns",
            "value": "GridItemSize[] | GridItemSize",
            "description": ""
          },
          "GridItemSize": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "GridItemSize",
            "value": "'auto' | 'fill' | number | `${number}fr` | `${number}%`",
            "description": ""
          },
          "Rows": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Rows",
            "value": "GridItemSize[] | GridItemSize",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          },
          "BlockAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BlockAlignment",
            "value": "Alignment | 'baseline'",
            "description": ""
          },
          "Alignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Alignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "InlineAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InlineAlignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "ViewLikeAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ViewLikeAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole | [NonPresentationalAccessibilityRole, NonPresentationalAccessibilityRole]",
            "description": ""
          },
          "NonPresentationalAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NonPresentationalAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole",
            "description": ""
          },
          "MaybeShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeShorthandProperty",
            "value": "T | ShorthandProperty<T>",
            "description": ""
          },
          "ShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShorthandProperty",
            "value": "[T, T] | [T, T, T, T]",
            "description": ""
          },
          "BorderStyle": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderStyle",
            "value": "'base' | 'dotted' | 'none'",
            "description": ""
          },
          "BorderWidth": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderWidth",
            "value": "'base' | 'medium'",
            "description": ""
          },
          "CornerRadius": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadius",
            "value": "'base' | 'small' | 'large' | 'fullyRounded' | 'none' | CornerRadiusDeprecated",
            "description": ""
          },
          "CornerRadiusDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadiusDeprecated",
            "value": "'tight' | 'loose'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Structure",
    "defaultExample": {
      "image": "grid-default.png",
      "codeblock": {
        "title": "Basic Grid",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Grid, View} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Grid\n      columns={['20%', 'fill', 'auto']}\n      rows={[300, 'auto']}\n      spacing=\"loose\"\n    >\n      <View border=\"base\" padding=\"base\">\n        20% / 300\n      </View>\n      <View border=\"base\" padding=\"base\">\n        fill / 300\n      </View>\n      <View border=\"base\" padding=\"base\">\n        auto / 300\n      </View>\n      <View border=\"base\" padding=\"base\">\n        20% / auto\n      </View>\n      <View border=\"base\" padding=\"base\">\n        fill / auto\n      </View>\n      <View border=\"base\" padding=\"base\">\n        auto / auto\n      </View>\n    </Grid>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Grid, View} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const grid = root.createComponent(\n    Grid,\n    {\n      columns: ['20%', 'fill', 'auto'],\n      rows: [300, 'auto'],\n    },\n    [\n      root.createComponent(\n        View,\n        {border: 'base', padding: 'base'},\n        '20% / 300',\n      ),\n      root.createComponent(\n        View,\n        {border: 'base', padding: 'base'},\n        'fill / 300',\n      ),\n      root.createComponent(\n        View,\n        {border: 'base', padding: 'base'},\n        'auto / 300',\n      ),\n      root.createComponent(\n        View,\n        {border: 'base', padding: 'base'},\n        '20% / auto',\n      ),\n      root.createComponent(\n        View,\n        {border: 'base', padding: 'base'},\n        'fill / auto',\n      ),\n      root.createComponent(\n        View,\n        {border: 'base', padding: 'base'},\n        'auto / auto',\n      ),\n    ],\n  );\n\n  root.appendChild(grid);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "accessibility-roles",
        "title": "Accessibility roles",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"main\"</code> | Used to indicate the primary content. |\n| <code>\"header\"</code> | Used to indicate the component is a header. |\n| <code>\"footer\"</code> | Used to display information such as copyright information, navigation links, and privacy statements. |\n| <code>\"section\"</code> | Used to indicate a generic section. |\n| <code>\"complementary\"</code> | Used to designate a supporting section that relates to the main content. |\n| <code>\"navigation\"</code> | Used to identify major groups of links used for navigating. |\n| <code>\"orderedList\"</code> | Used to identify a list of ordered items. |\n| <code>\"listItem\"</code> | Used to identify an item inside a list of items. |\n| <code>\"unorderedList\"</code> | Used to identify a list of unordered items. |\n| <code>\"separator\"</code> | Used to indicates the component acts as a divider that separates and distinguishes sections of content. |\n| <code>\"status\"</code> | Used to define a live region containing advisory information for the user that is not important enough to be an alert. |\n| <code>\"alert\"</code> | Used for important, and usually time-sensitive, information. |"
      }
    ],
    "related": [
      {
        "name": "GridItem",
        "subtitle": "Component",
        "url": "grid",
        "type": "Component"
      }
    ]
  },
  {
    "name": "GridItem",
    "description": "GridItem can be used as children of Grid.\n\nIt offers a way to span the element across a number of columns and rows.",
    "thumbnail": "griditem-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "GridItemProps",
        "description": "",
        "type": "GridItemProps",
        "typeDefinitions": {
          "GridItemProps": {
            "filePath": "/components/GridItem/GridItem.ts",
            "name": "GridItemProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "columnSpan",
                "value": "MaybeResponsiveConditionalStyle<number>",
                "description": "Number of columns the item will span across",
                "isOptional": true
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "rowSpan",
                "value": "MaybeResponsiveConditionalStyle<number>",
                "description": "Number of rows the item will span across",
                "isOptional": true
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityRole",
                "value": "ViewLikeAccessibilityRole",
                "description": "Sets the semantic meaning of the component’s content. When set,\nthe role will be used by assistive technologies to help buyers\nnavigate the page.\n\n\nFor example:\n\n- In an HTML host a `['listItem', 'separator']` tuple will render: `<li role='separator'>`\n\n- In an HTML host a `listItem` string will render: `<li>`",
                "isOptional": true
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "overflow",
                "value": "\"hidden\" | \"visible\"",
                "description": "Sets the overflow behavior of the element.\n\n`hidden`: clips the content when it is larger than the element’s container.\nThe element will not be scrollable and the users will not be able\nto access the clipped content by dragging or using a scroll wheel.\n\n`visible`: the content that extends beyond the element’s container is visible.",
                "isOptional": true,
                "defaultValue": "'visible'"
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "border",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<BorderStyle>>",
                "description": "Adjust the border style.\n\nTo shorten the code, it is possible to specify all the border style properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border styles are `base`\n\n- `['base', 'none']` means blockStart and blockEnd border styles are `base`, inlineStart and inlineEnd border styles are `none`\n\n- `['base', 'none', 'dotted', 'base']` means blockStart border style is `base`, inlineEnd border style is `none`, blockEnd border style is `dotted` and  blockStart border style is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderWidth",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<BorderWidth>\n  >",
                "description": "Adjust the border width.\n\nTo shorten the code, it is possible to specify all the border width properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border widths are `base`\n\n- `['base', 'medium']` means blockStart and blockEnd border widths are `base`, inlineStart and inlineEnd border widths are `medium`\n\n- `['base', 'medium', 'medium', 'base']` means blockStart border width is `base`, inlineEnd border width is `medium`, blockEnd border width is `medium` and  blockStart border width is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "",
                "isOptional": true,
                "isPrivate": true
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "cornerRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "Adjust the corner radius.\n\nProvide a single value to apply the same corner radius to all four corners, two values to apply different corner radii to opposing corners, or four values to apply different corner radii to each individual corner.\n\nFor example:\n\n- `base` means all 4 corner radii are `base`\n\n- `['base', 'none']` means the StartStart and EndEnd corner radii are `base`, StartEnd and EndStart corner radii are `none`.\n   When the context’s language direction is left to right, StartStart and EndEnd corners are the top left and bottom right corners\n   while StartEnd and EndStart corners are the top right and bottom left corners.\n\n- `['base', 'none', 'small', 'base']` means StartStart corner radius is `base`, StartEnd corner radius is `none`, EndEnd corner radius is `small` and  EndStart corner radius is `base`\n\nA `borderRadius` alias is available for this property. When both are specified, `cornerRadius` takes precedence.",
                "isOptional": true
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "minInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the minimum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "minBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/GridItem/GridItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "padding",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<Spacing>>",
                "description": "Adjust the padding.\n\nTo shorten the code, it is possible to specify all the padding properties in one property.\n\n\nExamples:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart paddings are `base`\n\n- [`base`, `none`] means blockStart and blockEnd paddings are `base`, inlineStart and inlineEnd paddings are `none`\n\n- [`base`, `none`, `large200`, `small200`] means blockStart padding is `base`, inlineEnd padding is `none`, blockEnd padding is `large200` and  blockStart padding is `small200`",
                "isOptional": true
              }
            ],
            "value": "export interface GridItemProps\n  extends BorderProps,\n    CornerProps,\n    SizingProps,\n    SpacingProps {\n  /**\n   * Number of columns the item will span across\n   */\n  columnSpan?: MaybeResponsiveConditionalStyle<number>;\n  /**\n   * Number of rows the item will span across\n   */\n  rowSpan?: MaybeResponsiveConditionalStyle<number>;\n  /**\n   * Sets the semantic meaning of the component’s content. When set,\n   * the role will be used by assistive technologies to help buyers\n   * navigate the page.\n   *\n   *\n   * For example:\n   *\n   * - In an HTML host a `['listItem', 'separator']` tuple will render: `<li role='separator'>`\n   *\n   * - In an HTML host a `listItem` string will render: `<li>`\n   */\n  accessibilityRole?: ViewLikeAccessibilityRole;\n  /**\n   * A unique identifier for the component.\n   */\n  id?: string;\n  /**\n   * Sets the overflow behavior of the element.\n   *\n   * `hidden`: clips the content when it is larger than the element’s container.\n   * The element will not be scrollable and the users will not be able\n   * to access the clipped content by dragging or using a scroll wheel.\n   *\n   * `visible`: the content that extends beyond the element’s container is visible.\n   *\n   * @default 'visible'\n   */\n  overflow?: 'hidden' | 'visible';\n}"
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "ViewLikeAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ViewLikeAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole | [NonPresentationalAccessibilityRole, NonPresentationalAccessibilityRole]",
            "description": ""
          },
          "NonPresentationalAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NonPresentationalAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole",
            "description": ""
          },
          "MaybeShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeShorthandProperty",
            "value": "T | ShorthandProperty<T>",
            "description": ""
          },
          "ShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShorthandProperty",
            "value": "[T, T] | [T, T, T, T]",
            "description": ""
          },
          "BorderStyle": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderStyle",
            "value": "'base' | 'dotted' | 'none'",
            "description": ""
          },
          "BorderWidth": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderWidth",
            "value": "'base' | 'medium'",
            "description": ""
          },
          "CornerRadius": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadius",
            "value": "'base' | 'small' | 'large' | 'fullyRounded' | 'none' | CornerRadiusDeprecated",
            "description": ""
          },
          "CornerRadiusDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadiusDeprecated",
            "value": "'tight' | 'loose'",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Structure",
    "defaultExample": {
      "image": "griditem-default.png",
      "codeblock": {
        "title": "Basic GridItem",
        "tabs": [
          {
            "title": "React",
            "code": "import {\n  render,\n  Grid,\n  GridItem,\n  View,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Grid\n      columns={['20%', 'fill', 'auto']}\n      rows={[300, 'auto']}\n      spacing=\"loose\"\n    >\n      <View border=\"base\" padding=\"base\">\n        20% / 300\n      </View>\n      <View border=\"base\" padding=\"base\">\n        fill / 300\n      </View>\n      <View border=\"base\" padding=\"base\">\n        auto / 300\n      </View>\n      <GridItem columnSpan={2}>\n        <View border=\"base\" padding=\"base\">\n          20% + fill / auto\n        </View>\n      </GridItem>\n      <View border=\"base\" padding=\"base\">\n        auto / auto\n      </View>\n    </Grid>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Grid, GridItem, View} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const grid = root.createComponent(\n    Grid,\n    {\n      columns: ['20%', 'fill', 'auto'],\n      rows: [300, 'auto'],\n    },\n    [\n      root.createComponent(\n        View,\n        {border: 'base', padding: 'base'},\n        '20% / 300',\n      ),\n      root.createComponent(\n        View,\n        {border: 'base', padding: 'base'},\n        'fill / 300',\n      ),\n      root.createComponent(\n        View,\n        {border: 'base', padding: 'base'},\n        'auto / 300',\n      ),\n      root.createComponent(GridItem, {columnSpan: 2}, [\n        root.createComponent(\n          View,\n          {border: 'base', padding: 'base'},\n          '20% + fill / auto',\n        ),\n      ]),\n      root.createComponent(\n        View,\n        {border: 'base', padding: 'base'},\n        'auto / auto',\n      ),\n    ],\n  );\n\n  root.appendChild(grid);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "accessibility-roles",
        "title": "Accessibility roles",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"main\"</code> | Used to indicate the primary content. |\n| <code>\"header\"</code> | Used to indicate the component is a header. |\n| <code>\"footer\"</code> | Used to display information such as copyright information, navigation links, and privacy statements. |\n| <code>\"section\"</code> | Used to indicate a generic section. |\n| <code>\"complementary\"</code> | Used to designate a supporting section that relates to the main content. |\n| <code>\"navigation\"</code> | Used to identify major groups of links used for navigating. |\n| <code>\"orderedList\"</code> | Used to identify a list of ordered items. |\n| <code>\"listItem\"</code> | Used to identify an item inside a list of items. |\n| <code>\"unorderedList\"</code> | Used to identify a list of unordered items. |\n| <code>\"separator\"</code> | Used to indicates the component acts as a divider that separates and distinguishes sections of content. |\n| <code>\"status\"</code> | Used to define a live region containing advisory information for the user that is not important enough to be an alert. |\n| <code>\"alert\"</code> | Used for important, and usually time-sensitive, information. |"
      }
    ],
    "related": [
      {
        "name": "Grid",
        "subtitle": "Component",
        "url": "grid",
        "type": "Component"
      }
    ]
  },
  {
    "name": "Heading",
    "description": "Headings control the visual style of headings. Use headings to introduce major sections, like Contact information, Shipping address, or Shipping method.\n\nUnlike HTML headings, you don’t explicitly specify the position of the heading in the document outline. Nest headings within the heading group component to control the document outline structure used by assistive technologies.",
    "thumbnail": "heading-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "HeadingProps",
        "description": "",
        "type": "HeadingProps",
        "typeDefinitions": {
          "HeadingProps": {
            "filePath": "/components/Heading/Heading.ts",
            "name": "HeadingProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Heading/Heading.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Unique identifier.\nTypically used to make the heading a target that another component\ncan refer to in order to provide an alternative accessibility label.",
                "isOptional": true
              },
              {
                "filePath": "/components/Heading/Heading.ts",
                "syntaxKind": "PropertySignature",
                "name": "level",
                "value": "Level",
                "description": "The visual level of the heading. When not set, the heading will use\nits “automatic” heading level, which is determined by the level of nesting\nwithin ancestor `HeadingGroup`s. No matter what value you provide here,\nthe semantic level (e.g., how the heading contributes to the document outline)\nis determined exclusively by the “automatic” heading level.",
                "isOptional": true
              },
              {
                "filePath": "/components/Heading/Heading.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityRole",
                "value": "Extract<AccessibilityRole, 'presentation'>",
                "description": "Sets the semantic meaning of the component’s content. When set,\nthe role will be used by assistive technologies to help buyers\nnavigate the page.",
                "isOptional": true
              },
              {
                "filePath": "/components/Heading/Heading.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineAlignment",
                "value": "InlineAlignment",
                "description": "Align text along the main axis.",
                "isOptional": true
              }
            ],
            "value": "export interface HeadingProps {\n  /**\n   * Unique identifier.\n   * Typically used to make the heading a target that another component\n   * can refer to in order to provide an alternative accessibility label.\n   */\n  id?: string;\n  /**\n   * The visual level of the heading. When not set, the heading will use\n   * its “automatic” heading level, which is determined by the level of nesting\n   * within ancestor `HeadingGroup`s. No matter what value you provide here,\n   * the semantic level (e.g., how the heading contributes to the document outline)\n   * is determined exclusively by the “automatic” heading level.\n   */\n  level?: Level;\n  /**\n   * Sets the semantic meaning of the component’s content. When set,\n   * the role will be used by assistive technologies to help buyers\n   * navigate the page.\n   */\n  accessibilityRole?: Extract<AccessibilityRole, 'presentation'>;\n  /**\n   * Align text along the main axis.\n   */\n  inlineAlignment?: InlineAlignment;\n}"
          },
          "Level": {
            "filePath": "/components/Heading/Heading.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Level",
            "value": "1 | 2 | 3",
            "description": ""
          },
          "AccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AccessibilityRole",
            "value": "'main' | 'header' | 'footer' | 'section' | 'complementary' | 'navigation' | 'orderedList' | 'listItem' | 'unorderedList' | 'separator' | 'status' | 'alert' | 'decorative' | 'presentation'",
            "description": ""
          },
          "InlineAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InlineAlignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Titles and text",
    "defaultExample": {
      "image": "heading-default.png",
      "codeblock": {
        "title": "Basic Heading",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Heading} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return <Heading>Store name</Heading>;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Heading} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const heading = root.createComponent(Heading, undefined, 'Store name');\n\n  root.appendChild(heading);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Add a heading at the top of each section that clearly describe what’s below.\n\n- Use the heading to highlight the most important concepts or pieces of information that customers need to know."
      }
    ],
    "related": [
      {
        "name": "HeadingGroup",
        "subtitle": "Component",
        "url": "headinggroup",
        "type": "Component"
      },
      {
        "name": "Text",
        "subtitle": "Component",
        "url": "text",
        "type": "Component"
      },
      {
        "name": "TextBlock",
        "subtitle": "Component",
        "url": "textblock",
        "type": "Component"
      }
    ]
  },
  {
    "name": "HeadingGroup",
    "description": "Heading group controls the heading level of headings nested within it, like H1, H2, H3.\n\nUse a heading group whenever you use a heading to ensure the experience is the same for screen reader users. When using a heading, any children related to that heading should be nested within the same heading group.",
    "thumbnail": "headinggroup-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [],
    "category": "Components",
    "subCategory": "Titles and text",
    "defaultExample": {
      "image": "headinggroup-default.png",
      "codeblock": {
        "title": "Basic HeadingGroup",
        "tabs": [
          {
            "title": "React",
            "code": "import {\n  render,\n  HeadingGroup,\n  Heading,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <>\n      <Heading>Heading &lt;h1&gt;</Heading>\n\n      <HeadingGroup>\n        <Heading>Heading &lt;h2&gt;</Heading>\n\n        <HeadingGroup>\n          <Heading>Heading &lt;h3&gt;</Heading>\n        </HeadingGroup>\n      </HeadingGroup>\n    </>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {\n  extend,\n  HeadingGroup,\n  Heading,\n  View,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const headingGroup = root.createComponent(View, undefined, [\n    root.createComponent(Heading, undefined, 'Heading <h1>'),\n    root.createComponent(HeadingGroup, undefined, [\n      root.createComponent(Heading, undefined, 'Heading <h2>'),\n      root.createComponent(HeadingGroup, undefined, [\n        root.createComponent(Heading, undefined, 'Heading <h3>'),\n      ]),\n    ]),\n  ]);\n\n  root.appendChild(headingGroup);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Use this component to create a content hierarchy within the document outline."
      }
    ],
    "related": [
      {
        "name": "Heading",
        "subtitle": "Component",
        "url": "heading",
        "type": "Component"
      },
      {
        "name": "Text",
        "subtitle": "Component",
        "url": "text",
        "type": "Component"
      },
      {
        "name": "TextBlock",
        "subtitle": "Component",
        "url": "textblock",
        "type": "Component"
      }
    ]
  },
  {
    "name": "Icon",
    "description": "Icons are pictograms or graphic symbols. They can act as wayfinding tools or as a means of communicating functionality.",
    "thumbnail": "icon-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "IconProps",
        "description": "",
        "type": "IconProps",
        "typeDefinitions": {
          "IconProps": {
            "filePath": "/components/Icon/Icon.ts",
            "name": "IconProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Icon/Icon.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label that describes the purpose or contents of the icon. When set,\nit will be announced to buyers using assistive technologies and will\nprovide them with more context.",
                "isOptional": true
              },
              {
                "filePath": "/components/Icon/Icon.ts",
                "syntaxKind": "PropertySignature",
                "name": "appearance",
                "value": "Appearance",
                "description": "Sets the appearance (color) of the icon.\n\nBy default the icon will inherit the color of its parent.",
                "isOptional": true,
                "defaultValue": "'monochrome'"
              },
              {
                "filePath": "/components/Icon/Icon.ts",
                "syntaxKind": "PropertySignature",
                "name": "size",
                "value": "Extract<Size, 'extraSmall' | 'small' | 'base' | 'large' | 'fill'>",
                "description": "Adjusts the size of the icon.",
                "isOptional": true,
                "defaultValue": "'base'"
              },
              {
                "filePath": "/components/Icon/Icon.ts",
                "syntaxKind": "PropertySignature",
                "name": "source",
                "value": "IconSource",
                "description": "Specifies which icon to display\n\nCheck the list of available icons [here](/docs/api/checkout-ui-extensions/components/media/icon#icons)"
              },
              {
                "filePath": "/components/Icon/Icon.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface IconProps extends IdProps {\n  /**\n   * A label that describes the purpose or contents of the icon. When set,\n   * it will be announced to buyers using assistive technologies and will\n   * provide them with more context.\n   */\n  accessibilityLabel?: string;\n\n  /**\n   * Sets the appearance (color) of the icon.\n   *\n   * By default the icon will inherit the color of its parent.\n   *\n   * @defaultValue 'monochrome'\n   */\n  appearance?: Appearance;\n\n  /**\n   * Adjusts the size of the icon.\n   *\n   * @defaultValue 'base'\n   */\n  size?: Extract<Size, 'extraSmall' | 'small' | 'base' | 'large' | 'fill'>;\n\n  /**\n   * Specifies which icon to display\n   *\n   * Check the list of available icons [here](/docs/api/checkout-ui-extensions/components/media/icon#icons)\n   */\n  source: IconSource;\n}"
          },
          "Appearance": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Appearance",
            "value": "'accent' | 'interactive' | 'subdued' | 'info' | 'success' | 'warning' | 'critical' | 'monochrome'",
            "description": ""
          },
          "Size": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Size",
            "value": "'extraSmall' | 'small' | 'base' | 'large' | 'extraLarge' | 'fill'",
            "description": ""
          },
          "IconSource": {
            "filePath": "/components/Icon/Icon.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "IconSource",
            "value": "'arrowLeft' | 'arrowRight' | 'arrowUp' | 'arrowUpRight' | 'arrowDown' | 'bag' | 'calendar' | 'camera' | 'caretDown' | 'cart' | 'checkmark' | 'chevronLeft' | 'chevronRight' | 'chevronUp' | 'chevronDown' | 'clock' | 'close' | 'critical' | 'delete' | 'delivered' | 'delivery' | 'disabled' | 'discount' | 'email' | 'error' | 'errorFill' | 'external' | 'filter' | 'geolocation' | 'gift' | 'giftFill' | 'grid' | 'hamburger' | 'hollowCircle' | 'horizontalDots' | 'info' | 'infoFill' | 'list' | 'lock' | 'magnify' | 'map' | 'marker' | 'minus' | 'mobile' | 'note' | 'orderBox' | 'pen' | 'plus' | 'profile' | 'question' | 'questionFill' | 'reorder' | 'return' | 'store' | 'success' | 'truck' | 'verticalDots' | 'warning' | 'warningFill'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Media",
    "defaultExample": {
      "image": "icon-default.png",
      "codeblock": {
        "title": "Basic Icon",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Icon} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return <Icon source=\"discount\" />;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Icon} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const icon = root.createComponent(Icon, {source: 'discount'});\n\n  root.appendChild(icon);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "icons",
        "title": "Icons",
        "sectionContent": "<img src=\"/assets/landing-pages/templated-apis/checkout-ui-extensions/ui-components/icon-all.png\" />"
      },
      {
        "type": "Generic",
        "anchorLink": "appearance",
        "title": "Appearance",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"accent\"</code> | Conveys emphasis and draws attention to the element. |\n| <code>\"interactive\"</code> | Conveys that the element is pressable, hoverable or otherwise interactive. |\n| <code>\"subdued\"</code> | Conveys a subdued or disabled state for the element. |\n| <code>\"info\"</code> | Conveys that the element is informative or has information. |\n| <code>\"success\"</code> | Convey a successful interaction. |\n| <code>\"warning\"</code> | Convey something needs attention or an action needs to be taken. |\n| <code>\"critical\"</code> | Conveys a problem has arisen. |\n| <code>\"monochrome\"</code> | Takes the color of its parent.|"
      }
    ],
    "related": []
  },
  {
    "name": "Image",
    "description": "Image is used for large format, responsive images.",
    "thumbnail": "image-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "ImageProps",
        "description": "",
        "type": "ImageProps",
        "typeDefinitions": {
          "ImageProps": {
            "filePath": "/components/Image/Image.ts",
            "name": "ImageProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Image/Image.ts",
                "syntaxKind": "PropertySignature",
                "name": "source",
                "value": "Required<\n    MaybeConditionalStyle<\n      string,\n      AtLeastOne<ViewportSizeCondition & ResolutionCondition>\n    >\n  >",
                "description": "The URL or path to the image. Supports the `resolution` and `viewportInlineSize` conditional styles only."
              },
              {
                "filePath": "/components/Image/Image.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityDescription",
                "value": "string",
                "description": "An alternative text description that describe the image for the reader to\nunderstand what it is about. It is extremely useful for both buyers using\nassistive technology and sighted buyers. A well written `description`\nprovides people with visual impairments the ability to participate in\nconsuming non-text content. When a screen readers encounters an `Image`,\nthe description is read and announced aloud. If an image fails to load,\npotentially due to a poor connection, the `description` is displayed on\nscreen instead. This has the benefit of letting a sighted buyer know an\nimage was meant to load here, but as an alternative, they’re still able to\nconsume the text content. Read\n[considerations when writing alternative text](https://ux.shopify.com/considerations-when-writing-alt-text-a9c1985a8204)\nto learn more.",
                "isOptional": true,
                "defaultValue": "''"
              },
              {
                "filePath": "/components/Image/Image.ts",
                "syntaxKind": "PropertySignature",
                "name": "loading",
                "value": "Loading",
                "description": "Indicates how the browser should load the image, either eager or lazy.\n\nUses native browser behavior and is not supported by all browsers.\nIf no value is provided then the image is loaded immediately, regardless of\nwhether or not the image is currently within the visible viewport.",
                "isOptional": true
              },
              {
                "filePath": "/components/Image/Image.ts",
                "syntaxKind": "PropertySignature",
                "name": "aspectRatio",
                "value": "number",
                "description": "Displays the image at the specified aspect ratio (fills the width of the\nparent container and sets the height accordingly) and creates an invisible\nplaceholder to prevent content jumping when the image loads. Use along\nwith `fit` if the specified aspect ratio does not match the intrinsic\naspect ratio to prevent the image from stretching.",
                "isOptional": true
              },
              {
                "filePath": "/components/Image/Image.ts",
                "syntaxKind": "PropertySignature",
                "name": "fit",
                "value": "MaybeResponsiveConditionalStyle<Fit>",
                "description": "Indicates how the image fits in its frame.\nUse if the image is not displayed at its intrinsic size to maintain\nthe aspect ratio.",
                "isOptional": true
              },
              {
                "filePath": "/components/Image/Image.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityRole",
                "value": "Extract<AccessibilityRole, 'decorative'>",
                "description": "Sets the semantic meaning of the component’s content. When set,\nthe role will be used by assistive technologies to help buyers\nnavigate the page.",
                "isOptional": true
              },
              {
                "filePath": "/components/Image/Image.ts",
                "syntaxKind": "PropertySignature",
                "name": "border",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<BorderStyle>>",
                "description": "Adjust the border style.\n\nTo shorten the code, it is possible to specify all the border style properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border styles are `base`\n\n- `['base', 'none']` means blockStart and blockEnd border styles are `base`, inlineStart and inlineEnd border styles are `none`\n\n- `['base', 'none', 'dotted', 'base']` means blockStart border style is `base`, inlineEnd border style is `none`, blockEnd border style is `dotted` and  blockStart border style is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/Image/Image.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderWidth",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<BorderWidth>\n  >",
                "description": "Adjust the border width.\n\nTo shorten the code, it is possible to specify all the border width properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border widths are `base`\n\n- `['base', 'medium']` means blockStart and blockEnd border widths are `base`, inlineStart and inlineEnd border widths are `medium`\n\n- `['base', 'medium', 'medium', 'base']` means blockStart border width is `base`, inlineEnd border width is `medium`, blockEnd border width is `medium` and  blockStart border width is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/Image/Image.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "",
                "isOptional": true,
                "isPrivate": true
              },
              {
                "filePath": "/components/Image/Image.ts",
                "syntaxKind": "PropertySignature",
                "name": "cornerRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "Adjust the corner radius.\n\nProvide a single value to apply the same corner radius to all four corners, two values to apply different corner radii to opposing corners, or four values to apply different corner radii to each individual corner.\n\nFor example:\n\n- `base` means all 4 corner radii are `base`\n\n- `['base', 'none']` means the StartStart and EndEnd corner radii are `base`, StartEnd and EndStart corner radii are `none`.\n   When the context’s language direction is left to right, StartStart and EndEnd corners are the top left and bottom right corners\n   while StartEnd and EndStart corners are the top right and bottom left corners.\n\n- `['base', 'none', 'small', 'base']` means StartStart corner radius is `base`, StartEnd corner radius is `none`, EndEnd corner radius is `small` and  EndStart corner radius is `base`\n\nA `borderRadius` alias is available for this property. When both are specified, `cornerRadius` takes precedence.",
                "isOptional": true
              },
              {
                "filePath": "/components/Image/Image.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface ImageProps extends BorderProps, CornerProps, IdProps {\n  /**\n   * The URL or path to the image. Supports the `resolution` and `viewportInlineSize` conditional styles only.\n   */\n  source: Required<\n    MaybeConditionalStyle<\n      string,\n      AtLeastOne<ViewportSizeCondition & ResolutionCondition>\n    >\n  >;\n  /**\n   * An alternative text description that describe the image for the reader to\n   * understand what it is about. It is extremely useful for both buyers using\n   * assistive technology and sighted buyers. A well written `description`\n   * provides people with visual impairments the ability to participate in\n   * consuming non-text content. When a screen readers encounters an `Image`,\n   * the description is read and announced aloud. If an image fails to load,\n   * potentially due to a poor connection, the `description` is displayed on\n   * screen instead. This has the benefit of letting a sighted buyer know an\n   * image was meant to load here, but as an alternative, they’re still able to\n   * consume the text content. Read\n   * [considerations when writing alternative text](https://ux.shopify.com/considerations-when-writing-alt-text-a9c1985a8204)\n   * to learn more.\n   *\n   * @defaultValue ''\n   */\n  accessibilityDescription?: string;\n  /**\n   * Indicates how the browser should load the image, either eager or lazy.\n   *\n   * Uses native browser behavior and is not supported by all browsers.\n   * If no value is provided then the image is loaded immediately, regardless of\n   * whether or not the image is currently within the visible viewport.\n   */\n  loading?: Loading;\n  /**\n   * Displays the image at the specified aspect ratio (fills the width of the\n   * parent container and sets the height accordingly) and creates an invisible\n   * placeholder to prevent content jumping when the image loads. Use along\n   * with `fit` if the specified aspect ratio does not match the intrinsic\n   * aspect ratio to prevent the image from stretching.\n   */\n  aspectRatio?: number;\n  /**\n   * Indicates how the image fits in its frame.\n   * Use if the image is not displayed at its intrinsic size to maintain\n   * the aspect ratio.\n   */\n  fit?: MaybeResponsiveConditionalStyle<Fit>;\n  /**\n   * Sets the semantic meaning of the component’s content. When set,\n   * the role will be used by assistive technologies to help buyers\n   * navigate the page.\n   */\n  accessibilityRole?: Extract<AccessibilityRole, 'decorative'>;\n}"
          },
          "MaybeConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeConditionalStyle",
            "value": "T | ConditionalStyle<T, AcceptedConditions>",
            "description": "A type that represents a value that can be a conditional style.\nWe highly recommend using the Style helper which simplifies the creation of conditional styles.\nTo learn more check out the [conditional styles](/api/checkout-ui-extensions/components/utilities/stylehelper) documentation."
          },
          "ConditionalStyle": {
            "filePath": "/style/types.ts",
            "name": "ConditionalStyle",
            "description": "",
            "members": [
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "default",
                "value": "T",
                "description": "The default value applied when none of the conditional values\nspecified in `conditionals` are met.",
                "isOptional": true
              },
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "conditionals",
                "value": "ConditionalValue<T, AcceptedConditions>[]",
                "description": "An array of conditional values."
              }
            ],
            "value": "export interface ConditionalStyle<\n  T,\n  AcceptedConditions extends BaseConditions = Conditions,\n> {\n  /**\n   * The default value applied when none of the conditional values\n   * specified in `conditionals` are met.\n   */\n  default?: T;\n  /**\n   * An array of conditional values.\n   */\n  conditionals: ConditionalValue<T, AcceptedConditions>[];\n}"
          },
          "ConditionalValue": {
            "filePath": "/style/types.ts",
            "name": "ConditionalValue",
            "description": "",
            "members": [
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "conditions",
                "value": "AcceptedConditions",
                "description": "The conditions that must be met for the value to be applied. At least one\ncondition must be specified."
              },
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "T",
                "description": "The value that will be applied if the conditions are met."
              }
            ],
            "value": "export interface ConditionalValue<\n  T,\n  AcceptedConditions extends BaseConditions = Conditions,\n> {\n  /**\n   * The conditions that must be met for the value to be applied. At least one\n   * condition must be specified.\n   */\n  conditions: AcceptedConditions;\n  /**\n   * The value that will be applied if the conditions are met.\n   */\n  value: T;\n}"
          },
          "AtLeastOne": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AtLeastOne",
            "value": "Partial<T> & U[keyof U]",
            "description": ""
          },
          "ViewportSizeCondition": {
            "filePath": "/style/types.ts",
            "name": "ViewportSizeCondition",
            "description": "",
            "members": [
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "viewportInlineSize",
                "value": "{ min: ViewportInlineSize; }",
                "description": ""
              }
            ],
            "value": "export interface ViewportSizeCondition {\n  viewportInlineSize: {min: ViewportInlineSize};\n}"
          },
          "ViewportInlineSize": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ViewportInlineSize",
            "value": "'small' | 'medium' | 'large'",
            "description": ""
          },
          "ResolutionCondition": {
            "filePath": "/style/types.ts",
            "name": "ResolutionCondition",
            "description": "",
            "members": [
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "resolution",
                "value": "Resolution",
                "description": ""
              }
            ],
            "value": "export interface ResolutionCondition {\n  resolution: Resolution;\n}"
          },
          "Resolution": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Resolution",
            "value": "1 | 1.3 | 1.5 | 2 | 2.6 | 3 | 3.5 | 4",
            "description": ""
          },
          "Loading": {
            "filePath": "/components/Image/Image.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Loading",
            "value": "'eager' | 'lazy'",
            "description": ""
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "Fit": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Fit",
            "value": "'cover' | 'contain'",
            "description": ""
          },
          "AccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AccessibilityRole",
            "value": "'main' | 'header' | 'footer' | 'section' | 'complementary' | 'navigation' | 'orderedList' | 'listItem' | 'unorderedList' | 'separator' | 'status' | 'alert' | 'decorative' | 'presentation'",
            "description": ""
          },
          "MaybeShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeShorthandProperty",
            "value": "T | ShorthandProperty<T>",
            "description": ""
          },
          "ShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShorthandProperty",
            "value": "[T, T] | [T, T, T, T]",
            "description": ""
          },
          "BorderStyle": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderStyle",
            "value": "'base' | 'dotted' | 'none'",
            "description": ""
          },
          "BorderWidth": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderWidth",
            "value": "'base' | 'medium'",
            "description": ""
          },
          "CornerRadius": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadius",
            "value": "'base' | 'small' | 'large' | 'fullyRounded' | 'none' | CornerRadiusDeprecated",
            "description": ""
          },
          "CornerRadiusDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadiusDeprecated",
            "value": "'tight' | 'loose'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Media",
    "defaultExample": {
      "image": "image-default.png",
      "codeblock": {
        "title": "Basic Image",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Image} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Image source=\"/assets/api/checkout-extensions/checkout/components/image-example-code.png\" />\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Image} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const image = root.createComponent(Image, {\n    source:\n      '/assets/api/checkout-extensions/checkout/components/image-example-code.png',\n  });\n\n  root.appendChild(image);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "loading",
        "title": "Loading",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"eager\"</code> | Image is loaded immediately, regardless of whether or not the image is currently within the visible viewport. |\n| <code>\"lazy\"</code> | Image is loaded when it’s within the visible viewport. |"
      }
    ],
    "related": []
  },
  {
    "name": "InlineLayout",
    "description": "InlineLayout is used to lay out content over multiple columns.\n\nBy default, all columns are of equal size and fill the available inline space. Content does not wrap on new rows when not enough columns have been explicitly set, instead they are added as new column and fill the remaining inline space.",
    "thumbnail": "inlinelayout-thumbnail.png",
    "requires": "",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "InlineLayoutProps",
        "description": "",
        "type": "InlineLayoutProps",
        "typeDefinitions": {
          "InlineLayoutProps": {
            "filePath": "/components/InlineLayout/InlineLayout.ts",
            "name": "InlineLayoutProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "columns",
                "value": "MaybeResponsiveConditionalStyle<Columns>",
                "description": "Sizes for each column of the layout.\n\n\n`auto`: intrinsic size of the element.\n\n`fill`: fills the remaining available space. When multiple elements are set to `fill`, the remaining space is shared equally.\n\n`` `${number}%` ``: size in percentages.\n\n`` `${number}fr` ``: size in fractions.\n\n`number`: size in pixels.\n\n\n- When the sum of the defined sizes is larger than the available space, elements will shrink to avoid overflow.\n\n- When the size of an element is not explicitly set, it will fill the remaining space available.\n\n- When only one size is set and outside of an array, all elements of the layout will take that size.",
                "isOptional": true,
                "defaultValue": "'fill'"
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "spacing",
                "value": "MaybeResponsiveConditionalStyle<Spacing | [Spacing, Spacing]>",
                "description": "Adjust spacing between children.\n\n- `base` means the space between rows and columns is `base`.\n\n- [`base`, `none`] means the space between rows is `base`, space between columns is `none`.",
                "isOptional": true,
                "defaultValue": "'none'"
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "blockAlignment",
                "value": "MaybeResponsiveConditionalStyle<BlockAlignment>",
                "description": "Position children along the cross axis.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineAlignment",
                "value": "MaybeResponsiveConditionalStyle<InlineAlignment>",
                "description": "Position children along the main axis.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityRole",
                "value": "ViewLikeAccessibilityRole",
                "description": "Sets the semantic meaning of the component’s content. When set,\nthe role will be used by assistive technologies to help buyers\nnavigate the page.\n\n\nFor example:\n\n- In an HTML host a `['listItem', 'separator']` tuple will render: `<li role='separator'>`\n\n- In an HTML host a `listItem` string will render: `<li>`",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label that describes the purpose or contents of the element. When set,\nit will be announced to buyers using assistive technologies and will\nprovide them with more context.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "overflow",
                "value": "\"hidden\" | \"visible\"",
                "description": "Sets the overflow behavior of the element.\n\n`hidden`: clips the content when it is larger than the element’s container.\nThe element will not be scrollable and the users will not be able\nto access the clipped content by dragging or using a scroll wheel.\n\n`visible`: the content that extends beyond the element’s container is visible.",
                "isOptional": true,
                "defaultValue": "'visible'"
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "border",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<BorderStyle>>",
                "description": "Adjust the border style.\n\nTo shorten the code, it is possible to specify all the border style properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border styles are `base`\n\n- `['base', 'none']` means blockStart and blockEnd border styles are `base`, inlineStart and inlineEnd border styles are `none`\n\n- `['base', 'none', 'dotted', 'base']` means blockStart border style is `base`, inlineEnd border style is `none`, blockEnd border style is `dotted` and  blockStart border style is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderWidth",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<BorderWidth>\n  >",
                "description": "Adjust the border width.\n\nTo shorten the code, it is possible to specify all the border width properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border widths are `base`\n\n- `['base', 'medium']` means blockStart and blockEnd border widths are `base`, inlineStart and inlineEnd border widths are `medium`\n\n- `['base', 'medium', 'medium', 'base']` means blockStart border width is `base`, inlineEnd border width is `medium`, blockEnd border width is `medium` and  blockStart border width is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "",
                "isOptional": true,
                "isPrivate": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "cornerRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "Adjust the corner radius.\n\nProvide a single value to apply the same corner radius to all four corners, two values to apply different corner radii to opposing corners, or four values to apply different corner radii to each individual corner.\n\nFor example:\n\n- `base` means all 4 corner radii are `base`\n\n- `['base', 'none']` means the StartStart and EndEnd corner radii are `base`, StartEnd and EndStart corner radii are `none`.\n   When the context’s language direction is left to right, StartStart and EndEnd corners are the top left and bottom right corners\n   while StartEnd and EndStart corners are the top right and bottom left corners.\n\n- `['base', 'none', 'small', 'base']` means StartStart corner radius is `base`, StartEnd corner radius is `none`, EndEnd corner radius is `small` and  EndStart corner radius is `base`\n\nA `borderRadius` alias is available for this property. When both are specified, `cornerRadius` takes precedence.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "minInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the minimum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "minBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineLayout/InlineLayout.ts",
                "syntaxKind": "PropertySignature",
                "name": "padding",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<Spacing>>",
                "description": "Adjust the padding.\n\nTo shorten the code, it is possible to specify all the padding properties in one property.\n\n\nExamples:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart paddings are `base`\n\n- [`base`, `none`] means blockStart and blockEnd paddings are `base`, inlineStart and inlineEnd paddings are `none`\n\n- [`base`, `none`, `large200`, `small200`] means blockStart padding is `base`, inlineEnd padding is `none`, blockEnd padding is `large200` and  blockStart padding is `small200`",
                "isOptional": true
              }
            ],
            "value": "export interface InlineLayoutProps\n  extends Omit<GridProps, 'columns' | 'rows'>,\n    BorderProps,\n    CornerProps,\n    SizingProps,\n    SpacingProps {\n  /**\n   * Sizes for each column of the layout.\n   *\n   *\n   * `auto`: intrinsic size of the element.\n   *\n   * `fill`: fills the remaining available space. When multiple elements are set to `fill`, the remaining space is shared equally.\n   *\n   * `` `${number}%` ``: size in percentages.\n   *\n   * `` `${number}fr` ``: size in fractions.\n   *\n   * `number`: size in pixels.\n   *\n   *\n   * - When the sum of the defined sizes is larger than the available space, elements will shrink to avoid overflow.\n   *\n   * - When the size of an element is not explicitly set, it will fill the remaining space available.\n   *\n   * - When only one size is set and outside of an array, all elements of the layout will take that size.\n   *\n   *\n   * @defaultValue 'fill'\n   */\n  columns?: MaybeResponsiveConditionalStyle<Columns>;\n}"
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "Columns": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Columns",
            "value": "GridItemSize[] | GridItemSize",
            "description": ""
          },
          "GridItemSize": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "GridItemSize",
            "value": "'auto' | 'fill' | number | `${number}fr` | `${number}%`",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          },
          "BlockAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BlockAlignment",
            "value": "Alignment | 'baseline'",
            "description": ""
          },
          "Alignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Alignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "InlineAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InlineAlignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "ViewLikeAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ViewLikeAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole | [NonPresentationalAccessibilityRole, NonPresentationalAccessibilityRole]",
            "description": ""
          },
          "NonPresentationalAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NonPresentationalAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole",
            "description": ""
          },
          "MaybeShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeShorthandProperty",
            "value": "T | ShorthandProperty<T>",
            "description": ""
          },
          "ShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShorthandProperty",
            "value": "[T, T] | [T, T, T, T]",
            "description": ""
          },
          "BorderStyle": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderStyle",
            "value": "'base' | 'dotted' | 'none'",
            "description": ""
          },
          "BorderWidth": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderWidth",
            "value": "'base' | 'medium'",
            "description": ""
          },
          "CornerRadius": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadius",
            "value": "'base' | 'small' | 'large' | 'fullyRounded' | 'none' | CornerRadiusDeprecated",
            "description": ""
          },
          "CornerRadiusDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadiusDeprecated",
            "value": "'tight' | 'loose'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Structure",
    "defaultExample": {
      "image": "inlinelayout-default.png",
      "codeblock": {
        "title": "Basic InlineLayout",
        "tabs": [
          {
            "title": "React",
            "code": "import {\n  render,\n  InlineLayout,\n  View,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <InlineLayout columns={['20%', 'fill']}>\n      <View border=\"base\" padding=\"base\">\n        20%\n      </View>\n      <View border=\"base\" padding=\"base\">\n        fill\n      </View>\n    </InlineLayout>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, InlineLayout, View} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const inlineLayout = root.createComponent(\n    InlineLayout,\n    {\n      columns: ['20%', 'fill'],\n    },\n    [\n      root.createComponent(View, {border: 'base', padding: 'base'}, '20%'),\n      root.createComponent(View, {border: 'base', padding: 'base'}, 'fill'),\n    ],\n  );\n\n  root.appendChild(inlineLayout);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "examples": {
      "description": "",
      "examples": [
        {
          "description": "Use the Disclosure component to simplify the user experience and reveal interfaces only when the customer requests it. It also demonstrates how a combination of inline and block layout components can improve the readability of information. By employing these strategies, users can easily scan and comprehend the content, making for a better user experience overall.",
          "image": "disclosure-and-alignment.gif",
          "codeblock": {
            "title": "Strategies for simplifying layout and aligning content using Disclosure and Inline/Block Layout components.",
            "tabs": [
              {
                "code": "import React from 'react';\nimport {\n  render,\n  View,\n  Image,\n  Icon,\n  Pressable,\n  Disclosure,\n  InlineLayout,\n  BlockStack,\n  Text,\n  Form,\n  TextField,\n  Button,\n  Divider,\n  InlineStack,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <DisclosureAndAlignment />\n));\n\nexport const DisclosureAndAlignment = () => {\n  const openIds = ['one'];\n  return (\n    <View\n      maxInlineSize={400}\n      cornerRadius=\"large\"\n      border=\"base\"\n    >\n      <BlockStack spacing=\"none\">\n        <Disclosure\n          defaultOpen=\"one\"\n          onToggle={(open) =>\n            console.log('onToggle event', open)\n          }\n        >\n          <Pressable toggles=\"one\" padding=\"base\">\n            <InlineLayout\n              blockAlignment=\"center\"\n              spacing=\"base\"\n              columns={['auto', 'fill', 'auto']}\n            >\n              <Icon\n                source=\"gift\"\n                appearance=\"subdued\"\n              />\n              Gift message\n              <Icon\n                source={\n                  openIds.includes('one')\n                    ? 'chevronUp'\n                    : 'chevronDown'\n                }\n                appearance=\"subdued\"\n              />\n            </InlineLayout>\n          </Pressable>\n          <View\n            id=\"one\"\n            padding={[\n              'none',\n              'base',\n              'base',\n              'base',\n            ]}\n          >\n            <Form\n              onSubmit={() =>\n                console.log('onSubmit event')\n              }\n            >\n              <BlockStack>\n                <InlineLayout\n                  columns={['fill', 'fill']}\n                  spacing=\"base\"\n                >\n                  <TextField\n                    label=\"From\"\n                    name=\"from0\"\n                    id=\"from0\"\n                  />\n                  <TextField\n                    label=\"To\"\n                    name=\"to0\"\n                    id=\"to0\"\n                  />\n                </InlineLayout>\n                <TextField\n                  label=\"Message\"\n                  name=\"message0\"\n                  id=\"message0\"\n                />\n                <View>\n                  <Button\n                    accessibilityRole=\"submit\"\n                    kind=\"secondary\"\n                  >\n                    Save\n                  </Button>\n                </View>\n              </BlockStack>\n            </Form>\n          </View>\n        </Disclosure>\n        <Divider />\n        <InlineLayout\n          blockAlignment=\"baseline\"\n          spacing=\"base\"\n          columns={['auto', 'fill', 'auto']}\n          padding=\"base\"\n        >\n          <Icon\n            source=\"profile\"\n            appearance=\"subdued\"\n          />\n          <BlockStack spacing=\"none\">\n            <InlineStack blockAlignment=\"center\">\n              <Text>Verify with</Text>\n              <Image source=\"https://via.placeholder.com/50x15\" />\n            </InlineStack>\n            <Text\n              appearance=\"subdued\"\n              size=\"small\"\n            >\n              15% savings for students and\n              military\n            </Text>\n          </BlockStack>\n          <Pressable to=\"https://www.shopify.com\">\n            <Icon\n              source=\"external\"\n              appearance=\"subdued\"\n            />\n          </Pressable>\n        </InlineLayout>\n      </BlockStack>\n    </View>\n  );\n};\n",
                "language": "jsx",
                "title": "React"
              },
              {
                "code": "import {\n  extend,\n  BlockStack,\n  View,\n  InlineLayout,\n  InlineStack,\n  Image,\n  Pressable,\n  Icon,\n  Text,\n  TextField,\n  Form,\n  Button,\n  Disclosure,\n  Divider,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const openIds = ['one'];\n\n  const pressable = root.createComponent(\n    Pressable,\n    {\n      toggles: 'one',\n      padding: 'base',\n    },\n    [\n      root.createComponent(\n        InlineLayout,\n        {\n          blockAlignment: 'center',\n          spacing: 'base',\n          columns: ['auto', 'fill', 'auto'],\n        },\n        [\n          root.createComponent(Icon, {\n            source: 'gift',\n            appearance: 'subdued',\n          }),\n          'Gift message',\n          root.createComponent(Icon, {\n            source: openIds.includes('one')\n              ? 'chevronUp'\n              : 'chevronDown',\n            size: 'small',\n          }),\n        ],\n      ),\n    ],\n  );\n\n  const disclosureView = root.createComponent(\n    View,\n    {\n      id: 'one',\n      padding: ['none', 'base', 'base', 'base'],\n    },\n    [\n      root.createComponent(\n        Form,\n        {\n          onSubmit: () =>\n            console.log('onSubmit event'),\n        },\n        [\n          root.createComponent(BlockStack, {}, [\n            root.createComponent(\n              InlineLayout,\n              {\n                columns: ['fill', 'fill'],\n                spacing: 'base',\n              },\n              [\n                root.createComponent(TextField, {\n                  label: 'From',\n                  name: 'from0',\n                  id: 'from0',\n                }),\n                root.createComponent(TextField, {\n                  label: 'To',\n                  name: 'to0',\n                  id: 'to0',\n                }),\n              ],\n            ),\n            root.createComponent(TextField, {\n              label: 'Message',\n              name: 'message0',\n              id: 'message0',\n            }),\n            root.createComponent(View, {}, [\n              root.createComponent(\n                Button,\n                {\n                  accessibilityRole: 'submit',\n                  kind: 'secondary',\n                },\n                'Save',\n              ),\n            ]),\n          ]),\n        ],\n      ),\n    ],\n  );\n\n  const disclosure = root.createComponent(\n    Disclosure,\n    {\n      defaultOpen: 'one',\n      onToggle: (open) =>\n        console.log('onToggle event', open),\n    },\n    [pressable, disclosureView],\n  );\n\n  const inlineLayout = root.createComponent(\n    InlineLayout,\n    {\n      blockAlignment: 'baseline',\n      spacing: 'base',\n      columns: ['auto', 'fill', 'auto'],\n      padding: 'base',\n    },\n    [\n      root.createComponent(Icon, {\n        source: 'profile',\n        appearance: 'subdued',\n      }),\n      root.createComponent(\n        BlockStack,\n        {\n          spacing: 'none',\n        },\n        [\n          root.createComponent(\n            InlineStack,\n            {\n              blockAlignment: 'center',\n            },\n            [\n              root.createComponent(\n                Text,\n                {},\n                'Verify with',\n              ),\n              root.createComponent(Image, {\n                source:\n                  'https://via.placeholder.com/50x15',\n              }),\n            ],\n          ),\n          root.createComponent(\n            Text,\n            {\n              appearance: 'subdued',\n              size: 'small',\n            },\n            '15% savings for students and military',\n          ),\n        ],\n      ),\n      root.createComponent(\n        Pressable,\n        {\n          to: 'https://www.shopify.com',\n        },\n        [\n          root.createComponent(Icon, {\n            source: 'external',\n            appearance: 'subdued',\n          }),\n        ],\n      ),\n    ],\n  );\n  const view = root.createComponent(\n    View,\n    {\n      maxInlineSize: 400,\n      cornerRadius: 'large',\n      border: 'base',\n    },\n    [\n      root.createComponent(\n        BlockStack,\n        {\n          spacing: 'none',\n        },\n        [\n          disclosure,\n          root.createComponent(Divider),\n          inlineLayout,\n        ],\n      ),\n    ],\n  );\n\n  root.appendChild(view);\n});\n",
                "language": "js",
                "title": "JavaScript"
              }
            ]
          }
        }
      ]
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "accessibility-roles",
        "title": "Accessibility roles",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"main\"</code> | Used to indicate the primary content. |\n| <code>\"header\"</code> | Used to indicate the component is a header. |\n| <code>\"footer\"</code> | Used to display information such as copyright information, navigation links, and privacy statements. |\n| <code>\"section\"</code> | Used to indicate a generic section. |\n| <code>\"complementary\"</code> | Used to designate a supporting section that relates to the main content. |\n| <code>\"navigation\"</code> | Used to identify major groups of links used for navigating. |\n| <code>\"orderedList\"</code> | Used to identify a list of ordered items. |\n| <code>\"listItem\"</code> | Used to identify an item inside a list of items. |\n| <code>\"unorderedList\"</code> | Used to identify a list of unordered items. |\n| <code>\"separator\"</code> | Used to indicates the component acts as a divider that separates and distinguishes sections of content. |\n| <code>\"status\"</code> | Used to define a live region containing advisory information for the user that is not important enough to be an alert. |\n| <code>\"alert\"</code> | Used for important, and usually time-sensitive, information. |"
      }
    ],
    "related": []
  },
  {
    "name": "InlineSpacer",
    "description": "InlineSpacer is used to create empty inline space, typically when variable spacing is needed between multiple elements.\n\nNote that you should favor InlineStack when spacing between all elements is the same.",
    "isVisualComponent": true,
    "thumbnail": "inlinespacer-thumbnail.png",
    "requires": "",
    "type": "",
    "definitions": [
      {
        "title": "InlineSpacerProps",
        "description": "",
        "type": "InlineSpacerProps",
        "typeDefinitions": {
          "InlineSpacerProps": {
            "filePath": "/components/InlineSpacer/InlineSpacer.ts",
            "name": "InlineSpacerProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/InlineSpacer/InlineSpacer.ts",
                "syntaxKind": "PropertySignature",
                "name": "spacing",
                "value": "MaybeResponsiveConditionalStyle<Exclude<Spacing, 'none'>>",
                "description": "Adjust size of the spacer",
                "isOptional": true,
                "defaultValue": "'base'"
              },
              {
                "filePath": "/components/InlineSpacer/InlineSpacer.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface InlineSpacerProps extends IdProps {\n  /**\n   * Adjust size of the spacer\n   *\n   * @defaultValue 'base'\n   **/\n  spacing?: MaybeResponsiveConditionalStyle<Exclude<Spacing, 'none'>>;\n}"
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Structure",
    "defaultExample": {
      "image": "inlinespacer-default.png",
      "codeblock": {
        "title": "Basic InlineSpacer",
        "tabs": [
          {
            "title": "React",
            "code": "import {\n  render,\n  InlineSpacer,\n  InlineStack,\n  View,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <InlineStack spacing=\"none\">\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n      <InlineSpacer spacing=\"loose\" />\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n      <InlineSpacer spacing=\"tight\" />\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n      <InlineSpacer spacing=\"base\" />\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n    </InlineStack>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {\n  extend,\n  InlineSpacer,\n  InlineStack,\n  View,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const inlineSpacer = root.createComponent(InlineStack, {spacing: 'none'}, [\n    root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n    root.createComponent(InlineSpacer, {spacing: 'loose'}),\n    root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n    root.createComponent(InlineSpacer, {spacing: 'tight'}),\n    root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n    root.createComponent(InlineSpacer, {spacing: 'base'}),\n    root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n  ]);\n\n  root.appendChild(inlineSpacer);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "related": []
  },
  {
    "name": "InlineStack",
    "description": "InlineStack is used to lay out a horizontal row of elements. Elements always wrap.",
    "isVisualComponent": true,
    "thumbnail": "inlinestack-thumbnail.png",
    "requires": "",
    "type": "",
    "definitions": [
      {
        "title": "InlineStackProps",
        "description": "",
        "type": "InlineStackProps",
        "typeDefinitions": {
          "InlineStackProps": {
            "filePath": "/components/InlineStack/InlineStack.ts",
            "name": "InlineStackProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityRole",
                "value": "ViewLikeAccessibilityRole",
                "description": "Sets the semantic meaning of the component’s content. When set,\nthe role will be used by assistive technologies to help buyers\nnavigate the page.\n\n\nFor example:\n\n- In an HTML host a `'listItem'` string will render: `<li>`\n\n- In an HTML host a `['listItem', 'separator']` tuple will render: `<li role='separator'>`",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label that describes the purpose or contents of the element. When set,\nit will be announced to buyers using assistive technologies and will\nprovide them with more context.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "blockAlignment",
                "value": "MaybeResponsiveConditionalStyle<BlockAlignment>",
                "description": "Position children along the cross axis",
                "isOptional": true,
                "defaultValue": "'start'"
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineAlignment",
                "value": "MaybeResponsiveConditionalStyle<InlineAlignment>",
                "description": "Position children along the main axis",
                "isOptional": true,
                "defaultValue": "'start'"
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "spacing",
                "value": "MaybeResponsiveConditionalStyle<Spacing | [Spacing, Spacing]>",
                "description": "Adjust spacing between children\n\n- `base` means the space between rows and columns is `base`.\n\n- [`base`, `none`] means the space between rows is `base`, space between columns is `none`.",
                "isOptional": true,
                "defaultValue": "'base'"
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "overflow",
                "value": "\"hidden\" | \"visible\"",
                "description": "Sets the overflow behavior of the element.\n\n`hidden`: clips the content when it is larger than the element’s container.\nThe element will not be scrollable and the users will not be able\nto access the clipped content by dragging or using a scroll wheel.\n\n`visible`: the content that extends beyond the element’s container is visible.",
                "isOptional": true,
                "defaultValue": "'visible'"
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "border",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<BorderStyle>>",
                "description": "Adjust the border style.\n\nTo shorten the code, it is possible to specify all the border style properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border styles are `base`\n\n- `['base', 'none']` means blockStart and blockEnd border styles are `base`, inlineStart and inlineEnd border styles are `none`\n\n- `['base', 'none', 'dotted', 'base']` means blockStart border style is `base`, inlineEnd border style is `none`, blockEnd border style is `dotted` and  blockStart border style is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderWidth",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<BorderWidth>\n  >",
                "description": "Adjust the border width.\n\nTo shorten the code, it is possible to specify all the border width properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border widths are `base`\n\n- `['base', 'medium']` means blockStart and blockEnd border widths are `base`, inlineStart and inlineEnd border widths are `medium`\n\n- `['base', 'medium', 'medium', 'base']` means blockStart border width is `base`, inlineEnd border width is `medium`, blockEnd border width is `medium` and  blockStart border width is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "",
                "isOptional": true,
                "isPrivate": true
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "cornerRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "Adjust the corner radius.\n\nProvide a single value to apply the same corner radius to all four corners, two values to apply different corner radii to opposing corners, or four values to apply different corner radii to each individual corner.\n\nFor example:\n\n- `base` means all 4 corner radii are `base`\n\n- `['base', 'none']` means the StartStart and EndEnd corner radii are `base`, StartEnd and EndStart corner radii are `none`.\n   When the context’s language direction is left to right, StartStart and EndEnd corners are the top left and bottom right corners\n   while StartEnd and EndStart corners are the top right and bottom left corners.\n\n- `['base', 'none', 'small', 'base']` means StartStart corner radius is `base`, StartEnd corner radius is `none`, EndEnd corner radius is `small` and  EndStart corner radius is `base`\n\nA `borderRadius` alias is available for this property. When both are specified, `cornerRadius` takes precedence.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "minInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the minimum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "minBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/InlineStack/InlineStack.ts",
                "syntaxKind": "PropertySignature",
                "name": "padding",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<Spacing>>",
                "description": "Adjust the padding.\n\nTo shorten the code, it is possible to specify all the padding properties in one property.\n\n\nExamples:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart paddings are `base`\n\n- [`base`, `none`] means blockStart and blockEnd paddings are `base`, inlineStart and inlineEnd paddings are `none`\n\n- [`base`, `none`, `large200`, `small200`] means blockStart padding is `base`, inlineEnd padding is `none`, blockEnd padding is `large200` and  blockStart padding is `small200`",
                "isOptional": true
              }
            ],
            "value": "export interface InlineStackProps\n  extends BorderProps,\n    CornerProps,\n    SizingProps,\n    SpacingProps {\n  /**\n   * Sets the semantic meaning of the component’s content. When set,\n   * the role will be used by assistive technologies to help buyers\n   * navigate the page.\n   *\n   *\n   * For example:\n   *\n   * - In an HTML host a `'listItem'` string will render: `<li>`\n   *\n   * - In an HTML host a `['listItem', 'separator']` tuple will render: `<li role='separator'>`\n   */\n  accessibilityRole?: ViewLikeAccessibilityRole;\n  /**\n   * A label that describes the purpose or contents of the element. When set,\n   * it will be announced to buyers using assistive technologies and will\n   * provide them with more context.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Position children along the cross axis\n   *\n   * @defaultValue 'start'\n   */\n  blockAlignment?: MaybeResponsiveConditionalStyle<BlockAlignment>;\n  /**\n   * Position children along the main axis\n   *\n   * @defaultValue 'start'\n   */\n  inlineAlignment?: MaybeResponsiveConditionalStyle<InlineAlignment>;\n  /**\n   * Adjust spacing between children\n   *\n   * - `base` means the space between rows and columns is `base`.\n   *\n   * - [`base`, `none`] means the space between rows is `base`, space between columns is `none`.\n   *\n   * @defaultValue 'base'\n   **/\n  spacing?: MaybeResponsiveConditionalStyle<Spacing | [Spacing, Spacing]>;\n  /**\n   * A unique identifier for the component.\n   */\n  id?: string;\n  /**\n   * Sets the overflow behavior of the element.\n   *\n   * `hidden`: clips the content when it is larger than the element’s container.\n   * The element will not be scrollable and the users will not be able\n   * to access the clipped content by dragging or using a scroll wheel.\n   *\n   * `visible`: the content that extends beyond the element’s container is visible.\n   *\n   * @default 'visible'\n   */\n  overflow?: 'hidden' | 'visible';\n}"
          },
          "ViewLikeAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ViewLikeAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole | [NonPresentationalAccessibilityRole, NonPresentationalAccessibilityRole]",
            "description": ""
          },
          "NonPresentationalAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NonPresentationalAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole",
            "description": ""
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "BlockAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BlockAlignment",
            "value": "Alignment | 'baseline'",
            "description": ""
          },
          "Alignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Alignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "InlineAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InlineAlignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          },
          "MaybeShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeShorthandProperty",
            "value": "T | ShorthandProperty<T>",
            "description": ""
          },
          "ShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShorthandProperty",
            "value": "[T, T] | [T, T, T, T]",
            "description": ""
          },
          "BorderStyle": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderStyle",
            "value": "'base' | 'dotted' | 'none'",
            "description": ""
          },
          "BorderWidth": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderWidth",
            "value": "'base' | 'medium'",
            "description": ""
          },
          "CornerRadius": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadius",
            "value": "'base' | 'small' | 'large' | 'fullyRounded' | 'none' | CornerRadiusDeprecated",
            "description": ""
          },
          "CornerRadiusDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadiusDeprecated",
            "value": "'tight' | 'loose'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Structure",
    "defaultExample": {
      "image": "inlinestack-default.png",
      "codeblock": {
        "title": "Basic InlineStack",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, InlineStack, View} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <InlineStack spacing=\"base\">\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n      <View border=\"base\" padding=\"base\">\n        View\n      </View>\n    </InlineStack>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, InlineStack, View} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const inlineStack = root.createComponent(\n    InlineStack,\n    {\n      spacing: 'base',\n    },\n    [\n      root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n      root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n      root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n      root.createComponent(View, {border: 'base', padding: 'base'}, 'View'),\n    ],\n  );\n\n  root.appendChild(inlineStack);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "accessibility-roles",
        "title": "Accessibility roles",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"main\"</code> | Used to indicate the primary content. |\n| <code>\"header\"</code> | Used to indicate the component is a header. |\n| <code>\"footer\"</code> | Used to display information such as copyright information, navigation links, and privacy statements. |\n| <code>\"section\"</code> | Used to indicate a generic section. |\n| <code>\"complementary\"</code> | Used to designate a supporting section that relates to the main content. |\n| <code>\"navigation\"</code> | Used to identify major groups of links used for navigating. |\n| <code>\"orderedList\"</code> | Used to identify a list of ordered items. |\n| <code>\"listItem\"</code> | Used to identify an item inside a list of items. |\n| <code>\"unorderedList\"</code> | Used to identify a list of unordered items. |\n| <code>\"separator\"</code> | Used to indicates the component acts as a divider that separates and distinguishes sections of content. |\n| <code>\"status\"</code> | Used to define a live region containing advisory information for the user that is not important enough to be an alert. |\n| <code>\"alert\"</code> | Used for important, and usually time-sensitive, information. |"
      }
    ],
    "related": []
  },
  {
    "name": "Link",
    "description": "Link makes text interactive so customers can perform an action, such as navigating to another location.",
    "requires": "",
    "isVisualComponent": true,
    "thumbnail": "link-thumbnail.png",
    "type": "",
    "definitions": [
      {
        "title": "LinkProps",
        "description": "",
        "type": "LinkProps",
        "typeDefinitions": {
          "LinkProps": {
            "filePath": "/components/Link/Link.ts",
            "name": "LinkProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Link/Link.ts",
                "syntaxKind": "PropertySignature",
                "name": "to",
                "value": "string",
                "description": "Destination to navigate to. You must provide either this property, `onPress`,\nor both.",
                "isOptional": true
              },
              {
                "filePath": "/components/Link/Link.ts",
                "syntaxKind": "PropertySignature",
                "name": "external",
                "value": "boolean",
                "description": "Open the link in a new window or tab",
                "isOptional": true
              },
              {
                "filePath": "/components/Link/Link.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Unique identifier.\n\nTypically used as a target for another component’s controls\nto associate an accessible label with an action.",
                "isOptional": true
              },
              {
                "filePath": "/components/Link/Link.ts",
                "syntaxKind": "PropertySignature",
                "name": "language",
                "value": "string",
                "description": "Indicate the text language. Useful when the text is in a different language than the rest of the page.\nIt will allow assistive technologies such as screen readers to invoke the correct pronunciation.\n[Reference of values](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry) (\"subtag\" label)",
                "isOptional": true
              },
              {
                "filePath": "/components/Link/Link.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label used for buyers using assistive technologies. When set, any\n`children` supplied to this component will not be announced to screen reader users.",
                "isOptional": true
              },
              {
                "filePath": "/components/Link/Link.ts",
                "syntaxKind": "PropertySignature",
                "name": "appearance",
                "value": "Extract<Appearance, 'monochrome'>",
                "description": "Specify the color of the link.\n`monochrome` will take the color of its parent.",
                "isOptional": true
              },
              {
                "filePath": "/components/Link/Link.ts",
                "syntaxKind": "MethodSignature",
                "name": "onPress",
                "value": "() => void",
                "description": "Callback when pressed. If `to` is set, it will execute the callback and\nthen navigate to the location specified by `to`.",
                "isOptional": true
              },
              {
                "filePath": "/components/Link/Link.ts",
                "syntaxKind": "PropertySignature",
                "name": "overlay",
                "value": "RemoteFragment",
                "description": "An overlay component to render when the user interacts with the component.",
                "isOptional": true
              },
              {
                "filePath": "/components/Link/Link.ts",
                "syntaxKind": "PropertySignature",
                "name": "toggles",
                "value": "string",
                "description": "The component's identifier whose visibility will be toggled when this component is actioned.",
                "isOptional": true
              }
            ],
            "value": "export interface LinkProps\n  extends OverlayActivatorProps,\n    DisclosureActivatorProps {\n  /**\n   * Destination to navigate to. You must provide either this property, `onPress`,\n   * or both.\n   */\n  to?: string;\n  /**\n   * Open the link in a new window or tab\n   */\n  external?: boolean;\n  /**\n   * Unique identifier.\n   *\n   * Typically used as a target for another component’s controls\n   * to associate an accessible label with an action.\n   */\n  id?: string;\n  /**\n   * Indicate the text language. Useful when the text is in a different language than the rest of the page.\n   * It will allow assistive technologies such as screen readers to invoke the correct pronunciation.\n   * [Reference of values](https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry) (\"subtag\" label)\n   */\n  language?: string;\n  /**\n   * A label used for buyers using assistive technologies. When set, any\n   * `children` supplied to this component will not be announced to screen reader users.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Specify the color of the link.\n   * `monochrome` will take the color of its parent.\n   */\n  appearance?: Extract<Appearance, 'monochrome'>;\n  /**\n   * Callback when pressed. If `to` is set, it will execute the callback and\n   * then navigate to the location specified by `to`.\n   */\n  onPress?(): void;\n}"
          },
          "Appearance": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Appearance",
            "value": "'accent' | 'interactive' | 'subdued' | 'info' | 'success' | 'warning' | 'critical' | 'monochrome'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Actions",
    "defaultExample": {
      "image": "link-default.png",
      "codeblock": {
        "title": "Basic Link",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Link} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Link to=\"https://www.shopify.ca/climate/sustainability-fund\">\n      Sustainability fund\n    </Link>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Link} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const link = root.createComponent(\n    Link,\n    {to: 'https://www.shopify.ca/climate/sustainability-fund'},\n    'Sustainability fund',\n  );\n\n  root.appendChild(link);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "appearance",
        "title": "Appearance",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"monochrome\"</code> | Takes the color of its parent.|"
      },
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- If the link isn’t in a paragraph, then consider using a plain button instead for a larger hit area.\n\n- Use links primarily for navigation and use buttons primarily for actions.\n\n- The HTML that renders for the Button and `Link` components includes style and accessibility information. Use these components intentionally and consistently to provide a more inclusive experience for assistive technology users and a more cohesive visual experience for sighted users."
      }
    ],
    "related": [
      {
        "name": "Button",
        "subtitle": "Component",
        "url": "button",
        "type": "Component"
      }
    ]
  },
  {
    "name": "List",
    "description": "Lists display a set of related content. Each list item usually begins with a bullet or a number.",
    "requires": "",
    "thumbnail": "list-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "ListProps",
        "description": "",
        "type": "ListProps",
        "typeDefinitions": {
          "ListProps": {
            "filePath": "/components/List/List.ts",
            "name": "ListProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "spacing",
                "value": "MaybeResponsiveConditionalStyle<Spacing>",
                "description": "Adjust spacing between list items",
                "isOptional": true,
                "defaultValue": "'base'"
              },
              {
                "filePath": "/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "marker",
                "value": "Marker",
                "description": "Type of marker to display",
                "isOptional": true,
                "defaultValue": "'bullet'"
              },
              {
                "filePath": "/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label that describes the purpose or contents of the list. When set,\nit will be announced to buyers using assistive technologies and will\nprovide them with more context.",
                "isOptional": true
              },
              {
                "filePath": "/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface ListProps extends IdProps {\n  /**\n   * Adjust spacing between list items\n   *\n   * @defaultValue 'base'\n   */\n  spacing?: MaybeResponsiveConditionalStyle<Spacing>;\n  /**\n   * Type of marker to display\n   *\n   * @defaultValue 'bullet'\n   */\n  marker?: Marker;\n  /**\n   * A label that describes the purpose or contents of the list. When set,\n   * it will be announced to buyers using assistive technologies and will\n   * provide them with more context.\n   */\n  accessibilityLabel?: string;\n}"
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          },
          "Marker": {
            "filePath": "/components/List/List.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Marker",
            "value": "'none' | 'bullet' | 'number'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Other",
    "defaultExample": {
      "image": "list-default.png",
      "codeblock": {
        "title": "Basic List",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, List, ListItem} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <List>\n      <ListItem>100% organic cotton</ListItem>\n      <ListItem>Made in Canada</ListItem>\n      <ListItem>Machine washable</ListItem>\n    </List>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, List, ListItem} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const list = root.createComponent(List, undefined, [\n    root.createComponent(ListItem, undefined, '100% organic cotton'),\n    root.createComponent(ListItem, undefined, 'Made in Canada'),\n    root.createComponent(ListItem, undefined, 'Machine washable'),\n  ]);\n\n  root.appendChild(list);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Use lists to break up chunks of related content to make the information easier for customers to scan.\n\n- Phrase list items consistently. Try to start each item with a noun or a verb and be consistent with each item.\n\n- Use bullets for a text-only list of related items that don’t need to be in a specific order.\n\n- Use numbers for a text-only list of related items when you need to communicate order, priority, or sequence.\n\n- Don’t use a marker when only the semantic value of a list matters, such as with a list of links."
      }
    ],
    "related": [
      {
        "name": "ListItem",
        "subtitle": "Component",
        "url": "listItem",
        "type": "Component"
      }
    ]
  },
  {
    "name": "ListItem",
    "description": "List items are used as children of the `List` component.\n\nThey usually begins with a bullet or a number.",
    "requires": "",
    "thumbnail": "listitem-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [],
    "category": "Components",
    "subCategory": "Other",
    "defaultExample": {
      "image": "listitem-default.png",
      "codeblock": {
        "title": "Basic ListItem",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, List, ListItem} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <List>\n      <ListItem>100% organic cotton</ListItem>\n    </List>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, List, ListItem} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const list = root.createComponent(List, undefined, [\n    root.createComponent(ListItem, undefined, '100% organic cotton'),\n  ]);\n\n  root.appendChild(list);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "related": [
      {
        "name": "List",
        "subtitle": "Component",
        "url": "list",
        "type": "Component"
      }
    ]
  },
  {
    "name": "Modal",
    "description": "Modals are a special type of overlay that shift focus towards a specific action/set of information before the main flow can proceed. They must be specified inside the `overlay` prop of an activator component (`Button`, `Link` or `Pressable`).\n\nThe library takes care of applying the WAI-ARIA Dialog pattern automatically for the activator and the modal content.",
    "requires": "",
    "thumbnail": "modal-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "ModalProps",
        "description": "",
        "type": "ModalProps",
        "typeDefinitions": {
          "ModalProps": {
            "filePath": "/components/Modal/Modal.ts",
            "name": "ModalProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Modal/Modal.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the Modal. When no `id` is set,\na globally unique value will be used instead.",
                "isOptional": true
              },
              {
                "filePath": "/components/Modal/Modal.ts",
                "syntaxKind": "PropertySignature",
                "name": "onClose",
                "value": "() => void",
                "description": "Callback when the modal is closed. That is when either the close button, the backdrop,\nor the `escape` key are pressed.",
                "isOptional": true
              },
              {
                "filePath": "/components/Modal/Modal.ts",
                "syntaxKind": "PropertySignature",
                "name": "onOpen",
                "value": "() => void",
                "description": "Callback when the modal is opened. This is called at the beginning of the transition\nthat opens the modal.",
                "isOptional": true
              },
              {
                "filePath": "/components/Modal/Modal.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "A title rendered at the top of the modal.",
                "isOptional": true
              },
              {
                "filePath": "/components/Modal/Modal.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label to describe the purpose of the modal that is announced by screen readers.\nIf not set, it will use the value of `title`.",
                "isOptional": true
              },
              {
                "filePath": "/components/Modal/Modal.ts",
                "syntaxKind": "PropertySignature",
                "name": "padding",
                "value": "boolean",
                "description": "Adds a default spacing around both header (which holds the `title`) and content of the modal.",
                "isOptional": true
              }
            ],
            "value": "export interface ModalProps {\n  /**\n   * A unique identifier for the Modal. When no `id` is set,\n   * a globally unique value will be used instead.\n   */\n  id?: string;\n  /**\n   * Callback when the modal is closed. That is when either the close button, the backdrop,\n   * or the `escape` key are pressed.\n   */\n  onClose?: () => void;\n  /**\n   * Callback when the modal is opened. This is called at the beginning of the transition\n   * that opens the modal.\n   */\n  onOpen?: () => void;\n  /**\n   * A title rendered at the top of the modal.\n   */\n  title?: string;\n  /**\n   * A label to describe the purpose of the modal that is announced by screen readers.\n   * If not set, it will use the value of `title`.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Adds a default spacing around both header (which holds the `title`) and content of the modal.\n   */\n  padding?: boolean;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Overlays",
    "defaultExample": {
      "image": "modal-default.png",
      "codeblock": {
        "title": "Basic Modal",
        "tabs": [
          {
            "title": "React",
            "code": "import {\n  render,\n  useExtensionApi,\n  Button,\n  Link,\n  Modal,\n  TextBlock,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  const {ui} = useExtensionApi();\n\n  return (\n    <Link\n      overlay={\n        <Modal id=\"my-modal\" padding title=\"Return policy\">\n          <TextBlock>\n            We have a 30-day return policy, which means you have 30 days after\n            receiving your item to request a return.\n          </TextBlock>\n          <TextBlock>\n            To be eligible for a return, your item must be in the same condition\n            that you received it, unworn or unused, with tags, and in its\n            original packaging. You’ll also need the receipt or proof of\n            purchase.\n          </TextBlock>\n          <Button onPress={() => ui.overlay.close('my-modal')}>Close</Button>\n        </Modal>\n      }\n    >\n      Return policy\n    </Link>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {\n  extend,\n  Button,\n  Link,\n  Modal,\n  TextBlock,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root, {ui}) => {\n  const modalFragment = root.createFragment();\n  const modal = root.createComponent(\n    Modal,\n    {id: 'my-modal', title: 'Return policy', padding: true},\n    [\n      root.createComponent(\n        TextBlock,\n        undefined,\n        'We have a 30-day return policy, which means you have 30 days after receiving your item to request a return.',\n      ),\n      root.createComponent(\n        TextBlock,\n        undefined,\n        'To be eligible for a return, your item must be in the same condition that you received it, unworn or unused, with tags, and in its original packaging. You’ll also need the receipt or proof of purchase.',\n      ),\n      root.createComponent(\n        Button,\n        {\n          onPress() {\n            ui.overlay.close('my-modal');\n          },\n        },\n        'Close',\n      ),\n    ],\n  );\n  modalFragment.appendChild(modal);\n  const link = root.createComponent(\n    Link,\n    {overlay: modalFragment},\n    'Return policy',\n  );\n\n  root.appendChild(link);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "Use modals if:\n\n- The information needed to be shown is not critical in completing the checkout process and information cannot be condensed into one sentence.\n\n- The information the buyer is entering requires less than two rows of input fields.\n\n- The information the buyer is entering is not reliant on information on the page (which is underneath the modal and not visible to them)."
      }
    ],
    "related": []
  },
  {
    "name": "PhoneField",
    "description": "A PhoneField is an input field that merchants can type into optimized for phone numbers with a country code base auto-formatting. The country code is required for the initial render of the field but it can be overriden later by the user either by selecting a country in the country selection dropdown or by manually editing the country phone code directly in the text field.",
    "requires": "",
    "isVisualComponent": true,
    "thumbnail": "phonefield-thumbnail.png",
    "type": "",
    "definitions": [
      {
        "title": "PhoneFieldProps",
        "description": "",
        "type": "PhoneFieldProps",
        "typeDefinitions": {
          "PhoneFieldProps": {
            "filePath": "/components/PhoneField/PhoneField.ts",
            "name": "PhoneFieldProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessory",
                "value": "string | RemoteFragment<RemoteRoot<any, any>>",
                "description": "Any content to render at the end of the text field. Commonly used\nto display an icon that opens a tooltip providing more information about the field.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityDescription",
                "value": "string",
                "description": "A detailed description for screen readers.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "autocomplete",
                "value": "boolean | Autocomplete",
                "description": "A hint as to the intended content of the field.\n\nWhen set to `true`, this property indicates that the field should support\nautofill, but you do not have any more semantic information on the intended\ncontents.\n\nWhen set to `false`, you are indicating that this field contains sensitive\ninformation, or contents that are never saved, like one-time codes.\n\nAlternatively, you can provide an `Autocomplete` object, which describes the\nspecific data you would like to be entered into this field during autofill.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the field can be modified.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "error",
                "value": "string",
                "description": "Indicate an error to the user. The field will be given a specific stylistic treatment\nto communicate problems that have to be resolved immediately.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "icon",
                "value": "IconSource | { source: IconSource; position?: \"start\" | \"end\"; }",
                "description": "An icon to render at the start or end of the field.\nIt will render at the start by default.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the field. When no `id` is set,\na globally unique value will be used instead.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "Content to use as the field label. This value is also used as the placeholder\nwhen the field is empty."
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxLength",
                "value": "number",
                "description": "Specifies the maximum number of characters allowed.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "An identifier for the field that is unique within the nearest\ncontaining `Form` component.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "readonly",
                "value": "boolean",
                "description": "Whether the field is read-only.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "required",
                "value": "boolean",
                "description": "Whether the field needs a value. This requirement adds semantic value\nto the field, but it will not cause an error to appear automatically.\nIf you want to present an error when this field is empty, you can do\nso with the `error` prop.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The current value for the field. If omitted, the field will be empty. You should\nupdate this value in response to the `onChange` callback.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onChange",
                "value": "(value: string) => void",
                "description": "Callback when the buyer has **finished editing** a field or pressed the country dropdown.\nUnlike `onChange` callbacks you may be familiar with from Polaris or other React component libraries,\nthis callback is **not** run on every change to the input. Phone fields are\n“partially controlled” components, which means that while the buyer edits the\nfield, its state is controlled by the component. Once the buyer has signalled that\nthey have finished editing the field (typically, by blurring the field), `onChange`\nis called if the input actually changed from the most recent `value` property. At\nthat point, you are expected to store this “committed value” in state, and reflect\nit in the phone field’s `value` property.\n\nThis state management model is important given how UI Extensions are rendered. UI Extension components\nrun on a separate thread from the UI, so they can’t respond to input synchronously.\nA pattern popularized by [controlled React components](https://reactjs.org/docs/forms.html#controlled-components)\nis to have the component be the source of truth for the input `value`, and update\nthe `value` on every user input. The delay in responding to events from a UI\nextension is only a few milliseconds, but attempting to strictly store state with\nthis delay can cause issues if a user types quickly, or if the buyer is using a\nlower-powered device. Having the UI thread take ownership for “in progress” input,\nand only synchronizing when the user is finished with a field, avoids this risk.\n\nIt can still sometimes be useful to be notified when the user makes any input in\nthe field. If you need this capability, you can use the `onInput` prop. However,\nnever use that property to create tightly controlled state for the `value`.\n\nThis callback is called with the current formatted value of the field. If the value\nof a field is the same as the current `value` prop provided to the field,\nthe `onChange` callback will not be run.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onInput",
                "value": "(value: string) => void",
                "description": "Callback when the user makes any changes in the field including selecting a country\nin the dropdown. As noted in the documentation for `onChange`, you **must not** use\nthis to update `state` — use the `onChange` callback for that purpose.\nUse the `onInput` prop when you need to do something as soon as the buyer makes a change,\nlike clearing validation errors that apply to the field as soon as the user begins\nmaking the necessary adjustments.\n\nThis callback is called with the current formatted value.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onFocus",
                "value": "() => void",
                "description": "Callback when input is focused.",
                "isOptional": true
              },
              {
                "filePath": "/components/PhoneField/PhoneField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onBlur",
                "value": "() => void",
                "description": "Callback when focus is removed.",
                "isOptional": true
              }
            ],
            "value": "export interface PhoneFieldProps {\n  /**\n   * Any content to render at the end of the text field. Commonly used\n   * to display an icon that opens a tooltip providing more information about the field.\n   */\n  accessory?: string | RemoteFragment;\n\n  /**\n   * A detailed description for screen readers.\n   */\n  accessibilityDescription?: string;\n\n  /**\n   * A hint as to the intended content of the field.\n   *\n   * When set to `true`, this property indicates that the field should support\n   * autofill, but you do not have any more semantic information on the intended\n   * contents.\n   *\n   * When set to `false`, you are indicating that this field contains sensitive\n   * information, or contents that are never saved, like one-time codes.\n   *\n   * Alternatively, you can provide an `Autocomplete` object, which describes the\n   * specific data you would like to be entered into this field during autofill.\n   */\n  autocomplete?: Autocomplete | boolean;\n\n  /**\n   * Whether the field can be modified.\n   */\n  disabled?: boolean;\n\n  /**\n   * Indicate an error to the user. The field will be given a specific stylistic treatment\n   * to communicate problems that have to be resolved immediately.\n   */\n  error?: string;\n\n  /**\n   * An icon to render at the start or end of the field.\n   * It will render at the start by default.\n   */\n  icon?: IconSource | {source: IconSource; position?: 'start' | 'end'};\n\n  /**\n   * A unique identifier for the field. When no `id` is set,\n   * a globally unique value will be used instead.\n   */\n  id?: string;\n\n  /**\n   * Content to use as the field label. This value is also used as the placeholder\n   * when the field is empty.\n   */\n  label: string;\n\n  /**\n   * Specifies the maximum number of characters allowed.\n   */\n  maxLength?: number;\n\n  /**\n   * An identifier for the field that is unique within the nearest\n   * containing `Form` component.\n   */\n  name?: string;\n\n  /**\n   * Whether the field is read-only.\n   */\n  readonly?: boolean;\n\n  /**\n   * Whether the field needs a value. This requirement adds semantic value\n   * to the field, but it will not cause an error to appear automatically.\n   * If you want to present an error when this field is empty, you can do\n   * so with the `error` prop.\n   */\n  required?: boolean;\n\n  /**\n   * The current value for the field. If omitted, the field will be empty. You should\n   * update this value in response to the `onChange` callback.\n   */\n  value?: string;\n\n  /**\n   * Callback when the buyer has **finished editing** a field or pressed the country dropdown.\n   * Unlike `onChange` callbacks you may be familiar with from Polaris or other React component libraries,\n   * this callback is **not** run on every change to the input. Phone fields are\n   * “partially controlled” components, which means that while the buyer edits the\n   * field, its state is controlled by the component. Once the buyer has signalled that\n   * they have finished editing the field (typically, by blurring the field), `onChange`\n   * is called if the input actually changed from the most recent `value` property. At\n   * that point, you are expected to store this “committed value” in state, and reflect\n   * it in the phone field’s `value` property.\n   *\n   * This state management model is important given how UI Extensions are rendered. UI Extension components\n   * run on a separate thread from the UI, so they can’t respond to input synchronously.\n   * A pattern popularized by [controlled React components](https://reactjs.org/docs/forms.html#controlled-components)\n   * is to have the component be the source of truth for the input `value`, and update\n   * the `value` on every user input. The delay in responding to events from a UI\n   * extension is only a few milliseconds, but attempting to strictly store state with\n   * this delay can cause issues if a user types quickly, or if the buyer is using a\n   * lower-powered device. Having the UI thread take ownership for “in progress” input,\n   * and only synchronizing when the user is finished with a field, avoids this risk.\n   *\n   * It can still sometimes be useful to be notified when the user makes any input in\n   * the field. If you need this capability, you can use the `onInput` prop. However,\n   * never use that property to create tightly controlled state for the `value`.\n   *\n   * This callback is called with the current formatted value of the field. If the value\n   * of a field is the same as the current `value` prop provided to the field,\n   * the `onChange` callback will not be run.\n   */\n  onChange?(value: string): void;\n  /**\n   * Callback when the user makes any changes in the field including selecting a country\n   * in the dropdown. As noted in the documentation for `onChange`, you **must not** use\n   * this to update `state` — use the `onChange` callback for that purpose.\n   * Use the `onInput` prop when you need to do something as soon as the buyer makes a change,\n   * like clearing validation errors that apply to the field as soon as the user begins\n   * making the necessary adjustments.\n   *\n   * This callback is called with the current formatted value.\n   */\n  onInput?(value: string): void;\n  /**\n   * Callback when input is focused.\n   */\n  onFocus?(): void;\n  /**\n   * Callback when focus is removed.\n   */\n  onBlur?(): void;\n}"
          },
          "Autocomplete": {
            "filePath": "/components/shared.ts",
            "name": "Autocomplete",
            "description": "A descriptor for selecting the data a field would like to receive during\nautocomplete. This attribute is modeled off of a limited set of the autocomplete\nvalues supported in browsers.",
            "members": [
              {
                "filePath": "/components/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "group",
                "value": "AutocompleteGroup",
                "description": "The contact information “group” the autocomplete data should be sourced from.",
                "isOptional": true
              },
              {
                "filePath": "/components/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "field",
                "value": "AutocompleteField",
                "description": "The type of data that should be inserted into a field supporting autocomplete."
              }
            ],
            "value": "export interface Autocomplete {\n  /**\n   * The contact information “group” the autocomplete data should be sourced from.\n   */\n  group?: AutocompleteGroup;\n  /**\n   * The type of data that should be inserted into a field supporting autocomplete.\n   */\n  field: AutocompleteField;\n}"
          },
          "AutocompleteGroup": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AutocompleteGroup",
            "value": "'shipping' | 'billing' | 'location'",
            "description": ""
          },
          "AutocompleteField": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AutocompleteField",
            "value": "'name' | 'honorific-prefix' | 'given-name' | 'additional-name' | 'family-name' | 'honorific-suffix' | 'nickname' | 'username' | 'new-password' | 'current-password' | 'one-time-code' | 'organization-title' | 'organization' | 'street-address' | 'address-line1' | 'address-line2' | 'address-line3' | 'address-level4' | 'address-level3' | 'address-level2' | 'address-level1' | 'country' | 'country-name' | 'postal-code' | 'credit-card-name' | 'credit-card-given-name' | 'credit-card-additional-name' | 'credit-card-family-name' | 'credit-card-number' | 'credit-card-expiry' | 'credit-card-expiry-month' | 'credit-card-expiry-year' | 'credit-card-security-code' | 'credit-card-type' | 'transaction-currency' | 'transaction-amount' | 'language' | 'birthday' | 'birthday-day' | 'birthday-month' | 'birthday-year' | 'sex' | 'url' | 'photo' | 'telephone' | 'telephone-country-code' | 'telephone-national' | 'telephone-area-code' | 'telephone-local' | 'telephone-local-prefix' | 'telephone-local-suffix' | 'telephone-extension' | 'email' | 'instant-message' | 'home telephone' | 'home telephone-country-code' | 'home telephone-national' | 'home telephone-area-code' | 'home telephone-local' | 'home telephone-local-prefix' | 'home telephone-local-suffix' | 'home telephone-extension' | 'home email' | 'home instant-message' | 'work telephone' | 'work telephone-country-code' | 'work telephone-national' | 'work telephone-area-code' | 'work telephone-local' | 'work telephone-local-prefix' | 'work telephone-local-suffix' | 'work telephone-extension' | 'work email' | 'work instant-message' | 'mobile telephone' | 'mobile telephone-country-code' | 'mobile telephone-national' | 'mobile telephone-area-code' | 'mobile telephone-local' | 'mobile telephone-local-prefix' | 'mobile telephone-local-suffix' | 'mobile telephone-extension' | 'mobile email' | 'mobile instant-message' | 'fax telephone' | 'fax telephone-country-code' | 'fax telephone-national' | 'fax telephone-area-code' | 'fax telephone-local' | 'fax telephone-local-prefix' | 'fax telephone-local-suffix' | 'fax telephone-extension' | 'fax email' | 'fax instant-message' | 'pager telephone' | 'pager telephone-country-code' | 'pager telephone-national' | 'pager telephone-area-code' | 'pager telephone-local' | 'pager telephone-local-prefix' | 'pager telephone-local-suffix' | 'pager telephone-extension' | 'pager email' | 'pager instant-message'",
            "description": ""
          },
          "IconSource": {
            "filePath": "/components/Icon/Icon.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "IconSource",
            "value": "'arrowLeft' | 'arrowRight' | 'arrowUp' | 'arrowUpRight' | 'arrowDown' | 'bag' | 'calendar' | 'camera' | 'caretDown' | 'cart' | 'checkmark' | 'chevronLeft' | 'chevronRight' | 'chevronUp' | 'chevronDown' | 'clock' | 'close' | 'critical' | 'delete' | 'delivered' | 'delivery' | 'disabled' | 'discount' | 'email' | 'error' | 'errorFill' | 'external' | 'filter' | 'geolocation' | 'gift' | 'giftFill' | 'grid' | 'hamburger' | 'hollowCircle' | 'horizontalDots' | 'info' | 'infoFill' | 'list' | 'lock' | 'magnify' | 'map' | 'marker' | 'minus' | 'mobile' | 'note' | 'orderBox' | 'pen' | 'plus' | 'profile' | 'question' | 'questionFill' | 'reorder' | 'return' | 'store' | 'success' | 'truck' | 'verticalDots' | 'warning' | 'warningFill'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Forms",
    "defaultExample": {
      "image": "phonefield-default.png",
      "codeblock": {
        "title": "Basic PhoneField",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, PhoneField} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return <PhoneField label=\"Phone\" value=\"1 (555) 555-5555\" />;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, PhoneField} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const phoneField = root.createComponent(PhoneField, {\n    label: 'Phone',\n    value: '1 (555) 555-5555',\n  });\n\n  root.appendChild(phoneField);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "related": []
  },
  {
    "name": "Popover",
    "description": "Popovers are similar to tooltips. They are small overlays that open on demand after a user interaction. The difference is that the popover can contain more content, without cluttering the page. They must be specified inside the `overlay` prop of an activator component (`Button`, `Link` or `Pressable`).\n\nThe library takes care of applying the WAI-ARIA Popover Widget pattern automatically for the activator and the popover content.",
    "requires": "",
    "isVisualComponent": true,
    "thumbnail": "popover-thumbnail.png",
    "type": "",
    "definitions": [
      {
        "title": "PopoverProps",
        "description": "",
        "type": "PopoverProps",
        "typeDefinitions": {
          "PopoverProps": {
            "filePath": "/components/Popover/Popover.ts",
            "name": "PopoverProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Popover/Popover.ts",
                "syntaxKind": "PropertySignature",
                "name": "position",
                "value": "PopoverPosition",
                "description": "Position the Popover relative to the activator.",
                "isOptional": true,
                "defaultValue": "'blockStart'"
              },
              {
                "filePath": "/components/Popover/Popover.ts",
                "syntaxKind": "PropertySignature",
                "name": "alignment",
                "value": "Alignment",
                "description": "Align the Popover in the axis determined by the position.",
                "isOptional": true,
                "defaultValue": "'center'"
              },
              {
                "filePath": "/components/Popover/Popover.ts",
                "syntaxKind": "PropertySignature",
                "name": "onOpen",
                "value": "() => void",
                "description": "Callback to run when the Popover is opened",
                "isOptional": true
              },
              {
                "filePath": "/components/Popover/Popover.ts",
                "syntaxKind": "PropertySignature",
                "name": "onClose",
                "value": "() => void",
                "description": "Callback to run when the Popover is closed",
                "isOptional": true
              },
              {
                "filePath": "/components/Popover/Popover.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              },
              {
                "filePath": "/components/Popover/Popover.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/Popover/Popover.ts",
                "syntaxKind": "PropertySignature",
                "name": "minInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the minimum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/Popover/Popover.ts",
                "syntaxKind": "PropertySignature",
                "name": "padding",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<Spacing>>",
                "description": "Adjust the padding.\n\nTo shorten the code, it is possible to specify all the padding properties in one property.\n\n\nExamples:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart paddings are `base`\n\n- [`base`, `none`] means blockStart and blockEnd paddings are `base`, inlineStart and inlineEnd paddings are `none`\n\n- [`base`, `none`, `large200`, `small200`] means blockStart padding is `base`, inlineEnd padding is `none`, blockEnd padding is `large200` and  blockStart padding is `small200`",
                "isOptional": true
              }
            ],
            "value": "export interface PopoverProps\n  extends IdProps,\n    Pick<SizingProps, 'maxInlineSize' | 'minInlineSize'>,\n    Pick<SpacingProps, 'padding'> {\n  /**\n   * Position the Popover relative to the activator.\n   * @defaultValue 'blockStart'\n   */\n  position?: PopoverPosition;\n  /**\n   * Align the Popover in the axis determined by the position.\n   * @defaultValue 'center'\n   */\n  alignment?: Alignment;\n  /**\n   * Callback to run when the Popover is opened\n   */\n  onOpen?: () => void;\n  /**\n   * Callback to run when the Popover is closed\n   */\n  onClose?: () => void;\n}"
          },
          "PopoverPosition": {
            "filePath": "/components/Popover/Popover.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "PopoverPosition",
            "value": "'inlineStart' | 'inlineEnd' | 'blockStart' | 'blockEnd'",
            "description": ""
          },
          "Alignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Alignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "MaybeShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeShorthandProperty",
            "value": "T | ShorthandProperty<T>",
            "description": ""
          },
          "ShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShorthandProperty",
            "value": "[T, T] | [T, T, T, T]",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Overlays",
    "defaultExample": {
      "image": "popover-default.png",
      "codeblock": {
        "title": "Basic Popover",
        "tabs": [
          {
            "title": "React",
            "code": "import {\n  render,\n  Pressable,\n  Popover,\n  View,\n  TextBlock,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Pressable\n      overlay={\n        <Popover>\n          <View maxInlineSize={200} padding=\"base\">\n            <TextBlock>A thoughtful way to pay</TextBlock>\n            <TextBlock>Tap don’t type</TextBlock>\n            <TextBlock>\n              Shop Pay remembers your important details, so you can fill carts,\n              not forms. And everything is encrypted so you can speed safely\n              through checkout.\n            </TextBlock>\n          </View>\n        </Popover>\n      }\n    >\n      More info\n    </Pressable>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {\n  extend,\n  Pressable,\n  Popover,\n  View,\n  TextBlock,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const popoverFragment = root.createFragment();\n  const popover = root.createComponent(Popover, {}, [\n    root.createComponent(View, {maxInlineSize: 200, padding: 'base'}, [\n      root.createComponent(TextBlock, {}, 'A thoughtful way to pay'),\n      root.createComponent(TextBlock, {}, 'Tap don’t type'),\n      root.createComponent(\n        TextBlock,\n        {},\n        'Shop Pay remembers your important details, so you can fill carts, not forms. And everything is encrypted so you can speed safely through checkout.',\n      ),\n    ]),\n  ]);\n  popoverFragment.appendChild(popover);\n  const pressable = root.createComponent(\n    Pressable,\n    {overlay: popoverFragment},\n    'More info',\n  );\n\n  root.appendChild(pressable);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "Use popovers if:\n\n- The intent is to ask the customer for information.\n\n- It’s possible to use at most two rows of input fields to get the information."
      }
    ],
    "related": []
  },
  {
    "name": "Pressable",
    "description": "Pressable is a generic interactive component. It shares the same styling properties as View but also adds pressable behavior, meaning that you can execute some logic in response to user interaction. Use this component for creating interactive elements without the default styling that comes with `Button` and `Link`.",
    "requires": "",
    "thumbnail": "pressable-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "PressableProps",
        "description": "",
        "type": "PressableProps",
        "typeDefinitions": {
          "PressableProps": {
            "filePath": "/components/Pressable/Pressable.ts",
            "name": "PressableProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "display",
                "value": "Display",
                "description": "Changes the display of the Pressable.\n\n\n`inline` follows the direction of words in a sentence based on the document’s writing mode.\n\n`block` follows the direction of paragraphs based on the document’s writing mode.",
                "isOptional": true,
                "defaultValue": "'block'"
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label that describes the purpose or contents of the element. When set,\nit will be announced to buyers using assistive technologies and will\nprovide them with more context.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityRole",
                "value": "ButtonAccessibilityRole",
                "description": "The role of the button that will be rendered.\n\n`button`: renders a regular button.\n\n`submit`: renders a button that submits a form.",
                "isOptional": true,
                "defaultValue": "'button'"
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Disables the button, disallowing any interaction",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the Pressable.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "loading",
                "value": "boolean",
                "description": "Disables the button while loading. Unlike `Button`, no indicator is rendered while loading.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "Callback that is run when the button or link is pressed.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "onBlur",
                "value": "() => void",
                "description": "Callback that is run when the button or link focus is removed.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "onFocus",
                "value": "() => void",
                "description": "Callback that is run when the button or link is focused.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPointerDown",
                "value": "() => void",
                "description": "Callback that is run when a pointing device button is pressed while the pointer is inside the button or link.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPointerEnter",
                "value": "() => void",
                "description": "Callback that is run when the pointing device is over (enters) the button or link.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPointerLeave",
                "value": "() => void",
                "description": "Callback that is run when the pointing device has left the button or link.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPointerUp",
                "value": "() => void",
                "description": "Callback that is run when a pointing device button is released while the pointer is inside the element button or link.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "to",
                "value": "string",
                "description": "Destination URL to link to. If this value is set, If this value is set, the component will render an `<a>` tag.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "blockAlignment",
                "value": "MaybeResponsiveConditionalStyle<\n    Extract<BlockAlignment, 'start' | 'center' | 'end'>\n  >",
                "description": "Position children along the cross axis",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineAlignment",
                "value": "MaybeResponsiveConditionalStyle<InlineAlignment>",
                "description": "Position children along the main axis",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "opacity",
                "value": "Opacity",
                "description": "Sets the opacity of the View. The opacity will be applied to the background as well as all\nthe children of the View. Use carefully as this could decrease the contrast ratio between\nthe background and foreground elements, resulting in unreadable and inaccessible text.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "overflow",
                "value": "\"hidden\" | \"visible\"",
                "description": "Sets the overflow behavior of the element.\n\n`hidden`: clips the content when it is larger than the element’s container.\nThe element will not be scrollable and the users will not be able\nto access the clipped content by dragging or using a scroll wheel.\n\n`visible`: the content that extends beyond the element’s container is visible.",
                "isOptional": true,
                "defaultValue": "'visible'"
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "border",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<BorderStyle>>",
                "description": "Adjust the border style.\n\nTo shorten the code, it is possible to specify all the border style properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border styles are `base`\n\n- `['base', 'none']` means blockStart and blockEnd border styles are `base`, inlineStart and inlineEnd border styles are `none`\n\n- `['base', 'none', 'dotted', 'base']` means blockStart border style is `base`, inlineEnd border style is `none`, blockEnd border style is `dotted` and  blockStart border style is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderWidth",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<BorderWidth>\n  >",
                "description": "Adjust the border width.\n\nTo shorten the code, it is possible to specify all the border width properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border widths are `base`\n\n- `['base', 'medium']` means blockStart and blockEnd border widths are `base`, inlineStart and inlineEnd border widths are `medium`\n\n- `['base', 'medium', 'medium', 'base']` means blockStart border width is `base`, inlineEnd border width is `medium`, blockEnd border width is `medium` and  blockStart border width is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "",
                "isOptional": true,
                "isPrivate": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "cornerRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "Adjust the corner radius.\n\nProvide a single value to apply the same corner radius to all four corners, two values to apply different corner radii to opposing corners, or four values to apply different corner radii to each individual corner.\n\nFor example:\n\n- `base` means all 4 corner radii are `base`\n\n- `['base', 'none']` means the StartStart and EndEnd corner radii are `base`, StartEnd and EndStart corner radii are `none`.\n   When the context’s language direction is left to right, StartStart and EndEnd corners are the top left and bottom right corners\n   while StartEnd and EndStart corners are the top right and bottom left corners.\n\n- `['base', 'none', 'small', 'base']` means StartStart corner radius is `base`, StartEnd corner radius is `none`, EndEnd corner radius is `small` and  EndStart corner radius is `base`\n\nA `borderRadius` alias is available for this property. When both are specified, `cornerRadius` takes precedence.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "minInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the minimum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "minBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "padding",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<Spacing>>",
                "description": "Adjust the padding.\n\nTo shorten the code, it is possible to specify all the padding properties in one property.\n\n\nExamples:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart paddings are `base`\n\n- [`base`, `none`] means blockStart and blockEnd paddings are `base`, inlineStart and inlineEnd paddings are `none`\n\n- [`base`, `none`, `large200`, `small200`] means blockStart padding is `base`, inlineEnd padding is `none`, blockEnd padding is `large200` and  blockStart padding is `small200`",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "overlay",
                "value": "RemoteFragment",
                "description": "An overlay component to render when the user interacts with the component.",
                "isOptional": true
              },
              {
                "filePath": "/components/Pressable/Pressable.ts",
                "syntaxKind": "PropertySignature",
                "name": "toggles",
                "value": "string",
                "description": "The component's identifier whose visibility will be toggled when this component is actioned.",
                "isOptional": true
              }
            ],
            "value": "export interface PressableProps\n  extends BorderProps,\n    CornerProps,\n    SizingProps,\n    SpacingProps,\n    OverlayActivatorProps,\n    DisclosureActivatorProps {\n  /**\n   * Changes the display of the Pressable.\n   *\n   *\n   * `inline` follows the direction of words in a sentence based on the document’s writing mode.\n   *\n   * `block` follows the direction of paragraphs based on the document’s writing mode.\n   *\n   *\n   * @defaultValue 'block'\n   */\n  display?: Display;\n\n  /**\n   * A label that describes the purpose or contents of the element. When set,\n   * it will be announced to buyers using assistive technologies and will\n   * provide them with more context.\n   */\n  accessibilityLabel?: string;\n\n  /**\n   * The role of the button that will be rendered.\n   *\n   * `button`: renders a regular button.\n   *\n   * `submit`: renders a button that submits a form.\n   *\n   * @defaultValue 'button'\n   */\n  accessibilityRole?: ButtonAccessibilityRole;\n\n  /**\n   * Disables the button, disallowing any interaction\n   */\n  disabled?: boolean;\n\n  /**\n   * A unique identifier for the Pressable.\n   */\n  id?: string;\n\n  /**\n   * Disables the button while loading. Unlike `Button`, no indicator is rendered while loading.\n   */\n  loading?: boolean;\n\n  /**\n   * Callback that is run when the button or link is pressed.\n   */\n  onPress?: () => void;\n\n  /**\n   * Callback that is run when the button or link focus is removed.\n   */\n  onBlur?: () => void;\n\n  /**\n   * Callback that is run when the button or link is focused.\n   */\n  onFocus?: () => void;\n\n  /**\n   * Callback that is run when a pointing device button is pressed while the pointer is inside the button or link.\n   */\n  onPointerDown?: () => void;\n\n  /**\n   * Callback that is run when the pointing device is over (enters) the button or link.\n   */\n  onPointerEnter?: () => void;\n\n  /**\n   *  Callback that is run when the pointing device has left the button or link.\n   */\n  onPointerLeave?: () => void;\n\n  /**\n   * Callback that is run when a pointing device button is released while the pointer is inside the element button or link.\n   */\n  onPointerUp?: () => void;\n\n  /**\n   * Destination URL to link to. If this value is set, If this value is set, the component will render an `<a>` tag.\n   */\n  to?: string;\n\n  /**\n   * Position children along the cross axis\n   */\n  blockAlignment?: MaybeResponsiveConditionalStyle<\n    Extract<BlockAlignment, 'start' | 'center' | 'end'>\n  >;\n\n  /**\n   * Position children along the main axis\n   */\n  inlineAlignment?: MaybeResponsiveConditionalStyle<InlineAlignment>;\n\n  /**\n   * Sets the opacity of the View. The opacity will be applied to the background as well as all\n   * the children of the View. Use carefully as this could decrease the contrast ratio between\n   * the background and foreground elements, resulting in unreadable and inaccessible text.\n   */\n  opacity?: Opacity;\n\n  /**\n   * Sets the overflow behavior of the element.\n   *\n   * `hidden`: clips the content when it is larger than the element’s container.\n   * The element will not be scrollable and the users will not be able\n   * to access the clipped content by dragging or using a scroll wheel.\n   *\n   * `visible`: the content that extends beyond the element’s container is visible.\n   *\n   * @default 'visible'\n   */\n  overflow?: 'hidden' | 'visible';\n}"
          },
          "Display": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Display",
            "value": "'block' | 'inline'",
            "description": ""
          },
          "ButtonAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ButtonAccessibilityRole",
            "value": "'button' | 'submit'",
            "description": ""
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "BlockAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BlockAlignment",
            "value": "Alignment | 'baseline'",
            "description": ""
          },
          "Alignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Alignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "InlineAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InlineAlignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "Opacity": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Opacity",
            "value": "10 | 20 | 30 | 40 | 50 | 60 | 70 | 80 | 90",
            "description": ""
          },
          "MaybeShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeShorthandProperty",
            "value": "T | ShorthandProperty<T>",
            "description": ""
          },
          "ShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShorthandProperty",
            "value": "[T, T] | [T, T, T, T]",
            "description": ""
          },
          "BorderStyle": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderStyle",
            "value": "'base' | 'dotted' | 'none'",
            "description": ""
          },
          "BorderWidth": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderWidth",
            "value": "'base' | 'medium'",
            "description": ""
          },
          "CornerRadius": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadius",
            "value": "'base' | 'small' | 'large' | 'fullyRounded' | 'none' | CornerRadiusDeprecated",
            "description": ""
          },
          "CornerRadiusDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadiusDeprecated",
            "value": "'tight' | 'loose'",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Actions",
    "defaultExample": {
      "image": "pressable-default.png",
      "codeblock": {
        "title": "Basic Pressable",
        "tabs": [
          {
            "title": "React",
            "code": "import {\n  render,\n  Icon,\n  InlineLayout,\n  Pressable,\n  Text,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Pressable border=\"base\" cornerRadius=\"base\" padding=\"base\">\n      <InlineLayout columns={['fill', 'auto']}>\n        <Text>Details</Text>\n        <Icon source=\"chevronDown\" size=\"small\" />\n      </InlineLayout>\n    </Pressable>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {\n  extend,\n  Icon,\n  InlineLayout,\n  Pressable,\n  Text,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const pressable = root.createComponent(\n    Pressable,\n    {\n      border: 'base',\n      cornerRadius: 'base',\n      padding: 'base',\n      onPress: () => console.log('onPress event'),\n    },\n    [\n      root.createComponent(InlineLayout, {columns: ['fill', 'auto']}, [\n        root.createComponent(Text, {}, 'Details'),\n        root.createComponent(Icon, {source: 'chevronDown', size: 'small'}),\n      ]),\n    ],\n  );\n\n  root.appendChild(pressable);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "related": []
  },
  {
    "name": "ScrollView",
    "description": "ScrollView is a container for long form content, such as order summary line items, that allows for scrolling so customers can expose more content as they view.",
    "requires": "",
    "isVisualComponent": true,
    "thumbnail": "scrollview-thumbnail.png",
    "type": "",
    "definitions": [
      {
        "title": "ScrollViewProps",
        "description": "",
        "type": "ScrollViewProps",
        "typeDefinitions": {
          "ScrollViewProps": {
            "filePath": "/components/ScrollView/ScrollView.ts",
            "name": "ScrollViewProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "hint",
                "value": "\"innerShadow\" | { type: \"pill\"; content: string; }",
                "description": "Provides a hint to the user that the area is scrollable.\n\n`pill`: renders a pill with a message at the end of the the scrollable area. It disappear as soon as the user starts scrolling.\n\n`innerShadow`: renders an inner visual hint to indicate that the content is scrollable.",
                "isOptional": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "direction",
                "value": "\"inline\" | \"block\"",
                "description": "The direction on which the content is scrollable.\n\n`block`:\nIndicates that the content is scrollable on the main axis.\n\n`inline`:\nIndicates that the content is scrollable on the cross axis.",
                "isOptional": true,
                "defaultValue": "block"
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "scrollTo",
                "value": "number | HTMLElement",
                "description": "Scroll to a specific position or to an element.",
                "isOptional": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "onScroll",
                "value": "(args: ScrollViewEvent) => void",
                "description": "Callback function that is called when the scroll position changes.\nAllows to listen to events inside the component\nreturning the position of the scroll.\n\nNote:\nOn touch devices, the onScroll event is fired only when the user finishes scrolling\nwhich differs from non touch devices, where the onScroll event is fired when the user scrolls",
                "isOptional": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "onScrolledToEdge",
                "value": "(args: ScrollViewEvent) => void",
                "description": "Callback function that is called when the scroll position reaches one of the edges.",
                "isOptional": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "border",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<BorderStyle>>",
                "description": "Adjust the border style.\n\nTo shorten the code, it is possible to specify all the border style properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border styles are `base`\n\n- `['base', 'none']` means blockStart and blockEnd border styles are `base`, inlineStart and inlineEnd border styles are `none`\n\n- `['base', 'none', 'dotted', 'base']` means blockStart border style is `base`, inlineEnd border style is `none`, blockEnd border style is `dotted` and  blockStart border style is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderWidth",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<BorderWidth>\n  >",
                "description": "Adjust the border width.\n\nTo shorten the code, it is possible to specify all the border width properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border widths are `base`\n\n- `['base', 'medium']` means blockStart and blockEnd border widths are `base`, inlineStart and inlineEnd border widths are `medium`\n\n- `['base', 'medium', 'medium', 'base']` means blockStart border width is `base`, inlineEnd border width is `medium`, blockEnd border width is `medium` and  blockStart border width is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "",
                "isOptional": true,
                "isPrivate": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "cornerRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "Adjust the corner radius.\n\nProvide a single value to apply the same corner radius to all four corners, two values to apply different corner radii to opposing corners, or four values to apply different corner radii to each individual corner.\n\nFor example:\n\n- `base` means all 4 corner radii are `base`\n\n- `['base', 'none']` means the StartStart and EndEnd corner radii are `base`, StartEnd and EndStart corner radii are `none`.\n   When the context’s language direction is left to right, StartStart and EndEnd corners are the top left and bottom right corners\n   while StartEnd and EndStart corners are the top right and bottom left corners.\n\n- `['base', 'none', 'small', 'base']` means StartStart corner radius is `base`, StartEnd corner radius is `none`, EndEnd corner radius is `small` and  EndStart corner radius is `base`\n\nA `borderRadius` alias is available for this property. When both are specified, `cornerRadius` takes precedence.",
                "isOptional": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "minInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the minimum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "minBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "padding",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<Spacing>>",
                "description": "Adjust the padding.\n\nTo shorten the code, it is possible to specify all the padding properties in one property.\n\n\nExamples:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart paddings are `base`\n\n- [`base`, `none`] means blockStart and blockEnd paddings are `base`, inlineStart and inlineEnd paddings are `none`\n\n- [`base`, `none`, `large200`, `small200`] means blockStart padding is `base`, inlineEnd padding is `none`, blockEnd padding is `large200` and  blockStart padding is `small200`",
                "isOptional": true
              }
            ],
            "value": "export interface ScrollViewProps\n  extends BorderProps,\n    CornerProps,\n    SizingProps,\n    SpacingProps {\n  /**\n   * Provides a hint to the user that the area is scrollable.\n   *\n   * `pill`: renders a pill with a message at the end of the the scrollable area. It disappear as soon as the user starts scrolling.\n   *\n   * `innerShadow`: renders an inner visual hint to indicate that the content is scrollable.\n   */\n  hint?: 'innerShadow' | {type: 'pill'; content: string};\n  /**\n   * The direction on which the content is scrollable.\n   *\n   * `block`:\n   * Indicates that the content is scrollable on the main axis.\n   *\n   * `inline`:\n   * Indicates that the content is scrollable on the cross axis.\n   *\n   * @defaultValue block\n   */\n  direction?: 'block' | 'inline';\n  /**\n   * Scroll to a specific position or to an element.\n   */\n  scrollTo?: number | HTMLElement;\n  /**\n   * Callback function that is called when the scroll position changes.\n   * Allows to listen to events inside the component\n   * returning the position of the scroll.\n   *\n   * Note:\n   * On touch devices, the onScroll event is fired only when the user finishes scrolling\n   * which differs from non touch devices, where the onScroll event is fired when the user scrolls\n   */\n  onScroll?: (args: ScrollViewEvent) => void;\n  /**\n   * Callback function that is called when the scroll position reaches one of the edges.\n   */\n  onScrolledToEdge?: (args: ScrollViewEvent) => void;\n  /**\n   * A unique identifier for the component.\n   */\n  id?: string;\n}"
          },
          "ScrollViewEvent": {
            "filePath": "/components/ScrollView/ScrollView.ts",
            "name": "ScrollViewEvent",
            "description": "",
            "members": [
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "position",
                "value": "{ inline: number; block: number; }",
                "description": "The current scroll position, in pixels."
              },
              {
                "filePath": "/components/ScrollView/ScrollView.ts",
                "syntaxKind": "PropertySignature",
                "name": "scrolledTo",
                "value": "{ inline: \"start\" | \"end\"; block: \"start\" | \"end\"; }",
                "description": "A flag to indicate if the scroll is at the start or end of an axis."
              }
            ],
            "value": "export interface ScrollViewEvent {\n  /**\n   * The current scroll position, in pixels.\n   */\n  position: {\n    /** The current scroll horizontal position, in pixels.*/\n    inline: number;\n    /** The current scroll vertical position, in pixels.*/\n    block: number;\n  };\n  /**\n   * A flag to indicate if the scroll is at the start or end of an axis.\n   */\n  scrolledTo: {\n    /** A flag to indicate if the scroll is at the start or end of cross axis. */\n    inline: 'start' | 'end' | null;\n    /** A flag to indicate if the scroll is at the start or end of main axis. */\n    block: 'start' | 'end' | null;\n  };\n}"
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "MaybeShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeShorthandProperty",
            "value": "T | ShorthandProperty<T>",
            "description": ""
          },
          "ShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShorthandProperty",
            "value": "[T, T] | [T, T, T, T]",
            "description": ""
          },
          "BorderStyle": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderStyle",
            "value": "'base' | 'dotted' | 'none'",
            "description": ""
          },
          "BorderWidth": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderWidth",
            "value": "'base' | 'medium'",
            "description": ""
          },
          "CornerRadius": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadius",
            "value": "'base' | 'small' | 'large' | 'fullyRounded' | 'none' | CornerRadiusDeprecated",
            "description": ""
          },
          "CornerRadiusDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadiusDeprecated",
            "value": "'tight' | 'loose'",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Structure",
    "defaultExample": {
      "image": "scrollview-default.png",
      "codeblock": {
        "title": "Basic Scrollview",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, ScrollView, View} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <ScrollView maxBlockSize={300}>\n      <View border=\"base\" padding=\"base\" minBlockSize={50}>\n        View\n      </View>\n      <View border=\"base\" padding=\"base\" minBlockSize={50}>\n        View\n      </View>\n      <View border=\"base\" padding=\"base\" minBlockSize={50}>\n        View\n      </View>\n      <View border=\"base\" padding=\"base\" minBlockSize={50}>\n        View\n      </View>\n      <View border=\"base\" padding=\"base\" minBlockSize={50}>\n        View\n      </View>\n    </ScrollView>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, ScrollView, View} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const scrollView = root.createComponent(ScrollView, {maxBlockSize: 400}, [\n    root.createComponent(\n      View,\n      {border: 'base', padding: 'base', minBlockSize: 50},\n      'View',\n    ),\n    root.createComponent(\n      View,\n      {border: 'base', padding: 'base', minBlockSize: 50},\n      'View',\n    ),\n    root.createComponent(\n      View,\n      {border: 'base', padding: 'base', minBlockSize: 50},\n      'View',\n    ),\n    root.createComponent(\n      View,\n      {border: 'base', padding: 'base', minBlockSize: 50},\n      'View',\n    ),\n    root.createComponent(\n      View,\n      {border: 'base', padding: 'base', minBlockSize: 50},\n      'View',\n    ),\n    root.createComponent(\n      View,\n      {border: 'base', padding: 'base', minBlockSize: 50},\n      'View',\n    ),\n  ]);\n\n  root.appendChild(scrollView);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "related": []
  },
  {
    "name": "Select",
    "description": "Selects let buyers choose one option from an options menu. Consider select when you have 4 or more options, to avoid cluttering the interface.",
    "requires": "",
    "thumbnail": "select-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "SelectProps",
        "description": "",
        "type": "SelectProps",
        "typeDefinitions": {
          "SelectProps": {
            "filePath": "/components/Select/Select.ts",
            "name": "SelectProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the field. When no `id` is set,\na globally unique value will be used instead.",
                "isOptional": true
              },
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "Content to use as the field label."
              },
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "An identifier for the field that is unique within the nearest\ncontaining `Form` component.",
                "isOptional": true
              },
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The active option for the select. This should match to one of the\n`value` properties in the `options` prop. When not set,\nthe value will default to an empty string, which will show the\n`placeholder` text as the \"selected value\".",
                "isOptional": true
              },
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "options",
                "value": "SelectOptionProps[]",
                "description": "The options a buyer can select from."
              },
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "required",
                "value": "boolean",
                "description": "Whether the field needs a value. This requirement adds semantic value\nto the field, but it will not cause an error to appear automatically.\nIf you want to present an error when this field is empty, you can do\nso with the `error` prop.",
                "isOptional": true
              },
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the select can be changed.",
                "isOptional": true
              },
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "readonly",
                "value": "boolean",
                "description": "Whether the field is read only",
                "isOptional": true
              },
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "error",
                "value": "string",
                "description": "Indicate an error to the user. The field will be given a specific stylistic treatment\nto communicate problems that have to be resolved immediately.",
                "isOptional": true
              },
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "autocomplete",
                "value": "boolean | Autocomplete",
                "description": "A hint as to the intended content of the field.\n\nWhen set to `true`, this property indicates that the field should support\nautofill, but you do not have any more semantic information on the intended\ncontents.\n\nWhen set to `false`, you are indicating that this field contains sensitive\ninformation, or contents that are never saved, like one-time codes. Note that\nit is impossible to prevent autocomplete in some browsers, so do not depend on\nits absence.\n\nAlternatively, you can provide an `Autocomplete` object, which describes the\nspecific data you would like to be entered into this field during autocomplete.",
                "isOptional": true
              },
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "MethodSignature",
                "name": "onChange",
                "value": "(value: string) => void",
                "description": "A callback that is run whenever the selected option changes. This callback\nis called with the string `value` of the selected `option`. This component\nis [controlled](https://reactjs.org/docs/forms.html#controlled-components),\nso you must store this value in state and reflect it back in the `value`\nprop of the select.",
                "isOptional": true
              }
            ],
            "value": "export interface SelectProps {\n  /**\n   * A unique identifier for the field. When no `id` is set,\n   * a globally unique value will be used instead.\n   */\n  id?: string;\n  /**\n   * Content to use as the field label.\n   */\n  label: string;\n  /**\n   * An identifier for the field that is unique within the nearest\n   * containing `Form` component.\n   */\n  name?: string;\n  /**\n   * The active option for the select. This should match to one of the\n   * `value` properties in the `options` prop. When not set,\n   * the value will default to an empty string, which will show the\n   * `placeholder` text as the \"selected value\".\n   */\n  value?: string;\n  /**\n   * The options a buyer can select from.\n   */\n  options: SelectOptionProps[];\n  /**\n   * Whether the field needs a value. This requirement adds semantic value\n   * to the field, but it will not cause an error to appear automatically.\n   * If you want to present an error when this field is empty, you can do\n   * so with the `error` prop.\n   */\n  required?: boolean;\n  /**\n   * Whether the select can be changed.\n   */\n  disabled?: boolean;\n  /**\n   * Whether the field is read only\n   */\n  readonly?: boolean;\n  /**\n   * Indicate an error to the user. The field will be given a specific stylistic treatment\n   * to communicate problems that have to be resolved immediately.\n   */\n  error?: string;\n  /**\n   * A hint as to the intended content of the field.\n   *\n   * When set to `true`, this property indicates that the field should support\n   * autofill, but you do not have any more semantic information on the intended\n   * contents.\n   *\n   * When set to `false`, you are indicating that this field contains sensitive\n   * information, or contents that are never saved, like one-time codes. Note that\n   * it is impossible to prevent autocomplete in some browsers, so do not depend on\n   * its absence.\n   *\n   * Alternatively, you can provide an `Autocomplete` object, which describes the\n   * specific data you would like to be entered into this field during autocomplete.\n   */\n  autocomplete?: Autocomplete | boolean;\n  /**\n   * A callback that is run whenever the selected option changes. This callback\n   * is called with the string `value` of the selected `option`. This component\n   * is [controlled](https://reactjs.org/docs/forms.html#controlled-components),\n   * so you must store this value in state and reflect it back in the `value`\n   * prop of the select.\n   */\n  onChange?(value: string): void;\n}"
          },
          "SelectOptionProps": {
            "filePath": "/components/Select/Select.ts",
            "name": "SelectOptionProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The value that will be passed to the select’s `onChange` callback\nwhen this option is selected."
              },
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The buyer-facing label for this option."
              },
              {
                "filePath": "/components/Select/Select.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether this option can be selected or not.",
                "isOptional": true
              }
            ],
            "value": "export interface SelectOptionProps {\n  /**\n   * The value that will be passed to the select’s `onChange` callback\n   * when this option is selected.\n   */\n  value: string;\n  /**\n   * The buyer-facing label for this option.\n   */\n  label: string;\n  /**\n   * Whether this option can be selected or not.\n   */\n  disabled?: boolean;\n}"
          },
          "Autocomplete": {
            "filePath": "/components/shared.ts",
            "name": "Autocomplete",
            "description": "A descriptor for selecting the data a field would like to receive during\nautocomplete. This attribute is modeled off of a limited set of the autocomplete\nvalues supported in browsers.",
            "members": [
              {
                "filePath": "/components/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "group",
                "value": "AutocompleteGroup",
                "description": "The contact information “group” the autocomplete data should be sourced from.",
                "isOptional": true
              },
              {
                "filePath": "/components/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "field",
                "value": "AutocompleteField",
                "description": "The type of data that should be inserted into a field supporting autocomplete."
              }
            ],
            "value": "export interface Autocomplete {\n  /**\n   * The contact information “group” the autocomplete data should be sourced from.\n   */\n  group?: AutocompleteGroup;\n  /**\n   * The type of data that should be inserted into a field supporting autocomplete.\n   */\n  field: AutocompleteField;\n}"
          },
          "AutocompleteGroup": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AutocompleteGroup",
            "value": "'shipping' | 'billing' | 'location'",
            "description": ""
          },
          "AutocompleteField": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AutocompleteField",
            "value": "'name' | 'honorific-prefix' | 'given-name' | 'additional-name' | 'family-name' | 'honorific-suffix' | 'nickname' | 'username' | 'new-password' | 'current-password' | 'one-time-code' | 'organization-title' | 'organization' | 'street-address' | 'address-line1' | 'address-line2' | 'address-line3' | 'address-level4' | 'address-level3' | 'address-level2' | 'address-level1' | 'country' | 'country-name' | 'postal-code' | 'credit-card-name' | 'credit-card-given-name' | 'credit-card-additional-name' | 'credit-card-family-name' | 'credit-card-number' | 'credit-card-expiry' | 'credit-card-expiry-month' | 'credit-card-expiry-year' | 'credit-card-security-code' | 'credit-card-type' | 'transaction-currency' | 'transaction-amount' | 'language' | 'birthday' | 'birthday-day' | 'birthday-month' | 'birthday-year' | 'sex' | 'url' | 'photo' | 'telephone' | 'telephone-country-code' | 'telephone-national' | 'telephone-area-code' | 'telephone-local' | 'telephone-local-prefix' | 'telephone-local-suffix' | 'telephone-extension' | 'email' | 'instant-message' | 'home telephone' | 'home telephone-country-code' | 'home telephone-national' | 'home telephone-area-code' | 'home telephone-local' | 'home telephone-local-prefix' | 'home telephone-local-suffix' | 'home telephone-extension' | 'home email' | 'home instant-message' | 'work telephone' | 'work telephone-country-code' | 'work telephone-national' | 'work telephone-area-code' | 'work telephone-local' | 'work telephone-local-prefix' | 'work telephone-local-suffix' | 'work telephone-extension' | 'work email' | 'work instant-message' | 'mobile telephone' | 'mobile telephone-country-code' | 'mobile telephone-national' | 'mobile telephone-area-code' | 'mobile telephone-local' | 'mobile telephone-local-prefix' | 'mobile telephone-local-suffix' | 'mobile telephone-extension' | 'mobile email' | 'mobile instant-message' | 'fax telephone' | 'fax telephone-country-code' | 'fax telephone-national' | 'fax telephone-area-code' | 'fax telephone-local' | 'fax telephone-local-prefix' | 'fax telephone-local-suffix' | 'fax telephone-extension' | 'fax email' | 'fax instant-message' | 'pager telephone' | 'pager telephone-country-code' | 'pager telephone-national' | 'pager telephone-area-code' | 'pager telephone-local' | 'pager telephone-local-prefix' | 'pager telephone-local-suffix' | 'pager telephone-extension' | 'pager email' | 'pager instant-message'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Forms",
    "defaultExample": {
      "image": "select-default.png",
      "codeblock": {
        "title": "Basic Select",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Select} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Select\n      label=\"Country\"\n      value=\"2\"\n      options={[\n        {\n          value: '1',\n          label: 'Australia',\n        },\n        {\n          value: '2',\n          label: 'Canada',\n        },\n        {\n          value: '3',\n          label: 'France',\n        },\n        {\n          value: '4',\n          label: 'Japan',\n        },\n        {\n          value: '5',\n          label: 'Nigeria',\n        },\n        {\n          value: '6',\n          label: 'United States',\n        },\n      ]}\n    />\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Select} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const select = root.createComponent(Select, {\n    label: 'Country',\n    value: '2',\n    options: [\n      {\n        value: '1',\n        label: 'Australia',\n      },\n      {\n        value: '2',\n        label: 'Canada',\n      },\n      {\n        value: '3',\n        label: 'France',\n      },\n      {\n        value: '4',\n        label: 'Japan',\n      },\n      {\n        value: '5',\n        label: 'Nigeria',\n      },\n      {\n        value: '6',\n        label: 'United States',\n      },\n    ],\n  });\n\n  root.appendChild(select);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Use this component when customers need to choose between four or more predefined options.\n\n- Have a default option selected whenever possible. Use Select as placeholder text if there’s no logical default option."
      }
    ],
    "related": []
  },
  {
    "name": "SkeletonImage",
    "description": "SkeletonImage is used to provide a low fidelity representation of an image before it appears on the page.",
    "requires": "",
    "thumbnail": "skeletonimage-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "SkeletonImageProps",
        "description": "",
        "type": "SkeletonImageProps",
        "typeDefinitions": {
          "SkeletonImageProps": {
            "filePath": "/components/SkeletonImage/SkeletonImage.ts",
            "name": "SkeletonImageProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/SkeletonImage/SkeletonImage.ts",
                "syntaxKind": "PropertySignature",
                "name": "blockSize",
                "value": "MaybeResponsiveConditionalStyle<number | `${number}%` | 'fill'>",
                "description": "Adjust the block size of the skeleton.",
                "isOptional": true
              },
              {
                "filePath": "/components/SkeletonImage/SkeletonImage.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineSize",
                "value": "MaybeResponsiveConditionalStyle<number | `${number}%` | 'fill'>",
                "description": "Adjust the inline size of the skeleton.",
                "isOptional": true
              },
              {
                "filePath": "/components/SkeletonImage/SkeletonImage.ts",
                "syntaxKind": "PropertySignature",
                "name": "aspectRatio",
                "value": "number",
                "description": "Displays the skeleton at the specified aspect ratio (fills the width of the\nparent container and sets the height accordingly).",
                "isOptional": true
              },
              {
                "filePath": "/components/SkeletonImage/SkeletonImage.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface SkeletonImageProps extends IdProps {\n  /**\n   * Adjust the block size of the skeleton.\n   */\n  blockSize?: MaybeResponsiveConditionalStyle<number | `${number}%` | 'fill'>;\n  /**\n   * Adjust the inline size of the skeleton.\n   */\n  inlineSize?: MaybeResponsiveConditionalStyle<number | `${number}%` | 'fill'>;\n  /**\n   * Displays the skeleton at the specified aspect ratio (fills the width of the\n   * parent container and sets the height accordingly).\n   */\n  aspectRatio?: number;\n}"
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Feedback",
    "defaultExample": {
      "image": "skeletonimage-default.png",
      "codeblock": {
        "title": "Basic SkeletonImage",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, SkeletonImage} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return <SkeletonImage inlineSize={300} blockSize={300} />;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, SkeletonImage} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const skeletonImage = root.createComponent(SkeletonImage, {\n    inlineSize: 300,\n    blockSize: 300,\n  });\n\n  root.appendChild(skeletonImage);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "examples": {
      "description": "",
      "examples": [
        {
          "description": "When adding content to a layout, incorporate a skeleton loader that renders the approximate size and position of the content during loading. This will provide a seamless transition from skeleton loaders to the content, and prevent any layout shift when the resulting content loads.",
          "image": "loading-skeletons.gif",
          "codeblock": {
            "title": "Using skeleton loaders to prevent layout shifts on content load.",
            "tabs": [
              {
                "code": "import React from 'react';\nimport {\n  render,\n  View,\n  BlockStack,\n  InlineLayout,\n  SkeletonImage,\n  Image,\n  Icon,\n  SkeletonText,\n  Text,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <LoadingStateSkeletons />\n));\n\nexport const Thumbnail = ({\n  source = 'https://yourawesomeimage.com',\n}) => (\n  <View\n    minBlockSize={64}\n    cornerRadius=\"large\"\n    maxInlineSize={64}\n    minInlineSize={64}\n    border=\"base\"\n  >\n    {source ? (\n      <Image\n        fit=\"cover\"\n        aspectRatio={1}\n        source={source}\n        cornerRadius=\"large\"\n      />\n    ) : (\n      <View maxInlineSize={33}>\n        <Icon source=\"camera\" size=\"fill\" />\n      </View>\n    )}\n  </View>\n);\nexport const LoadingStateSkeletons = () => {\n  const loading = true;\n  const [item1, item2] = [\n    {\n      title: 'Felipe Toledo WildFire',\n      variantTitle: 'Medium',\n      price: '$330.00',\n    },\n    {\n      title: 'Roller',\n      variantTitle: 'Medium',\n      price: '$248.00',\n    },\n  ];\n  const itemInfo = ({title, variantTitle}) =>\n    loading ? (\n      <>\n        <SkeletonText>{title}</SkeletonText>\n        <SkeletonText>\n          {variantTitle}\n        </SkeletonText>\n      </>\n    ) : (\n      <>\n        <Text emphasis=\"bold\">{title}</Text>\n        <Text appearance=\"subdued\">\n          {variantTitle}\n        </Text>\n      </>\n    );\n  const order = (item) => (\n    <InlineLayout\n      columns={['auto', 'fill', 'auto']}\n      spacing=\"base\"\n      blockAlignment=\"center\"\n    >\n      {loading ? (\n        <SkeletonImage\n          blockSize={64}\n          inlineSize={64}\n        />\n      ) : (\n        <Thumbnail />\n      )}\n      <BlockStack spacing=\"extraTight\">\n        {itemInfo(item)}\n      </BlockStack>\n      {loading ? (\n        <SkeletonText>{item.price}</SkeletonText>\n      ) : (\n        <Text emphasis=\"bold\">{item.price}</Text>\n      )}\n    </InlineLayout>\n  );\n  return (\n    <View maxInlineSize={400}>\n      <BlockStack>\n        {order(item1)}\n        {order(item2)}\n      </BlockStack>\n    </View>\n  );\n};\n",
                "language": "jsx",
                "title": "React"
              },
              {
                "code": "import {\n  extend,\n  BlockStack,\n  View,\n  InlineLayout,\n  Image,\n  Icon,\n  Text,\n  SkeletonImage,\n  SkeletonText,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const source = 'https://yourawesomeimage.com';\n  const loading = true;\n  const [item1, item2] = [\n    {\n      title: 'Felipe Toledo WildFire',\n      variantTitle: 'Medium',\n      price: '$330.00',\n    },\n    {\n      title: 'Roller',\n      variantTitle: 'Medium',\n      price: '$248.00',\n    },\n  ];\n  const thumbnail = root.createComponent(\n    View,\n    {\n      minBlockSize: 64,\n      cornerRadius: 'large',\n      maxInlineSize: 64,\n      minInlineSize: 64,\n      border: 'base',\n    },\n    [\n      source\n        ? root.createComponent(Image, {\n            fit: 'cover',\n            aspectRatio: 1,\n            source,\n            cornerRadius: 'large',\n          })\n        : root.createComponent(\n            View,\n            {maxInlineSize: 33},\n            [\n              root.createComponent(Icon, {\n                source: 'camera',\n                size: 'fill',\n              }),\n            ],\n          ),\n    ],\n  );\n  const itemInfo = ({title, variantTitle}) =>\n    root.createComponent(\n      BlockStack,\n      {\n        spacing: 'extraTight',\n      },\n      [\n        loading\n          ? (root.createComponent(\n              SkeletonText,\n              {},\n              title,\n            ),\n            root.createComponent(\n              SkeletonText,\n              {},\n              variantTitle,\n            ))\n          : (root.createComponent(\n              Text,\n              {},\n              title,\n            ),\n            root.createComponent(\n              Text,\n              {},\n              variantTitle,\n            )),\n      ],\n    );\n  const order = (item) =>\n    root.createComponent(\n      InlineLayout,\n      {\n        columns: ['auto', 'fill', 'auto'],\n        spacing: 'base',\n        blockAlignment: 'center',\n      },\n      [\n        loading\n          ? root.createComponent(SkeletonImage, {\n              blockSize: 64,\n              inlineSize: 64,\n            })\n          : thumbnail,\n        itemInfo(item),\n        loading\n          ? root.createComponent(\n              SkeletonText,\n              {},\n              item.price,\n            )\n          : root.createComponent(\n              Text,\n              {},\n              item.price,\n            ),\n      ],\n    );\n  const view = root.createComponent(\n    View,\n    {\n      maxInlineSize: 400,\n    },\n    [\n      root.createComponent(BlockStack, {}, [\n        order(item1),\n        order(item2),\n      ]),\n    ],\n  );\n  root.appendChild(view);\n});\n",
                "language": "js",
                "title": "JavaScript"
              }
            ]
          }
        }
      ]
    },
    "related": []
  },
  {
    "name": "SkeletonText",
    "description": "SkeletonText is used to provide a low fidelity representation of text content before it appears on the page. \n\nOptionally you can use any text content inside `SkeletonText` to be used as a base for the rendered skeleton",
    "requires": "",
    "isVisualComponent": true,
    "thumbnail": "skeletontext-thumbnail.png",
    "type": "",
    "definitions": [
      {
        "title": "SkeletonTextProps",
        "description": "",
        "type": "SkeletonTextProps",
        "typeDefinitions": {
          "SkeletonTextProps": {
            "filePath": "/components/SkeletonText/SkeletonText.ts",
            "name": "SkeletonTextProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/SkeletonText/SkeletonText.ts",
                "syntaxKind": "PropertySignature",
                "name": "emphasis",
                "value": "\"bold\"",
                "description": "",
                "isOptional": true,
                "isPrivate": true
              },
              {
                "filePath": "/components/SkeletonText/SkeletonText.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineSize",
                "value": "Extract<Size, 'small' | 'base' | 'large'>",
                "description": "Adjust the length of the text when no children are passed.",
                "isOptional": true
              },
              {
                "filePath": "/components/SkeletonText/SkeletonText.ts",
                "syntaxKind": "PropertySignature",
                "name": "size",
                "value": "TextSize",
                "description": "Size of the text the skeleton replaces.",
                "isOptional": true
              },
              {
                "filePath": "/components/SkeletonText/SkeletonText.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface SkeletonTextProps extends IdProps {\n  /**\n   * @private\n   * Use to emphasize a word or a group of words.\n   */\n  emphasis?: 'bold';\n  /**\n   * Adjust the length of the text when no children are passed.\n   */\n  inlineSize?: Extract<Size, 'small' | 'base' | 'large'>;\n  /**\n   * Size of the text the skeleton replaces.\n   */\n  size?: TextSize;\n}"
          },
          "Size": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Size",
            "value": "'extraSmall' | 'small' | 'base' | 'large' | 'extraLarge' | 'fill'",
            "description": ""
          },
          "TextSize": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "TextSize",
            "value": "Extract<Size, 'extraSmall' | 'small' | 'base' | 'large' | 'extraLarge'> | 'medium'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Feedback",
    "defaultExample": {
      "image": "skeletontext-default.png",
      "codeblock": {
        "title": "Basic SkeletonText",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, SkeletonText} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return <SkeletonText />;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, SkeletonText} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const skeletonText = root.createComponent(SkeletonText);\n\n  root.appendChild(skeletonText);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "examples": {
      "description": "",
      "examples": [
        {
          "description": "When adding content to a layout, incorporate a skeleton loader that renders the approximate size and position of the content during loading. This will provide a seamless transition from skeleton loaders to the content, and prevent any layout shift when the resulting content loads.",
          "image": "loading-skeletons.gif",
          "codeblock": {
            "title": "Using skeleton loaders to prevent layout shifts on content load.",
            "tabs": [
              {
                "code": "import React from 'react';\nimport {\n  render,\n  View,\n  BlockStack,\n  InlineLayout,\n  SkeletonImage,\n  Image,\n  Icon,\n  SkeletonText,\n  Text,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => (\n  <LoadingStateSkeletons />\n));\n\nexport const Thumbnail = ({\n  source = 'https://yourawesomeimage.com',\n}) => (\n  <View\n    minBlockSize={64}\n    cornerRadius=\"large\"\n    maxInlineSize={64}\n    minInlineSize={64}\n    border=\"base\"\n  >\n    {source ? (\n      <Image\n        fit=\"cover\"\n        aspectRatio={1}\n        source={source}\n        cornerRadius=\"large\"\n      />\n    ) : (\n      <View maxInlineSize={33}>\n        <Icon source=\"camera\" size=\"fill\" />\n      </View>\n    )}\n  </View>\n);\nexport const LoadingStateSkeletons = () => {\n  const loading = true;\n  const [item1, item2] = [\n    {\n      title: 'Felipe Toledo WildFire',\n      variantTitle: 'Medium',\n      price: '$330.00',\n    },\n    {\n      title: 'Roller',\n      variantTitle: 'Medium',\n      price: '$248.00',\n    },\n  ];\n  const itemInfo = ({title, variantTitle}) =>\n    loading ? (\n      <>\n        <SkeletonText>{title}</SkeletonText>\n        <SkeletonText>\n          {variantTitle}\n        </SkeletonText>\n      </>\n    ) : (\n      <>\n        <Text emphasis=\"bold\">{title}</Text>\n        <Text appearance=\"subdued\">\n          {variantTitle}\n        </Text>\n      </>\n    );\n  const order = (item) => (\n    <InlineLayout\n      columns={['auto', 'fill', 'auto']}\n      spacing=\"base\"\n      blockAlignment=\"center\"\n    >\n      {loading ? (\n        <SkeletonImage\n          blockSize={64}\n          inlineSize={64}\n        />\n      ) : (\n        <Thumbnail />\n      )}\n      <BlockStack spacing=\"extraTight\">\n        {itemInfo(item)}\n      </BlockStack>\n      {loading ? (\n        <SkeletonText>{item.price}</SkeletonText>\n      ) : (\n        <Text emphasis=\"bold\">{item.price}</Text>\n      )}\n    </InlineLayout>\n  );\n  return (\n    <View maxInlineSize={400}>\n      <BlockStack>\n        {order(item1)}\n        {order(item2)}\n      </BlockStack>\n    </View>\n  );\n};\n",
                "language": "jsx",
                "title": "React"
              },
              {
                "code": "import {\n  extend,\n  BlockStack,\n  View,\n  InlineLayout,\n  Image,\n  Icon,\n  Text,\n  SkeletonImage,\n  SkeletonText,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const source = 'https://yourawesomeimage.com';\n  const loading = true;\n  const [item1, item2] = [\n    {\n      title: 'Felipe Toledo WildFire',\n      variantTitle: 'Medium',\n      price: '$330.00',\n    },\n    {\n      title: 'Roller',\n      variantTitle: 'Medium',\n      price: '$248.00',\n    },\n  ];\n  const thumbnail = root.createComponent(\n    View,\n    {\n      minBlockSize: 64,\n      cornerRadius: 'large',\n      maxInlineSize: 64,\n      minInlineSize: 64,\n      border: 'base',\n    },\n    [\n      source\n        ? root.createComponent(Image, {\n            fit: 'cover',\n            aspectRatio: 1,\n            source,\n            cornerRadius: 'large',\n          })\n        : root.createComponent(\n            View,\n            {maxInlineSize: 33},\n            [\n              root.createComponent(Icon, {\n                source: 'camera',\n                size: 'fill',\n              }),\n            ],\n          ),\n    ],\n  );\n  const itemInfo = ({title, variantTitle}) =>\n    root.createComponent(\n      BlockStack,\n      {\n        spacing: 'extraTight',\n      },\n      [\n        loading\n          ? (root.createComponent(\n              SkeletonText,\n              {},\n              title,\n            ),\n            root.createComponent(\n              SkeletonText,\n              {},\n              variantTitle,\n            ))\n          : (root.createComponent(\n              Text,\n              {},\n              title,\n            ),\n            root.createComponent(\n              Text,\n              {},\n              variantTitle,\n            )),\n      ],\n    );\n  const order = (item) =>\n    root.createComponent(\n      InlineLayout,\n      {\n        columns: ['auto', 'fill', 'auto'],\n        spacing: 'base',\n        blockAlignment: 'center',\n      },\n      [\n        loading\n          ? root.createComponent(SkeletonImage, {\n              blockSize: 64,\n              inlineSize: 64,\n            })\n          : thumbnail,\n        itemInfo(item),\n        loading\n          ? root.createComponent(\n              SkeletonText,\n              {},\n              item.price,\n            )\n          : root.createComponent(\n              Text,\n              {},\n              item.price,\n            ),\n      ],\n    );\n  const view = root.createComponent(\n    View,\n    {\n      maxInlineSize: 400,\n    },\n    [\n      root.createComponent(BlockStack, {}, [\n        order(item1),\n        order(item2),\n      ]),\n    ],\n  );\n  root.appendChild(view);\n});\n",
                "language": "js",
                "title": "JavaScript"
              }
            ]
          }
        }
      ]
    },
    "related": []
  },
  {
    "name": "SkeletonTextBlock",
    "description": "SkeletonTextBlock is used to provide a low fidelity representation of a block of text before it appears on the page. \n\nOptionally you can use any text content inside `SkeletonTextBlock` to be used as a base for the rendered skeleton",
    "requires": "",
    "isVisualComponent": true,
    "thumbnail": "skeletontextblock-thumbnail.png",
    "type": "",
    "definitions": [
      {
        "title": "SkeletonTextBlockProps",
        "description": "",
        "type": "SkeletonTextBlockProps",
        "typeDefinitions": {
          "SkeletonTextBlockProps": {
            "filePath": "/components/SkeletonTextBlock/SkeletonTextBlock.ts",
            "name": "SkeletonTextBlockProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/SkeletonTextBlock/SkeletonTextBlock.ts",
                "syntaxKind": "PropertySignature",
                "name": "emphasis",
                "value": "\"bold\"",
                "description": "",
                "isOptional": true,
                "isPrivate": true
              },
              {
                "filePath": "/components/SkeletonTextBlock/SkeletonTextBlock.ts",
                "syntaxKind": "PropertySignature",
                "name": "lines",
                "value": "number",
                "description": "Number of lines to display when no children are passed.",
                "isOptional": true,
                "defaultValue": "1"
              },
              {
                "filePath": "/components/SkeletonTextBlock/SkeletonTextBlock.ts",
                "syntaxKind": "PropertySignature",
                "name": "size",
                "value": "TextSize",
                "description": "Size of the text the skeleton replaces.",
                "isOptional": true
              },
              {
                "filePath": "/components/SkeletonTextBlock/SkeletonTextBlock.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface SkeletonTextBlockProps extends IdProps {\n  /**\n   * @private\n   * Use to emphasize a word or a group of words.\n   */\n  emphasis?: 'bold';\n  /**\n   * Number of lines to display when no children are passed.\n   *\n   * @defaultValue 1\n   */\n  lines?: number;\n  /**\n   * Size of the text the skeleton replaces.\n   */\n  size?: TextSize;\n}"
          },
          "TextSize": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "TextSize",
            "value": "Extract<Size, 'extraSmall' | 'small' | 'base' | 'large' | 'extraLarge'> | 'medium'",
            "description": ""
          },
          "Size": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Size",
            "value": "'extraSmall' | 'small' | 'base' | 'large' | 'extraLarge' | 'fill'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Feedback",
    "defaultExample": {
      "image": "skeletontextblock-default.png",
      "codeblock": {
        "title": "Basic SkeletonTextBlock",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, SkeletonTextBlock} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return <SkeletonTextBlock />;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, SkeletonTextBlock} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const skeletonTextBlock = root.createComponent(SkeletonTextBlock);\n\n  root.appendChild(skeletonTextBlock);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "related": []
  },
  {
    "name": "Spinner",
    "description": "Spinner is used to notify buyers that their action is being processed. The Spinner is usually used when sending or receiving data from a server.",
    "requires": "",
    "thumbnail": "spinner-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "SpinnerProps",
        "description": "",
        "type": "SpinnerProps",
        "typeDefinitions": {
          "SpinnerProps": {
            "filePath": "/components/Spinner/Spinner.ts",
            "name": "SpinnerProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Spinner/Spinner.ts",
                "syntaxKind": "PropertySignature",
                "name": "size",
                "value": "Extract<Size, 'extraSmall' | 'small' | 'base' | 'large' | 'fill'>",
                "description": "Adjusts the size of the icon.",
                "isOptional": true,
                "defaultValue": "'base'"
              },
              {
                "filePath": "/components/Spinner/Spinner.ts",
                "syntaxKind": "PropertySignature",
                "name": "appearance",
                "value": "Extract<Appearance, 'accent' | 'monochrome'>",
                "description": "Sets the appearance (color) of the icon.",
                "isOptional": true,
                "defaultValue": "'accent'"
              },
              {
                "filePath": "/components/Spinner/Spinner.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label to use for the Spinner that will be used for buyers using\nassistive technologies like screen readers. If will also be used to replace\nthe animated loading indicator when buyers prefers reduced motion. If not included,\nit will use the loading indicator for all buyers.",
                "isOptional": true
              },
              {
                "filePath": "/components/Spinner/Spinner.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface SpinnerProps extends IdProps {\n  /**\n   * Adjusts the size of the icon.\n   *\n   * @defaultValue 'base'\n   */\n  size?: Extract<Size, 'extraSmall' | 'small' | 'base' | 'large' | 'fill'>;\n\n  /**\n   * Sets the appearance (color) of the icon.\n   *\n   * @defaultValue 'accent'\n   */\n  appearance?: Extract<Appearance, 'accent' | 'monochrome'>;\n\n  /**\n   * A label to use for the Spinner that will be used for buyers using\n   * assistive technologies like screen readers. If will also be used to replace\n   * the animated loading indicator when buyers prefers reduced motion. If not included,\n   * it will use the loading indicator for all buyers.\n   */\n  accessibilityLabel?: string;\n}"
          },
          "Size": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Size",
            "value": "'extraSmall' | 'small' | 'base' | 'large' | 'extraLarge' | 'fill'",
            "description": ""
          },
          "Appearance": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Appearance",
            "value": "'accent' | 'interactive' | 'subdued' | 'info' | 'success' | 'warning' | 'critical' | 'monochrome'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Feedback",
    "defaultExample": {
      "image": "spinner-default.png",
      "codeblock": {
        "title": "Basic Spinner",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Spinner} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return <Spinner />;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Spinner} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const spinner = root.createComponent(Spinner);\n\n  root.appendChild(spinner);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "appearance",
        "title": "Appearance",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"accent\"</code> | Conveys emphasis and draws attention to the element. |\n| <code>\"monochrome\"</code> | Takes the color of its parent.|"
      }
    ],
    "related": []
  },
  {
    "name": "Stepper",
    "description": "Use a stepper to increase or decrease a value, like changing the quantity from 1 to 2.",
    "requires": "",
    "thumbnail": "stepper-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "StepperProps",
        "description": "",
        "type": "StepperProps",
        "typeDefinitions": {
          "StepperProps": {
            "filePath": "/components/Stepper/Stepper.ts",
            "name": "StepperProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityDescription",
                "value": "string",
                "description": "A detailed description for screen readers.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the field can be modified.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "error",
                "value": "string",
                "description": "Indicate an error to the user. The field will be given a specific stylistic treatment\nto communicate problems that have to be resolved immediately.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "Content to use as the field label. This value is also used as the placeholder\nwhen the field is empty."
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "icon",
                "value": "IconSource",
                "description": "An icon to render at the start of the field.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the field. When no `id` is set,\na globally unique value will be used instead.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "max",
                "value": "number",
                "description": "The highest decimal or integer to be accepted for the stepper field.\nWhen used with `step` the value will round down to the max number.\nNote: a buyer will still be able to use the keyboard to input a number higher than\nthe max. It is up to the developer to add appropriate validation.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "min",
                "value": "number",
                "description": "The lowest decimal or integer to be accepted for the stepper field.\nWhen used with `step` the value will round up to the min number.\nNote: a buyer will still be able to use the keyboard to input a number lower than\nthe min. It is up to the developer to add appropriate validation.",
                "isOptional": true,
                "defaultValue": "0"
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "An identifier for the field that is unique within the nearest\ncontaining `Form` component.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "prefix",
                "value": "string",
                "description": "Text content to render before the value.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "readonly",
                "value": "boolean",
                "description": "Whether the field is read-only.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "required",
                "value": "boolean",
                "description": "Whether the field needs a value. This requirement adds semantic value\nto the field, but it will not cause an error to appear automatically.\nIf you want to present an error when this field is empty, you can do\nso with the `error` prop.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "step",
                "value": "number",
                "description": "The amount the value can increase or decrease by. This can be an integer or decimal.\nIf a `max` or `min` is specified with `step` when increasing/decreasing the value\nvia the stepper buttons the final value will always round to the `max` or `min`\nrather than the closest valid amount.",
                "isOptional": true,
                "defaultValue": "1"
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "number",
                "description": "The current value for the field. If omitted, the field will be empty. You should\nupdate this value in response to the `onChange` callback.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "MethodSignature",
                "name": "onFocus",
                "value": "() => void",
                "description": "Callback when input is focused.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "MethodSignature",
                "name": "onBlur",
                "value": "() => void",
                "description": "Callback when focus is removed.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "MethodSignature",
                "name": "onChange",
                "value": "(value: number) => void",
                "description": "Callback when the buyer has **finished editing** a field. Unlike `onChange`\ncallbacks you may be familiar with from Polaris or other React component libraries,\nthis callback is **not** run on every change to the input. Text fields are\n“partially controlled” components, which means that while the buyer edits the\nfield, its state is controlled by the component. Once the buyer has signalled that\nthey have finished editing the field (typically, by blurring the field), `onChange`\nis called if the input actually changed from the most recent `value` property. At\nthat point, you are expected to store this “committed value” in state, and reflect\nit in the text field’s `value` property.\n\nThis state management model is important given how UI Extensions are rendered. UI Extension components\nrun on a separate thread from the UI, so they can’t respond to input synchronously.\nA pattern popularized by [controlled React components](https://reactjs.org/docs/forms.html#controlled-components)\nis to have the component be the source of truth for the input `value`, and update\nthe `value` on every user input. The delay in responding to events from a UI\nextension is only a few milliseconds, but attempting to strictly store state with\nthis delay can cause issues if a user types quickly, or if the buyer is using a\nlower-powered device. Having the UI thread take ownership for “in progress” input,\nand only synchronizing when the user is finished with a field, avoids this risk.\n\nIt can still sometimes be useful to be notified when the user makes any input in\nthe field. If you need this capability, you can use the `onInput` prop. However,\nnever use that property to create tightly controlled state for the `value`.\n\nThis callback is called with the current value of the field. If the value of a field\nis the same as the current `value` prop provided to the field, the `onChange` callback\nwill not be run.",
                "isOptional": true
              },
              {
                "filePath": "/components/Stepper/Stepper.ts",
                "syntaxKind": "MethodSignature",
                "name": "onInput",
                "value": "(value: number) => void",
                "description": "Callback when the user makes any changes in the field. As noted in the documentation\nfor `onChange`, you **must not** use this to update `state` — use the `onChange`\ncallback for that purpose. Use the `onInput` prop when you need to do something\nas soon as the buyer makes a change, like clearing validation errors that apply to\nthe field as soon as the user begins making the necessary adjustments.\n\nThis callback is called with the current value of the field.",
                "isOptional": true
              }
            ],
            "value": "export interface StepperProps {\n  /**\n   * A detailed description for screen readers.\n   */\n  accessibilityDescription?: string;\n\n  /**\n   * Whether the field can be modified.\n   */\n  disabled?: boolean;\n\n  /**\n   * Indicate an error to the user. The field will be given a specific stylistic treatment\n   * to communicate problems that have to be resolved immediately.\n   */\n  error?: string;\n\n  /**\n   * Content to use as the field label. This value is also used as the placeholder\n   * when the field is empty.\n   */\n  label: string;\n\n  /**\n   * An icon to render at the start of the field.\n   */\n  icon?: IconSource;\n\n  /**\n   * A unique identifier for the field. When no `id` is set,\n   * a globally unique value will be used instead.\n   */\n  id?: string;\n\n  /**\n   * The highest decimal or integer to be accepted for the stepper field.\n   * When used with `step` the value will round down to the max number.\n   * Note: a buyer will still be able to use the keyboard to input a number higher than\n   * the max. It is up to the developer to add appropriate validation.\n   */\n  max?: number;\n\n  /**\n   * The lowest decimal or integer to be accepted for the stepper field.\n   * When used with `step` the value will round up to the min number.\n   * Note: a buyer will still be able to use the keyboard to input a number lower than\n   * the min. It is up to the developer to add appropriate validation.\n   *\n   * @defaultValue 0\n   */\n  min?: number;\n\n  /**\n   * An identifier for the field that is unique within the nearest\n   * containing `Form` component.\n   */\n  name?: string;\n\n  /**\n   * Text content to render before the value.\n   */\n  prefix?: string;\n\n  /**\n   * Whether the field is read-only.\n   */\n  readonly?: boolean;\n\n  /**\n   * Whether the field needs a value. This requirement adds semantic value\n   * to the field, but it will not cause an error to appear automatically.\n   * If you want to present an error when this field is empty, you can do\n   * so with the `error` prop.\n   */\n  required?: boolean;\n\n  /**\n   * The amount the value can increase or decrease by. This can be an integer or decimal.\n   * If a `max` or `min` is specified with `step` when increasing/decreasing the value\n   * via the stepper buttons the final value will always round to the `max` or `min`\n   * rather than the closest valid amount.\n   *\n   * @defaultValue 1\n   */\n  step?: number;\n\n  /**\n   * The current value for the field. If omitted, the field will be empty. You should\n   * update this value in response to the `onChange` callback.\n   */\n  value?: number | undefined;\n\n  /**\n   * Callback when input is focused.\n   */\n  onFocus?(): void;\n\n  /**\n   * Callback when focus is removed.\n   */\n  onBlur?(): void;\n\n  /**\n   * Callback when the buyer has **finished editing** a field. Unlike `onChange`\n   * callbacks you may be familiar with from Polaris or other React component libraries,\n   * this callback is **not** run on every change to the input. Text fields are\n   * “partially controlled” components, which means that while the buyer edits the\n   * field, its state is controlled by the component. Once the buyer has signalled that\n   * they have finished editing the field (typically, by blurring the field), `onChange`\n   * is called if the input actually changed from the most recent `value` property. At\n   * that point, you are expected to store this “committed value” in state, and reflect\n   * it in the text field’s `value` property.\n   *\n   * This state management model is important given how UI Extensions are rendered. UI Extension components\n   * run on a separate thread from the UI, so they can’t respond to input synchronously.\n   * A pattern popularized by [controlled React components](https://reactjs.org/docs/forms.html#controlled-components)\n   * is to have the component be the source of truth for the input `value`, and update\n   * the `value` on every user input. The delay in responding to events from a UI\n   * extension is only a few milliseconds, but attempting to strictly store state with\n   * this delay can cause issues if a user types quickly, or if the buyer is using a\n   * lower-powered device. Having the UI thread take ownership for “in progress” input,\n   * and only synchronizing when the user is finished with a field, avoids this risk.\n   *\n   * It can still sometimes be useful to be notified when the user makes any input in\n   * the field. If you need this capability, you can use the `onInput` prop. However,\n   * never use that property to create tightly controlled state for the `value`.\n   *\n   * This callback is called with the current value of the field. If the value of a field\n   * is the same as the current `value` prop provided to the field, the `onChange` callback\n   * will not be run.\n   */\n  onChange?(value: number | undefined): void;\n\n  /**\n   * Callback when the user makes any changes in the field. As noted in the documentation\n   * for `onChange`, you **must not** use this to update `state` — use the `onChange`\n   * callback for that purpose. Use the `onInput` prop when you need to do something\n   * as soon as the buyer makes a change, like clearing validation errors that apply to\n   * the field as soon as the user begins making the necessary adjustments.\n   *\n   * This callback is called with the current value of the field.\n   */\n  onInput?(value: number | undefined): void;\n}"
          },
          "IconSource": {
            "filePath": "/components/Icon/Icon.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "IconSource",
            "value": "'arrowLeft' | 'arrowRight' | 'arrowUp' | 'arrowUpRight' | 'arrowDown' | 'bag' | 'calendar' | 'camera' | 'caretDown' | 'cart' | 'checkmark' | 'chevronLeft' | 'chevronRight' | 'chevronUp' | 'chevronDown' | 'clock' | 'close' | 'critical' | 'delete' | 'delivered' | 'delivery' | 'disabled' | 'discount' | 'email' | 'error' | 'errorFill' | 'external' | 'filter' | 'geolocation' | 'gift' | 'giftFill' | 'grid' | 'hamburger' | 'hollowCircle' | 'horizontalDots' | 'info' | 'infoFill' | 'list' | 'lock' | 'magnify' | 'map' | 'marker' | 'minus' | 'mobile' | 'note' | 'orderBox' | 'pen' | 'plus' | 'profile' | 'question' | 'questionFill' | 'reorder' | 'return' | 'store' | 'success' | 'truck' | 'verticalDots' | 'warning' | 'warningFill'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Forms",
    "defaultExample": {
      "image": "stepper-default.png",
      "codeblock": {
        "title": "Basic Stepper",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Stepper} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return <Stepper label=\"Quantity\" value={1} />;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Stepper} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const stepper = root.createComponent(Stepper, {\n    label: 'Quantity',\n    value: 1,\n  });\n\n  root.appendChild(stepper);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Use this component when customers are likely to choose a number within a small range, such as when changing a quantity from one to three.\n\n- If there’s no default number, then consider choosing another component such as a TextField or Select."
      }
    ],
    "related": []
  },
  {
    "name": "Tag",
    "description": "A Tag is used to help label, organize or categorize objects. It is commonly used in Checkout to display the discounts applied to a cart.",
    "requires": "",
    "thumbnail": "tag-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "TagProps",
        "description": "",
        "type": "TagProps",
        "typeDefinitions": {
          "TagProps": {
            "filePath": "/components/Tag/Tag.ts",
            "name": "TagProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Tag/Tag.ts",
                "syntaxKind": "PropertySignature",
                "name": "children",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "/components/Tag/Tag.ts",
                "syntaxKind": "PropertySignature",
                "name": "icon",
                "value": "IconSource",
                "description": "Icon source",
                "isOptional": true
              },
              {
                "filePath": "/components/Tag/Tag.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label used for buyers using assistive technologies. When set, any\n`children` supplied to this component will not be announced to screen reader users.",
                "isOptional": true
              },
              {
                "filePath": "/components/Tag/Tag.ts",
                "syntaxKind": "MethodSignature",
                "name": "onRemove",
                "value": "() => void",
                "description": "Callback when tag is removed",
                "isOptional": true
              },
              {
                "filePath": "/components/Tag/Tag.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface TagProps extends IdProps {\n  children?: string;\n  /**\n   * Icon source\n   */\n  icon?: IconSource;\n  /**\n   * A label used for buyers using assistive technologies. When set, any\n   * `children` supplied to this component will not be announced to screen reader users.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Callback when tag is removed\n   */\n  onRemove?(): void;\n}"
          },
          "IconSource": {
            "filePath": "/components/Icon/Icon.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "IconSource",
            "value": "'arrowLeft' | 'arrowRight' | 'arrowUp' | 'arrowUpRight' | 'arrowDown' | 'bag' | 'calendar' | 'camera' | 'caretDown' | 'cart' | 'checkmark' | 'chevronLeft' | 'chevronRight' | 'chevronUp' | 'chevronDown' | 'clock' | 'close' | 'critical' | 'delete' | 'delivered' | 'delivery' | 'disabled' | 'discount' | 'email' | 'error' | 'errorFill' | 'external' | 'filter' | 'geolocation' | 'gift' | 'giftFill' | 'grid' | 'hamburger' | 'hollowCircle' | 'horizontalDots' | 'info' | 'infoFill' | 'list' | 'lock' | 'magnify' | 'map' | 'marker' | 'minus' | 'mobile' | 'note' | 'orderBox' | 'pen' | 'plus' | 'profile' | 'question' | 'questionFill' | 'reorder' | 'return' | 'store' | 'success' | 'truck' | 'verticalDots' | 'warning' | 'warningFill'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Other",
    "defaultExample": {
      "image": "tag-default.png",
      "codeblock": {
        "title": "Basic Tag",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Tag} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return <Tag icon=\"discount\">SPRING</Tag>;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Tag} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const tag = root.createComponent(Tag, {icon: 'discount'}, 'SPRING');\n\n  root.appendChild(tag);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "related": []
  },
  {
    "name": "Text",
    "description": "Text is used to visually style and provide semantic value for a small piece of text content.",
    "requires": "",
    "thumbnail": "text-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "TextProps",
        "description": "",
        "type": "TextProps",
        "typeDefinitions": {
          "TextProps": {
            "filePath": "/components/Text/Text.ts",
            "name": "TextProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Text/Text.ts",
                "syntaxKind": "PropertySignature",
                "name": "size",
                "value": "TextSize",
                "description": "Size of the text",
                "isOptional": true
              },
              {
                "filePath": "/components/Text/Text.ts",
                "syntaxKind": "PropertySignature",
                "name": "emphasis",
                "value": "Emphasis",
                "description": "Use to emphasize a word or a group of words.",
                "isOptional": true
              },
              {
                "filePath": "/components/Text/Text.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityRole",
                "value": "TextAccessibilityRole",
                "description": "Set the semantic of the component’s content",
                "isOptional": true
              },
              {
                "filePath": "/components/Text/Text.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "Unique identifier. Typically used as a target for another component’s controls\nto associate an accessible label with an action.",
                "isOptional": true
              },
              {
                "filePath": "/components/Text/Text.ts",
                "syntaxKind": "PropertySignature",
                "name": "appearance",
                "value": "Extract<\n    Appearance,\n    'accent' | 'subdued' | 'info' | 'success' | 'warning' | 'critical'\n  >",
                "description": "Changes the visual appearance",
                "isOptional": true
              },
              {
                "filePath": "/components/Text/Text.ts",
                "syntaxKind": "PropertySignature",
                "name": "visibility",
                "value": "Visibility",
                "description": "Changes the visibility of the element.\n\n`hidden` visually hides the component while keeping it accessible\nto assistive technology, such as screen readers.\nHidden elements don't take any visual space contrary to CSS visibility: hidden;",
                "isOptional": true
              },
              {
                "filePath": "/components/Text/Text.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityVisibility",
                "value": "AccessibilityVisibility",
                "description": "Changes the visibility of the element to assistive technologies.\n\n`hidden` hides the component from assistive technology (for example,\na screen reader) but remains visually visible.",
                "isOptional": true
              }
            ],
            "value": "export interface TextProps extends VisibilityProps {\n  /**\n   * Size of the text\n   */\n  size?: TextSize;\n  /**\n   * Use to emphasize a word or a group of words.\n   */\n  emphasis?: Emphasis;\n  /**\n   * Set the semantic of the component’s content\n   */\n  accessibilityRole?: TextAccessibilityRole;\n  /**\n   * Unique identifier. Typically used as a target for another component’s controls\n   * to associate an accessible label with an action.\n   */\n  id?: string;\n  /**\n   * Changes the visual appearance\n   */\n  appearance?: Extract<\n    Appearance,\n    'accent' | 'subdued' | 'info' | 'success' | 'warning' | 'critical'\n  >;\n}"
          },
          "TextSize": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "TextSize",
            "value": "Extract<Size, 'extraSmall' | 'small' | 'base' | 'large' | 'extraLarge'> | 'medium'",
            "description": ""
          },
          "Size": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Size",
            "value": "'extraSmall' | 'small' | 'base' | 'large' | 'extraLarge' | 'fill'",
            "description": ""
          },
          "Emphasis": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Emphasis",
            "value": "'italic' | 'bold'",
            "description": "Use to emphasize a word or a group of words."
          },
          "TextAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "TextAccessibilityRole",
            "value": "'address' | 'deletion' | 'marking' | {type: 'abbreviation'; for?: string} | {type: 'directional-override'; direction: 'ltr' | 'rtl'} | {type: 'datetime'; machineReadable?: string} | 'stress' | 'offset' | 'strong'",
            "description": ""
          },
          "Appearance": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Appearance",
            "value": "'accent' | 'interactive' | 'subdued' | 'info' | 'success' | 'warning' | 'critical' | 'monochrome'",
            "description": ""
          },
          "Visibility": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Visibility",
            "value": "'hidden'",
            "description": ""
          },
          "AccessibilityVisibility": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AccessibilityVisibility",
            "value": "'hidden'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Titles and text",
    "defaultExample": {
      "image": "text-default.png",
      "codeblock": {
        "title": "Basic Text",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, Text, BlockStack} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <BlockStack inlineAlignment=\"center\">\n      <Text size=\"extraSmall\">Total</Text>\n      <Text size=\"small\">Total</Text>\n      <Text size=\"base\">Total</Text>\n      <Text size=\"medium\">Total</Text>\n      <Text size=\"large\">Total</Text>\n      <Text size=\"extraLarge\">Total</Text>\n    </BlockStack>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, Text, BlockStack} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const text = root.createComponent(BlockStack, undefined, [\n    root.createComponent(Text, {size: 'extraSmall'}, 'Total'),\n    root.createComponent(Text, {size: 'small'}, 'Total'),\n    root.createComponent(Text, {size: 'base'}, 'Total'),\n    root.createComponent(Text, {size: 'medium'}, 'Total'),\n    root.createComponent(Text, {size: 'large'}, 'Total'),\n    root.createComponent(Text, {size: 'extraLarge'}, 'Total'),\n  ]);\n\n  root.appendChild(text);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "appearance",
        "title": "Appearance",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"accent\"</code> | Conveys emphasis and draws attention to the element. |\n| <code>\"subdued\"</code> | Conveys a subdued or disabled state for the element. |\n| <code>\"info\"</code> | Conveys that the element is informative or has information. |\n| <code>\"success\"</code> | Convey a successful interaction. |\n| <code>\"warning\"</code> | Convey something needs attention or an action needs to be taken. |\n| <code>\"critical\"</code> | Conveys a problem has arisen. |"
      },
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Use larger text to emphasize content that’s not a heading, such as a price total.\n\n- Create contrast between more and less important text with properties such as `size` and `subdued`."
      }
    ],
    "related": [
      {
        "name": "Heading",
        "subtitle": "Component",
        "url": "heading",
        "type": "Component"
      },
      {
        "name": "HeadingGroup",
        "subtitle": "Component",
        "url": "headinggroup",
        "type": "Component"
      },
      {
        "name": "TextBlock",
        "subtitle": "Component",
        "url": "textblock",
        "type": "Component"
      }
    ]
  },
  {
    "name": "TextBlock",
    "description": "Text block is used to render a block of text that occupies the full width available, like a paragraph.",
    "requires": "",
    "thumbnail": "textblock-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "TextBlockProps",
        "description": "",
        "type": "TextBlockProps",
        "typeDefinitions": {
          "TextBlockProps": {
            "filePath": "/components/TextBlock/TextBlock.ts",
            "name": "TextBlockProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/TextBlock/TextBlock.ts",
                "syntaxKind": "PropertySignature",
                "name": "size",
                "value": "TextSize",
                "description": "Size of the text",
                "isOptional": true
              },
              {
                "filePath": "/components/TextBlock/TextBlock.ts",
                "syntaxKind": "PropertySignature",
                "name": "emphasis",
                "value": "Emphasis",
                "description": "Use to emphasize a word or a group of words.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextBlock/TextBlock.ts",
                "syntaxKind": "PropertySignature",
                "name": "appearance",
                "value": "Extract<\n    Appearance,\n    'accent' | 'subdued' | 'info' | 'success' | 'warning' | 'critical'\n  >",
                "description": "Changes the visual appearance",
                "isOptional": true
              },
              {
                "filePath": "/components/TextBlock/TextBlock.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineAlignment",
                "value": "InlineAlignment",
                "description": "Align text along the main axis.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextBlock/TextBlock.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface TextBlockProps extends IdProps {\n  /**\n   * Size of the text\n   */\n  size?: TextSize;\n  /**\n   * Use to emphasize a word or a group of words.\n   */\n  emphasis?: Emphasis;\n  /**\n   * Changes the visual appearance\n   */\n  appearance?: Extract<\n    Appearance,\n    'accent' | 'subdued' | 'info' | 'success' | 'warning' | 'critical'\n  >;\n  /**\n   * Align text along the main axis.\n   */\n  inlineAlignment?: InlineAlignment;\n}"
          },
          "TextSize": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "TextSize",
            "value": "Extract<Size, 'extraSmall' | 'small' | 'base' | 'large' | 'extraLarge'> | 'medium'",
            "description": ""
          },
          "Size": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Size",
            "value": "'extraSmall' | 'small' | 'base' | 'large' | 'extraLarge' | 'fill'",
            "description": ""
          },
          "Emphasis": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Emphasis",
            "value": "'italic' | 'bold'",
            "description": "Use to emphasize a word or a group of words."
          },
          "Appearance": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Appearance",
            "value": "'accent' | 'interactive' | 'subdued' | 'info' | 'success' | 'warning' | 'critical' | 'monochrome'",
            "description": ""
          },
          "InlineAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InlineAlignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Titles and text",
    "defaultExample": {
      "image": "textblock-default.png",
      "codeblock": {
        "title": "Basic TextBlock",
        "tabs": [
          {
            "title": "React",
            "code": "import {\n  render,\n  TextBlock,\n  BlockStack,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <BlockStack>\n      <TextBlock>\n        We have a 30-day return policy, which means you have 30 days after\n        receiving your item to request a return.\n      </TextBlock>\n      <TextBlock>\n        To be eligible for a return, your item must be in the same condition\n        that you received it, unworn or unused, with tags, and in its original\n        packaging. You’ll also need the receipt or proof of purchase.\n      </TextBlock>\n    </BlockStack>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, TextBlock, BlockStack} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const textBlock = root.createComponent(BlockStack, undefined, [\n    root.createComponent(\n      TextBlock,\n      undefined,\n      'We have a 30-day return policy, which means you have 30 days after receiving your item to request a return.',\n    ),\n    root.createComponent(\n      TextBlock,\n      undefined,\n      'To be eligible for a return, your item must be in the same condition that you received it, unworn or unused, with tags, and in its original packaging. You’ll also need the receipt or proof of purchase.',\n    ),\n  ]);\n\n  root.appendChild(textBlock);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "appearance",
        "title": "Appearance",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"accent\"</code> | Conveys emphasis and draws attention to the element. |\n| <code>\"subdued\"</code> | Conveys a subdued or disabled state for the element. |\n| <code>\"info\"</code> | Conveys that the element is informative or has information. |\n| <code>\"success\"</code> | Convey a successful interaction. |\n| <code>\"warning\"</code> | Convey something needs attention or an action needs to be taken. |\n| <code>\"critical\"</code> | Conveys a problem has arisen. |"
      },
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Create contrast between more and less important text with properties such as `size`, `emphasis`, and `appearance`."
      }
    ],
    "related": [
      {
        "name": "Heading",
        "subtitle": "Component",
        "url": "heading",
        "type": "Component"
      },
      {
        "name": "HeadingGroup",
        "subtitle": "Component",
        "url": "headinggroup",
        "type": "Component"
      },
      {
        "name": "Text",
        "subtitle": "Component",
        "url": "text",
        "type": "Component"
      }
    ]
  },
  {
    "name": "TextField",
    "description": "Use a text field to get text input from a customer.",
    "requires": "",
    "thumbnail": "textfield-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "TextFieldProps",
        "description": "",
        "type": "TextFieldProps",
        "typeDefinitions": {
          "TextFieldProps": {
            "filePath": "/components/TextField/TextField.ts",
            "name": "TextFieldProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the field. When no `id` is set,\na globally unique value will be used instead.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "icon",
                "value": "IconSource | { source: IconSource; position?: \"start\" | \"end\"; }",
                "description": "An icon to render at the start or end of the field.\nIt will render at the start by default.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "An identifier for the field that is unique within the nearest\ncontaining `Form` component.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "Content to use as the field label. This value is also used as the placeholder\nwhen the field is empty."
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "prefix",
                "value": "string",
                "description": "Text content to render before the value.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "suffix",
                "value": "string",
                "description": "Text content to render at the end of the text field.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessory",
                "value": "string | RemoteFragment<RemoteRoot<any, any>>",
                "description": "Any content to render at the end of the text field. Commonly used\nto display an icon that opens a tooltip providing more information about the field.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityDescription",
                "value": "string",
                "description": "A detailed description for screen readers.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "T",
                "description": "The current value for the field. If omitted, the field will be empty. You should\nupdate this value in response to the `onChange` callback.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "controlledValue",
                "value": "T",
                "description": "In rare cases, like the PhoneField component, we completely control state.\nIn those cases, there is never a difference between the `value` prop of the field\nand the current value in the field, and so this component never considers the\nfield to have changed. Use the `controlledValue` prop to provide the value that\nshould be shown to the buyer in those circumstances, but where the `value` prop\nwill continue to be used as the comparison value to determine whether the field\nhas changed. This value will usually be set to the last committed, unformatted value\nfor the controlled input.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "Type",
                "description": "The content type a buyer will enter into the field. This type is used to provide\nsemantic value to the field and, where possible, will provide the buyer with\na better editing experience for the content type.\n\nNote that the type property does not change the way the text field’s value will\nbe provided in `onChange` or `onInput`; a text field with a type of `'number'`\nwill still provide the exact user entry, as a string, to those callbacks. The\ntype also does not perform any form of automatic validation. If you want to\nperform validation, use the `error` property.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "required",
                "value": "boolean",
                "description": "Whether the field needs a value. This requirement adds semantic value\nto the field, but it will not cause an error to appear automatically.\nIf you want to present an error when this field is empty, you can do\nso with the `error` prop.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "error",
                "value": "string",
                "description": "Indicate an error to the user. The field will be given a specific stylistic treatment\nto communicate problems that have to be resolved immediately.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "multiline",
                "value": "number | boolean",
                "description": "Whether the field supports multiple lines of input.\nSet a `number` to define the default lines of the input.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "autocomplete",
                "value": "boolean | Autocomplete",
                "description": "A hint as to the intended content of the field.\n\nWhen set to `true`, this property indicates that the field should support\nautofill, but you do not have any more semantic information on the intended\ncontents.\n\nWhen set to `false`, you are indicating that this field contains sensitive\ninformation, or contents that are never saved, like one-time codes.\n\nAlternatively, you can provide an `Autocomplete` object, which describes the\nspecific data you would like to be entered into this field during autofill.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the field can be modified.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "readonly",
                "value": "boolean",
                "description": "Whether the field is read-only.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxLength",
                "value": "number",
                "description": "Specifies the maximum number of characters allowed.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onFocus",
                "value": "() => void",
                "description": "Callback when input is focused.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onBlur",
                "value": "() => void",
                "description": "Callback when focus is removed.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onChange",
                "value": "(value: T) => void",
                "description": "Callback when the buyer has **finished editing** a field. Unlike `onChange`\ncallbacks you may be familiar with from Polaris or other React component libraries,\nthis callback is **not** run on every change to the input. Text fields are\n“partially controlled” components, which means that while the buyer edits the\nfield, its state is controlled by the component. Once the buyer has signalled that\nthey have finished editing the field (typically, by blurring the field), `onChange`\nis called if the input actually changed from the most recent `value` property. At\nthat point, you are expected to store this “committed value” in state, and reflect\nit in the text field’s `value` property.\n\nThis state management model is important given how UI Extensions are rendered. UI Extension components\nrun on a separate thread from the UI, so they can’t respond to input synchronously.\nA pattern popularized by [controlled React components](https://reactjs.org/docs/forms.html#controlled-components)\nis to have the component be the source of truth for the input `value`, and update\nthe `value` on every user input. The delay in responding to events from a UI\nextension is only a few milliseconds, but attempting to strictly store state with\nthis delay can cause issues if a user types quickly, or if the buyer is using a\nlower-powered device. Having the UI thread take ownership for “in progress” input,\nand only synchronizing when the user is finished with a field, avoids this risk.\n\nIt can still sometimes be useful to be notified when the user makes any input in\nthe field. If you need this capability, you can use the `onInput` prop. However,\nnever use that property to create tightly controlled state for the `value`.\n\nThis callback is called with the current value of the field. If the value of a field\nis the same as the current `value` prop provided to the field, the `onChange` callback\nwill not be run.",
                "isOptional": true
              },
              {
                "filePath": "/components/TextField/TextField.ts",
                "syntaxKind": "MethodSignature",
                "name": "onInput",
                "value": "(value: T) => void",
                "description": "Callback when the user makes any changes in the field. As noted in the documentation\nfor `onChange`, you **must not** use this to update `state` — use the `onChange`\ncallback for that purpose. Use the `onInput` prop when you need to do something\nas soon as the buyer makes a change, like clearing validation errors that apply to\nthe field as soon as the user begins making the necessary adjustments.\n\nThis callback is called with the current value of the field.",
                "isOptional": true
              }
            ],
            "value": "export interface TextFieldProps<T extends string | number | undefined> {\n  /**\n   * A unique identifier for the field. When no `id` is set,\n   * a globally unique value will be used instead.\n   */\n  id?: string;\n  /**\n   * An icon to render at the start or end of the field.\n   * It will render at the start by default.\n   */\n  icon?: IconSource | {source: IconSource; position?: 'start' | 'end'};\n  /**\n   * An identifier for the field that is unique within the nearest\n   * containing `Form` component.\n   */\n  name?: string;\n  /**\n   * Content to use as the field label. This value is also used as the placeholder\n   * when the field is empty.\n   */\n  label: string;\n  /**\n   * Text content to render before the value.\n   */\n  prefix?: string;\n  /**\n   * Text content to render at the end of the text field.\n   */\n  suffix?: string;\n  /**\n   * Any content to render at the end of the text field. Commonly used\n   * to display an icon that opens a tooltip providing more information about the field.\n   */\n  accessory?: string | RemoteFragment;\n  /**\n   * A detailed description for screen readers.\n   */\n  accessibilityDescription?: string;\n  /**\n   * The current value for the field. If omitted, the field will be empty. You should\n   * update this value in response to the `onChange` callback.\n   */\n  value?: T;\n  /**\n   * In rare cases, like the PhoneField component, we completely control state.\n   * In those cases, there is never a difference between the `value` prop of the field\n   * and the current value in the field, and so this component never considers the\n   * field to have changed. Use the `controlledValue` prop to provide the value that\n   * should be shown to the buyer in those circumstances, but where the `value` prop\n   * will continue to be used as the comparison value to determine whether the field\n   * has changed. This value will usually be set to the last committed, unformatted value\n   * for the controlled input.\n   */\n  controlledValue?: T;\n  /**\n   * The content type a buyer will enter into the field. This type is used to provide\n   * semantic value to the field and, where possible, will provide the buyer with\n   * a better editing experience for the content type.\n   *\n   * Note that the type property does not change the way the text field’s value will\n   * be provided in `onChange` or `onInput`; a text field with a type of `'number'`\n   * will still provide the exact user entry, as a string, to those callbacks. The\n   * type also does not perform any form of automatic validation. If you want to\n   * perform validation, use the `error` property.\n   */\n  type?: Type;\n  /**\n   * Whether the field needs a value. This requirement adds semantic value\n   * to the field, but it will not cause an error to appear automatically.\n   * If you want to present an error when this field is empty, you can do\n   * so with the `error` prop.\n   */\n  required?: boolean;\n  /**\n   * Indicate an error to the user. The field will be given a specific stylistic treatment\n   * to communicate problems that have to be resolved immediately.\n   */\n  error?: string;\n  /**\n   * Whether the field supports multiple lines of input.\n   * Set a `number` to define the default lines of the input.\n   */\n  multiline?: boolean | number;\n  /**\n   * A hint as to the intended content of the field.\n   *\n   * When set to `true`, this property indicates that the field should support\n   * autofill, but you do not have any more semantic information on the intended\n   * contents.\n   *\n   * When set to `false`, you are indicating that this field contains sensitive\n   * information, or contents that are never saved, like one-time codes.\n   *\n   * Alternatively, you can provide an `Autocomplete` object, which describes the\n   * specific data you would like to be entered into this field during autofill.\n   */\n  autocomplete?: Autocomplete | boolean;\n  /**\n   * Whether the field can be modified.\n   */\n  disabled?: boolean;\n  /**\n   * Whether the field is read-only.\n   */\n  readonly?: boolean;\n  /**\n   * Specifies the maximum number of characters allowed.\n   */\n  maxLength?: number;\n  /**\n   * Callback when input is focused.\n   */\n  onFocus?(): void;\n  /**\n   * Callback when focus is removed.\n   */\n  onBlur?(): void;\n  /**\n   * Callback when the buyer has **finished editing** a field. Unlike `onChange`\n   * callbacks you may be familiar with from Polaris or other React component libraries,\n   * this callback is **not** run on every change to the input. Text fields are\n   * “partially controlled” components, which means that while the buyer edits the\n   * field, its state is controlled by the component. Once the buyer has signalled that\n   * they have finished editing the field (typically, by blurring the field), `onChange`\n   * is called if the input actually changed from the most recent `value` property. At\n   * that point, you are expected to store this “committed value” in state, and reflect\n   * it in the text field’s `value` property.\n   *\n   * This state management model is important given how UI Extensions are rendered. UI Extension components\n   * run on a separate thread from the UI, so they can’t respond to input synchronously.\n   * A pattern popularized by [controlled React components](https://reactjs.org/docs/forms.html#controlled-components)\n   * is to have the component be the source of truth for the input `value`, and update\n   * the `value` on every user input. The delay in responding to events from a UI\n   * extension is only a few milliseconds, but attempting to strictly store state with\n   * this delay can cause issues if a user types quickly, or if the buyer is using a\n   * lower-powered device. Having the UI thread take ownership for “in progress” input,\n   * and only synchronizing when the user is finished with a field, avoids this risk.\n   *\n   * It can still sometimes be useful to be notified when the user makes any input in\n   * the field. If you need this capability, you can use the `onInput` prop. However,\n   * never use that property to create tightly controlled state for the `value`.\n   *\n   * This callback is called with the current value of the field. If the value of a field\n   * is the same as the current `value` prop provided to the field, the `onChange` callback\n   * will not be run.\n   */\n  onChange?(value: T): void;\n  /**\n   * Callback when the user makes any changes in the field. As noted in the documentation\n   * for `onChange`, you **must not** use this to update `state` — use the `onChange`\n   * callback for that purpose. Use the `onInput` prop when you need to do something\n   * as soon as the buyer makes a change, like clearing validation errors that apply to\n   * the field as soon as the user begins making the necessary adjustments.\n   *\n   * This callback is called with the current value of the field.\n   */\n  onInput?(value: T): void;\n}"
          },
          "IconSource": {
            "filePath": "/components/Icon/Icon.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "IconSource",
            "value": "'arrowLeft' | 'arrowRight' | 'arrowUp' | 'arrowUpRight' | 'arrowDown' | 'bag' | 'calendar' | 'camera' | 'caretDown' | 'cart' | 'checkmark' | 'chevronLeft' | 'chevronRight' | 'chevronUp' | 'chevronDown' | 'clock' | 'close' | 'critical' | 'delete' | 'delivered' | 'delivery' | 'disabled' | 'discount' | 'email' | 'error' | 'errorFill' | 'external' | 'filter' | 'geolocation' | 'gift' | 'giftFill' | 'grid' | 'hamburger' | 'hollowCircle' | 'horizontalDots' | 'info' | 'infoFill' | 'list' | 'lock' | 'magnify' | 'map' | 'marker' | 'minus' | 'mobile' | 'note' | 'orderBox' | 'pen' | 'plus' | 'profile' | 'question' | 'questionFill' | 'reorder' | 'return' | 'store' | 'success' | 'truck' | 'verticalDots' | 'warning' | 'warningFill'",
            "description": ""
          },
          "Type": {
            "filePath": "/components/TextField/TextField.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Type",
            "value": "'text' | 'email' | 'number' | 'telephone'",
            "description": ""
          },
          "Autocomplete": {
            "filePath": "/components/shared.ts",
            "name": "Autocomplete",
            "description": "A descriptor for selecting the data a field would like to receive during\nautocomplete. This attribute is modeled off of a limited set of the autocomplete\nvalues supported in browsers.",
            "members": [
              {
                "filePath": "/components/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "group",
                "value": "AutocompleteGroup",
                "description": "The contact information “group” the autocomplete data should be sourced from.",
                "isOptional": true
              },
              {
                "filePath": "/components/shared.ts",
                "syntaxKind": "PropertySignature",
                "name": "field",
                "value": "AutocompleteField",
                "description": "The type of data that should be inserted into a field supporting autocomplete."
              }
            ],
            "value": "export interface Autocomplete {\n  /**\n   * The contact information “group” the autocomplete data should be sourced from.\n   */\n  group?: AutocompleteGroup;\n  /**\n   * The type of data that should be inserted into a field supporting autocomplete.\n   */\n  field: AutocompleteField;\n}"
          },
          "AutocompleteGroup": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AutocompleteGroup",
            "value": "'shipping' | 'billing' | 'location'",
            "description": ""
          },
          "AutocompleteField": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AutocompleteField",
            "value": "'name' | 'honorific-prefix' | 'given-name' | 'additional-name' | 'family-name' | 'honorific-suffix' | 'nickname' | 'username' | 'new-password' | 'current-password' | 'one-time-code' | 'organization-title' | 'organization' | 'street-address' | 'address-line1' | 'address-line2' | 'address-line3' | 'address-level4' | 'address-level3' | 'address-level2' | 'address-level1' | 'country' | 'country-name' | 'postal-code' | 'credit-card-name' | 'credit-card-given-name' | 'credit-card-additional-name' | 'credit-card-family-name' | 'credit-card-number' | 'credit-card-expiry' | 'credit-card-expiry-month' | 'credit-card-expiry-year' | 'credit-card-security-code' | 'credit-card-type' | 'transaction-currency' | 'transaction-amount' | 'language' | 'birthday' | 'birthday-day' | 'birthday-month' | 'birthday-year' | 'sex' | 'url' | 'photo' | 'telephone' | 'telephone-country-code' | 'telephone-national' | 'telephone-area-code' | 'telephone-local' | 'telephone-local-prefix' | 'telephone-local-suffix' | 'telephone-extension' | 'email' | 'instant-message' | 'home telephone' | 'home telephone-country-code' | 'home telephone-national' | 'home telephone-area-code' | 'home telephone-local' | 'home telephone-local-prefix' | 'home telephone-local-suffix' | 'home telephone-extension' | 'home email' | 'home instant-message' | 'work telephone' | 'work telephone-country-code' | 'work telephone-national' | 'work telephone-area-code' | 'work telephone-local' | 'work telephone-local-prefix' | 'work telephone-local-suffix' | 'work telephone-extension' | 'work email' | 'work instant-message' | 'mobile telephone' | 'mobile telephone-country-code' | 'mobile telephone-national' | 'mobile telephone-area-code' | 'mobile telephone-local' | 'mobile telephone-local-prefix' | 'mobile telephone-local-suffix' | 'mobile telephone-extension' | 'mobile email' | 'mobile instant-message' | 'fax telephone' | 'fax telephone-country-code' | 'fax telephone-national' | 'fax telephone-area-code' | 'fax telephone-local' | 'fax telephone-local-prefix' | 'fax telephone-local-suffix' | 'fax telephone-extension' | 'fax email' | 'fax instant-message' | 'pager telephone' | 'pager telephone-country-code' | 'pager telephone-national' | 'pager telephone-area-code' | 'pager telephone-local' | 'pager telephone-local-prefix' | 'pager telephone-local-suffix' | 'pager telephone-extension' | 'pager email' | 'pager instant-message'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Forms",
    "defaultExample": {
      "image": "textfield-default.png",
      "codeblock": {
        "title": "Basic TextField",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, TextField} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return <TextField label=\"Last name\" />;\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, TextField} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const textfield = root.createComponent(TextField, {\n    label: 'Last name',\n  });\n\n  root.appendChild(textfield);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "- Clearly label text fields so that it’s obvious what customers should enter.\n\n- Label text fields as Optional when input isn’t required. For example, use the label <b>First name (optional)</b>.\n\n- Don’t have optional fields pass true to the required property."
      }
    ],
    "related": []
  },
  {
    "name": "Tooltip",
    "description": "Tooltips are floating labels that briefly explain the function of a user interface element. They must be specified inside the `overlay` prop of an activator component. Currently, activator components are `Button`, `Link`, and `Pressable`.\n\nThe library takes care of applying the WAI-ARIA Tooltip Widget pattern automatically for the activator and the tooltip content. Expect screen readers to read the tooltip content when the user focuses the activator.",
    "requires": "",
    "thumbnail": "tooltip-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "TooltipProps",
        "description": "",
        "type": "TooltipProps",
        "typeDefinitions": {
          "TooltipProps": {
            "filePath": "/components/Tooltip/Tooltip.ts",
            "name": "TooltipProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/Tooltip/Tooltip.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the component.",
                "isOptional": true
              }
            ],
            "value": "export interface TooltipProps extends IdProps {}"
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Overlays",
    "defaultExample": {
      "image": "tooltip-default.png",
      "codeblock": {
        "title": "Basic Tooltip",
        "tabs": [
          {
            "title": "React",
            "code": "import {\n  render,\n  Icon,\n  Pressable,\n  Tooltip,\n} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <Pressable\n      overlay={\n        <Tooltip>In case we need to contact you about your order</Tooltip>\n      }\n    >\n      <Icon source=\"questionFill\" />\n    </Pressable>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {\n  extend,\n  Icon,\n  Pressable,\n  Tooltip,\n} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const tooltipFragment = root.createFragment();\n  const tooltip = root.createComponent(\n    Tooltip,\n    {},\n    'In case we need to contact you about your order',\n  );\n  tooltipFragment.appendChild(tooltip);\n  const pressable = root.createComponent(\n    Pressable,\n    {overlay: tooltipFragment},\n    [root.createComponent(Icon, {source: 'questionFill'})],\n  );\n\n  root.appendChild(pressable);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "Use tooltips if:\n\n- It’s used for showing information only.\n\n- The information contained in it is not needed by someone to complete their checkout.\n\n- The information can be written in a sentence."
      }
    ],
    "related": []
  },
  {
    "name": "View",
    "description": "View is a generic container component. Its contents will always be their “natural” size, so this component can be useful in layout components (like `Grid`, `BlockStack`, `InlineStack`) that would otherwise stretch their children to fit.",
    "requires": "",
    "thumbnail": "view-thumbnail.png",
    "isVisualComponent": true,
    "type": "",
    "definitions": [
      {
        "title": "ViewProps",
        "description": "",
        "type": "ViewProps",
        "typeDefinitions": {
          "ViewProps": {
            "filePath": "/components/View/View.ts",
            "name": "ViewProps",
            "description": "",
            "members": [
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "display",
                "value": "Display",
                "description": "Changes the display of the View.\n\n\n`inline` follows the direction of words in a sentence based on the document’s writing mode.\n\n`block` follows the direction of paragraphs based on the document’s writing mode.",
                "isOptional": true,
                "defaultValue": "'block'"
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "A unique identifier for the View.",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "opacity",
                "value": "Opacity",
                "description": "Sets the opacity of the View. The opacity will be applied to the background as well as all\nthe children of the View. Use carefully as this could decrease the contrast ratio between\nthe background and foreground elements, resulting in unreadable and inaccessible text.",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityLabel",
                "value": "string",
                "description": "A label that describes the purpose or contents of the element. When set,\nit will be announced to buyers using assistive technologies and will\nprovide them with more context.",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityRole",
                "value": "ViewLikeAccessibilityRole",
                "description": "Sets the semantic meaning of the component’s content. When set,\nthe role will be used by assistive technologies to help buyers\nnavigate the page.\n\n\nFor example:\n\n- In an HTML host a `['listItem', 'separator']` tuple will render: `<li role='separator'>`\n\n- In an HTML host a `listItem` string will render: `<li>`",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "position",
                "value": "MaybeResponsiveConditionalStyle<Position>",
                "description": "Changes how the View is positioned.",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "translate",
                "value": "MaybeResponsiveConditionalStyle<Translate>",
                "description": "Specifies a two-dimensional translation of the View.",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "blockAlignment",
                "value": "MaybeResponsiveConditionalStyle<\n    Extract<BlockAlignment, 'start' | 'center' | 'end'>\n  >",
                "description": "Position children along the cross axis",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineAlignment",
                "value": "MaybeResponsiveConditionalStyle<InlineAlignment>",
                "description": "Position children along the main axis",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "inlineSize",
                "value": "MaybeResponsiveConditionalStyle<'fill'>",
                "description": "Adjust the inline size.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "overflow",
                "value": "\"hidden\" | \"visible\"",
                "description": "Sets the overflow behavior of the element.\n\n`hidden`: clips the content when it is larger than the element’s container.\nThe element will not be scrollable and the users will not be able\nto access the clipped content by dragging or using a scroll wheel.\n\n`visible`: the content that extends beyond the element’s container is visible.",
                "isOptional": true,
                "defaultValue": "'visible'"
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "border",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<BorderStyle>>",
                "description": "Adjust the border style.\n\nTo shorten the code, it is possible to specify all the border style properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border styles are `base`\n\n- `['base', 'none']` means blockStart and blockEnd border styles are `base`, inlineStart and inlineEnd border styles are `none`\n\n- `['base', 'none', 'dotted', 'base']` means blockStart border style is `base`, inlineEnd border style is `none`, blockEnd border style is `dotted` and  blockStart border style is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderWidth",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<BorderWidth>\n  >",
                "description": "Adjust the border width.\n\nTo shorten the code, it is possible to specify all the border width properties in one property.\n\nFor example:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart border widths are `base`\n\n- `['base', 'medium']` means blockStart and blockEnd border widths are `base`, inlineStart and inlineEnd border widths are `medium`\n\n- `['base', 'medium', 'medium', 'base']` means blockStart border width is `base`, inlineEnd border width is `medium`, blockEnd border width is `medium` and  blockStart border width is `base`",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "borderRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "",
                "isOptional": true,
                "isPrivate": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "cornerRadius",
                "value": "MaybeResponsiveConditionalStyle<\n    MaybeShorthandProperty<CornerRadius>\n  >",
                "description": "Adjust the corner radius.\n\nProvide a single value to apply the same corner radius to all four corners, two values to apply different corner radii to opposing corners, or four values to apply different corner radii to each individual corner.\n\nFor example:\n\n- `base` means all 4 corner radii are `base`\n\n- `['base', 'none']` means the StartStart and EndEnd corner radii are `base`, StartEnd and EndStart corner radii are `none`.\n   When the context’s language direction is left to right, StartStart and EndEnd corners are the top left and bottom right corners\n   while StartEnd and EndStart corners are the top right and bottom left corners.\n\n- `['base', 'none', 'small', 'base']` means StartStart corner radius is `base`, StartEnd corner radius is `none`, EndEnd corner radius is `small` and  EndStart corner radius is `base`\n\nA `borderRadius` alias is available for this property. When both are specified, `cornerRadius` takes precedence.",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the maximum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "minInlineSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the minimum inline size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "minBlockSize",
                "value": "MaybeResponsiveConditionalStyle<\n    number | `${number}%` | 'fill'\n  >",
                "description": "Adjust the block size.\n\n`number`: size in pixels.\n\n`` `${number}%` ``: size in percentages.\n\n`fill`: takes all the available space.",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "padding",
                "value": "MaybeResponsiveConditionalStyle<MaybeShorthandProperty<Spacing>>",
                "description": "Adjust the padding.\n\nTo shorten the code, it is possible to specify all the padding properties in one property.\n\n\nExamples:\n\n- `base` means blockStart, inlineEnd, blockEnd and inlineStart paddings are `base`\n\n- [`base`, `none`] means blockStart and blockEnd paddings are `base`, inlineStart and inlineEnd paddings are `none`\n\n- [`base`, `none`, `large200`, `small200`] means blockStart padding is `base`, inlineEnd padding is `none`, blockEnd padding is `large200` and  blockStart padding is `small200`",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "visibility",
                "value": "Visibility",
                "description": "Changes the visibility of the element.\n\n`hidden` visually hides the component while keeping it accessible\nto assistive technology, such as screen readers.\nHidden elements don't take any visual space contrary to CSS visibility: hidden;",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "accessibilityVisibility",
                "value": "AccessibilityVisibility",
                "description": "Changes the visibility of the element to assistive technologies.\n\n`hidden` hides the component from assistive technology (for example,\na screen reader) but remains visually visible.",
                "isOptional": true
              }
            ],
            "value": "export interface ViewProps\n  extends BorderProps,\n    CornerProps,\n    SizingProps,\n    SpacingProps,\n    VisibilityProps {\n  /**\n   * Changes the display of the View.\n   *\n   *\n   * `inline` follows the direction of words in a sentence based on the document’s writing mode.\n   *\n   * `block` follows the direction of paragraphs based on the document’s writing mode.\n   *\n   *\n   * @defaultValue 'block'\n   */\n  display?: Display;\n\n  /**\n   * A unique identifier for the View.\n   */\n  id?: string;\n\n  /**\n   * Sets the opacity of the View. The opacity will be applied to the background as well as all\n   * the children of the View. Use carefully as this could decrease the contrast ratio between\n   * the background and foreground elements, resulting in unreadable and inaccessible text.\n   */\n  opacity?: Opacity;\n  /**\n   * A label that describes the purpose or contents of the element. When set,\n   * it will be announced to buyers using assistive technologies and will\n   * provide them with more context.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Sets the semantic meaning of the component’s content. When set,\n   * the role will be used by assistive technologies to help buyers\n   * navigate the page.\n   *\n   *\n   * For example:\n   *\n   * - In an HTML host a `['listItem', 'separator']` tuple will render: `<li role='separator'>`\n   *\n   * - In an HTML host a `listItem` string will render: `<li>`\n   */\n  accessibilityRole?: ViewLikeAccessibilityRole;\n  /**\n   * Changes how the View is positioned.\n   */\n  position?: MaybeResponsiveConditionalStyle<Position>;\n  /**\n   * Specifies a two-dimensional translation of the View.\n   */\n  translate?: MaybeResponsiveConditionalStyle<Translate>;\n  /**\n   * Position children along the cross axis\n   */\n  blockAlignment?: MaybeResponsiveConditionalStyle<\n    Extract<BlockAlignment, 'start' | 'center' | 'end'>\n  >;\n  /**\n   * Position children along the main axis\n   */\n  inlineAlignment?: MaybeResponsiveConditionalStyle<InlineAlignment>;\n  /**\n   * Adjust the inline size.\n   *\n   * `fill`: takes all the available space.\n   */\n  inlineSize?: MaybeResponsiveConditionalStyle<'fill'>;\n  /**\n   * Sets the overflow behavior of the element.\n   *\n   * `hidden`: clips the content when it is larger than the element’s container.\n   * The element will not be scrollable and the users will not be able\n   * to access the clipped content by dragging or using a scroll wheel.\n   *\n   * `visible`: the content that extends beyond the element’s container is visible.\n   *\n   * @default 'visible'\n   */\n  overflow?: 'hidden' | 'visible';\n}"
          },
          "Display": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Display",
            "value": "'block' | 'inline'",
            "description": ""
          },
          "Opacity": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Opacity",
            "value": "10 | 20 | 30 | 40 | 50 | 60 | 70 | 80 | 90",
            "description": ""
          },
          "ViewLikeAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ViewLikeAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole | [NonPresentationalAccessibilityRole, NonPresentationalAccessibilityRole]",
            "description": ""
          },
          "NonPresentationalAccessibilityRole": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "NonPresentationalAccessibilityRole",
            "value": "NonPresentationalAccessibilityRole",
            "description": ""
          },
          "MaybeResponsiveConditionalStyle": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeResponsiveConditionalStyle",
            "value": "MaybeResponsiveConditionalStyle<T>",
            "description": ""
          },
          "Position": {
            "filePath": "/components/View/View.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Position",
            "value": "{\n  /**\n   * Changes how the View is positioned. For setting the position, only properties\n   * that set the offset on a different axis can be set simultaneously. This means\n   * that these combinations are not allowed:\n   *\n   * ```\n   * { blockStart, blockEnd }\n   * ```\n   *\n   * ```\n   * { inlineStart, inlineEnd }\n   * ```\n   *\n   * @defaultValue 'relative'\n   */\n  type?: PositionType;\n} & PositionCoordinates",
            "description": ""
          },
          "PositionType": {
            "filePath": "/components/View/View.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "PositionType",
            "value": "'absolute' | 'relative' | 'sticky'",
            "description": ""
          },
          "PositionCoordinates": {
            "filePath": "/components/View/View.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "PositionCoordinates",
            "value": "({ inlineStart?: Coordinate; blockStart?: Coordinate; } & { inlineEnd?: never; blockEnd?: never; }) | ({ inlineEnd?: Coordinate; blockStart?: Coordinate; } & { ...; }) | ... 5 more ... | ({ ...; } & { ...; })",
            "description": ""
          },
          "Coordinate": {
            "filePath": "/components/View/View.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Coordinate",
            "value": "number | `${number}%`",
            "description": ""
          },
          "Translate": {
            "filePath": "/components/View/View.ts",
            "name": "Translate",
            "description": "",
            "members": [
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "block",
                "value": "number | `${number}%`",
                "description": "Adjust the translation on the cross axis.\n\nA percentage value refers to the block size of the View.",
                "isOptional": true
              },
              {
                "filePath": "/components/View/View.ts",
                "syntaxKind": "PropertySignature",
                "name": "inline",
                "value": "number | `${number}%`",
                "description": "Adjust the translation on the main axis.\n\nA percentage value refers to the inline size of the View.",
                "isOptional": true
              }
            ],
            "value": "export interface Translate {\n  /**\n   * Adjust the translation on the cross axis.\n   *\n   * A percentage value refers to the block size of the View.\n   */\n  block?: number | `${number}%`;\n  /**\n   * Adjust the translation on the main axis.\n   *\n   * A percentage value refers to the inline size of the View.\n   */\n  inline?: number | `${number}%`;\n}"
          },
          "BlockAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BlockAlignment",
            "value": "Alignment | 'baseline'",
            "description": ""
          },
          "Alignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Alignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "InlineAlignment": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InlineAlignment",
            "value": "'start' | 'center' | 'end'",
            "description": ""
          },
          "MaybeShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "MaybeShorthandProperty",
            "value": "T | ShorthandProperty<T>",
            "description": ""
          },
          "ShorthandProperty": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ShorthandProperty",
            "value": "[T, T] | [T, T, T, T]",
            "description": ""
          },
          "BorderStyle": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderStyle",
            "value": "'base' | 'dotted' | 'none'",
            "description": ""
          },
          "BorderWidth": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BorderWidth",
            "value": "'base' | 'medium'",
            "description": ""
          },
          "CornerRadius": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadius",
            "value": "'base' | 'small' | 'large' | 'fullyRounded' | 'none' | CornerRadiusDeprecated",
            "description": ""
          },
          "CornerRadiusDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CornerRadiusDeprecated",
            "value": "'tight' | 'loose'",
            "description": ""
          },
          "Spacing": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "'none' | 'small500' | 'small400' | 'small300' | 'small200' | 'small100' | 'base' | 'large100' | 'large200' | 'large300' | 'large400' | 'large500' | SpacingDeprecated",
            "description": ""
          },
          "SpacingDeprecated": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "SpacingDeprecated",
            "value": "'extraTight' | 'tight' | 'loose' | 'extraLoose'",
            "description": ""
          },
          "Visibility": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Visibility",
            "value": "'hidden'",
            "description": ""
          },
          "AccessibilityVisibility": {
            "filePath": "/components/shared.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AccessibilityVisibility",
            "value": "'hidden'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "Structure",
    "defaultExample": {
      "image": "view-default.png",
      "codeblock": {
        "title": "Basic View",
        "tabs": [
          {
            "title": "React",
            "code": "import {render, View} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <View padding=\"base\" border=\"base\">\n      View\n    </View>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {extend, View} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const view = root.createComponent(\n    View,\n    {border: 'base', padding: 'base'},\n    'View',\n  );\n\n  root.appendChild(view);\n});\n",
            "language": "js"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "accessibility-roles",
        "title": "Accessibility roles",
        "sectionContent": "| Value | Description |\n| --- | --- |\n| <code>\"main\"</code> | Used to indicate the primary content. |\n| <code>\"header\"</code> | Used to indicate the component is a header. |\n| <code>\"footer\"</code> | Used to display information such as copyright information, navigation links, and privacy statements. |\n| <code>\"section\"</code> | Used to indicate a generic section. |\n| <code>\"complementary\"</code> | Used to designate a supporting section that relates to the main content. |\n| <code>\"navigation\"</code> | Used to identify major groups of links used for navigating. |\n| <code>\"orderedList\"</code> | Used to identify a list of ordered items. |\n| <code>\"listItem\"</code> | Used to identify an item inside a list of items. |\n| <code>\"unorderedList\"</code> | Used to identify a list of unordered items. |\n| <code>\"separator\"</code> | Used to indicates the component acts as a divider that separates and distinguishes sections of content. |\n| <code>\"status\"</code> | Used to define a live region containing advisory information for the user that is not important enough to be an alert. |\n| <code>\"alert\"</code> | Used for important, and usually time-sensitive, information. |"
      }
    ],
    "related": []
  },
  {
    "name": "StyleHelper",
    "description": "This is a helper for authoring conditional values for property styles.\n\nWrite complex conditional styles based on one or more conditions, such as viewport sizes and interactive states, in a concise and expressive way.",
    "requires": "",
    "isVisualComponent": false,
    "type": "",
    "definitions": [
      {
        "title": "StyleHelper",
        "description": "",
        "type": "DocsStyle",
        "typeDefinitions": {
          "DocsStyle": {
            "filePath": "/style/style.ts",
            "name": "DocsStyle",
            "description": "",
            "members": [
              {
                "filePath": "/style/style.ts",
                "syntaxKind": "PropertySignature",
                "name": "default",
                "value": "<T>(defaultValue: T) => ConditionalStyle<T, Conditions>",
                "description": ""
              },
              {
                "filePath": "/style/style.ts",
                "syntaxKind": "PropertySignature",
                "name": "when",
                "value": "<T>(conditions: Conditions, value: T) => ConditionalStyle<T, Conditions>",
                "description": ""
              }
            ],
            "value": "export interface DocsStyle {\n  default: <T>(defaultValue: T) => ConditionalStyle<T>;\n  when: <T>(conditions: Conditions, value: T) => ConditionalStyle<T>;\n}"
          },
          "ConditionalStyle": {
            "filePath": "/style/types.ts",
            "name": "ConditionalStyle",
            "description": "",
            "members": [
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "default",
                "value": "T",
                "description": "The default value applied when none of the conditional values\nspecified in `conditionals` are met.",
                "isOptional": true
              },
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "conditionals",
                "value": "ConditionalValue<T, AcceptedConditions>[]",
                "description": "An array of conditional values."
              }
            ],
            "value": "export interface ConditionalStyle<\n  T,\n  AcceptedConditions extends BaseConditions = Conditions,\n> {\n  /**\n   * The default value applied when none of the conditional values\n   * specified in `conditionals` are met.\n   */\n  default?: T;\n  /**\n   * An array of conditional values.\n   */\n  conditionals: ConditionalValue<T, AcceptedConditions>[];\n}"
          },
          "ConditionalValue": {
            "filePath": "/style/types.ts",
            "name": "ConditionalValue",
            "description": "",
            "members": [
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "conditions",
                "value": "AcceptedConditions",
                "description": "The conditions that must be met for the value to be applied. At least one\ncondition must be specified."
              },
              {
                "filePath": "/style/types.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "T",
                "description": "The value that will be applied if the conditions are met."
              }
            ],
            "value": "export interface ConditionalValue<\n  T,\n  AcceptedConditions extends BaseConditions = Conditions,\n> {\n  /**\n   * The conditions that must be met for the value to be applied. At least one\n   * condition must be specified.\n   */\n  conditions: AcceptedConditions;\n  /**\n   * The value that will be applied if the conditions are met.\n   */\n  value: T;\n}"
          },
          "Conditions": {
            "filePath": "/style/types.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Conditions",
            "value": "Conditions",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "subCategory": "utilities",
    "defaultExample": {
      "codeblock": {
        "tabs": [
          {
            "title": "React",
            "code": "import {Style, View} from '@shopify/checkout-ui-extensions-react';\n\nrender('Checkout::Dynamic::Render', () => <Extension />);\n\nfunction Extension() {\n  return (\n    <View\n      maxInlineSize={Style.default(200)\n        .when({viewportInlineSize: {min: 'small'}}, 300)\n        .when({viewportInlineSize: {min: 'medium'}}, 400)\n        .when({viewportInlineSize: {min: 'large'}}, 800)}\n    >\n      Responsive Content\n    </View>\n  );\n}\n",
            "language": "tsx"
          },
          {
            "title": "JS",
            "code": "import {Style, View, extend} from '@shopify/checkout-ui-extensions';\n\nextend('Checkout::Dynamic::Render', (root) => {\n  const view = root.createComponent(\n    View,\n    {\n      border: 'base',\n      padding: 'base',\n      maxInlineSize: Style.default(200)\n        .when({viewportInlineSize: {min: 'small'}}, 300)\n        .when({viewportInlineSize: {min: 'medium'}}, 400)\n        .when({viewportInlineSize: {min: 'large'}}, 800),\n    },\n    'Responsive Content',\n  );\n\n  root.appendChild(view);\n});\n",
            "language": "js"
          }
        ],
        "title": "Import the Style helper"
      }
    },
    "examples": {
      "description": "This section provides examples of conditions.",
      "examples": [
        {
          "description": "Default styling can be combined with specific conditions. In this example, the Grid’s children will be stacked by default and side by side on viewports above the <code>small</code> breakpoint.",
          "codeblock": {
            "title": "Default Style With Conditions",
            "tabs": [
              {
                "title": "React",
                "code": "<Grid\n  columns={Style.default('fill').when({viewportInlineSize: {min: 'small'}}, [\n    '30%',\n    '70%',\n  ])}\n>\n  <View>Content</View>\n  <View>Content</View>\n</Grid>;\n",
                "language": "tsx"
              }
            ]
          }
        },
        {
          "description": "Using simple conditional styling enables you to specify a styling change when a condition is met. In this example, the View’s padding will be <code>loose</code> on hover.",
          "codeblock": {
            "title": "Simple Condition",
            "tabs": [
              {
                "title": "React",
                "code": "<Pressable\n  onPress={() => alert('press')}\n  border={Style.default(['base', 'dotted']).when(\n    {viewportInlineSize: {min: 'small'}},\n    ['base', 'dotted', 'none', 'base'],\n  )}\n>\n  Content\n</Pressable>;\n",
                "language": "tsx"
              }
            ]
          }
        }
      ]
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "conditions",
        "title": "Conditions",
        "sectionContent": "The following conditions are supported for conditional styles.\n\nMultiple conditions can be set on the same `when` method.\n\n \n\n| Name | Type | Description |\n| --- | --- | --- |\n| <code>\"hover\"</code> | <code>true</code> | This condition is met when an element is hovered on with the cursor (mouse pointer). |\n| <code>\"focus\"</code> | <code>true</code> | This condition is met when an element is clicked, tapped on or selected using the Tab key.|\n| <code>viewportInlineSize</code> | <code>{min: \"small\" &#124; \"medium\" &#124; \"large\"}</code> | This condition is met when the device matches the minimum width.|"
      }
    ],
    "related": [
      {
        "name": "BlockLayout",
        "subtitle": "Component",
        "url": "blocklayout",
        "type": "Component"
      },
      {
        "name": "BlockSpacer",
        "subtitle": "Component",
        "url": "blockspacer",
        "type": "Component"
      },
      {
        "name": "BlockStack",
        "subtitle": "Component",
        "url": "blockstack",
        "type": "Component"
      },
      {
        "name": "Grid",
        "subtitle": "Component",
        "url": "grid",
        "type": "Component"
      },
      {
        "name": "GridItem",
        "subtitle": "Component",
        "url": "griditem",
        "type": "Component"
      },
      {
        "name": "Image",
        "subtitle": "Component",
        "url": "image",
        "type": "Component"
      },
      {
        "name": "InlineLayout",
        "subtitle": "Component",
        "url": "inlinelayout",
        "type": "Component"
      },
      {
        "name": "InlineSpacer",
        "subtitle": "Component",
        "url": "inlinespacer",
        "type": "Component"
      },
      {
        "name": "InlineStack",
        "subtitle": "Component",
        "url": "inlinestack",
        "type": "Component"
      },
      {
        "name": "List",
        "subtitle": "Component",
        "url": "list",
        "type": "Component"
      },
      {
        "name": "Pressable",
        "subtitle": "Component",
        "url": "pressable",
        "type": "Component"
      },
      {
        "name": "ScrollView",
        "subtitle": "Component",
        "url": "scrollview",
        "type": "Component"
      },
      {
        "name": "SkeletonImage",
        "subtitle": "Component",
        "url": "skeletonimage",
        "type": "Component"
      },
      {
        "name": "View",
        "subtitle": "Component",
        "url": "view",
        "type": "Component"
      }
    ]
  }
]
