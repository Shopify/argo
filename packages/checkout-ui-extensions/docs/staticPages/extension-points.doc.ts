import {LandingTemplateSchema} from '@shopify/generate-docs';

// Order of data shape mimics visual structure of page
const data: LandingTemplateSchema = {
  title: 'Checkout Extensions API',
  description:
    'A UI extension will register for one or more extension points using `shopify.extend()`.\n    An extension point in a UI extension is a plain JavaScript function.\n    This function receives some API for interacting with the application,\n    and is expected to return a value in a specific shape.\n    The input arguments and the output type are different\n    for each extension point.',
  id: 'extension-points-api',
  sections: [
    {
      type: 'Markdown',
      anchorLink: 'extension-points',
      title: 'Extension Points',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| Checkout::Dynamic::Render | <code><a href="#renderextension">RenderExtension</a><<wbr><a href="#standardapi">StandardApi</a><<wbr>"Checkout::Dynamic::Render"<wbr>>, AllComponents<wbr>></code> | A [dynamic extension point](https://shopify.dev/api/checkout-extensions/checkout#extension-points) that isn\'t tied to a specific checkout section or feature. Unlike static extension points, dynamic extension points render where the merchant sets them using the [checkout editor](https://shopify.dev/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).<br /><br />The [supported locations](https://shopify.dev/api/checkout-extensions/checkout#supported-locations) for dynamic extension points can be previewed during development by [using a URL parameter](https://shopify.dev/apps/checkout/test-ui-extensions#dynamic-extension-points). |\n| Checkout::CartLineDetails::RenderAfter | <code><a href="#renderextension">RenderExtension</a><<wbr><a href="#cartlinerenderafterapi">CartLineRenderAfterApi</a>, AllComponents<wbr>></code> | A static extension point that renders on every line item, inside the details under the line item properties element. |\n| Checkout::CartLines::RenderAfter | <code><a href="#renderextension">RenderExtension</a><<wbr><a href="#standardapi">StandardApi</a><<wbr>"Checkout::CartLines::RenderAfter"<wbr>>, AllComponents<wbr>></code> | A static extension point that is rendered after all line items. |\n| Checkout::DeliveryAddress::RenderBefore | <code><a href="#renderextension">RenderExtension</a><<wbr><a href="#standardapi">StandardApi</a><<wbr>"Checkout::DeliveryAddress::RenderBefore"<wbr>>, AllComponents<wbr>></code> | A static extension point that is rendered between the shipping address header and shipping address form elements. |\n| Checkout::ShippingMethods::RenderBefore | <code><a href="#renderextension">RenderExtension</a><<wbr><a href="#standardapi">StandardApi</a><<wbr>"Checkout::ShippingMethods::RenderBefore"<wbr>>, AllComponents<wbr>></code> | A static extension point that is rendered between the shipping method header and shipping method options. |\n| Checkout::ShippingMethods::RenderAfter | <code><a href="#renderextension">RenderExtension</a><<wbr><a href="#standardapi">StandardApi</a><<wbr>"Checkout::ShippingMethods::RenderAfter"<wbr>>, AllComponents<wbr>></code> | A static extension point that is rendered after the shipping method options. |\n| Checkout::Reductions::RenderBefore | <code><a href="#renderextension">RenderExtension</a><<wbr><a href="#standardapi">StandardApi</a><<wbr>"Checkout::Reductions::RenderBefore"<wbr>>, AllComponents<wbr>></code> | A static extension point that is rendered in the order summary, before the discount form element. |\n| Checkout::Reductions::RenderAfter | <code><a href="#renderextension">RenderExtension</a><<wbr><a href="#standardapi">StandardApi</a><<wbr>"Checkout::Reductions::RenderAfter"<wbr>>, AllComponents<wbr>></code> | A static extension point that is rendered in the order summary, after the discount form and discount tag elements. |\n| Checkout::Actions::RenderBefore | <code><a href="#renderextension">RenderExtension</a><<wbr><a href="#standardapi">StandardApi</a><<wbr>"Checkout::Actions::RenderBefore"<wbr>>, AllComponents<wbr>></code> | A static extension point that is rendered immediately before any actions within each step. |\n| Checkout::Contact::RenderAfter | <code><a href="#renderextension">RenderExtension</a><<wbr><a href="#standardapi">StandardApi</a><<wbr>"Checkout::Contact::RenderAfter"<wbr>>, AllComponents<wbr>></code> | A static extension point that is rendered immediately after the contact form element. |\n| Checkout::CustomerInformation::RenderAfter | <code><a href="#renderextension">RenderExtension</a><<wbr><a href="#standardapi">StandardApi</a><<wbr>"Checkout::CustomerInformation::RenderAfter"<wbr>>, AllComponents<wbr>></code> | A static extension point that is rendered after a purchase below the customer information. |',
    },
    {
      type: 'GenericAccordion',
      title: 'Supported locations',
      anchorLink: 'supported-locations',
      accordionContent: [
        {
          title: 'Information',
          description:
            'This is the first step in the checkout process where the buyer enters contact information and a delivery address.',
          image: 'supported-locations-information.png',
        },
        {
          title: 'Shipping',
          description:
            'Point in checkout where the buyer selects a shipping method.',
          image: 'supported-locations-shipping.png',
        },
        {
          title: 'Payment',
          description:
            'Point in checkout where the buyer enters their payment information.',
          image: 'supported-locations-payment.png',
        },
        {
          title: 'Order summary',
          description:
            'Summary of the cart contents, discounts, and order totals.',
          image: 'supported-locations-order-summary.png',
        },
        {
          title: 'Shop Pay',
          description:
            'Accelerated checkout where Shopify pre-fills buyer information using their Shop Pay account.',
          image: 'supported-locations-shop-pay.png',
        },
        {
          title: 'Order Status',
          description:
            'After submitting their order, the buyer is taken to an order status page.',
          image: 'supported-locations-order-status.png',
        },
      ],
    },
    {
      type: 'Markdown',
      anchorLink: 'cartlinerenderafterapi',
      title: 'CartLineRenderAfterApi',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| target | <code>StatefulRemoteSubscribable<<wbr><a href="#presentmentcartline">PresentmentCartLine</a><wbr>></code> | The cart line the extension is attached to. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'renderextension',
      title: 'RenderExtension',
      sectionContent:
        'A type of extension point that can render UI into Checkout\nnatively. This type of extension point receives an object to manipulate\nthe UI as its first argument, and additional data and methods as a second\nargument. The object that can manipulate the UI is called a `RemoteRoot`,\nand is provided by the [remote-ui library](https://github.com/Shopify/remote-ui/tree/main/packages/core)\non which the UI Extension rendering capabilities are built.\n\n| Type | Description |\n| --- | --- |\n| <code>(root: RemoteRoot<<wbr>AllowedComponents, true<wbr>>, input: Input): void &#124; Promise<<wbr>void<wbr>></code> | An extension callback that receives a root and an API object. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'standardapi',
      title: 'StandardApi',
      sectionContent:
        'The following APIs are provided to all extension points.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/apps/store/data-protection/protected-customer-data) for some of the APIs.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| version | <code>"unstable"</code> | The renderer version being used for the extension.<br /><br />Example: <code>\'unstable\'</code> |\n| buyerJourney | <code>{intercept(interceptor: <a href="#interceptor">Interceptor</a>) => Promise<<wbr>() => void<wbr>>, completed: StatefulRemoteSubscribable<<wbr>boolean<wbr>>}</code> | Provides details on buyer progression through the steps of the checkout. |\n| extensionPoint | <code>"Checkout::Dynamic::Render" &#124; "Checkout::CartLineDetails::RenderAfter" &#124; "Checkout::CartLines::RenderAfter" &#124; "Checkout::DeliveryAddress::RenderBefore" &#124; "Checkout::ShippingMethods::RenderBefore" &#124; "Checkout::ShippingMethods::RenderAfter" &#124; "Checkout::GiftCard::Render" &#124; "Checkout::Reductions::RenderBefore" &#124; "Checkout::Reductions::RenderAfter" &#124; "Checkout::Actions::RenderBefore" &#124; "Checkout::Contact::RenderAfter" &#124; "Checkout::CustomerInformation::RenderAfter"</code> | The identifier of the running extension point.<br /><br />Example: <code>\'Checkout::PostPurchase::Render\'</code> |\n| extension | <code><a href="#extension">Extension</a></code> | Meta information about the extension. |\n| storage | <code><a href="#storage">Storage</a></code> | Key-value storage for the extension point. |\n| shippingAddress? {% include /apps/checkout/privacy-icon.md %} | <code>StatefulRemoteSubscribable<<wbr><a href="#mailingaddress">MailingAddress</a> &#124; undefined<wbr>></code> | The proposed buyer shipping address. During the information step, the address updates when the field is committed (on change) rather than every keystroke. An address value is only present if delivery is required. Otherwise, the subscribable value is undefined. |\n| buyerIdentity? {% include /apps/checkout/privacy-icon.md %} | <code><a href="#buyeridentity">BuyerIdentity</a></code> | Information about the buyer that is interacting with the checkout. |\n| shop | <code><a href="#shop">Shop</a></code> | Shop where the checkout is taking place. |\n| cost | <code><a href="#cartcost">CartCost</a></code> | Details on the costs the buyer will pay for this checkout. |\n| note | <code>StatefulRemoteSubscribable<<wbr>string &#124; undefined<wbr>></code> | A note left by the customer to the merchant, either in their cart or during checkout. |\n| applyNoteChange | <code>(change: <a href="#noteremovechange">NoteRemoveChange</a> &#124; <a href="#noteupdatechange">NoteUpdateChange</a>) => Promise<<wbr><a href="#notechangeresultsuccess">NoteChangeResultSuccess</a> &#124; <a href="#notechangeresulterror">NoteChangeResultError</a><wbr>></code> | Performs an update on the note attached to the cart and checkout. If successful, this mutation results in an update to the value retrieved through the `note` property. |\n| attributes | <code>StatefulRemoteSubscribable<<wbr><a href="#attribute">Attribute</a>[] &#124; undefined<wbr>></code> | Custom attributes left by the customer to the merchant, either in their cart or during checkout. |\n| applyAttributeChange | <code>(change: AttributeChange) => Promise<<wbr><a href="#attributechangeresultsuccess">AttributeChangeResultSuccess</a> &#124; <a href="#attributechangeresulterror">AttributeChangeResultError</a><wbr>></code> | Performs an update on an attribute attached to the cart and checkout. If successful, this mutation results in an update to the value retrieved through the `attributes` property. |\n| metafields | <code>StatefulRemoteSubscribable<<wbr><a href="#metafield">Metafield</a>[]<wbr>></code> | The metafields that apply to the current checkout. The actual resource on which these metafields exist depends on the source of the checkout:<br /><br />- If the source is an order, then the metafields are on the order. - If the source is a draft order, then the initial value of metafields are   from the draft order, and any new metafields you write are applied   to the order created by this checkout. - For all other sources, the metafields are only stored locally on the   client creating the checkout, and are applied to the order that   results from checkout.<br /><br />These metafields are shared by all extensions running on checkout, and persist for as long as the customer is working on this checkout.<br /><br />Once the order is created, you can query these metafields using the [GraphQL Admin API](https://shopify.dev/docs/admin-api/graphql/reference/orders/order#metafield-2021-01) |\n| applyMetafieldChange | <code>(change: <a href="#metafieldremovechange">MetafieldRemoveChange</a> &#124; <a href="#metafieldupdatechange">MetafieldUpdateChange</a>) => Promise<<wbr><a href="#metafieldchangeresultsuccess">MetafieldChangeResultSuccess</a> &#124; <a href="#metafieldchangeresulterror">MetafieldChangeResultError</a><wbr>></code> | Performs an update on a piece of metadata attached to the checkout. If successful, this mutation results in an update to the value retrieved through the `metafields` property. |\n| lines | <code>StatefulRemoteSubscribable<<wbr><a href="#cartline">CartLine</a>[]<wbr>></code> | A list of lines containing information about the items the customer intends to purchase. |\n| presentmentLines | <code>StatefulRemoteSubscribable<<wbr><a href="#presentmentcartline">PresentmentCartLine</a>[]<wbr>></code> | A list of the line items displayed in the checkout. These may be the same as lines, or may be a subset. |\n| applyCartLinesChange | <code>(change: <a href="#cartlineaddchange">CartLineAddChange</a> &#124; <a href="#cartlineremovechange">CartLineRemoveChange</a> &#124; <a href="#cartlineupdatechange">CartLineUpdateChange</a>) => Promise<<wbr><a href="#cartlinechangeresultsuccess">CartLineChangeResultSuccess</a> &#124; <a href="#cartlinechangeresulterror">CartLineChangeResultError</a><wbr>></code> | Performs an update on the merchandise line items. It resolves when the new line items have been negotiated and results in an update to the value retrieved through the `lines` property. |\n| discountCodes | <code>StatefulRemoteSubscribable<<wbr><a href="#cartdiscountcode">CartDiscountCode</a>[]<wbr>></code> | A list of discount codes currently applied to the checkout. |\n| discountAllocations | <code>StatefulRemoteSubscribable<<wbr>(<a href="#cartcodediscountallocation">CartCodeDiscountAllocation</a> &#124; <a href="#cartautomaticdiscountallocation">CartAutomaticDiscountAllocation</a> &#124; <a href="#cartcustomdiscountallocation">CartCustomDiscountAllocation</a>)[]<wbr>></code> | Discounts that have been applied to the entire cart. |\n| applyDiscountCodeChange | <code>(change: <a href="#discountcodeaddchange">DiscountCodeAddChange</a> &#124; <a href="#discountcoderemovechange">DiscountCodeRemoveChange</a>) => Promise<<wbr><a href="#discountcodechangeresultsuccess">DiscountCodeChangeResultSuccess</a> &#124; <a href="#discountcodechangeresulterror">DiscountCodeChangeResultError</a><wbr>></code> | Performs an update on the discount codes. It resolves when the new discount codes have been negotiated and results in an update to the value retrieved through the `discountCodes` property. |\n| appliedGiftCards | <code>StatefulRemoteSubscribable<<wbr><a href="#appliedgiftcard">AppliedGiftCard</a>[]<wbr>></code> | Gift Cards that have been applied to the checkout. |\n| applyGiftCardChange | <code>(change: <a href="#giftcardaddchange">GiftCardAddChange</a> &#124; <a href="#giftcardremovechange">GiftCardRemoveChange</a>) => Promise<<wbr><a href="#giftcardchangeresultsuccess">GiftCardChangeResultSuccess</a> &#124; <a href="#giftcardchangeresulterror">GiftCardChangeResultError</a><wbr>></code> | Performs an update on the gift cards. It resolves when gift card change have been negotiated and results in an update to the value retrieved through the `appliedGiftCards` property. |\n| appMetafields {% include /apps/checkout/privacy-icon.md %} | <code>StatefulRemoteSubscribable<<wbr><a href="#appmetafieldentry">AppMetafieldEntry</a>[]<wbr>></code> | The metafields requested in the `shopify.ui.extension.toml` file. These metafields are updated when there\'s a change in the merchandise items being purchased by the customer. |\n| localization | <code><a href="#localization">Localization</a></code> | Details about the location, language, and currency of the buyer. For utilities to easily format and translate content based on these details, you can use the `i18n` object instead. |\n| i18n | <code><a href="#i18n">I18n</a></code> | Utilities for translating content and formatting values according to the current `localization` of the checkout. |\n| settings | <code>StatefulRemoteSubscribable<<wbr><a href="#extensionsettings">ExtensionSettings</a><wbr>></code> | The settings matching the settings definition written in the `shopify.ui.extension.toml` file.<br /><br />**Note:** When an extension is being installed in the editor, the settings will be empty until a merchant sets a value. In that case, this object will be updated in real time as a merchant fills in the settings. |\n| analytics | <code><a href="#analytics">Analytics</a></code> | Exposes a `analytics.publish` method to publish analytics events. |\n| order | <code>StatefulRemoteSubscribable<<wbr><a href="#order">Order</a> &#124; undefined<wbr>></code> | Order information that\'s available post-checkout. |\n| sessionToken | <code><a href="#sessiontoken">SessionToken</a></code> | Provides access to session tokens, which can be used to validate requests made to your backend or properly configured third party APIs. |\n| query | <code>(query: string, options: {variables?: Variables, version?: "2022-04" &#124; "2022-07" &#124; "2022-10" &#124; "2023-01" &#124; "unstable"}) => Promise<<wbr>{data?: Data, errors?: <a href="#graphqlerror">GraphQLError</a>[]}<wbr>></code> | Used to query the storefront graphql API with prefetched token |',
    },
    {
      type: 'Markdown',
      anchorLink: 'graphqlerror',
      title: 'GraphQLError',
      sectionContent:
        'GraphQL error returned by the Shopify Storefront APIs.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| message | <code>string</code> |  |\n| extensions | <code>{requestId: string, code: string}</code> |  |',
    },
    {
      type: 'Markdown',
      anchorLink: 'sessiontoken',
      title: 'SessionToken',
      sectionContent:
        "| Name | Type | Description |\n| --- | --- | --- |\n| get | <code>() => Promise<<wbr>string<wbr>></code> | Requests a session token that hasn't expired. You should call this method every time you need to make a request to your backend in order to get a valid token. This method will cache tokens until their expiry itself, so you don't need to worry about storing these tokens yourself. |",
    },
    {
      type: 'Markdown',
      anchorLink: 'order',
      title: 'Order',
      sectionContent:
        "Information about an order that was placed.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | A globally-unique identifier.<br /><br />Example: <code>'gid://shopify/Order/1'</code> |\n| name | <code>string</code> | Unique identifier for the order that appears on the order.<br /><br />Example: <code>'#1000'</code> |\n| cancelledAt? | <code>string</code> | If cancelled, the time at which the order was cancelled. |",
    },
    {
      type: 'Markdown',
      anchorLink: 'analytics',
      title: 'Analytics',
      sectionContent:
        'Publish method to emit analytics events to Web Pixels.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| publish | <code>(name: string, data: {undefined: unknown}) => Promise<<wbr>boolean<wbr>></code> |  |',
    },
    {
      type: 'Markdown',
      anchorLink: 'extensionsettings',
      title: 'ExtensionSettings',
      sectionContent:
        'The merchant-defined setting values for the extension.\n\n<code>[key: string]: string &#124; number &#124; boolean &#124; undefined</code>',
    },
    {
      type: 'Markdown',
      anchorLink: 'i18n',
      title: 'I18n',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| formatNumber | <code>(number: number &#124; bigint, options: <a href="#"></a>) => string</code> | Returns a localized number.<br /><br />This function behaves like the standard `Intl.NumberFormat()` with a style of `decimal` applied. It uses the buyer\'s locale by default. |\n| formatCurrency | <code>(number: number &#124; bigint, options: <a href="#"></a>) => string</code> | Returns a localized currency value.<br /><br />This function behaves like the standard `Intl.NumberFormat()` with a style of `currency` applied. It uses the buyer\'s locale by default. |\n| formatDate | <code>(date: Date, options: <a href="#"></a>) => string</code> | Returns a localized date value.<br /><br />This function behaves like the standard `Intl.DateTimeFormatOptions()` and uses the buyer\'s locale by default. Formatting options can be passed in as options. |\n| translate | <code><a href="#i18ntranslate">I18nTranslate</a></code> | Returns translated content in the buyer\'s locale, as supported by the extension.<br /><br />- `options.count` is a special numeric value used in pluralization. - The other option keys and values are treated as replacements for interpolation. - If the replacements are all primitives, then `translate()` returns a single string. - If replacements contain UI components, then `translate()` returns an array of elements. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'i18ntranslate',
      title: 'I18nTranslate',
      sectionContent:
        'This defines the i18n.translate() signature.\n\n| Type | Description |\n| --- | --- |\n| <code>(key: string, options: {undefined: ReplacementType &#124; string &#124; number}): ReplacementType extends string &#124; number ? string : (string &#124; ReplacementType)[]</code> | This returns a translated string matching a key in a locale file. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'localization',
      title: 'Localization',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| currency | <code>StatefulRemoteSubscribable<<wbr><a href="#currency">Currency</a><wbr>></code> | The currency that the buyer sees for money amounts in the checkout. |\n| timezone | <code>StatefulRemoteSubscribable<<wbr>"Africa/Abidjan" &#124; "Africa/Algiers" &#124; "Africa/Bissau" &#124; "Africa/Cairo" &#124; "Africa/Casablanca" &#124; "Africa/Ceuta" &#124; "Africa/El_Aaiun" &#124; "Africa/Johannesburg" &#124; "Africa/Juba" &#124; "Africa/Khartoum" &#124; "Africa/Lagos" &#124; "Africa/Maputo" &#124; "Africa/Monrovia" &#124; "Africa/Nairobi" &#124; "Africa/Ndjamena" &#124; "Africa/Sao_Tome" &#124; "Africa/Tripoli" &#124; "Africa/Tunis" &#124; "Africa/Windhoek" &#124; "America/Adak" &#124; "America/Anchorage" &#124; "America/Araguaina" &#124; "America/Argentina/Buenos_Aires" &#124; "America/Argentina/Catamarca" &#124; "America/Argentina/Cordoba" &#124; "America/Argentina/Jujuy" &#124; "America/Argentina/La_Rioja" &#124; "America/Argentina/Mendoza" &#124; "America/Argentina/Rio_Gallegos" &#124; "America/Argentina/Salta" &#124; "America/Argentina/San_Juan" &#124; "America/Argentina/San_Luis" &#124; "America/Argentina/Tucuman" &#124; "America/Argentina/Ushuaia" &#124; "America/Asuncion" &#124; "America/Bahia" &#124; "America/Bahia_Banderas" &#124; "America/Barbados" &#124; "America/Belem" &#124; "America/Belize" &#124; "America/Boa_Vista" &#124; "America/Bogota" &#124; "America/Boise" &#124; "America/Cambridge_Bay" &#124; "America/Campo_Grande" &#124; "America/Cancun" &#124; "America/Caracas" &#124; "America/Cayenne" &#124; "America/Chicago" &#124; "America/Chihuahua" &#124; "America/Costa_Rica" &#124; "America/Cuiaba" &#124; "America/Danmarkshavn" &#124; "America/Dawson" &#124; "America/Dawson_Creek" &#124; "America/Denver" &#124; "America/Detroit" &#124; "America/Edmonton" &#124; "America/Eirunepe" &#124; "America/El_Salvador" &#124; "America/Fort_Nelson" &#124; "America/Fortaleza" &#124; "America/Glace_Bay" &#124; "America/Goose_Bay" &#124; "America/Grand_Turk" &#124; "America/Guatemala" &#124; "America/Guayaquil" &#124; "America/Guyana" &#124; "America/Halifax" &#124; "America/Havana" &#124; "America/Hermosillo" &#124; "America/Indiana/Indianapolis" &#124; "America/Indiana/Knox" &#124; "America/Indiana/Marengo" &#124; "America/Indiana/Petersburg" &#124; "America/Indiana/Tell_City" &#124; "America/Indiana/Vevay" &#124; "America/Indiana/Vincennes" &#124; "America/Indiana/Winamac" &#124; "America/Inuvik" &#124; "America/Iqaluit" &#124; "America/Jamaica" &#124; "America/Juneau" &#124; "America/Kentucky/Louisville" &#124; "America/Kentucky/Monticello" &#124; "America/La_Paz" &#124; "America/Lima" &#124; "America/Los_Angeles" &#124; "America/Maceio" &#124; "America/Managua" &#124; "America/Manaus" &#124; "America/Martinique" &#124; "America/Matamoros" &#124; "America/Mazatlan" &#124; "America/Menominee" &#124; "America/Merida" &#124; "America/Metlakatla" &#124; "America/Mexico_City" &#124; "America/Miquelon" &#124; "America/Moncton" &#124; "America/Monterrey" &#124; "America/Montevideo" &#124; "America/New_York" &#124; "America/Nipigon" &#124; "America/Nome" &#124; "America/Noronha" &#124; "America/North_Dakota/Beulah" &#124; "America/North_Dakota/Center" &#124; "America/North_Dakota/New_Salem" &#124; "America/Nuuk" &#124; "America/Ojinaga" &#124; "America/Panama" &#124; "America/Pangnirtung" &#124; "America/Paramaribo" &#124; "America/Phoenix" &#124; "America/Port-au-Prince" &#124; "America/Porto_Velho" &#124; "America/Puerto_Rico" &#124; "America/Punta_Arenas" &#124; "America/Rainy_River" &#124; "America/Rankin_Inlet" &#124; "America/Recife" &#124; "America/Regina" &#124; "America/Resolute" &#124; "America/Rio_Branco" &#124; "America/Santarem" &#124; "America/Santiago" &#124; "America/Santo_Domingo" &#124; "America/Sao_Paulo" &#124; "America/Scoresbysund" &#124; "America/Sitka" &#124; "America/St_Johns" &#124; "America/Swift_Current" &#124; "America/Tegucigalpa" &#124; "America/Thule" &#124; "America/Thunder_Bay" &#124; "America/Tijuana" &#124; "America/Toronto" &#124; "America/Vancouver" &#124; "America/Whitehorse" &#124; "America/Winnipeg" &#124; "America/Yakutat" &#124; "America/Yellowknife" &#124; "Antarctica/Casey" &#124; "Antarctica/Davis" &#124; "Antarctica/Macquarie" &#124; "Antarctica/Mawson" &#124; "Antarctica/Palmer" &#124; "Antarctica/Rothera" &#124; "Antarctica/Troll" &#124; "Antarctica/Vostok" &#124; "Asia/Almaty" &#124; "Asia/Amman" &#124; "Asia/Anadyr" &#124; "Asia/Aqtau" &#124; "Asia/Aqtobe" &#124; "Asia/Ashgabat" &#124; "Asia/Atyrau" &#124; "Asia/Baghdad" &#124; "Asia/Baku" &#124; "Asia/Bangkok" &#124; "Asia/Barnaul" &#124; "Asia/Beirut" &#124; "Asia/Bishkek" &#124; "Asia/Brunei" &#124; "Asia/Chita" &#124; "Asia/Choibalsan" &#124; "Asia/Colombo" &#124; "Asia/Damascus" &#124; "Asia/Dhaka" &#124; "Asia/Dili" &#124; "Asia/Dubai" &#124; "Asia/Dushanbe" &#124; "Asia/Famagusta" &#124; "Asia/Gaza" &#124; "Asia/Hebron" &#124; "Asia/Ho_Chi_Minh" &#124; "Asia/Hong_Kong" &#124; "Asia/Hovd" &#124; "Asia/Irkutsk" &#124; "Asia/Jakarta" &#124; "Asia/Jayapura" &#124; "Asia/Jerusalem" &#124; "Asia/Kabul" &#124; "Asia/Kamchatka" &#124; "Asia/Karachi" &#124; "Asia/Kathmandu" &#124; "Asia/Khandyga" &#124; "Asia/Kolkata" &#124; "Asia/Krasnoyarsk" &#124; "Asia/Kuala_Lumpur" &#124; "Asia/Kuching" &#124; "Asia/Macau" &#124; "Asia/Magadan" &#124; "Asia/Makassar" &#124; "Asia/Manila" &#124; "Asia/Nicosia" &#124; "Asia/Novokuznetsk" &#124; "Asia/Novosibirsk" &#124; "Asia/Omsk" &#124; "Asia/Oral" &#124; "Asia/Pontianak" &#124; "Asia/Pyongyang" &#124; "Asia/Qatar" &#124; "Asia/Qostanay" &#124; "Asia/Qyzylorda" &#124; "Asia/Riyadh" &#124; "Asia/Sakhalin" &#124; "Asia/Samarkand" &#124; "Asia/Seoul" &#124; "Asia/Shanghai" &#124; "Asia/Singapore" &#124; "Asia/Srednekolymsk" &#124; "Asia/Taipei" &#124; "Asia/Tashkent" &#124; "Asia/Tbilisi" &#124; "Asia/Tehran" &#124; "Asia/Thimphu" &#124; "Asia/Tokyo" &#124; "Asia/Tomsk" &#124; "Asia/Ulaanbaatar" &#124; "Asia/Urumqi" &#124; "Asia/Ust-Nera" &#124; "Asia/Vladivostok" &#124; "Asia/Yakutsk" &#124; "Asia/Yangon" &#124; "Asia/Yekaterinburg" &#124; "Asia/Yerevan" &#124; "Atlantic/Azores" &#124; "Atlantic/Bermuda" &#124; "Atlantic/Canary" &#124; "Atlantic/Cape_Verde" &#124; "Atlantic/Faroe" &#124; "Atlantic/Madeira" &#124; "Atlantic/Reykjavik" &#124; "Atlantic/South_Georgia" &#124; "Atlantic/Stanley" &#124; "Australia/Adelaide" &#124; "Australia/Brisbane" &#124; "Australia/Broken_Hill" &#124; "Australia/Darwin" &#124; "Australia/Eucla" &#124; "Australia/Hobart" &#124; "Australia/Lindeman" &#124; "Australia/Lord_Howe" &#124; "Australia/Melbourne" &#124; "Australia/Perth" &#124; "Australia/Sydney" &#124; "CET" &#124; "CST6CDT" &#124; "EET" &#124; "EST" &#124; "EST5EDT" &#124; "Etc/GMT" &#124; "Etc/GMT-1" &#124; "Etc/GMT-10" &#124; "Etc/GMT-11" &#124; "Etc/GMT-12" &#124; "Etc/GMT-13" &#124; "Etc/GMT-14" &#124; "Etc/GMT-2" &#124; "Etc/GMT-3" &#124; "Etc/GMT-4" &#124; "Etc/GMT-5" &#124; "Etc/GMT-6" &#124; "Etc/GMT-7" &#124; "Etc/GMT-8" &#124; "Etc/GMT-9" &#124; "Etc/GMT+1" &#124; "Etc/GMT+10" &#124; "Etc/GMT+11" &#124; "Etc/GMT+12" &#124; "Etc/GMT+2" &#124; "Etc/GMT+3" &#124; "Etc/GMT+4" &#124; "Etc/GMT+5" &#124; "Etc/GMT+6" &#124; "Etc/GMT+7" &#124; "Etc/GMT+8" &#124; "Etc/GMT+9" &#124; "Etc/UTC" &#124; "Europe/Amsterdam" &#124; "Europe/Andorra" &#124; "Europe/Astrakhan" &#124; "Europe/Athens" &#124; "Europe/Belgrade" &#124; "Europe/Berlin" &#124; "Europe/Brussels" &#124; "Europe/Bucharest" &#124; "Europe/Budapest" &#124; "Europe/Chisinau" &#124; "Europe/Copenhagen" &#124; "Europe/Dublin" &#124; "Europe/Gibraltar" &#124; "Europe/Helsinki" &#124; "Europe/Istanbul" &#124; "Europe/Kaliningrad" &#124; "Europe/Kiev" &#124; "Europe/Kirov" &#124; "Europe/Lisbon" &#124; "Europe/London" &#124; "Europe/Luxembourg" &#124; "Europe/Madrid" &#124; "Europe/Malta" &#124; "Europe/Minsk" &#124; "Europe/Monaco" &#124; "Europe/Moscow" &#124; "Europe/Oslo" &#124; "Europe/Paris" &#124; "Europe/Prague" &#124; "Europe/Riga" &#124; "Europe/Rome" &#124; "Europe/Samara" &#124; "Europe/Saratov" &#124; "Europe/Simferopol" &#124; "Europe/Sofia" &#124; "Europe/Stockholm" &#124; "Europe/Tallinn" &#124; "Europe/Tirane" &#124; "Europe/Ulyanovsk" &#124; "Europe/Uzhgorod" &#124; "Europe/Vienna" &#124; "Europe/Vilnius" &#124; "Europe/Volgograd" &#124; "Europe/Warsaw" &#124; "Europe/Zaporozhye" &#124; "Europe/Zurich" &#124; "HST" &#124; "Indian/Chagos" &#124; "Indian/Christmas" &#124; "Indian/Cocos" &#124; "Indian/Kerguelen" &#124; "Indian/Mahe" &#124; "Indian/Maldives" &#124; "Indian/Mauritius" &#124; "Indian/Reunion" &#124; "MET" &#124; "MST" &#124; "MST7MDT" &#124; "Pacific/Apia" &#124; "Pacific/Auckland" &#124; "Pacific/Bougainville" &#124; "Pacific/Chatham" &#124; "Pacific/Chuuk" &#124; "Pacific/Easter" &#124; "Pacific/Efate" &#124; "Pacific/Fakaofo" &#124; "Pacific/Fiji" &#124; "Pacific/Funafuti" &#124; "Pacific/Galapagos" &#124; "Pacific/Gambier" &#124; "Pacific/Guadalcanal" &#124; "Pacific/Guam" &#124; "Pacific/Honolulu" &#124; "Pacific/Kanton" &#124; "Pacific/Kiritimati" &#124; "Pacific/Kosrae" &#124; "Pacific/Kwajalein" &#124; "Pacific/Majuro" &#124; "Pacific/Marquesas" &#124; "Pacific/Nauru" &#124; "Pacific/Niue" &#124; "Pacific/Norfolk" &#124; "Pacific/Noumea" &#124; "Pacific/Pago_Pago" &#124; "Pacific/Palau" &#124; "Pacific/Pitcairn" &#124; "Pacific/Pohnpei" &#124; "Pacific/Port_Moresby" &#124; "Pacific/Rarotonga" &#124; "Pacific/Tahiti" &#124; "Pacific/Tarawa" &#124; "Pacific/Tongatapu" &#124; "Pacific/Wake" &#124; "Pacific/Wallis" &#124; "PST8PDT" &#124; "WET"<wbr>></code> | The buyer\'s time zone. |\n| language | <code>StatefulRemoteSubscribable<<wbr><a href="#language">Language</a><wbr>></code> | The language the buyer sees in the checkout. |\n| extensionLanguage | <code>StatefulRemoteSubscribable<<wbr><a href="#language">Language</a><wbr>></code> | This is the buyer\'s language, as supported by the extension. If the buyer\'s actual language is not supported by the extension, this is the fallback locale used for translations.<br /><br />For example, if the buyer\'s language is \'fr-CA\' but your extension only supports translations for \'fr\', then the `isoCode` for this language is \'fr\'. If your extension does not provide french translations at all, this value is the default locale for your extension (that is, the one matching your .default.json file). |',
    },
    {
      type: 'Markdown',
      anchorLink: 'language',
      title: 'Language',
      sectionContent:
        "| Name | Type | Description |\n| --- | --- | --- |\n| isoCode | <code>string</code> | The BCP-47 language tag. It may contain a dash followed by an ISO 3166-1 alpha-2 region code.<br /><br />Example: <code>'en' for English, or 'en-US' for English local to United States.</code> |",
    },
    {
      type: 'Markdown',
      anchorLink: 'currency',
      title: 'Currency',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| isoCode | <code>"AED" &#124; "AFN" &#124; "ALL" &#124; "AMD" &#124; "ANG" &#124; "AOA" &#124; "ARS" &#124; "AUD" &#124; "AWG" &#124; "AZN" &#124; "BAM" &#124; "BBD" &#124; "BDT" &#124; "BGN" &#124; "BHD" &#124; "BIF" &#124; "BMD" &#124; "BND" &#124; "BOB" &#124; "BOV" &#124; "BRL" &#124; "BSD" &#124; "BTN" &#124; "BWP" &#124; "BYN" &#124; "BZD" &#124; "CAD" &#124; "CDF" &#124; "CHE" &#124; "CHF" &#124; "CHW" &#124; "CLF" &#124; "CLP" &#124; "CNY" &#124; "COP" &#124; "COU" &#124; "CRC" &#124; "CUC" &#124; "CUP" &#124; "CVE" &#124; "CZK" &#124; "DJF" &#124; "DKK" &#124; "DOP" &#124; "DZD" &#124; "EGP" &#124; "ERN" &#124; "ETB" &#124; "EUR" &#124; "FJD" &#124; "FKP" &#124; "GBP" &#124; "GEL" &#124; "GHS" &#124; "GIP" &#124; "GMD" &#124; "GNF" &#124; "GTQ" &#124; "GYD" &#124; "HKD" &#124; "HNL" &#124; "HRK" &#124; "HTG" &#124; "HUF" &#124; "IDR" &#124; "ILS" &#124; "INR" &#124; "IQD" &#124; "IRR" &#124; "ISK" &#124; "JMD" &#124; "JOD" &#124; "JPY" &#124; "KES" &#124; "KGS" &#124; "KHR" &#124; "KMF" &#124; "KPW" &#124; "KRW" &#124; "KWD" &#124; "KYD" &#124; "KZT" &#124; "LAK" &#124; "LBP" &#124; "LKR" &#124; "LRD" &#124; "LSL" &#124; "LYD" &#124; "MAD" &#124; "MDL" &#124; "MGA" &#124; "MKD" &#124; "MMK" &#124; "MNT" &#124; "MOP" &#124; "MRU" &#124; "MUR" &#124; "MVR" &#124; "MWK" &#124; "MXN" &#124; "MXV" &#124; "MYR" &#124; "MZN" &#124; "NAD" &#124; "NGN" &#124; "NIO" &#124; "NOK" &#124; "NPR" &#124; "NZD" &#124; "OMR" &#124; "PAB" &#124; "PEN" &#124; "PGK" &#124; "PHP" &#124; "PKR" &#124; "PLN" &#124; "PYG" &#124; "QAR" &#124; "RON" &#124; "RSD" &#124; "RUB" &#124; "RWF" &#124; "SAR" &#124; "SBD" &#124; "SCR" &#124; "SDG" &#124; "SEK" &#124; "SGD" &#124; "SHP" &#124; "SLL" &#124; "SOS" &#124; "SRD" &#124; "SSP" &#124; "STN" &#124; "SVC" &#124; "SYP" &#124; "SZL" &#124; "THB" &#124; "TJS" &#124; "TMT" &#124; "TND" &#124; "TOP" &#124; "TRY" &#124; "TTD" &#124; "TWD" &#124; "TZS" &#124; "UAH" &#124; "UGX" &#124; "USD" &#124; "USN" &#124; "UYI" &#124; "UYU" &#124; "UYW" &#124; "UZS" &#124; "VES" &#124; "VND" &#124; "VUV" &#124; "WST" &#124; "XAF" &#124; "XAG" &#124; "XAU" &#124; "XBA" &#124; "XBB" &#124; "XBC" &#124; "XBD" &#124; "XCD" &#124; "XDR" &#124; "XOF" &#124; "XPD" &#124; "XPF" &#124; "XPT" &#124; "XSU" &#124; "XTS" &#124; "XUA" &#124; "XXX" &#124; "YER" &#124; "ZAR" &#124; "ZMW" &#124; "ZWL"</code> | The ISO-4217 code for this currency. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'appmetafieldentry',
      title: 'AppMetafieldEntry',
      sectionContent:
        'A metafield associated with the shop or a resource on the checkout.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| target {% include /apps/checkout/privacy-icon.md %} | <code><a href="#appmetafieldentrytarget">AppMetafieldEntryTarget</a></code> | The target that is associated to the metadata. |\n| metafield | <code><a href="#appmetafield">AppMetafield</a></code> | The metadata information. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'appmetafield',
      title: 'AppMetafield',
      sectionContent:
        'Represents a custom metadata attached to a resource.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| key | <code>string</code> | The key name of a metafield. |\n| namespace | <code>string</code> | The namespace for a metafield. |\n| value | <code>string &#124; number &#124; boolean</code> | The value of a metafield. |\n| valueType | <code>"boolean" &#124; "float" &#124; "integer" &#124; "json_string" &#124; "string"</code> | The metafield\'s information type. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'appmetafieldentrytarget',
      title: 'AppMetafieldEntryTarget',
      sectionContent:
        'The metafield owner.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/apps/store/data-protection/protected-customer-data) in order to return `customer` metafields.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"customer" &#124; "product" &#124; "shop" &#124; "variant"</code> | The type of the metafield owner. |\n| id | <code>string</code> | The numeric owner ID that is associated with the metafield. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'giftcardchangeresulterror',
      title: 'GiftCardChangeResultError',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"error"</code> | Indicates that the gift card change failed. |\n| message | <code>string</code> | A message that explains the error. This message is useful for debugging. It is **not** localized, and therefore should not be presented directly to the buyer. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'giftcardchangeresultsuccess',
      title: 'GiftCardChangeResultSuccess',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"success"</code> | Indicates that the gift card change was applied successfully. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'giftcardremovechange',
      title: 'GiftCardRemoveChange',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"removeGiftCard"</code> | The type of the `GiftCardChange` API. |\n| code | <code>string</code> | Gift card code. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'giftcardaddchange',
      title: 'GiftCardAddChange',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"addGiftCard"</code> | The type of the `GiftCardChange` API. |\n| code | <code>string</code> | Gift card code. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'appliedgiftcard',
      title: 'AppliedGiftCard',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| lastCharacters | <code>string</code> | The last four characters of the applied gift card\'s code. |\n| amountUsed | <code><a href="#money">Money</a></code> | The amount of the applied gift card that will be used when the checkout is completed. |\n| balance | <code><a href="#money">Money</a></code> | The current balance of the applied gift card prior to checkout completion. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'discountcodechangeresulterror',
      title: 'DiscountCodeChangeResultError',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"error"</code> | Indicates that the discount code change failed. |\n| message | <code>string</code> | A message that explains the error. This message is useful for debugging. It is **not** localized, and therefore should not be presented directly to the buyer. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'discountcodechangeresultsuccess',
      title: 'DiscountCodeChangeResultSuccess',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"success"</code> | Indicates that the discount code change was applied successfully. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'discountcoderemovechange',
      title: 'DiscountCodeRemoveChange',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"removeDiscountCode"</code> | The type of the `DiscountCodeChange` API. |\n| code | <code>string</code> | The code for the discount |',
    },
    {
      type: 'Markdown',
      anchorLink: 'discountcodeaddchange',
      title: 'DiscountCodeAddChange',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"addDiscountCode"</code> | The type of the `DiscountCodeChange` API. |\n| code | <code>string</code> | The code for the discount |',
    },
    {
      type: 'Markdown',
      anchorLink: 'cartdiscountcode',
      title: 'CartDiscountCode',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| code | <code>string</code> | The code for the discount |',
    },
    {
      type: 'Markdown',
      anchorLink: 'cartlinechangeresulterror',
      title: 'CartLineChangeResultError',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"error"</code> | Indicates that the line item was not changed successfully. Refer to the `message` property for details about the error. |\n| message | <code>string</code> | A message that explains the error. This message is useful for debugging. It is **not** localized, and therefore should not be presented directly to the buyer. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'cartlinechangeresultsuccess',
      title: 'CartLineChangeResultSuccess',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"success"</code> | Indicates that the line item was changed successfully. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'cartlineupdatechange',
      title: 'CartLineUpdateChange',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"updateCartLine"</code> | An identifier for changes that update line items. |\n| id | <code>string</code> | Line Item ID.<br /><br />Example: <code>\'gid://shopify/CartLine/123\'</code> |\n| merchandiseId? | <code>string</code> | The new merchandise ID for the line item.<br /><br />Example: <code>\'gid://shopify/ProductVariant/123\'</code> |\n| quantity? | <code>number</code> | The new quantity for the line item. |\n| attributes? | <code><a href="#attribute">Attribute</a>[]</code> | The new attributes for the line item. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'cartlineremovechange',
      title: 'CartLineRemoveChange',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"removeCartLine"</code> | An identifier for changes that remove line items. |\n| id | <code>string</code> | Line Item ID.<br /><br />Example: <code>\'gid://shopify/CartLine/123\'</code> |\n| quantity | <code>number</code> | The quantity being removed for this line item. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'cartlineaddchange',
      title: 'CartLineAddChange',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"addCartLine"</code> | An identifier for changes that add line items. |\n| merchandiseId | <code>string</code> | The merchandise ID being added.<br /><br />Example: <code>\'gid://shopify/ProductVariant/123\'</code> |\n| quantity | <code>number</code> | The quantity of the merchandise being added. |\n| attributes? | <code><a href="#attribute">Attribute</a>[]</code> | The attributes associated with the line item. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'presentmentcartline',
      title: 'PresentmentCartLine',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | The ID of the present cart line. This ID isn\'t stable and might change after any operations on the line items.<br /><br />Example: <code>\'gid://shopify/PresentmentCartLine/123\'</code> |\n| quantity | <code>number</code> | The quantity of the merchandise being purchased. |\n| cost | <code><a href="#presentmentcartlinecost">PresentmentCartLineCost</a></code> | The details about the cost components attributed to the presentment cart line. |\n| title | <code>string</code> | The title of the line item. |\n| subtitle? | <code>string</code> | The subtitle of the line item. |\n| image? | <code><a href="#imagedetails">ImageDetails</a></code> | The image associated with the line item. |\n| lines | <code><a href="#cartline">CartLine</a>[]</code> | The merchandise lines being purchased. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'presentmentcartlinecost',
      title: 'PresentmentCartLineCost',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| totalAmount | <code><a href="#money">Money</a></code> | The total cost of the merchandise line. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'cartline',
      title: 'CartLine',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | These line item IDs are not stable at the moment, they might change after any operations on the line items. You should always look up for an updated ID before any call to `applyCartLinesChange` because you\'ll need the ID to create a `CartLineChange` object.<br /><br />Example: <code>\'gid://shopify/CartLine/123\'</code> |\n| merchandise | <code>Merchandise</code> | The merchandise being purchased. |\n| quantity | <code>number</code> | The quantity of the merchandise being purchased. |\n| cost | <code><a href="#cartlinecost">CartLineCost</a></code> | The details about the cost components attributed to the cart line. |\n| attributes | <code><a href="#attribute">Attribute</a>[]</code> | The line item additional custom attributes. |\n| discountAllocations | <code>(<a href="#cartcodediscountallocation">CartCodeDiscountAllocation</a> &#124; <a href="#cartautomaticdiscountallocation">CartAutomaticDiscountAllocation</a> &#124; <a href="#cartcustomdiscountallocation">CartCustomDiscountAllocation</a>)[]</code> | Discounts applied to the cart line. |\n| lineComponents | <code>CartLineComponentType[]</code> | Sub lines of the merchandise line. If no sub lines are present, this will be an empty array. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'cartcustomdiscountallocation',
      title: 'CartCustomDiscountAllocation',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| title | <code>string</code> | The title of the custom discount |\n| type | <code>"custom"</code> | The type of the custom discount |\n| discountedAmount | <code><a href="#money">Money</a></code> | The money amount that has been discounted from the order |',
    },
    {
      type: 'Markdown',
      anchorLink: 'cartautomaticdiscountallocation',
      title: 'CartAutomaticDiscountAllocation',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| title | <code>string</code> | The title of the automatic discount |\n| type | <code>"automatic"</code> | The type of the automatic discount |\n| discountedAmount | <code><a href="#money">Money</a></code> | The money amount that has been discounted from the order |',
    },
    {
      type: 'Markdown',
      anchorLink: 'cartcodediscountallocation',
      title: 'CartCodeDiscountAllocation',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| code | <code>string</code> | The code for the discount |\n| type | <code>"code"</code> | The type of the code discount |\n| discountedAmount | <code><a href="#money">Money</a></code> | The money amount that has been discounted from the order |',
    },
    {
      type: 'Markdown',
      anchorLink: 'cartlinecost',
      title: 'CartLineCost',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| totalAmount | <code><a href="#money">Money</a></code> | The total amount after reductions the buyer can expect to pay that is directly attributable to a single cart line. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'metafieldchangeresulterror',
      title: 'MetafieldChangeResultError',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"error"</code> | The type of the `MetafieldChangeResultError` API. |\n| message | <code>string</code> | A message that explains the error. This message is useful for debugging. It is **not** localized, and therefore should not be presented directly to the buyer. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'metafieldchangeresultsuccess',
      title: 'MetafieldChangeResultSuccess',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"success"</code> | The type of the `MetafieldChangeResultSuccess` API. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'metafieldupdatechange',
      title: 'MetafieldUpdateChange',
      sectionContent:
        'Updates a metafield. If a metafield with the\nprovided key and namespace does not already exist, it gets created.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"updateMetafield"</code> | The type of the `MetafieldUpdateChange` API. |\n| key | <code>string</code> | The name of the metafield to update. |\n| namespace | <code>string</code> | The namespace of the metafield to add. |\n| value | <code>string &#124; number</code> | The new information to store in the metafield. |\n| valueType | <code>"integer" &#124; "string" &#124; "json_string"</code> | The metafield\'s information type. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'metafieldremovechange',
      title: 'MetafieldRemoveChange',
      sectionContent:
        'Removes a metafield.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"removeMetafield"</code> | The type of the `MetafieldRemoveChange` API. |\n| key | <code>string</code> | The name of the metafield to remove. |\n| namespace | <code>string</code> | The namespace of the metafield to remove. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'metafield',
      title: 'Metafield',
      sectionContent:
        'Metadata associated with the checkout.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| key | <code>string</code> | The name of the metafield. It must be between 3 and 30 characters in length (inclusive). |\n| namespace | <code>string</code> | A container for a set of metafields. You need to define a custom namespace for your metafields to distinguish them from the metafields used by other apps. This must be between 2 and 20 characters in length (inclusive). |\n| value | <code>string &#124; number</code> | The information to be stored as metadata. |\n| valueType | <code>"integer" &#124; "string" &#124; "json_string"</code> | The metafield\'s information type. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'attributechangeresulterror',
      title: 'AttributeChangeResultError',
      sectionContent:
        'The returned result of an unsuccessful update to an attribute\nwith a message detailing the type of error that occurred.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"error"</code> | The type of the `AttributeChangeResultError` API. |\n| message | <code>string</code> | A message that explains the error. This message is useful for debugging. It is **not** localized, and therefore should not be presented directly to the buyer. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'attributechangeresultsuccess',
      title: 'AttributeChangeResultSuccess',
      sectionContent:
        'The returned result of a successful update to an attribute.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"success"</code> | The type of the `AttributeChangeResultSuccess` API. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'attribute',
      title: 'Attribute',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| key | <code>string</code> | The key for the attribute. |\n| value | <code>string</code> | The value for the attribute. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'notechangeresulterror',
      title: 'NoteChangeResultError',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"error"</code> | The type of the `NoteChangeResultError` API. |\n| message | <code>string</code> | A message that explains the error. This message is useful for debugging. It is **not** localized, and therefore should not be presented directly to the buyer. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'notechangeresultsuccess',
      title: 'NoteChangeResultSuccess',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"success"</code> | The type of the `NoteChangeResultSuccess` API. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'noteupdatechange',
      title: 'NoteUpdateChange',
      sectionContent:
        'An Update to a note on the order.\nfor example, the buyer could request detailed packaging instructions in an order note\n\n| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"updateNote"</code> | The type of the `NoteUpdateChange` API. |\n| note | <code>string</code> | The new value of the note. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'noteremovechange',
      title: 'NoteRemoveChange',
      sectionContent:
        'Removes a note\n\n| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"removeNote"</code> | The type of the `NoteRemoveChange` API. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'cartcost',
      title: 'CartCost',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| totalAmount | <code>StatefulRemoteSubscribable<<wbr><a href="#money">Money</a><wbr>></code> | A `Money` value representing the minimum a buyer can expect to pay at the current step of checkout. This value excludes amounts yet to be negotiated. For example, the information step might not have delivery costs calculated. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'money',
      title: 'Money',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| amount | <code>number</code> | The price amount. |\n| currencyCode | <code>"AED" &#124; "AFN" &#124; "ALL" &#124; "AMD" &#124; "ANG" &#124; "AOA" &#124; "ARS" &#124; "AUD" &#124; "AWG" &#124; "AZN" &#124; "BAM" &#124; "BBD" &#124; "BDT" &#124; "BGN" &#124; "BHD" &#124; "BIF" &#124; "BMD" &#124; "BND" &#124; "BOB" &#124; "BOV" &#124; "BRL" &#124; "BSD" &#124; "BTN" &#124; "BWP" &#124; "BYN" &#124; "BZD" &#124; "CAD" &#124; "CDF" &#124; "CHE" &#124; "CHF" &#124; "CHW" &#124; "CLF" &#124; "CLP" &#124; "CNY" &#124; "COP" &#124; "COU" &#124; "CRC" &#124; "CUC" &#124; "CUP" &#124; "CVE" &#124; "CZK" &#124; "DJF" &#124; "DKK" &#124; "DOP" &#124; "DZD" &#124; "EGP" &#124; "ERN" &#124; "ETB" &#124; "EUR" &#124; "FJD" &#124; "FKP" &#124; "GBP" &#124; "GEL" &#124; "GHS" &#124; "GIP" &#124; "GMD" &#124; "GNF" &#124; "GTQ" &#124; "GYD" &#124; "HKD" &#124; "HNL" &#124; "HRK" &#124; "HTG" &#124; "HUF" &#124; "IDR" &#124; "ILS" &#124; "INR" &#124; "IQD" &#124; "IRR" &#124; "ISK" &#124; "JMD" &#124; "JOD" &#124; "JPY" &#124; "KES" &#124; "KGS" &#124; "KHR" &#124; "KMF" &#124; "KPW" &#124; "KRW" &#124; "KWD" &#124; "KYD" &#124; "KZT" &#124; "LAK" &#124; "LBP" &#124; "LKR" &#124; "LRD" &#124; "LSL" &#124; "LYD" &#124; "MAD" &#124; "MDL" &#124; "MGA" &#124; "MKD" &#124; "MMK" &#124; "MNT" &#124; "MOP" &#124; "MRU" &#124; "MUR" &#124; "MVR" &#124; "MWK" &#124; "MXN" &#124; "MXV" &#124; "MYR" &#124; "MZN" &#124; "NAD" &#124; "NGN" &#124; "NIO" &#124; "NOK" &#124; "NPR" &#124; "NZD" &#124; "OMR" &#124; "PAB" &#124; "PEN" &#124; "PGK" &#124; "PHP" &#124; "PKR" &#124; "PLN" &#124; "PYG" &#124; "QAR" &#124; "RON" &#124; "RSD" &#124; "RUB" &#124; "RWF" &#124; "SAR" &#124; "SBD" &#124; "SCR" &#124; "SDG" &#124; "SEK" &#124; "SGD" &#124; "SHP" &#124; "SLL" &#124; "SOS" &#124; "SRD" &#124; "SSP" &#124; "STN" &#124; "SVC" &#124; "SYP" &#124; "SZL" &#124; "THB" &#124; "TJS" &#124; "TMT" &#124; "TND" &#124; "TOP" &#124; "TRY" &#124; "TTD" &#124; "TWD" &#124; "TZS" &#124; "UAH" &#124; "UGX" &#124; "USD" &#124; "USN" &#124; "UYI" &#124; "UYU" &#124; "UYW" &#124; "UZS" &#124; "VES" &#124; "VND" &#124; "VUV" &#124; "WST" &#124; "XAF" &#124; "XAG" &#124; "XAU" &#124; "XBA" &#124; "XBB" &#124; "XBC" &#124; "XBD" &#124; "XCD" &#124; "XDR" &#124; "XOF" &#124; "XPD" &#124; "XPF" &#124; "XPT" &#124; "XSU" &#124; "XTS" &#124; "XUA" &#124; "XXX" &#124; "YER" &#124; "ZAR" &#124; "ZMW" &#124; "ZWL"</code> | The ISO 4217 format for the currency.<br /><br />Example: <code>\'CAD\' for Canadian dollar</code> |',
    },
    {
      type: 'Markdown',
      anchorLink: 'shop',
      title: 'Shop',
      sectionContent:
        "| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | The shop ID.<br /><br />Example: <code>'gid://shopify/Shop/123'</code> |\n| name | <code>string</code> | The name of the shop. |\n| storefrontUrl? | <code>string</code> | The primary storefront URL. |\n| myshopifyDomain | <code>string</code> | The shop's myshopify.com domain. |",
    },
    {
      type: 'Markdown',
      anchorLink: 'buyeridentity',
      title: 'BuyerIdentity',
      sectionContent:
        "{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/apps/store/data-protection/protected-customer-data)\n\n| Name | Type | Description |\n| --- | --- | --- |\n| customer | <code>StatefulRemoteSubscribable<<wbr><a href=\"#customer\">Customer</a> &#124; undefined<wbr>></code> | The customer account from the buyer. This value will update when there's a change in the account. The value is undefined if the buyer isn't a known customer for this shop.<br /><br />Protected resource: Requires approval to access protected customer data. More info - https://shopify.dev/apps/store/data-protection/protected-customer-data |\n| email | <code>StatefulRemoteSubscribable<<wbr>string &#124; undefined<wbr>></code> | The email address of the buyer that is interacting with the cart. This value will update when there's a change in the checkout formulary. The value is undefined if no permission given.<br /><br />Protected resource: Requires approval to access protected customer data (Level 2). More info - https://shopify.dev/apps/store/data-protection/protected-customer-data |\n| phone | <code>StatefulRemoteSubscribable<<wbr>string &#124; undefined<wbr>></code> | The phone number of the buyer that is interacting with the cart. This value will update when there's a change in the checkout formulary. The value is undefined if no permission given.<br /><br />Protected resource: Requires approval to access protected customer data (Level 2). More info - https://shopify.dev/apps/store/data-protection/protected-customer-data |",
    },
    {
      type: 'Markdown',
      anchorLink: 'customer',
      title: 'Customer',
      sectionContent:
        'Information about a customer who has previously purchased from this shop.\n\n{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/apps/store/data-protection/protected-customer-data)\n\n| Name | Type | Description |\n| --- | --- | --- |\n| id | <code>string</code> | Customer ID.<br /><br />Example: <code>\'gid://shopify/Customer/123\'</code> |\n| email? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The email of the customer. |\n| phone? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The phone number of the customer. |\n| fullName? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The full name of the customer. |\n| firstName? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The first name of the customer. |\n| lastName? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The last name of the customer. |\n| image | <code><a href="#imagedetails">ImageDetails</a></code> | The image associated with the customer. |\n| acceptsMarketing | <code>boolean</code> | Defines if the customer accepts marketing activities. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'imagedetails',
      title: 'ImageDetails',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| url | <code>string</code> | The image URL. |\n| altText? | <code>string</code> | The alternative text for the image. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'mailingaddress',
      title: 'MailingAddress',
      sectionContent:
        '{% include /apps/checkout/privacy-icon.md %} Requires access to [protected customer data](/apps/store/data-protection/protected-customer-data)\n\n| Name | Type | Description |\n| --- | --- | --- |\n| name? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The buyer\'s full name.<br /><br />Example: <code>\'John Doe\'</code> |\n| firstName? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The buyer\'s first name.<br /><br />Example: <code>\'John\'</code> |\n| lastName? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The buyer\'s last name.<br /><br />Example: <code>\'Doe\'</code> |\n| company? | <code>string</code> | The buyer\'s company name.<br /><br />Example: <code>\'Shopify\'</code> |\n| address1? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The first line of the buyer\'s address, including street name and number.<br /><br />Example: <code>\'151 O\'Connor Street\'</code> |\n| address2? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The second line of the buyer\'s address, like apartment number, suite, etc.<br /><br />Example: <code>\'Ground floor\'</code> |\n| city? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The buyer\'s city.<br /><br />Example: <code>\'Ottawa\'</code> |\n| zip? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The buyer\'s postal or ZIP code.<br /><br />Example: <code>\'K2P 2L8\'</code> |\n| countryCode? {% include /apps/checkout/privacy-icon.md %} | <code>"AC" &#124; "AD" &#124; "AE" &#124; "AF" &#124; "AG" &#124; "AI" &#124; "AL" &#124; "AM" &#124; "AN" &#124; "AO" &#124; "AR" &#124; "AT" &#124; "AU" &#124; "AW" &#124; "AX" &#124; "AZ" &#124; "BA" &#124; "BB" &#124; "BD" &#124; "BE" &#124; "BF" &#124; "BG" &#124; "BH" &#124; "BI" &#124; "BJ" &#124; "BL" &#124; "BM" &#124; "BN" &#124; "BO" &#124; "BQ" &#124; "BR" &#124; "BS" &#124; "BT" &#124; "BV" &#124; "BW" &#124; "BY" &#124; "BZ" &#124; "CA" &#124; "CC" &#124; "CD" &#124; "CF" &#124; "CG" &#124; "CH" &#124; "CI" &#124; "CK" &#124; "CL" &#124; "CM" &#124; "CN" &#124; "CO" &#124; "CR" &#124; "CU" &#124; "CV" &#124; "CW" &#124; "CX" &#124; "CY" &#124; "CZ" &#124; "DE" &#124; "DJ" &#124; "DK" &#124; "DM" &#124; "DO" &#124; "DZ" &#124; "EC" &#124; "EE" &#124; "EG" &#124; "EH" &#124; "ER" &#124; "ES" &#124; "ET" &#124; "FI" &#124; "FJ" &#124; "FK" &#124; "FO" &#124; "FR" &#124; "GA" &#124; "GB" &#124; "GD" &#124; "GE" &#124; "GF" &#124; "GG" &#124; "GH" &#124; "GI" &#124; "GL" &#124; "GM" &#124; "GN" &#124; "GP" &#124; "GQ" &#124; "GR" &#124; "GS" &#124; "GT" &#124; "GW" &#124; "GY" &#124; "HK" &#124; "HM" &#124; "HN" &#124; "HR" &#124; "HT" &#124; "HU" &#124; "ID" &#124; "IE" &#124; "IL" &#124; "IM" &#124; "IN" &#124; "IO" &#124; "IQ" &#124; "IR" &#124; "IS" &#124; "IT" &#124; "JE" &#124; "JM" &#124; "JO" &#124; "JP" &#124; "KE" &#124; "KG" &#124; "KH" &#124; "KI" &#124; "KM" &#124; "KN" &#124; "KP" &#124; "KR" &#124; "KW" &#124; "KY" &#124; "KZ" &#124; "LA" &#124; "LB" &#124; "LC" &#124; "LI" &#124; "LK" &#124; "LR" &#124; "LS" &#124; "LT" &#124; "LU" &#124; "LV" &#124; "LY" &#124; "MA" &#124; "MC" &#124; "MD" &#124; "ME" &#124; "MF" &#124; "MG" &#124; "MK" &#124; "ML" &#124; "MM" &#124; "MN" &#124; "MO" &#124; "MQ" &#124; "MR" &#124; "MS" &#124; "MT" &#124; "MU" &#124; "MV" &#124; "MW" &#124; "MX" &#124; "MY" &#124; "MZ" &#124; "NA" &#124; "NC" &#124; "NE" &#124; "NF" &#124; "NG" &#124; "NI" &#124; "NL" &#124; "NO" &#124; "NP" &#124; "NR" &#124; "NU" &#124; "NZ" &#124; "OM" &#124; "PA" &#124; "PE" &#124; "PF" &#124; "PG" &#124; "PH" &#124; "PK" &#124; "PL" &#124; "PM" &#124; "PN" &#124; "PS" &#124; "PT" &#124; "PY" &#124; "QA" &#124; "RE" &#124; "RO" &#124; "RS" &#124; "RU" &#124; "RW" &#124; "SA" &#124; "SB" &#124; "SC" &#124; "SD" &#124; "SE" &#124; "SG" &#124; "SH" &#124; "SI" &#124; "SJ" &#124; "SK" &#124; "SL" &#124; "SM" &#124; "SN" &#124; "SO" &#124; "SR" &#124; "SS" &#124; "ST" &#124; "SV" &#124; "SX" &#124; "SY" &#124; "SZ" &#124; "TA" &#124; "TC" &#124; "TD" &#124; "TF" &#124; "TG" &#124; "TH" &#124; "TJ" &#124; "TK" &#124; "TL" &#124; "TM" &#124; "TN" &#124; "TO" &#124; "TR" &#124; "TT" &#124; "TV" &#124; "TW" &#124; "TZ" &#124; "UA" &#124; "UG" &#124; "UM" &#124; "US" &#124; "UY" &#124; "UZ" &#124; "VA" &#124; "VC" &#124; "VE" &#124; "VG" &#124; "VN" &#124; "VU" &#124; "WF" &#124; "WS" &#124; "XK" &#124; "YE" &#124; "YT" &#124; "ZA" &#124; "ZM" &#124; "ZW" &#124; "ZZ"</code> | The ISO 3166 Alpha-2 format for the buyer\'s country. Refer to https://www.iso.org/iso-3166-country-codes.html.<br /><br />Example: <code>\'CA\' for Canada.</code> |\n| provinceCode? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The buyer\'s zone code, such as state, province, prefecture, or region.<br /><br />Example: <code>\'ON\' for Ontario.</code> |\n| phone? {% include /apps/checkout/privacy-icon.md %} | <code>string</code> | The buyer\'s phone number.<br /><br />Example: <code>\'+1 613 111 2222\'.</code> |',
    },
    {
      type: 'Markdown',
      anchorLink: 'storage',
      title: 'Storage',
      sectionContent:
        "A key-value storage object for extension points.\n\nStored data is only available to this specific app\nat this specific extension point.\n\nThe storage backend is implemented with `localStorage` and\nshould persist across the buyer's checkout session.\nHowever, data persistence isn't guaranteed.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| read | <code>(key: string) => Promise<<wbr>T &#124; null<wbr>></code> | Read and return a stored value by key.<br /><br />The stored data is deserialized from JSON and returned as its original primitive.<br /><br />Returns `null` if no stored data exists. |\n| write | <code>(key: string, data: any) => Promise<<wbr>void<wbr>></code> | Write stored data for this key.<br /><br />The data must be serializable to JSON. |\n| delete | <code>(key: string) => Promise<<wbr>void<wbr>></code> | Delete stored data by key. |",
    },
    {
      type: 'Markdown',
      anchorLink: 'extension',
      title: 'Extension',
      sectionContent:
        'Meta information about an extension point.\n\n| Name | Type | Description |\n| --- | --- | --- |\n| version? | <code>string</code> | The published version of the running extension point.<br /><br />For unpublished extensions, the value is `undefined`.<br /><br />Example: <code>3.0.10</code> |\n| scriptUrl | <code>string</code> | The URL to the script that started the extension point. |\n| rendered | <code>StatefulRemoteSubscribable<<wbr>boolean<wbr>></code> | Whether your extension is currently rendered to the screen.<br /><br />Shopify might render your extension before it\'s visible in the UI, typically to pre-render extensions that will appear on a later step of the checkout.<br /><br />Your extension might also continue to run after the buyer has navigated away from where it was rendered. The extension continues running so that your extension is immediately available to render if the buyer navigates back. |\n| capabilities | <code>StatefulRemoteSubscribable<<wbr>("api_access" &#124; "network_access" &#124; "block_progress")[]<wbr>></code> | The allowed capabilities of the extension, defined in your `shopify.ui.extension.toml` file .<br /><br />`network_access`: You must [request access](https://shopify.dev/api/checkout-extensions/checkout/configuration#complete-a-request-for-network-access) to make network calls.<br /><br />`block_progress`: Merchants control whether your extension [can block checkout progress](https://shopify.dev/api/checkout-extensions/checkout/configuration#block-progress) |\n| editor? | <code><a href="#editor">Editor</a></code> | Information about the editor where the extension is being rendered.<br /><br />The value is undefined if the extension is not rendering in an editor. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'editor',
      title: 'Editor',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| type | <code>"checkout"</code> | Indicates whether the extension is rendering in the checkout editor. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'interceptor',
      title: 'Interceptor',
      sectionContent:
        '| Type | Description |\n| --- | --- |\n| <code>(interceptorProps: <a href="#interceptorprops">InterceptorProps</a>): <a href="#interceptorrequestallow">InterceptorRequestAllow</a> &#124; <a href="#interceptorrequestblock">InterceptorRequestBlock</a> &#124; Promise<<wbr><a href="#interceptorrequestallow">InterceptorRequestAllow</a> &#124; <a href="#interceptorrequestblock">InterceptorRequestBlock</a><wbr>></code> | A function for intercepting and preventing navigation on checkout. You can block navigation by returning an object with `{behavior: \'block\', reason: InvalidResultReason.InvalidExtensionState}`. If you do, then you\'re expected to also update some part of your UI to reflect the reason why navigation was blocked. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'interceptorrequestblock',
      title: 'InterceptorRequestBlock',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| behavior | <code>"block"</code> | Indicates that the interceptor will block the buyer\'s journey from continuing. |\n| reason | <code>string</code> | The reason for blocking the interceptor request. This value isn\'t presented to the buyer, so it doesn\'t need to be localized. The value is used only for Shopify\'s own internal debugging and metrics. |\n| perform | <code>(result: <a href="#interceptorresultallow">InterceptorResultAllow</a> &#124; <a href="#interceptorresultblock">InterceptorResultBlock</a>) => void &#124; Promise<<wbr>void<wbr>></code> | This callback is called when all interceptors finish. We recommend setting errors or reasons for blocking at this stage, so that all the errors in the UI show up at once. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'interceptorrequestallow',
      title: 'InterceptorRequestAllow',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| behavior | <code>"allow"</code> | Indicates that the interceptor will allow the buyer\'s journey to continue. |\n| perform? | <code>(result: <a href="#interceptorresultallow">InterceptorResultAllow</a> &#124; <a href="#interceptorresultblock">InterceptorResultBlock</a>) => void &#124; Promise<<wbr>void<wbr>></code> | This callback is called when all interceptors finish. We recommend setting errors or reasons for blocking at this stage, so that all the errors in the UI show up at once. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'interceptorresultblock',
      title: 'InterceptorResultBlock',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| behavior | <code>"block"</code> | Indicates that some part of the checkout UI intercepted and prevented the buyer\'s progress. The buyer typically needs to take some action to resolve this issue and to move on to the next step. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'interceptorresultallow',
      title: 'InterceptorResultAllow',
      sectionContent:
        '| Name | Type | Description |\n| --- | --- | --- |\n| behavior | <code>"allow"</code> | Indicates that the buyer was allowed to progress through checkout. |',
    },
    {
      type: 'Markdown',
      anchorLink: 'interceptorprops',
      title: 'InterceptorProps',
      sectionContent:
        "| Name | Type | Description |\n| --- | --- | --- |\n| canBlockProgress | <code>boolean</code> | Whether the interceptor has the capability to block a buyer's progress through checkout. This ability might be granted by a merchant in differing checkout contexts. |",
    },
    {
      type: 'Markdown',
      anchorLink: 'appmetafieldfilters',
      title: 'AppMetaFieldFilters',
      sectionContent:
        '| Name       | Type                                                                    | Description                                                                                                                                                                                              |\n| ---------- | ----------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| id?        | <code>string</code>                                                     | The numeric owner ID that is associated with the metafield.                                                                                                                                              |\n| type?      | <code>"customer" &#124; "product" &#124; "shop" &#124; "variant"</code> | The type of the metafield owner.                                                                                                                                                                         |\n| namespace? | <code>string</code>                                                     | Container for a set of metafields. You need to define a custom namespace for your metafields to distinguish them from the metafields used by other apps. This value must be between 2 and 20 characters. |\n| key?       | <code>string</code>                                                     | The name of the metafield. This value must be between 3 and 30 characters.                                                                                                                               |',
    },
    {
      type: 'Markdown',
      anchorLink: 'metafieldfilter',
      title: 'MetaFieldFilter',
      sectionContent:
        '| Name       | Type                | Description                                                                                                                                                                                                |\n| ---------- | ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| namespace? | <code>string</code> | A container for a set of metafields. You need to define a custom namespace for your metafields to distinguish them from the metafields used by other apps. This value must be between 2 and 20 characters. |\n| key?       | <code>string</code> | The name of the metafield. This value must be between 3 and 30 characters.                                                                                                                                 |\n\n---',
    },
    {
      type: 'Generic',
      anchorLink: 'react-hooks',
      title: 'React Hooks',
      sectionContent:
        "Shopify provides a collection of [React hooks](https://reactjs.org/docs/hooks-intro.html), which make it easy to update your UI when the checkout state changes. \n\n> Note:\n> React hooks are only available if you're using React. If you're using vanilla JavaScript, then you'll need to manually subscribe to the subscribable value directly with a callback. For example, `shippingAddress.subscribe(newValue => updateYourUI())`.",
      codeblock: {
        title: 'React hooks example',
        tabs: [
          {
            title: 'React Hooks',
            code: './examples/react-hook.tsx',
            language: 'tsx',
          },
        ],
      },
    },
    {
      type: 'Markdown',
      anchorLink: 'react-hooks-table',
      title: 'React Hooks Table',
      sectionContent:
        '| Name                                                            | Type                                                                                                                                                                                                                                                                                                                                                                             | Description|\n| --------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ||\n| useApplyAttributeChange                                         | <code>(change: <a href="#attributeupdatechange">AttributeUpdateChange</a>) => Promise<<wbr><a href="#attributechangeresultsuccess">AttributeChangeResultSuccess</a> &#124; <a href="#attributechangeresulterror">AttributeChangeResultError</a><wbr>></code>                                                                                                                     | Returns a function to mutate the `attributes` property of the checkout.                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| useApplyCartLinesChange                                         | <code>(change: <a href="#cartlineaddchange">CartLineAddChange</a> &#124; <a href="#cartlineremovechange">CartLineRemoveChange</a> &#124; <a href="#cartlineupdatechange">CartLineUpdateChange</a>) => Promise<<wbr><a href="#cartlinechangeresultsuccess">CartLineChangeResultSuccess</a> &#124; <a href="#cartlinechangeresulterror">CartLineChangeResultError</a><wbr>></code> | Returns a function to mutate the `lines` property of the checkout.                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| useApplyMetafieldsChange                                        | <code>(change: <a href="#metafieldremovechange">MetafieldRemoveChange</a> &#124; <a href="#metafieldupdatechange">MetafieldUpdateChange</a>) => Promise<<wbr><a href="#metafieldchangeresultsuccess">MetafieldChangeResultSuccess</a> &#124; <a href="#metafieldchangeresulterror">MetafieldChangeResultError</a><wbr>></code>                                                   | Returns a function to mutate the `metafields` property of the checkout.                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| useApplyNoteChange                                              | <code>(change: <a href="#noteremovechange">NoteRemoveChange</a> &#124; <a href="#noteupdatechange">NoteUpdateChange</a>) => Promise<<wbr><a href="#notechangeresultsuccess">NoteChangeResultSuccess</a> &#124; <a href="#notechangeresulterror">NoteChangeResultError</a><wbr>></code>                                                                                           | Returns a function to mutate the `note` property of the checkout.                                                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| useAppMetafields {% include /apps/checkout/privacy-icon.md %}   | <code>(filters?: <a href="#appmetafieldfilters">AppMetafieldFilters</a>) => <a href="#appmetafieldentry">AppMetaFieldEntry</a>[]</code>                                                                                                                                                                                                                                          | Returns the metafields configured with `shopify.ui.extension.toml`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| useAttributes                                                   | <code>() => <a href="#attribute">Attribute</a>[] &#124; undefined</code>                                                                                                                                                                                                                                                                                                         | Returns the proposed `attributes` applied to the checkout.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| useBuyerJourney                                                 | <code>() => Promise<<wbr>() => void<wbr>></code>                                                                                                                                                                                                                                                                                                                                 | Returns the `buyerJourney` details on buyer progression in checkout.                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| useBuyerJourneyIntercept                                        | <code>(interceptor: <a href="#interceptor">Interceptor</a>) => void</code>                                                                                                                                                                                                                                                                                                       | A function for intercepting and preventing progression on checkout. You can block progress by returning an object with `{behavior: \'block\', reason: InvalidResultReason.InvalidExtensionState}`. <br /><br />If you do, then you\'re expected to also update some part of your UI to reflect the reason why navigation was blocked. <br /><br />To block checkout progress, you must set the [block_progress](https://shopify.dev/api/checkout-extensions/checkout/configuration#block-progress) capability in your extension\'s configuration. |\n| useSettings                                                     | <code>() => ExtensionSettings </code>                                                                                                                                                                                                                                                                                                                                            | Returns the settings defined by the merchant for the extension.                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| useCurrency                                                     | <code>() => string </code>                                                                                                                                                                                                                                                                                                                                                       | Returns the currency of the checkout, and automatically re-renders your component if the currency changes.                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| useCustomer {% include /apps/checkout/privacy-icon.md %}        | <code>() => <a href="#customer">Customer</a> &#124; undefined</code>                                                                                                                                                                                                                                                                                                             | Returns the account belonging to the customer.<br/><br/> The value is a <a href="#customer">Customer</a> if the customer has an account and is logged in, `undefined` otherwise. `ScopeNotGrantedError` is raised when access to [protected customer data](/apps/store/data-protection/protected-customer-data) hasn\'t been granted.                                                                                                                                                                                                          |\n| useEmail {% include /apps/checkout/privacy-icon.md %}           | <code>() => string &#124; undefined </code>                                                                                                                                                                                                                                                                                                                                      | Returns the email of the buyer, and automatically re-renders your component if the email changes.<br/><br/>`ScopeNotGrantedError` is raised when access to [protected customer data](/apps/store/data-protection/protected-customer-data) hasn\'t been granted.                                                                                                                                                                                                                                                                                |\n| useExtensionApi                                                 | <code>() => <a href="#standardapi">StandardApi<a></code>                                                                                                                                                                                                                                                                                                                         | Returns the full API object that was passed in to your extension when it was created.                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| useExtensionCapabilities                                        | <code>() => <a href="#capability">Capability</a>[]</code>                                                                                                                                                                                                                                                                                                                        | Returns a list of an extension\'s granted capabilities.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| useExtensionCapabilitiy                                         | <code>(capability: <a href="#capability">Capability</a>) => boolean</code>                                                                                                                                                                                                                                                                                                       | Returns whether or not a given capability of an extension is granted.                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| useExtensionData                                                | <code>() => <a href="#extension">Extension<a></code>                                                                                                                                                                                                                                                                                                                             | Returns the metadata about the extension.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |\n| useExtensionLanguage                                            | <code>() => string </code>                                                                                                                                                                                                                                                                                                                                                       | Returns the buyer\'s language, as supported by the extension.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n| useCartLines                                                    | <code>() => <a href="#cartline">CartLine</a>[] </code>                                                                                                                                                                                                                                                                                                                           | Returns the current cart lines for the checkout, and automatically re-renders your component if cart lines are added, removed, or updated.                                                                                                                                                                                                                                                                                                                                                                                                    |\n| useLanguage                                                     | <code>() => string </code>                                                                                                                                                                                                                                                                                                                                                       | Returns the current language of the checkout, and automatically re-renders your component if the language changes.                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| useMetafield                                                    | <code>(filters: <a href="#metafieldfilter">MetaFieldFilter</a>) => <a href="#metafield">MetaField</a> &#124; undefined </code>                                                                                                                                                                                                                                                   | Returns a single filtered `Metafield` or `undefined`.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| useMetafields                                                   | <code>(filters?: <a href="#metafieldfilter">MetaFieldFilter</a>) => <a href="#metafield">MetaField</a>[] </code>                                                                                                                                                                                                                                                                 | Returns the current array of `metafields` applied to the checkout. You can optionally filter the list.                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| useNote                                                         | <code>() => string &#124; undefined </code>                                                                                                                                                                                                                                                                                                                                      | Returns the proposed `note` applied to the checkout.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n| usePhone {% include /apps/checkout/privacy-icon.md %}           | <code>() => string &#124; undefined </code>                                                                                                                                                                                                                                                                                                                                      | Returns the phone number of the buyer, and automatically re-renders your component if the phone number changes.<br/><br/>`ScopeNotGrantedError` is raised when access to [protected customer data](/apps/store/data-protection/protected-customer-data) hasn\'t been granted.                                                                                                                                                                                                                                                                  |\n| useTotalAmount                                                  | <code>() => <a href="#money">Money</a> &#124; undefined</code>                                                                                                                                                                                                                                                                                                                   | Returns a `Money` value representing the minimum a buyer can expect to pay at the current step of checkout. This value excludes amounts yet to be negotiated. For example, the information step may not have delivery costs calculated.                                                                                                                                                                                                                                                                                                       |\n| useShippingAddress {% include /apps/checkout/privacy-icon.md %} | <code>() => <a href="#mailingaddress">MailingAddress</a> &#124; undefined</code>                                                                                                                                                                                                                                                                                                 | Returns the proposed `shippingAddress` applied to the checkout. `ScopeNotGrantedError` is raised when access to [protected customer data](/apps/store/data-protection/protected-customer-data) hasn\'t been granted.                                                                                                                                                                                                                                                                                                                           |\n| useShop                                                         | <code>() => <a href="#shop">Shop</a></code>                                                                                                                                                                                                                                                                                                                                      | Returns the `Shop` where the checkout is taking place.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n| useStorage                                                      | <code>() => <a href="#storage">Storage</a></code>                                                                                                                                                                                                                                                                                                                                | Returns the key-value `Storage` interface for the extension point.                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n| useTarget                                                       | <code>() => <a href="#PresentmentCartLine">PresentmentCartLine</a></code>                                                                                                                                                                                                                                                                                                        | Returns the presentment cart line that the extension is attached to. Applicable only to the `Checkout::CartLineDetails::RenderAfter` extension point.                                                                                                                                                                                                                                                                                                                                                                                         |\n| useTimezone                                                     | <code>() => string </code>                                                                                                                                                                                                                                                                                                                                                       | Returns the timezone of the checkout, and automatically re-renders your component if the timezone changes.                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n| useTranslate                                                    | <code>() => <a href="#i18ntranslate">I18nTranslate</a></code>                                                                                                                                                                                                                                                                                                                    | Returns the `I18nTranslate` interface used to translate strings.                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n| useDiscountCodes                                                | <code>() => <a href="#cartdiscountcode">CartDiscountCode</a>[]</code>                                                                                                                                                                                                                                                                                                            | Returns the current discount codes applied to the cart, and automatically re-renders your component if discount codes are added or removed.                                                                                                                                                                                                                                                                                                                                                                                                   |\n| useDiscountAllocations                                          | <code>() => <a href="#cartdiscountallocation">CartDiscountAllocation</a>[]</code>                                                                                                                                                                                                                                                                                                | Returns the current discount allocations applied to the cart, and automatically re-renders your component if discount allocations changed.                                                                                                                                                                                                                                                                                                                                                                                                    |\n| useApplyDiscountCodeChange                                      | <code>(change: <a href="#discountcodechange">DiscountCodeChange</a>) => Promise<<wbr><a href="#discountcodechangeresult">DiscountCodeChangeResult</a><wbr>></code>                                                                                                                                                                                                               | Returns a function to add or remove discount codes.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| useAppliedGiftCards                                             | <code>() => <a href="#appliedgiftcard">AppliedGiftCard</a>[]</code>                                                                                                                                                                                                                                                                                                              | Returns the current gift cards applied to the cart, and automatically re-renders your component if gift cards are added or removed.                                                                                                                                                                                                                                                                                                                                                                                                           |\n| useApplyGiftCardChange                                          | <code>(change: <a href="#giftcardchange">GiftCardChange</a>) => Promise<<wbr><a href="#giftcardchangeresult">GiftCardChangeResult</a><wbr>></code>                                                                                                                                                                                                                               | Returns a function to add or remove gift cards.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| useSessionToken                                                 | <code>() => <a href="#sessiontoken">SessionToken</a></code>                                                                                                                                                                                                                                                                                                                      | Returns a \'sessionToken\' object, which contains a get() method that can be used to obtain a checkout extension session token.                                                                                                                                                                                                                                                                                                                                                                                                                 |\n',
    },
  ],
};

export default data;
