[
  {
    "name": "Action API",
    "description": "The Action API allows an action extension to modally present its corresponding modal target.",
    "isVisualComponent": false,
    "type": "APIs",
    "definitions": [
      {
        "title": "ActionApi",
        "description": "",
        "type": "ActionApiContent",
        "typeDefinitions": {
          "ActionApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/action-api/action-api.ts",
            "name": "ActionApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/action-api/action-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "presentModal",
                "value": "() => void",
                "description": "Presents the `action-overlay.render` extension target on top of present view.\n\nFor example: if we are calling presentModal() from pos.purchase.post.action.menu-item.render, it should present pos.purchase.post.action.render."
              }
            ],
            "value": "export interface ActionApiContent {\n  /** Presents the `action-overlay.render` extension target on top of present view.\n   *\n   * For example: if we are calling presentModal() from pos.purchase.post.action.menu-item.render,\n   * it should present pos.purchase.post.action.render.\n   */\n  presentModal(): void;\n}"
          }
        }
      }
    ],
    "category": "APIs",
    "related": [],
    "requires": "pos.home.tile.render",
    "examples": {
      "description": "Examples of using the Action API.",
      "examples": [
        {
          "codeblock": {
            "title": "Present a modal from post purchase.",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  ActionItem,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst PostPurchaseActionItem = () =&gt; {\n  const api = useApi&lt;'pos.purchase.post.action.menu-item.render'&gt;();\n\n  return (\n    &lt;ActionItem\n      onPress={() =&gt; api.action.presentModal()}\n      enabled\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.purchase.post.action.menu-item.render',\n  () =&gt; &lt;PostPurchaseActionItem /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {ActionItem, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.purchase.post.action.menu-item.render',\n  (root, api) =&gt; {\n    const actionItem = root.createComponent(ActionItem, {\n      onPress: () =&gt; api.action.presentModal(),\n      enabled: true,\n    });\n\n    root.append(actionItem);\n  },\n);\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Present a modal from smart grid.",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile\n      title='My App'\n      onPress={() =&gt; api.action.presentModal()}\n      enabled\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'Action API',\n    onPress: () =&gt; api.action.presentModal(),\n    enabled: true,\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "Cart API",
    "description": "The Cart API enables UI Extensions to manage and interact with POS cart contents, such as discounts, line items, and customer details. It provides a comprehensive set of functions for adding and removing items, alongside a subscribable object that keeps the UI Extension updated with real-time changes to the cart.",
    "isVisualComponent": false,
    "type": "APIs",
    "definitions": [
      {
        "title": "CartApi",
        "description": "",
        "type": "CartApiContent",
        "typeDefinitions": {
          "CartApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
            "importMap": {
              "RemoteSubscribable": "../../node_modules/@remote-ui/async-subscription/build/ts/index.d.ts",
              "Address": "src/surfaces/point-of-sale/api/types/cart.ts",
              "Cart": "src/surfaces/point-of-sale/api/types/cart.ts",
              "Customer": "src/surfaces/point-of-sale/api/types/cart.ts",
              "CustomSale": "src/surfaces/point-of-sale/api/types/cart.ts",
              "SetLineItemDiscountInput": "src/surfaces/point-of-sale/api/types/cart.ts",
              "SetLineItemPropertiesInput": "src/surfaces/point-of-sale/api/types/cart.ts"
            },
            "name": "CartApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "addAddress",
                "value": "(address: Address) => Promise<void>",
                "description": "Add an address to the customer (Customer must be present)"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "addCartCodeDiscount",
                "value": "(code: string) => Promise<void>",
                "description": "Add a code discount to the cart"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "addCartProperties",
                "value": "(properties: Record<string, string>) => Promise<void>",
                "description": "Adds custom properties to the cart"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "addCustomSale",
                "value": "(customSale: CustomSale) => Promise<void>",
                "description": "Add a custom sale to the cart"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "addLineItem",
                "value": "(variantId: number, quantity: number) => Promise<void>",
                "description": "Add a line item by variant ID to the cart"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "addLineItemProperties",
                "value": "(uuid: string, properties: Record<string, string>) => Promise<void>",
                "description": "Adds custom properties to the specified line item"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "applyCartDiscount",
                "value": "(type: CartDiscountType, title: string, amount?: string) => Promise<void>",
                "description": "Apply a cart level discount"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "bulkAddLineItemProperties",
                "value": "(lineItemProperties: SetLineItemPropertiesInput[]) => Promise<void>",
                "description": "Adds custom properties to multiple line items at the same time."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "bulkSetLineItemDiscounts",
                "value": "(lineItemDiscounts: SetLineItemDiscountInput[]) => Promise<void>",
                "description": "Set line item discounts to multiple line items at the same time."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "clearCart",
                "value": "() => Promise<void>",
                "description": "Clear the cart"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "deleteAddress",
                "value": "(addressId: number) => Promise<void>",
                "description": "Delete an address from the customer (Customer must be present)"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "removeAllDiscounts",
                "value": "(disableAutomaticDiscounts: boolean) => Promise<void>",
                "description": "Remove all cart and line item discounts"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "removeCartDiscount",
                "value": "() => Promise<void>",
                "description": "Remove the cart discount"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "removeCartProperties",
                "value": "(keys: string[]) => Promise<void>",
                "description": "Removes the specified cart properties"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "removeCustomer",
                "value": "() => Promise<void>",
                "description": "Remove the current customer from the cart"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "removeLineItem",
                "value": "(uuid: string) => Promise<void>",
                "description": "Remove the line item at this uuid from the cart"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "removeLineItemDiscount",
                "value": "(uuid: string) => Promise<void>",
                "description": "Remove all discounts from a line item"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "removeLineItemProperties",
                "value": "(uuid: string, keys: string[]) => Promise<void>",
                "description": "Removes the specified line item properties"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "setAttributedStaff",
                "value": "(staffId: number) => Promise<void>",
                "description": "Sets an attributed staff to all line items in the cart."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "setAttributedStaffToLineItem",
                "value": "(staffId: number, lineItemUuid: string) => Promise<void>",
                "description": "Sets an attributed staff to a specific line items in the cart."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "setCustomer",
                "value": "(customer: Customer) => Promise<void>",
                "description": "Set the customer in the cart"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "setLineItemDiscount",
                "value": "(uuid: string, type: LineItemDiscountType, title: string, amount: string) => Promise<void>",
                "description": "Add a discount on a line item to the cart"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "subscribable",
                "value": "RemoteSubscribable<Cart>",
                "description": "Provides a subscription to POS cart changes. Provides an initial value and a callback to subscribe to value changes. Currently supports only one subscription. You can utilize `makeStatefulSubscribable` on a `RemoteSubscribable` to implement multiple subscriptions. Using `makeStatefulSubscribable` or the corresponding hooks counts as a subscription."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "updateDefaultAddress",
                "value": "(addressId: number) => Promise<void>",
                "description": "Update the default address for the customer (Customer must be present)"
              }
            ],
            "value": "export interface CartApiContent {\n  /** Provides a subscription to POS cart changes.\n   * Provides an initial value and a callback to subscribe to value changes. Currently supports only one subscription.\n   * You can utilize `makeStatefulSubscribable` on a `RemoteSubscribable` to implement multiple subscriptions.\n   * Using `makeStatefulSubscribable` or the corresponding hooks counts as a subscription.\n   */\n  subscribable: RemoteSubscribable<Cart>;\n\n  /** Apply a cart level discount\n   * @param type the type of discount applied (example: 'Percentage')\n   * @param title the title attributed with the discount\n   * @param amount the percentage or fixed monetary amount deducted with the discount. Pass in `undefined` if using discount codes.\n   */\n  applyCartDiscount(\n    type: CartDiscountType,\n    title: string,\n    amount?: string,\n  ): Promise<void>;\n\n  /** Add a code discount to the cart\n   * @param code the code for the discount to add to the cart\n   */\n  addCartCodeDiscount(code: string): Promise<void>;\n\n  /** Remove the cart discount */\n  removeCartDiscount(): Promise<void>;\n\n  /** Remove all cart and line item discounts\n   * @param disableAutomaticDiscounts Whether or not automatic discounts should be enabled after removing the discounts.\n   */\n  removeAllDiscounts(disableAutomaticDiscounts: boolean): Promise<void>;\n\n  /** Clear the cart */\n  clearCart(): Promise<void>;\n\n  /** Set the customer in the cart\n   * @param customer the customer object to add to the cart\n   */\n  setCustomer(customer: Customer): Promise<void>;\n\n  /** Remove the current customer from the cart */\n  removeCustomer(): Promise<void>;\n\n  /** Add a custom sale to the cart\n   * @param customSale the custom sale object to add to the cart\n   */\n  addCustomSale(customSale: CustomSale): Promise<void>;\n\n  /** Add a line item by variant ID to the cart\n   * @param variantId the product variant's numeric ID to add to the cart\n   * @param quantity the number of this variant to add to the cart\n   */\n  addLineItem(variantId: number, quantity: number): Promise<void>;\n\n  /** Remove the line item at this uuid from the cart\n   * @param uuid the uuid of the line item that should be removed\n   */\n  removeLineItem(uuid: string): Promise<void>;\n\n  /** Adds custom properties to the cart\n   * @param properties the custom key to value object to attribute to the cart\n   */\n  addCartProperties(properties: Record<string, string>): Promise<void>;\n\n  /** Removes the specified cart properties\n   * @param keys the collection of keys to be removed from the cart properties\n   */\n  removeCartProperties(keys: string[]): Promise<void>;\n\n  /** Adds custom properties to the specified line item\n   * @param uuid the uuid of the line item to which the properties should be stringd\n   * @param properties the custom key to value object to attribute to the line item\n   */\n  addLineItemProperties(\n    uuid: string,\n    properties: Record<string, string>,\n  ): Promise<void>;\n\n  /** Adds custom properties to multiple line items at the same time.\n   * @param lineItemProperties the collection of custom line item properties to apply to their respective line items.\n   */\n  bulkAddLineItemProperties(\n    lineItemProperties: SetLineItemPropertiesInput[],\n  ): Promise<void>;\n\n  /** Removes the specified line item properties\n   * @param uuid the uuid of the line item to which the properties should be removed\n   * @param keys the collection of keys to be removed from the line item properties\n   */\n  removeLineItemProperties(uuid: string, keys: string[]): Promise<void>;\n\n  /** Add a discount on a line item to the cart\n   * @param uuid the uuid of the line item that should receive a discount\n   * @param type the type of discount applied (example: 'Percentage')\n   * @param title the title attributed with the discount\n   * @param amount the percentage or fixed monetary amount deducted with the discout\n   */\n  setLineItemDiscount(\n    uuid: string,\n    type: LineItemDiscountType,\n    title: string,\n    amount: string,\n  ): Promise<void>;\n\n  /** Set line item discounts to multiple line items at the same time.\n   * @param lineItemDiscounts a map of discounts to add. They key is the uuid of the line item you want to add the discount to. The value is the discount input.\n   */\n  bulkSetLineItemDiscounts(\n    lineItemDiscounts: SetLineItemDiscountInput[],\n  ): Promise<void>;\n\n  /** Sets an attributed staff to all line items in the cart.\n   * @param staffId the ID of the staff. Providing undefined will clear the attributed staff from all line items.\n   */\n  setAttributedStaff(staffId: number | undefined): Promise<void>;\n\n  /** Sets an attributed staff to a specific line items in the cart.\n   * @param staffId the ID of the staff. Providing undefined will clear the attributed staff on the line item.\n   * @param lineItemUuid the UUID of the line item.\n   */\n  setAttributedStaffToLineItem(\n    staffId: number | undefined,\n    lineItemUuid: string,\n  ): Promise<void>;\n\n  /** Remove all discounts from a line item\n   * @param uuid the uuid of the line item whose discounts should be removed\n   */\n  removeLineItemDiscount(uuid: string): Promise<void>;\n\n  /** Add an address to the customer (Customer must be present)\n   * @param address the address object to add to the customer in cart\n   */\n  addAddress(address: Address): Promise<void>;\n\n  /**\n   * Delete an address from the customer (Customer must be present)\n   * @param addressId the address ID to delete\n   */\n  deleteAddress(addressId: number): Promise<void>;\n\n  /** Update the default address for the customer (Customer must be present)\n   * @param addressId the address ID to set as the default address\n   */\n  updateDefaultAddress(addressId: number): Promise<void>;\n}"
          },
          "Address": {
            "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
            "importMap": {
              "CountryCode": "src/surfaces/point-of-sale/api/types/country-code.ts"
            },
            "name": "Address",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "address1",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "address2",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "city",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "company",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "country",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "countryCode",
                "value": "CountryCode",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "firstName",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "lastName",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "phone",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "province",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "provinceCode",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "zip",
                "value": "string",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "export interface Address {\n  address1?: string;\n  address2?: string;\n  city?: string;\n  company?: string;\n  firstName?: string;\n  lastName?: string;\n  phone?: string;\n  province?: string;\n  country?: string;\n  zip?: string;\n  name?: string;\n  provinceCode?: string;\n  countryCode?: CountryCode;\n}"
          },
          "CountryCode": {
            "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
            "syntaxKind": "EnumDeclaration",
            "name": "CountryCode",
            "value": "export enum CountryCode {\n  AF = 'AF',\n  AX = 'AX',\n  AL = 'AL',\n  DZ = 'DZ',\n  AD = 'AD',\n  AO = 'AO',\n  AI = 'AI',\n  AG = 'AG',\n  AR = 'AR',\n  AM = 'AM',\n  AW = 'AW',\n  AC = 'AC',\n  AU = 'AU',\n  AT = 'AT',\n  AZ = 'AZ',\n  BS = 'BS',\n  BH = 'BH',\n  BD = 'BD',\n  BB = 'BB',\n  BY = 'BY',\n  BE = 'BE',\n  BZ = 'BZ',\n  BJ = 'BJ',\n  BM = 'BM',\n  BT = 'BT',\n  BO = 'BO',\n  BA = 'BA',\n  BW = 'BW',\n  BV = 'BV',\n  BR = 'BR',\n  IO = 'IO',\n  BN = 'BN',\n  BG = 'BG',\n  BF = 'BF',\n  BI = 'BI',\n  KH = 'KH',\n  CA = 'CA',\n  CV = 'CV',\n  BQ = 'BQ',\n  KY = 'KY',\n  CF = 'CF',\n  TD = 'TD',\n  CL = 'CL',\n  CN = 'CN',\n  CX = 'CX',\n  CC = 'CC',\n  CO = 'CO',\n  KM = 'KM',\n  CG = 'CG',\n  CD = 'CD',\n  CK = 'CK',\n  CR = 'CR',\n  HR = 'HR',\n  CU = 'CU',\n  CW = 'CW',\n  CY = 'CY',\n  CZ = 'CZ',\n  CI = 'CI',\n  DK = 'DK',\n  DJ = 'DJ',\n  DM = 'DM',\n  DO = 'DO',\n  EC = 'EC',\n  EG = 'EG',\n  SV = 'SV',\n  GQ = 'GQ',\n  ER = 'ER',\n  EE = 'EE',\n  SZ = 'SZ',\n  ET = 'ET',\n  FK = 'FK',\n  FO = 'FO',\n  FJ = 'FJ',\n  FI = 'FI',\n  FR = 'FR',\n  GF = 'GF',\n  PF = 'PF',\n  TF = 'TF',\n  GA = 'GA',\n  GM = 'GM',\n  GE = 'GE',\n  DE = 'DE',\n  GH = 'GH',\n  GI = 'GI',\n  GR = 'GR',\n  GL = 'GL',\n  GD = 'GD',\n  GP = 'GP',\n  GT = 'GT',\n  GG = 'GG',\n  GN = 'GN',\n  GW = 'GW',\n  GY = 'GY',\n  HT = 'HT',\n  HM = 'HM',\n  VA = 'VA',\n  HN = 'HN',\n  HK = 'HK',\n  HU = 'HU',\n  IS = 'IS',\n  IN = 'IN',\n  ID = 'ID',\n  IR = 'IR',\n  IQ = 'IQ',\n  IE = 'IE',\n  IM = 'IM',\n  IL = 'IL',\n  IT = 'IT',\n  JM = 'JM',\n  JP = 'JP',\n  JE = 'JE',\n  JO = 'JO',\n  KZ = 'KZ',\n  KE = 'KE',\n  KI = 'KI',\n  KP = 'KP',\n  XK = 'XK',\n  KW = 'KW',\n  KG = 'KG',\n  LA = 'LA',\n  LV = 'LV',\n  LB = 'LB',\n  LS = 'LS',\n  LR = 'LR',\n  LY = 'LY',\n  LI = 'LI',\n  LT = 'LT',\n  LU = 'LU',\n  MO = 'MO',\n  MG = 'MG',\n  MW = 'MW',\n  MY = 'MY',\n  MV = 'MV',\n  ML = 'ML',\n  MT = 'MT',\n  MQ = 'MQ',\n  MR = 'MR',\n  MU = 'MU',\n  YT = 'YT',\n  MX = 'MX',\n  MD = 'MD',\n  MC = 'MC',\n  MN = 'MN',\n  ME = 'ME',\n  MS = 'MS',\n  MA = 'MA',\n  MZ = 'MZ',\n  MM = 'MM',\n  NA = 'NA',\n  NR = 'NR',\n  NP = 'NP',\n  NL = 'NL',\n  AN = 'AN',\n  NC = 'NC',\n  NZ = 'NZ',\n  NI = 'NI',\n  NE = 'NE',\n  NG = 'NG',\n  NU = 'NU',\n  NF = 'NF',\n  MK = 'MK',\n  NO = 'NO',\n  OM = 'OM',\n  PK = 'PK',\n  PS = 'PS',\n  PA = 'PA',\n  PG = 'PG',\n  PY = 'PY',\n  PE = 'PE',\n  PH = 'PH',\n  PN = 'PN',\n  PL = 'PL',\n  PT = 'PT',\n  QA = 'QA',\n  CM = 'CM',\n  RE = 'RE',\n  RO = 'RO',\n  RU = 'RU',\n  RW = 'RW',\n  BL = 'BL',\n  SH = 'SH',\n  KN = 'KN',\n  LC = 'LC',\n  MF = 'MF',\n  PM = 'PM',\n  WS = 'WS',\n  SM = 'SM',\n  ST = 'ST',\n  SA = 'SA',\n  SN = 'SN',\n  RS = 'RS',\n  SC = 'SC',\n  SL = 'SL',\n  SG = 'SG',\n  SX = 'SX',\n  SK = 'SK',\n  SI = 'SI',\n  SB = 'SB',\n  SO = 'SO',\n  ZA = 'ZA',\n  GS = 'GS',\n  KR = 'KR',\n  SS = 'SS',\n  ES = 'ES',\n  LK = 'LK',\n  VC = 'VC',\n  SD = 'SD',\n  SR = 'SR',\n  SJ = 'SJ',\n  SE = 'SE',\n  CH = 'CH',\n  SY = 'SY',\n  TW = 'TW',\n  TJ = 'TJ',\n  TZ = 'TZ',\n  TH = 'TH',\n  TL = 'TL',\n  TG = 'TG',\n  TK = 'TK',\n  TO = 'TO',\n  TT = 'TT',\n  TA = 'TA',\n  TN = 'TN',\n  TR = 'TR',\n  TM = 'TM',\n  TC = 'TC',\n  TV = 'TV',\n  UG = 'UG',\n  UA = 'UA',\n  AE = 'AE',\n  GB = 'GB',\n  US = 'US',\n  UM = 'UM',\n  UY = 'UY',\n  UZ = 'UZ',\n  VU = 'VU',\n  VE = 'VE',\n  VN = 'VN',\n  VG = 'VG',\n  WF = 'WF',\n  EH = 'EH',\n  YE = 'YE',\n  ZM = 'ZM',\n  ZW = 'ZW',\n  ZZ = 'ZZ',\n}",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AF",
                "value": "AF"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AX",
                "value": "AX"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AL",
                "value": "AL"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "DZ",
                "value": "DZ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AD",
                "value": "AD"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AO",
                "value": "AO"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AI",
                "value": "AI"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AG",
                "value": "AG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AR",
                "value": "AR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AM",
                "value": "AM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AW",
                "value": "AW"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AC",
                "value": "AC"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AU",
                "value": "AU"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AT",
                "value": "AT"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AZ",
                "value": "AZ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BS",
                "value": "BS"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BH",
                "value": "BH"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BD",
                "value": "BD"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BB",
                "value": "BB"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BY",
                "value": "BY"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BE",
                "value": "BE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BZ",
                "value": "BZ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BJ",
                "value": "BJ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BM",
                "value": "BM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BT",
                "value": "BT"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BO",
                "value": "BO"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BA",
                "value": "BA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BW",
                "value": "BW"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BV",
                "value": "BV"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BR",
                "value": "BR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "IO",
                "value": "IO"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BN",
                "value": "BN"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BG",
                "value": "BG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BF",
                "value": "BF"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BI",
                "value": "BI"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "KH",
                "value": "KH"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CA",
                "value": "CA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CV",
                "value": "CV"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BQ",
                "value": "BQ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "KY",
                "value": "KY"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CF",
                "value": "CF"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TD",
                "value": "TD"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CL",
                "value": "CL"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CN",
                "value": "CN"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CX",
                "value": "CX"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CC",
                "value": "CC"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CO",
                "value": "CO"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "KM",
                "value": "KM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CG",
                "value": "CG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CD",
                "value": "CD"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CK",
                "value": "CK"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CR",
                "value": "CR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "HR",
                "value": "HR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CU",
                "value": "CU"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CW",
                "value": "CW"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CY",
                "value": "CY"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CZ",
                "value": "CZ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CI",
                "value": "CI"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "DK",
                "value": "DK"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "DJ",
                "value": "DJ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "DM",
                "value": "DM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "DO",
                "value": "DO"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "EC",
                "value": "EC"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "EG",
                "value": "EG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SV",
                "value": "SV"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GQ",
                "value": "GQ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "ER",
                "value": "ER"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "EE",
                "value": "EE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SZ",
                "value": "SZ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "ET",
                "value": "ET"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "FK",
                "value": "FK"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "FO",
                "value": "FO"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "FJ",
                "value": "FJ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "FI",
                "value": "FI"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "FR",
                "value": "FR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GF",
                "value": "GF"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "PF",
                "value": "PF"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TF",
                "value": "TF"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GA",
                "value": "GA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GM",
                "value": "GM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GE",
                "value": "GE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "DE",
                "value": "DE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GH",
                "value": "GH"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GI",
                "value": "GI"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GR",
                "value": "GR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GL",
                "value": "GL"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GD",
                "value": "GD"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GP",
                "value": "GP"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GT",
                "value": "GT"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GG",
                "value": "GG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GN",
                "value": "GN"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GW",
                "value": "GW"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GY",
                "value": "GY"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "HT",
                "value": "HT"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "HM",
                "value": "HM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "VA",
                "value": "VA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "HN",
                "value": "HN"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "HK",
                "value": "HK"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "HU",
                "value": "HU"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "IS",
                "value": "IS"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "IN",
                "value": "IN"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "ID",
                "value": "ID"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "IR",
                "value": "IR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "IQ",
                "value": "IQ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "IE",
                "value": "IE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "IM",
                "value": "IM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "IL",
                "value": "IL"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "IT",
                "value": "IT"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "JM",
                "value": "JM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "JP",
                "value": "JP"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "JE",
                "value": "JE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "JO",
                "value": "JO"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "KZ",
                "value": "KZ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "KE",
                "value": "KE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "KI",
                "value": "KI"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "KP",
                "value": "KP"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "XK",
                "value": "XK"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "KW",
                "value": "KW"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "KG",
                "value": "KG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "LA",
                "value": "LA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "LV",
                "value": "LV"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "LB",
                "value": "LB"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "LS",
                "value": "LS"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "LR",
                "value": "LR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "LY",
                "value": "LY"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "LI",
                "value": "LI"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "LT",
                "value": "LT"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "LU",
                "value": "LU"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MO",
                "value": "MO"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MG",
                "value": "MG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MW",
                "value": "MW"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MY",
                "value": "MY"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MV",
                "value": "MV"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "ML",
                "value": "ML"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MT",
                "value": "MT"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MQ",
                "value": "MQ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MR",
                "value": "MR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MU",
                "value": "MU"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "YT",
                "value": "YT"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MX",
                "value": "MX"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MD",
                "value": "MD"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MC",
                "value": "MC"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MN",
                "value": "MN"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "ME",
                "value": "ME"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MS",
                "value": "MS"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MA",
                "value": "MA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MZ",
                "value": "MZ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MM",
                "value": "MM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "NA",
                "value": "NA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "NR",
                "value": "NR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "NP",
                "value": "NP"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "NL",
                "value": "NL"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AN",
                "value": "AN"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "NC",
                "value": "NC"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "NZ",
                "value": "NZ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "NI",
                "value": "NI"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "NE",
                "value": "NE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "NG",
                "value": "NG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "NU",
                "value": "NU"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "NF",
                "value": "NF"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MK",
                "value": "MK"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "NO",
                "value": "NO"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "OM",
                "value": "OM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "PK",
                "value": "PK"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "PS",
                "value": "PS"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "PA",
                "value": "PA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "PG",
                "value": "PG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "PY",
                "value": "PY"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "PE",
                "value": "PE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "PH",
                "value": "PH"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "PN",
                "value": "PN"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "PL",
                "value": "PL"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "PT",
                "value": "PT"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "QA",
                "value": "QA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CM",
                "value": "CM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "RE",
                "value": "RE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "RO",
                "value": "RO"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "RU",
                "value": "RU"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "RW",
                "value": "RW"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "BL",
                "value": "BL"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SH",
                "value": "SH"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "KN",
                "value": "KN"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "LC",
                "value": "LC"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "MF",
                "value": "MF"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "PM",
                "value": "PM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "WS",
                "value": "WS"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SM",
                "value": "SM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "ST",
                "value": "ST"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SA",
                "value": "SA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SN",
                "value": "SN"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "RS",
                "value": "RS"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SC",
                "value": "SC"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SL",
                "value": "SL"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SG",
                "value": "SG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SX",
                "value": "SX"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SK",
                "value": "SK"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SI",
                "value": "SI"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SB",
                "value": "SB"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SO",
                "value": "SO"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "ZA",
                "value": "ZA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GS",
                "value": "GS"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "KR",
                "value": "KR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SS",
                "value": "SS"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "ES",
                "value": "ES"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "LK",
                "value": "LK"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "VC",
                "value": "VC"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SD",
                "value": "SD"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SR",
                "value": "SR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SJ",
                "value": "SJ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SE",
                "value": "SE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "CH",
                "value": "CH"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "SY",
                "value": "SY"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TW",
                "value": "TW"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TJ",
                "value": "TJ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TZ",
                "value": "TZ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TH",
                "value": "TH"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TL",
                "value": "TL"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TG",
                "value": "TG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TK",
                "value": "TK"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TO",
                "value": "TO"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TT",
                "value": "TT"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TA",
                "value": "TA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TN",
                "value": "TN"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TR",
                "value": "TR"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TM",
                "value": "TM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TC",
                "value": "TC"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "TV",
                "value": "TV"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "UG",
                "value": "UG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "UA",
                "value": "UA"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "AE",
                "value": "AE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "GB",
                "value": "GB"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "US",
                "value": "US"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "UM",
                "value": "UM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "UY",
                "value": "UY"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "UZ",
                "value": "UZ"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "VU",
                "value": "VU"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "VE",
                "value": "VE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "VN",
                "value": "VN"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "VG",
                "value": "VG"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "WF",
                "value": "WF"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "EH",
                "value": "EH"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "YE",
                "value": "YE"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "ZM",
                "value": "ZM"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "ZW",
                "value": "ZW"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/country-code.ts",
                "name": "ZZ",
                "value": "ZZ"
              }
            ]
          },
          "CustomSale": {
            "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
            "importMap": {
              "CountryCode": "src/surfaces/point-of-sale/api/types/country-code.ts"
            },
            "name": "CustomSale",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "price",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "taxable",
                "value": "boolean",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": ""
              }
            ],
            "value": "export interface CustomSale {\n  quantity: number;\n  title: string;\n  price: string;\n  taxable: boolean;\n}"
          },
          "CartDiscountType": {
            "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
            "importMap": {
              "RemoteSubscribable": "../../node_modules/@remote-ui/async-subscription/build/ts/index.d.ts",
              "Address": "src/surfaces/point-of-sale/api/types/cart.ts",
              "Cart": "src/surfaces/point-of-sale/api/types/cart.ts",
              "Customer": "src/surfaces/point-of-sale/api/types/cart.ts",
              "CustomSale": "src/surfaces/point-of-sale/api/types/cart.ts",
              "SetLineItemDiscountInput": "src/surfaces/point-of-sale/api/types/cart.ts",
              "SetLineItemPropertiesInput": "src/surfaces/point-of-sale/api/types/cart.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "CartDiscountType",
            "value": "'Percentage' | 'FixedAmount' | 'Code'",
            "description": ""
          },
          "SetLineItemPropertiesInput": {
            "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
            "importMap": {
              "CountryCode": "src/surfaces/point-of-sale/api/types/country-code.ts"
            },
            "name": "SetLineItemPropertiesInput",
            "description": "Parameters for adding custom properties to a line item.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "lineItemUuid",
                "value": "string",
                "description": "The uuid belonging to the line item which should receive the custom properties."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "properties",
                "value": "Record<string, string>",
                "description": "The custom properties to apply to the line item."
              }
            ],
            "value": "export interface SetLineItemPropertiesInput {\n  /**\n   * The uuid belonging to the line item which should receive the custom properties.\n   */\n  lineItemUuid: string;\n  /**\n   * The custom properties to apply to the line item.\n   */\n  properties: Record<string, string>;\n}"
          },
          "SetLineItemDiscountInput": {
            "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
            "importMap": {
              "CountryCode": "src/surfaces/point-of-sale/api/types/country-code.ts"
            },
            "name": "SetLineItemDiscountInput",
            "description": "Parameters for adding a line item discount.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "lineItemDiscount",
                "value": "LineItemDiscount",
                "description": "The discount to be applied to the line item."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "lineItemUuid",
                "value": "string",
                "description": "The uuid belonging to the line item which should receive the discount."
              }
            ],
            "value": "export interface SetLineItemDiscountInput {\n  /**\n   * The uuid belonging to the line item which should receive the discount.\n   */\n  lineItemUuid: string;\n  /**\n   * The discount to be applied to the line item.\n   */\n  lineItemDiscount: LineItemDiscount;\n}"
          },
          "LineItemDiscount": {
            "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
            "importMap": {
              "CountryCode": "src/surfaces/point-of-sale/api/types/country-code.ts"
            },
            "name": "LineItemDiscount",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "string",
                "description": "The percentage or fixed amount for the discount."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the line item discount."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "'Percentage' | 'FixedAmount'",
                "description": "The discount type."
              }
            ],
            "value": "export interface LineItemDiscount {\n  /**\n   * The title of the line item discount.\n   */\n  title: string;\n  /**\n   * The discount type.\n   */\n  type: 'Percentage' | 'FixedAmount';\n  /**\n   * The percentage or fixed amount for the discount.\n   */\n  amount: string;\n}"
          },
          "Customer": {
            "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
            "importMap": {
              "CountryCode": "src/surfaces/point-of-sale/api/types/country-code.ts"
            },
            "name": "Customer",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "email",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "firstName",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "number",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "lastName",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "note",
                "value": "string",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "export interface Customer {\n  id: number;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  note?: string;\n}"
          },
          "LineItemDiscountType": {
            "filePath": "src/surfaces/point-of-sale/api/cart-api/cart-api.ts",
            "importMap": {
              "RemoteSubscribable": "../../node_modules/@remote-ui/async-subscription/build/ts/index.d.ts",
              "Address": "src/surfaces/point-of-sale/api/types/cart.ts",
              "Cart": "src/surfaces/point-of-sale/api/types/cart.ts",
              "Customer": "src/surfaces/point-of-sale/api/types/cart.ts",
              "CustomSale": "src/surfaces/point-of-sale/api/types/cart.ts",
              "SetLineItemDiscountInput": "src/surfaces/point-of-sale/api/types/cart.ts",
              "SetLineItemPropertiesInput": "src/surfaces/point-of-sale/api/types/cart.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "LineItemDiscountType",
            "value": "'Percentage' | 'FixedAmount'",
            "description": ""
          },
          "Cart": {
            "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
            "importMap": {
              "CountryCode": "src/surfaces/point-of-sale/api/types/country-code.ts"
            },
            "name": "Cart",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "cartDiscount",
                "value": "Discount",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "cartDiscounts",
                "value": "Discount[]",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "customer",
                "value": "Customer",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "grandTotal",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "lineItems",
                "value": "LineItem[]",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "note",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "properties",
                "value": "Record<string, string>",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtotal",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "taxTotal",
                "value": "string",
                "description": ""
              }
            ],
            "value": "export interface Cart {\n  subtotal: string;\n  taxTotal: string;\n  grandTotal: string;\n  note?: string;\n  cartDiscount?: Discount;\n  cartDiscounts: Discount[];\n  customer?: Customer;\n  lineItems: LineItem[];\n  properties: Record<string, string>;\n}"
          },
          "Discount": {
            "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
            "importMap": {
              "CountryCode": "src/surfaces/point-of-sale/api/types/country-code.ts"
            },
            "name": "Discount",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "amount",
                "value": "number",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "discountDescription",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "string",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "export interface Discount {\n  amount: number;\n  discountDescription?: string;\n  type?: string;\n}"
          },
          "LineItem": {
            "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
            "importMap": {
              "CountryCode": "src/surfaces/point-of-sale/api/types/country-code.ts"
            },
            "name": "LineItem",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "discounts",
                "value": "Discount[]",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "isGiftCard",
                "value": "boolean",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "price",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "productId",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "properties",
                "value": "{ [key: string]: string; }",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "quantity",
                "value": "number",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "sku",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "taxable",
                "value": "boolean",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "uuid",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "variantId",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/cart.ts",
                "syntaxKind": "PropertySignature",
                "name": "vendor",
                "value": "string",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "export interface LineItem {\n  uuid: string;\n  price?: number;\n  quantity: number;\n  title?: string;\n  variantId?: number;\n  productId?: number;\n  discounts: Discount[];\n  taxable: boolean;\n  sku?: string;\n  vendor?: string;\n  properties: {[key: string]: string};\n  isGiftCard: boolean;\n}"
          }
        }
      }
    ],
    "category": "APIs",
    "related": [],
    "requires": "pos.home.tile.render",
    "examples": {
      "description": "Examples of using the Cart API",
      "examples": [
        {
          "codeblock": {
            "title": "Subscribe to cart changes.",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile,\n  useCartSubscription\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const cart = useCartSubscription();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle={`${cart.lineItems.length} line items in cart`} \n      enabled\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Cart, Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: `${api.cart.subscribable.initial.lineItems.length} line items in cart`,\n    enabled: true,\n  });\n\n  api.cart.subscribable.subscribe((newCart: Cart) =&gt; {\n    tile.updateProps({\n      subtitle: `${newCart.lineItems.length &gt; 0} line items in cart`,\n    });\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Apply a cart level discount",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.applyCartDiscount('Percentage', 'Summer discount', '10')}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.applyCartDiscount('Percentage', 'Summer discount', '10');\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Apply a cart level discount code",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.addCartCodeDiscount('SUMMER_2024')} \n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.addCartCodeDiscount('SUMMER_2024');\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Remove all the discounts on the cart and line items",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.removeAllDiscounts(true)}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.removeAllDiscounts(true);\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Set a custom discount on a line item",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.setLineItemDiscount('aa-1234567', 'Percentage', 'Summer discount', '10')}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.setLineItemDiscount(\n        'aa-1234567',\n        'Percentage',\n        'Summer discount',\n        '10',\n      );\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Set a custom discount on multiple line items",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.bulkSetLineItemDiscounts([\n        {\n          lineItemUuid: 'aa-1234567',\n          lineItemDiscount: {\n            title: 'Summer 2024',\n            amount: '10',\n            type: 'Percentage',\n          },\n        },\n        {\n          lineItemUuid: 'bb-1234567',\n          lineItemDiscount: {\n            title: 'Shorts sale',\n            amount: '15',\n            type: 'FixedAmount',\n          },\n        },\n      ])}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.bulkSetLineItemDiscounts([\n        {\n          lineItemUuid: 'aa-1234567',\n          lineItemDiscount: {\n            title: 'Summer 2024',\n            amount: '10',\n            type: 'Percentage',\n          },\n        },\n        {\n          lineItemUuid: 'bb-1234567',\n          lineItemDiscount: {\n            title: 'Shorts sale',\n            amount: '15',\n            type: 'FixedAmount',\n          },\n        },\n      ]);\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Remove a discount on a line item",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.removeLineItemDiscount('aa-1234567')}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.removeLineItemDiscount('aa-1234567');\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Clear the entire cart",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.clearCart()}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.clearCart();\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Set the customer in the cart",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.setCustomer({\n        id: 1,\n      })}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.setCustomer({\n        id: 1,\n      });\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Remove the customer in the cart",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.removeCustomer()}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.removeCustomer();\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Add a custom sale to the cart",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.addCustomSale({\n        title: 'New product',\n        quantity: 1,\n        price: '10.00',\n        taxable: true,\n      })}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.addCustomSale({\n        title: 'New product',\n        quantity: 1,\n        price: '10.00',\n        taxable: true,\n      });\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Add a line item to the cart",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.addLineItem(12345678, 1)}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.addLineItem(12345678, 1);\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Remove a line item from the cart",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.removeLineItem('aa-1234567')}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.removeLineItem('aa-1234567');\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Add custom properties to the cart",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.addCartProperties({Engraving: 'John Doe'})}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart action',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.addCartProperties({Engraving: 'John Doe'});\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Remove custom properties from the cart",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.removeCartProperties(['Engraving'])}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.removeCartProperties(['Engraving']);\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Add custom properties to a line item",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.addLineItemProperties('aa-1234567', {Engraving: 'John Doe'})}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.addLineItemProperties('aa-1234567', {Engraving: 'John Doe'});\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Add custom properties to multiple line items",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.bulkAddLineItemProperties([\n        {lineItemUuid: 'aa-1234567', properties: {Engraving: 'John Doe'}},\n        {lineItemUuid: 'bb-001234567', properties: {Engraving: 'Jane Doe'}}\n      ])}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.bulkAddLineItemProperties([\n        {lineItemUuid: 'aa-1234567', properties: {Engraving: 'John Doe'}},\n        {lineItemUuid: 'bb-001234567', properties: {Engraving: 'Jane Doe'}},\n      ]);\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Remove custom properties from a line item",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.removeLineItemProperties('aa-1234567', ['Engraving'])}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.removeLineItemProperties('aa-1234567', ['Engraving']);\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Set an attributed staff member on the cart",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.setAttributedStaff(123456)}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.setAttributedStaff(123456);\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Set an attributed staff member on a line item",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.setAttributedStaffToLineItem(123456, 'aa-1234567')}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.setAttributedStaffToLineItem(123456, 'aa-1234567');\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Add an address to the customer in the cart",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.addAddress({\n        address1: '123456 Main Street', \n        city: 'Ottawa', \n        province: 'Ontario',\n        firstName: 'John',\n        lastName: 'Doe',\n        country: 'Canada'\n      })}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.addAddress({\n        address1: '123456 Main Street',\n        city: 'Ottawa',\n        province: 'Ontario',\n        firstName: 'John',\n        lastName: 'Doe',\n        country: 'Canada',\n      });\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Delete an address corresponding to an ID",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.deleteAddress(123456)}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.deleteAddress(123456);\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Set the default address of the customer in the cart",
            "tabs": [
              {
                "title": "React",
                "code": "\nimport React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Tile\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile \n      title='My App' \n      subtitle='Call cart function' \n      enabled \n      onPress={() =&gt; api.cart.updateDefaultAddress(123456)}\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.tile.render',\n  () =&gt; &lt;SmartGridTile /&gt;\n);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: 'Call cart function',\n    enabled: true,\n    onPress: () =&gt; {\n      api.cart.updateDefaultAddress(123456);\n    },\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "Connectivity API",
    "description": "The Connectivity API enables POS UI extensions to retrieve device connectivity information, such as whether the device has an internet connection.",
    "isVisualComponent": false,
    "type": "APIs",
    "definitions": [
      {
        "title": "ConnectivityApi",
        "description": "",
        "type": "ConnectivityApiContent",
        "typeDefinitions": {
          "ConnectivityApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/connectivity-api/connectivity-api.ts",
            "importMap": {
              "RemoteSubscribable": "../../node_modules/@remote-ui/async-subscription/build/ts/index.d.ts"
            },
            "name": "ConnectivityApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/connectivity-api/connectivity-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "subscribable",
                "value": "RemoteSubscribable<ConnectivityState>",
                "description": "Creates a subscription to changes in connectivity. Provides an initial value and a callback to subscribe to value changes."
              }
            ],
            "value": "export interface ConnectivityApiContent {\n  /**\n   * Creates a subscription to changes in connectivity.\n   * Provides an initial value and a callback to subscribe to value changes.\n   */\n  subscribable: RemoteSubscribable<ConnectivityState>;\n}"
          },
          "ConnectivityState": {
            "filePath": "src/surfaces/point-of-sale/api/connectivity-api/connectivity-api.ts",
            "importMap": {
              "RemoteSubscribable": "../../node_modules/@remote-ui/async-subscription/build/ts/index.d.ts"
            },
            "name": "ConnectivityState",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/connectivity-api/connectivity-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "internetConnected",
                "value": "ConnectivityStateSeverity",
                "description": "Whether the device is connected to the internet"
              }
            ],
            "value": "export interface ConnectivityState {\n  /**\n   * Whether the device is connected to the internet\n   */\n  internetConnected: ConnectivityStateSeverity;\n}"
          },
          "ConnectivityStateSeverity": {
            "filePath": "src/surfaces/point-of-sale/api/connectivity-api/connectivity-api.ts",
            "importMap": {
              "RemoteSubscribable": "../../node_modules/@remote-ui/async-subscription/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ConnectivityStateSeverity",
            "value": "'Connected' | 'Disconnected'",
            "description": ""
          }
        }
      }
    ],
    "category": "APIs",
    "related": [],
    "examples": {
      "description": "Examples of using the Connectivity API",
      "examples": [
        {
          "codeblock": {
            "title": "Subscribe to connectivity changes.",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\nimport {\n  Tile,\n  useConnectivitySubscription,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const connectivity = useConnectivitySubscription();\n\n  return (\n    &lt;Tile\n      title='My App'\n      enabled={connectivity.internetConnected === 'Connected'}\n    /&gt;\n  );\n};\n\nexport default reactExtension('pos.home.tile.render', () =&gt; &lt;SmartGridTile /&gt;);\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  Tile,\n  ConnectivityState,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    enabled: true,\n  });\n\n  api.Connectivity.subscribable.subscribe(\n    (newConnectivity: ConnectivityState) =&gt; {\n      tile.updateProps({\n        enabled: newConnectivity.internetConnected === 'Connected',\n      });\n    },\n  );\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "Customer API",
    "description": "The customer API provides an extension with data about the current customer.",
    "isVisualComponent": false,
    "type": "APIs",
    "requires": "pos.customer-details.action.menu-item.render",
    "definitions": [
      {
        "title": "CustomerApi",
        "description": "",
        "type": "CustomerApiContent",
        "typeDefinitions": {
          "CustomerApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/customer-api/customer-api.ts",
            "name": "CustomerApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/customer-api/customer-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "number",
                "description": "The unique identifier for the customer"
              }
            ],
            "value": "export interface CustomerApiContent {\n  /**\n   * The unique identifier for the customer\n   */\n  id: number;\n}"
          }
        }
      }
    ],
    "examples": {
      "description": "Examples of using the Customer API.",
      "examples": [
        {
          "codeblock": {
            "title": "Retrieve the ID of the customer.",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\n\nimport {\n  Text,\n  Screen,\n  ScrollView,\n  Navigator,\n  reactExtension,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.customer-details.action.render'&gt;();\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"CustomerApi\" title=\"Customer Api\"&gt;\n        &lt;ScrollView&gt;\n          &lt;Text&gt;{`Customer ID: ${api.customer.id}`}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.customer-details.action.render', () =&gt; (\n  &lt;Modal /&gt;\n));\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.customer-details.action.render', (root, api) =&gt; {\n  const navigator = root.createComponent(Navigator);\n  const screen = root.createComponent(Screen, {\n    name: 'CustomerApi',\n    title: 'Customer Api',\n  });\n  const scrollView = root.createComponent(ScrollView);\n  const text = root.createComponent(Text);\n\n  text.append(`Customer ID: ${api.customer.id}`);\n  scrollView.append(text);\n  screen.append(scrollView);\n  navigator.append(screen);\n  root.append(navigator);\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    },
    "category": "APIs",
    "related": [
      {
        "name": "pos.customer-details.action.menu-item.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-customer-details-action-menu-item-render"
      },
      {
        "name": "pos.customer-details.action.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-customer-details-action-render"
      }
    ]
  },
  {
    "name": "Device API",
    "description": "The Device API allows the UI Extension to retrieve device information including the device name and ID.",
    "isVisualComponent": false,
    "type": "APIs",
    "definitions": [
      {
        "title": "DeviceApi",
        "description": "",
        "type": "DeviceApiContent",
        "typeDefinitions": {
          "DeviceApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/device-api/device-api.ts",
            "name": "DeviceApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/device-api/device-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "getDeviceId",
                "value": "() => Promise<string>",
                "description": "The string ID of the device"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/device-api/device-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "isTablet",
                "value": "() => Promise<boolean>",
                "description": "Whether the device is a tablet"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/device-api/device-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the device"
              }
            ],
            "value": "export interface DeviceApiContent {\n  /**\n   * The name of the device\n   */\n  name: string;\n  /**\n   * The string ID of the device\n   */\n  getDeviceId(): Promise<string>;\n  /**\n   * Whether the device is a tablet\n   */\n  isTablet(): Promise<boolean>;\n}"
          }
        }
      }
    ],
    "category": "APIs",
    "related": [],
    "examples": {
      "description": "Examples of using the Device API.",
      "examples": [
        {
          "codeblock": {
            "title": "Retrieve name of the device.",
            "tabs": [
              {
                "title": "React",
                "code": "import React, { useState } from 'react';\nimport {\n  Tile,\n  useApi,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile\n      title='My App'\n      subtitle={api.device.name}\n      enabled\n    /&gt;\n  );\n};\n\nexport default reactExtension('pos.home.tile.render', () =&gt; &lt;SmartGridTile /&gt;);\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  Tile,\n  Screen,\n  Navigator,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: api.device.name,\n    enabled: true,\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Retrieve the ID of the device.",
            "tabs": [
              {
                "title": "React",
                "code": "import React, { useState } from 'react';\nimport {\n  Tile,\n  useApi,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile\n      title='My App'\n      subtitle={api.device.getDeviceId()}\n      enabled\n    /&gt;\n  );\n};\n\nexport default reactExtension('pos.home.tile.render', () =&gt; &lt;SmartGridTile /&gt;);\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  Tile,\n  Screen,\n  Navigator,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: api.device.getDeviceId(),\n    enabled: true,\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Check if device is a tablet.",
            "tabs": [
              {
                "title": "React",
                "code": "import React, { useState } from 'react';\nimport {\n  Tile,\n  useApi,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile\n      title='My App'\n      enabled={api.device.isTablet()}\n    /&gt;\n  );\n};\n\nexport default reactExtension('pos.home.tile.render', () =&gt; &lt;SmartGridTile /&gt;);\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  Tile,\n  Screen,\n  Navigator,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    enabled: api.device.isTablet(),\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "Draft Order API",
    "description": "The Draft Order API provides an extension with data about the current draft order.",
    "isVisualComponent": false,
    "type": "APIs",
    "requires": "pos.draft-order-details.action.menu-item.render",
    "definitions": [
      {
        "title": "DraftOrderApi",
        "description": "",
        "type": "DraftOrderApiContent",
        "typeDefinitions": {
          "DraftOrderApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/draft-order-api/draft-order-api.ts",
            "name": "DraftOrderApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/draft-order-api/draft-order-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "customerId",
                "value": "number",
                "description": "The unique identifier of the customer associated with the order",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/draft-order-api/draft-order-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "number",
                "description": "The unique identifier for the order"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/draft-order-api/draft-order-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the order"
              }
            ],
            "value": "export interface DraftOrderApiContent {\n  /**\n   * The unique identifier for the order\n   */\n  id: number;\n\n  /**\n   * The name of the order\n   */\n  name: string;\n\n  /**\n   * The unique identifier of the customer associated with the order\n   */\n  customerId?: number;\n}"
          }
        }
      }
    ],
    "examples": {
      "description": "Examples of using the Draft Order API.",
      "examples": [
        {
          "codeblock": {
            "title": "Retrieve the ID of the draft order.",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\n\nimport {\n  Text,\n  Screen,\n  ScrollView,\n  Navigator,\n  reactExtension,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.draft-order-details.action.render'&gt;();\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"DraftOrderDetailsAction\" title=\"Draft Order Details Action\"&gt;\n        &lt;ScrollView&gt;\n          &lt;Text&gt;{`Order ID: ${api.draftOrder.id}`}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.draft-order-details.action.render', () =&gt; (\n  &lt;Modal /&gt;\n));\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.draft-order-details.action.render',\n  (root, api) =&gt; {\n    const navigator = root.createComponent(Navigator);\n    const screen = root.createComponent(Screen, {\n      name: 'DraftOrderDetailsAction',\n      title: 'Draft Order Details Action',\n    });\n    const scrollView = root.createComponent(ScrollView);\n    const text = root.createComponent(Text);\n\n    text.append(`ID for current draft order screen: ${api.draftOrder.id}`);\n    scrollView.append(text);\n    screen.append(scrollView);\n    navigator.append(screen);\n    root.append(navigator);\n  },\n);\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    },
    "category": "APIs",
    "related": []
  },
  {
    "name": "Locale API",
    "description": "The Locale API allows the extension to retreive the merchants locale.",
    "isVisualComponent": false,
    "type": "APIs",
    "definitions": [
      {
        "title": "LocaleApi",
        "description": "",
        "type": "LocaleApiContent",
        "typeDefinitions": {
          "LocaleApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/locale-api/locale-api.ts",
            "importMap": {
              "RemoteSubscribable": "../../node_modules/@remote-ui/async-subscription/build/ts/index.d.ts"
            },
            "name": "LocaleApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/locale-api/locale-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "subscribable",
                "value": "RemoteSubscribable<string>",
                "description": "IETF-formatted locale at time of page load and a callback to subsribe to value changes. Current supports only one subscription. You can utilize `makeStatefulSubscribable` on a `RemoteSubscribable` to implement multiple subscriptions. Using `makeStatefulSubscribable` or the corresponding hooks counts as a subscription."
              }
            ],
            "value": "export interface LocaleApiContent {\n  /** IETF-formatted locale at time of page load and a callback to subsribe to value changes. Current supports only one subscription.\n   * You can utilize `makeStatefulSubscribable` on a `RemoteSubscribable` to implement multiple subscriptions.\n   * Using `makeStatefulSubscribable` or the corresponding hooks counts as a subscription.\n   */\n  subscribable: RemoteSubscribable<string>;\n}"
          }
        }
      }
    ],
    "category": "APIs",
    "related": [],
    "examples": {
      "description": "Examples of using the Locale API",
      "examples": [
        {
          "codeblock": {
            "title": "Subscribe to locale changes.",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\nimport {\n  reactExtension,\n  useLocaleSubscription,\n  useApi,\n  Tile,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const locale = useLocaleSubscription();\n\n  return (\n    &lt;Tile\n      title='My App'\n      subtitle={locale}\n      enabled\n    /&gt;\n  );\n};\n\nexport default reactExtension('pos.home.tile.render', () =&gt; &lt;SmartGridTile /&gt;);\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    subtitle: api.locale.subscribable.initial,\n    enabled: true,\n  });\n\n  api.locale.subscribable.subscribe((newLocale: string) =&gt; {\n    tile.updateProps({\n      subtitle: newLocale,\n    });\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "Navigation API",
    "description": "The Navigation API enables POS UI extension to navigate between screens.",
    "isVisualComponent": false,
    "type": "APIs",
    "definitions": [
      {
        "title": "NavigationApi",
        "description": "",
        "type": "NavigationApiContent",
        "typeDefinitions": {
          "NavigationApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/navigation-api/navigation-api.ts",
            "name": "NavigationApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/navigation-api/navigation-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "dismiss",
                "value": "() => void",
                "description": "Dismisses the modal highest on the stack"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/navigation-api/navigation-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "navigate",
                "value": "(screenName: string, params?: any) => void",
                "description": "Navigate to a route in current navigation tree. Pushes the specified screen if it isn't present in the navigation tree, goes back to a created screen otherwise."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/navigation-api/navigation-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "pop",
                "value": "() => void",
                "description": "Pops the currently shown screen"
              }
            ],
            "value": "export interface NavigationApiContent {\n  /** Navigate to a route in current navigation tree.\n   * Pushes the specified screen if it isn't present in the navigation tree, goes back to a created screen otherwise.\n   * @param screenName the name of the screen you want to navigate to.\n   * @param params the parameters you want to pass to that screen.\n   */\n  navigate(screenName: string, params?: any): void;\n\n  /** Pops the currently shown screen */\n  pop(): void;\n\n  /** Dismisses the modal highest on the stack */\n  dismiss(): void;\n}"
          }
        }
      }
    ],
    "category": "APIs",
    "related": [],
    "requires": "pos.home.modal.render",
    "examples": {
      "description": "Examples of using the Navigation API",
      "examples": [
        {
          "codeblock": {
            "title": "Navigate between two screens",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Navigator,\n  Screen,\n  Button,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"ScreenOne\" title=\"Screen One Title\"&gt;\n        &lt;Button\n          title=\"Navigate to Screen Two\"\n          onPress={() =&gt; api.navigation.navigate('ScreenTwo')}\n        /&gt;\n      &lt;/Screen&gt;\n      &lt;Screen name=\"ScreenTwo\" title=\"Screen Two Title\"&gt;\n        &lt;Button\n          title=\"Navigate to Screen One\"\n          onPress={() =&gt; api.navigation.navigate('ScreenOne')}\n        /&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  extension,\n  Button,\n  Navigator,\n  Screen,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  let navigator = root.createComponent(Navigator);\n\n  let screenOne = root.createComponent(Screen, {\n    name: 'ScreenOne',\n    title: 'Screen One Title',\n  });\n\n  let screenTwo = root.createComponent(Screen, {\n    name: 'ScreenTwo',\n    title: 'Screen Two Title',\n  });\n\n  let navigateScreenOneBtn = root.createComponent(Button, {\n    title: 'Navigate to Screen One',\n    onPress: () =&gt; api.navigation.navigate('ScreenOne'),\n  });\n\n  let navigateScreenTwoBtn = root.createComponent(Button, {\n    title: 'Navigate to Screen Two',\n    onPress: () =&gt; api.navigation.navigate('ScreenTwo'),\n  });\n\n  screenOne.appendChild(navigateScreenTwoBtn);\n  screenTwo.appendChild(navigateScreenOneBtn);\n  navigator.appendChild(screenOne);\n  navigator.appendChild(screenTwo);\n  root.appendChild(navigator);\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ],
      "exampleGroups": [
        {
          "title": "Navigation actions",
          "examples": [
            {
              "description": "Navigates to the specified screen. It is important to note that any screens you wish to navigate to must already exist in the Navigator.",
              "codeblock": {
                "title": "Navigate to a route in current navigation tree",
                "tabs": [
                  {
                    "title": "React",
                    "code": "// You can navigate to any of these three screens since they all exist within the same Navigator.\nreturn (\n  &lt;Navigator&gt;\n    &lt;Screen name=\"ScreenOne\" title=\"Screen One Title\" /&gt;\n    &lt;Screen name=\"ScreenTwo\" title=\"Screen Two  Title\" /&gt;\n    &lt;Screen name=\"ScreenThree\" title=\"Screen Three Title\" /&gt;\n  &lt;/Navigator&gt;\n);\n",
                    "language": "tsx"
                  },
                  {
                    "title": "TS",
                    "code": "// You can navigate to any of these three screens since they all exist within the same Navigator.\nlet navigator = root.createComponent(Navigator);\n\nlet screenOne = root.createComponent(Screen, {\n  name: 'ScreenOne',\n  title: 'Screen One Title',\n});\n\nlet screenTwo = root.createComponent(Screen, {\n  name: 'ScreenTwo',\n  title: 'Screen Two Title',\n});\n\nlet screenThree = root.createComponent(Screen, {\n  name: 'ScreenThree',\n  title: 'Screen Three Title',\n});\n\nnavigator.appendChild(screenOne);\nnavigator.appendChild(screenTwo);\nnavigator.appendChild(screenThree);\nroot.appendChild(navigator);\n",
                    "language": "ts"
                  }
                ]
              }
            }
          ]
        }
      ]
    }
  },
  {
    "name": "Order API",
    "description": "The Order API provides an extension with data about the current order.",
    "isVisualComponent": false,
    "type": "APIs",
    "requires": "pos.purchase.post.action.menu-item.render",
    "definitions": [
      {
        "title": "OrderApi",
        "description": "",
        "type": "OrderApiContent",
        "typeDefinitions": {
          "OrderApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/order-api/order-api.tsx",
            "name": "OrderApiContent",
            "description": "Interface for Order details",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/order-api/order-api.tsx",
                "syntaxKind": "PropertySignature",
                "name": "customerId",
                "value": "number",
                "description": "The unique identifier of the customer associated with the order",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/order-api/order-api.tsx",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "number",
                "description": "The unique identifier for the order"
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/order-api/order-api.tsx",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "The name of the order"
              }
            ],
            "value": "export interface OrderApiContent {\n  /**\n   * The unique identifier for the order\n   */\n  id: number;\n\n  /**\n   * The name of the order\n   */\n  name: string;\n\n  /**\n   * The unique identifier of the customer associated with the order\n   */\n  customerId?: number;\n}"
          }
        }
      }
    ],
    "category": "APIs",
    "related": []
  },
  {
    "name": "Product API",
    "description": "The Product API provides an extension with data about the current Product.",
    "isVisualComponent": false,
    "type": "APIs",
    "requires": "pos.product-details.action.menu-item.render",
    "definitions": [
      {
        "title": "ProductApi",
        "description": "",
        "type": "ProductApiContent",
        "typeDefinitions": {
          "ProductApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/product-api/product-api.ts",
            "name": "ProductApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/product-api/product-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "number",
                "description": "The unique identifier for the product."
              }
            ],
            "value": "export interface ProductApiContent {\n  /**\n   * The unique identifier for the product.\n   */\n  id: number;\n}"
          }
        }
      }
    ],
    "examples": {
      "description": "Examples of using the Product API.",
      "examples": [
        {
          "codeblock": {
            "title": "Retrieve the ID of the product.",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\n\nimport {\n  Text,\n  Screen,\n  ScrollView,\n  Navigator,\n  reactExtension,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.product-details.action.render'&gt;();\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"ProductApi\" title=\"Product Api\"&gt;\n        &lt;ScrollView&gt;\n          &lt;Text&gt;{`Product ID: ${api.product.id}`}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.product-details.action.render', () =&gt; (\n  &lt;Modal /&gt;\n));\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.product-details.action.render', (root, api) =&gt; {\n  const navigator = root.createComponent(Navigator);\n  const screen = root.createComponent(Screen, {\n    name: 'ProductApi',\n    title: 'Product Api',\n  });\n  const scrollView = root.createComponent(ScrollView);\n  const text = root.createComponent(Text);\n\n  text.append(`Product ID: ${api.product.id}`);\n  scrollView.append(text);\n  screen.append(scrollView);\n  navigator.append(screen);\n  root.append(navigator);\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    },
    "category": "APIs",
    "related": [
      {
        "name": "pos.product-details.action.menu-item.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-product-details-action-menu-item-render"
      },
      {
        "name": "pos.product-details.action.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-product-details-action-render"
      }
    ]
  },
  {
    "name": "ProductSearch API",
    "description": "The ProductSearch API gives extensions access to the native product search and fetching functionality of Shopify POS. The interface provides numerous functions to search for products by query, or to fetch the details of one or more products or product variants.",
    "isVisualComponent": false,
    "type": "APIs",
    "definitions": [
      {
        "title": "ProductSearchApi",
        "description": "",
        "type": "ProductSearchApiContent",
        "typeDefinitions": {
          "ProductSearchApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
            "importMap": {
              "MultipleResourceResult": "src/surfaces/point-of-sale/api/types/multiple-resource-result.ts",
              "PaginatedResult": "src/surfaces/point-of-sale/api/types/paginated-result.ts",
              "Product": "src/surfaces/point-of-sale/api/types/product.ts",
              "ProductVariant": "src/surfaces/point-of-sale/api/types/product.ts"
            },
            "name": "ProductSearchApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "fetchPaginatedProductVariantsWithProductId",
                "value": "(productId: number, paginationParams: PaginationParams) => Promise<PaginatedResult<ProductVariant>>",
                "description": "Fetches a page of product variants associated with a product."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "fetchProductsWithIds",
                "value": "(productIds: number[]) => Promise<MultipleResourceResult<Product>>",
                "description": "Fetches multiple products' details."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "fetchProductVariantsWithIds",
                "value": "(productVariantIds: number[]) => Promise<MultipleResourceResult<ProductVariant>>",
                "description": "Fetches multiple product variants' details."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "fetchProductVariantsWithProductId",
                "value": "(productId: number) => Promise<ProductVariant[]>",
                "description": "Fetches all product variants associated with a product."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "fetchProductVariantWithId",
                "value": "(productVariantId: number) => Promise<ProductVariant>",
                "description": "Fetches a single product variant's details."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "fetchProductWithId",
                "value": "(productId: number) => Promise<Product>",
                "description": "Fetches a single product's details."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "MethodSignature",
                "name": "searchProducts",
                "value": "(searchParams: ProductSearchParams) => Promise<PaginatedResult<Product>>",
                "description": "Search for products on the POS device."
              }
            ],
            "value": "export interface ProductSearchApiContent {\n  /** Search for products on the POS device.\n   * @param searchParams The parameters for the product search.\n   */\n  searchProducts(\n    searchParams: ProductSearchParams,\n  ): Promise<PaginatedResult<Product>>;\n\n  /** Fetches a single product's details.\n   * @param productId The ID of the product to lookup.\n   */\n  fetchProductWithId(productId: number): Promise<Product | undefined>;\n\n  /** Fetches multiple products' details.\n   * @param productIds Specifies the array of product IDs to lookup. This is limited to 50 products. All excess requested IDs will be removed from the array.\n   */\n  fetchProductsWithIds(\n    productIds: number[],\n  ): Promise<MultipleResourceResult<Product>>;\n\n  /** Fetches a single product variant's details.\n   * @param productVariantId The ID of the product variant to lookup.\n   */\n  fetchProductVariantWithId(\n    productVariantId: number,\n  ): Promise<ProductVariant | undefined>;\n\n  /** Fetches multiple product variants' details.\n   * @param productVariantIds Specifies the array of product variant IDs to lookup. This is limited to 50 product variants. All excess requested IDs will be removed from the array.\n   */\n  fetchProductVariantsWithIds(\n    productVariantIds: number[],\n  ): Promise<MultipleResourceResult<ProductVariant>>;\n\n  /** Fetches all product variants associated with a product.\n   * @param productId The product ID. All variants' details associated with this product ID are returned.\n   */\n  fetchProductVariantsWithProductId(\n    productId: number,\n  ): Promise<ProductVariant[]>;\n\n  /** Fetches a page of product variants associated with a product.\n   * @param paginationParams The parameters for pagination.\n   */\n  fetchPaginatedProductVariantsWithProductId(\n    productId: number,\n    paginationParams: PaginationParams,\n  ): Promise<PaginatedResult<ProductVariant>>;\n}"
          },
          "PaginationParams": {
            "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
            "importMap": {
              "MultipleResourceResult": "src/surfaces/point-of-sale/api/types/multiple-resource-result.ts",
              "PaginatedResult": "src/surfaces/point-of-sale/api/types/paginated-result.ts",
              "Product": "src/surfaces/point-of-sale/api/types/product.ts",
              "ProductVariant": "src/surfaces/point-of-sale/api/types/product.ts"
            },
            "name": "PaginationParams",
            "description": "Base interface for pagination.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "afterCursor",
                "value": "string",
                "description": "Specifies the page cursor. Items after this cursor will be returned.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "first",
                "value": "number",
                "description": "Specifies the number of results to be returned in this page. The maximum number of items that will be returned is 50.",
                "isOptional": true
              }
            ],
            "value": "export interface PaginationParams {\n  /**\n   * Specifies the number of results to be returned in this page. The maximum number of items that will be returned is 50.\n   */\n  first?: number;\n  /**\n   * Specifies the page cursor. Items after this cursor will be returned.\n   */\n  afterCursor?: string;\n}"
          },
          "PaginatedResult": {
            "filePath": "src/surfaces/point-of-sale/api/types/paginated-result.ts",
            "name": "PaginatedResult",
            "description": "Contains a page of fetched results.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/paginated-result.ts",
                "syntaxKind": "PropertySignature",
                "name": "hasNextPage",
                "value": "boolean",
                "description": "Whether or not there is another page of results that can be fetched."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/paginated-result.ts",
                "syntaxKind": "PropertySignature",
                "name": "items",
                "value": "T[]",
                "description": "The items returned from the fetch."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/paginated-result.ts",
                "syntaxKind": "PropertySignature",
                "name": "lastCursor",
                "value": "string",
                "description": "The cursor of the last item. This can be used to fetch more results. The format of this cursor may look different depending on if POS is fetching results from the remote API, or its local database. However, that should not affect its usage with the search functions.",
                "isOptional": true
              }
            ],
            "value": "export interface PaginatedResult<T> {\n  /**\n   * The items returned from the fetch.\n   */\n  items: T[];\n\n  /**\n   * The cursor of the last item. This can be used to fetch more results.\n   * The format of this cursor may look different depending on if POS is fetching results from the remote API, or its local database. However, that should not affect its usage with the search functions.\n   */\n  lastCursor?: string;\n\n  /**\n   * Whether or not there is another page of results that can be fetched.\n   */\n  hasNextPage: boolean;\n}"
          },
          "ProductVariant": {
            "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
            "name": "ProductVariant",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "barcode",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "compareAtPrice",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "createdAt",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "displayName",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "hasInStockVariants",
                "value": "boolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "number",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "inventoryAtAllLocations",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "inventoryAtLocation",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "inventoryIsTracked",
                "value": "boolean",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "inventoryPolicy",
                "value": "ProductVariantInventoryPolicy",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "options",
                "value": "ProductVariantOption[]",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "position",
                "value": "number",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "price",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "product",
                "value": "Product",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "productId",
                "value": "number",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "sku",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "taxable",
                "value": "boolean",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "updatedAt",
                "value": "string",
                "description": ""
              }
            ],
            "value": "export interface ProductVariant {\n  id: number;\n  createdAt: string;\n  updatedAt: string;\n  title: string;\n  price: string;\n  compareAtPrice?: string;\n  taxable: boolean;\n  sku?: string;\n  barcode?: string;\n  displayName: string;\n  image?: string;\n  inventoryIsTracked: boolean;\n  inventoryAtLocation?: number;\n  inventoryAtAllLocations?: number;\n  inventoryPolicy: ProductVariantInventoryPolicy;\n  hasInStockVariants?: boolean;\n  options?: ProductVariantOption[];\n  product?: Product;\n  productId: number;\n  position: number;\n}"
          },
          "ProductVariantInventoryPolicy": {
            "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ProductVariantInventoryPolicy",
            "value": "'DENY' | 'CONTINUE'",
            "description": ""
          },
          "ProductVariantOption": {
            "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
            "name": "ProductVariantOption",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": ""
              }
            ],
            "value": "export interface ProductVariantOption {\n  name: string;\n  value: string;\n}"
          },
          "Product": {
            "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
            "name": "Product",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "createdAt",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "description",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "descriptionHtml",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "featuredImage",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "hasInStockVariants",
                "value": "boolean",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "hasOnlyDefaultVariant",
                "value": "boolean",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "number",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "isGiftCard",
                "value": "boolean",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxVariantPrice",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "minVariantPrice",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "numVariants",
                "value": "number",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "onlineStoreUrl",
                "value": "string",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "options",
                "value": "ProductOption[]",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "productCategory",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "productType",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "tags",
                "value": "string[]",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalAvailableInventory",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "totalInventory",
                "value": "number",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "tracksInventory",
                "value": "boolean",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "updatedAt",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "variants",
                "value": "ProductVariant[]",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "vendor",
                "value": "string",
                "description": ""
              }
            ],
            "value": "export interface Product {\n  id: number;\n  createdAt: string;\n  updatedAt: string;\n  title: string;\n  description: string;\n  descriptionHtml: string;\n  featuredImage?: string;\n  isGiftCard: boolean;\n  tracksInventory: boolean;\n  vendor: string;\n  minVariantPrice: string;\n  maxVariantPrice: string;\n  productType: string;\n  productCategory: string;\n  tags: string[];\n  numVariants: number;\n  totalAvailableInventory?: number;\n  totalInventory: number;\n  variants: ProductVariant[];\n  options: ProductOption[];\n  hasOnlyDefaultVariant: boolean;\n  hasInStockVariants?: boolean;\n  onlineStoreUrl?: string;\n}"
          },
          "ProductOption": {
            "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
            "name": "ProductOption",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "number",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "optionValues",
                "value": "string[]",
                "description": ""
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/product.ts",
                "syntaxKind": "PropertySignature",
                "name": "productId",
                "value": "number",
                "description": ""
              }
            ],
            "value": "export interface ProductOption {\n  id: number;\n  name: string;\n  optionValues: string[];\n  productId: number;\n}"
          },
          "MultipleResourceResult": {
            "filePath": "src/surfaces/point-of-sale/api/types/multiple-resource-result.ts",
            "name": "MultipleResourceResult",
            "description": "The result of a fetch function where the input is multiple IDs. This object contains the resources that were found, as well as an array of IDs specifying which IDs, if any, did not correspond to a resource.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/multiple-resource-result.ts",
                "syntaxKind": "PropertySignature",
                "name": "fetchedResources",
                "value": "T[]",
                "description": "The resources that were fetched using the IDs provided."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/multiple-resource-result.ts",
                "syntaxKind": "PropertySignature",
                "name": "idsForResourcesNotFound",
                "value": "number[]",
                "description": "The IDs for which a resource was not found."
              }
            ],
            "value": "export interface MultipleResourceResult<T> {\n  /**\n   * The resources that were fetched using the IDs provided.\n   */\n  fetchedResources: T[];\n  /**\n   * The IDs for which a resource was not found.\n   */\n  idsForResourcesNotFound: number[];\n}"
          },
          "ProductSearchParams": {
            "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
            "importMap": {
              "MultipleResourceResult": "src/surfaces/point-of-sale/api/types/multiple-resource-result.ts",
              "PaginatedResult": "src/surfaces/point-of-sale/api/types/paginated-result.ts",
              "Product": "src/surfaces/point-of-sale/api/types/product.ts",
              "ProductVariant": "src/surfaces/point-of-sale/api/types/product.ts"
            },
            "name": "ProductSearchParams",
            "description": "Interface for product search",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "afterCursor",
                "value": "string",
                "description": "Specifies the page cursor. Items after this cursor will be returned.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "first",
                "value": "number",
                "description": "Specifies the number of results to be returned in this page. The maximum number of items that will be returned is 50.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "queryString",
                "value": "string",
                "description": "The search term to be used to search for POS products.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "sortType",
                "value": "ProductSortType",
                "description": "Specifies the order in which products should be sorted. When a `queryString` is provided, sortType will not have any effect, as the results will be returned in order by relevance to the `queryString`.",
                "isOptional": true
              }
            ],
            "value": "export interface ProductSearchParams extends PaginationParams {\n  /**\n   * The search term to be used to search for POS products.\n   */\n  queryString?: string;\n  /**\n   * Specifies the order in which products should be sorted. When a `queryString` is provided, sortType will not have any effect, as the results will be returned in order by relevance to the `queryString`.\n   */\n  sortType?: ProductSortType;\n}"
          },
          "ProductSortType": {
            "filePath": "src/surfaces/point-of-sale/api/product-search-api/product-search-api.ts",
            "importMap": {
              "MultipleResourceResult": "src/surfaces/point-of-sale/api/types/multiple-resource-result.ts",
              "PaginatedResult": "src/surfaces/point-of-sale/api/types/paginated-result.ts",
              "Product": "src/surfaces/point-of-sale/api/types/product.ts",
              "ProductVariant": "src/surfaces/point-of-sale/api/types/product.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ProductSortType",
            "value": "'RECENTLY_ADDED' | 'RECENTLY_ADDED_ASCENDING' | 'ALPHABETICAL_A_TO_Z' | 'ALPHABETICAL_Z_TO_A'",
            "description": ""
          }
        }
      }
    ],
    "category": "APIs",
    "related": [],
    "examples": {
      "description": "Examples of using the Cart API",
      "examples": [
        {
          "codeblock": {
            "title": "Search for products with a search bar",
            "tabs": [
              {
                "title": "React",
                "code": "import React, { useState } from 'react'\n\nimport { Screen, List, Navigator, reactExtension, SearchBar, useApi, ListRow } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n  const [data, setData] = useState&lt;ListRow[]&gt;([]);\n\n  const search = async (queryString?: string) =&gt; {\n    const results = await api.productSearch.searchProducts({queryString})\n    const data = results.items.map((product): ListRow =&gt; {\n      return {\n        id: String(product.id),\n        leftSide: {\n          label: product.title,\n          image: {\n            source: product.featuredImage\n          }\n        }\n      }\n    })\n\n    setData(data)\n  }\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"HelloWorld\" title=\"Hello World!\"&gt;\n        &lt;List\n          listHeaderComponent={&lt;SearchBar \n            placeholder='Search products'\n            onTextChange={search}\n            onSearch={search}\n          /&gt;}\n        imageDisplayStrategy='always'\n        data={data}\n        /&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  SearchBar,\n  Screen,\n  Navigator,\n  extension,\n  ListRow,\n  List,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const list = root.createComponent(List, {\n    imageDisplayStrategy: 'always',\n    data: [],\n  });\n\n  const search = async (queryString?: string) =&gt; {\n    const results = await api.productSearch.searchProducts({queryString});\n    const data = results.items.map((product): ListRow =&gt; {\n      return {\n        id: String(product.id),\n        leftSide: {\n          label: product.title,\n          image: {\n            source: product.featuredImage,\n          },\n        },\n      };\n    });\n\n    list.updateProps({data});\n  };\n\n  const searchBar = root.createFragment();\n\n  searchBar.append(\n    root.createComponent(SearchBar, {\n      placeholder: 'Search products',\n      onTextChange: search,\n      onSearch: search,\n    }),\n  );\n\n  list.updateProps({listHeaderComponent: searchBar});\n\n  const screen = root.createComponent(Screen, {\n    title: 'Home',\n    name: 'Home',\n  });\n\n  screen.append(list);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Fetch a specific product with a product ID",
            "tabs": [
              {
                "title": "React",
                "code": "import React, { useEffect, useState } from 'react'\n\nimport { Screen, List, Navigator, reactExtension, SearchBar, useApi, ListRow } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n  const [data, setData] = useState&lt;ListRow[]&gt;([]);\n\n  useEffect(() =&gt; {\n    const fetchProduct = async () =&gt; {\n      const resultProduct = await api.productSearch.fetchProductWithId(1)\n  \n      if (resultProduct) { \n        const listItem = {\n          id: String(resultProduct.id),\n          leftSide: {\n            label: resultProduct.title,\n            image: {\n              source: resultProduct.featuredImage\n            }\n          }\n        }\n        setData([listItem])\n      }\n    }\n\n    fetchProduct();\n  }, []);\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"HelloWorld\" title=\"Hello World!\"&gt;\n        &lt;List\n          imageDisplayStrategy='always'\n          data={data}\n        /&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  SearchBar,\n  Screen,\n  Navigator,\n  extension,\n  ListRow,\n  List,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const list = root.createComponent(List, {\n    imageDisplayStrategy: 'always',\n    data: [],\n  });\n\n  const fetchProduct = async () =&gt; {\n    const resultProduct = await api.productSearch.fetchProductWithId(1);\n    if (resultProduct) {\n      const listItem = {\n        id: String(resultProduct.id),\n        leftSide: {\n          label: resultProduct.title,\n          image: {\n            source: resultProduct.featuredImage,\n          },\n        },\n      };\n\n      list.updateProps({data: [listItem]});\n    }\n  };\n\n  const screen = root.createComponent(Screen, {\n    title: 'Home',\n    name: 'Home',\n  });\n\n  screen.append(list);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n\n  fetchProduct();\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Fetch multiple products by specifying product IDs",
            "tabs": [
              {
                "title": "React",
                "code": "import React, { useEffect, useState } from 'react'\n\nimport { Screen, List, Navigator, reactExtension, SearchBar, useApi, ListRow } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n  const [data, setData] = useState&lt;ListRow[]&gt;([]);\n\n  useEffect(() =&gt; {\n    const fetchProducts = async () =&gt; {\n      const results = await api.productSearch.fetchProductsWithIds([1, 2, 3]);\n      const data = results.fetchedResources.map((product): ListRow =&gt; {\n        return {\n          id: String(product.id),\n          leftSide: {\n            label: product.title,\n            image: {\n              source: product.featuredImage\n            }\n          }\n        }\n      })\n\n      console.log('IDs not found: ', results.idsForResourcesNotFound);\n  \n      setData(data)\n    }\n\n    fetchProducts();\n  }, []);\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"HelloWorld\" title=\"Hello World!\"&gt;\n        &lt;List\n          imageDisplayStrategy='always'\n          data={data}\n        /&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  SearchBar,\n  Screen,\n  Navigator,\n  extension,\n  ListRow,\n  List,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const list = root.createComponent(List, {\n    imageDisplayStrategy: 'always',\n    data: [],\n  });\n\n  const fetchProducts = async () =&gt; {\n    const results = await api.productSearch.fetchProductsWithIds([1, 2, 3, 4]);\n    const data = results.fetchedResources.map((product): ListRow =&gt; {\n      return {\n        id: String(product.id),\n        leftSide: {\n          label: product.title,\n          image: {\n            source: product.featuredImage,\n          },\n        },\n      };\n    });\n\n    console.log('IDs not found: ', results.idsForResourcesNotFound);\n\n    list.updateProps({data});\n  };\n\n  const screen = root.createComponent(Screen, {\n    title: 'Home',\n    name: 'Home',\n  });\n\n  screen.append(list);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n\n  fetchProducts();\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Fetch a specific product variant with a variant ID",
            "tabs": [
              {
                "title": "React",
                "code": "import React, { useEffect, useState } from 'react'\n\nimport { Screen, List, Navigator, reactExtension, SearchBar, useApi, ListRow } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n  const [data, setData] = useState&lt;ListRow[]&gt;([]);\n\n  useEffect(() =&gt; {\n    const fetchProductVariant = async () =&gt; {\n      const resultProductVariant = await api.productSearch.fetchProductVariantWithId(1);\n  \n      if (resultProductVariant) { \n        const listItem = {\n          id: String(resultProductVariant.id),\n          leftSide: {\n            label: resultProductVariant.title,\n            image: {\n              source: resultProductVariant.image\n            }\n          }\n        }\n        setData([listItem])\n      }\n    }\n\n    fetchProductVariant();\n  }, []);\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"HelloWorld\" title=\"Hello World!\"&gt;\n        &lt;List\n          imageDisplayStrategy='always'\n          data={data}\n        /&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  SearchBar,\n  Screen,\n  Navigator,\n  extension,\n  ListRow,\n  List,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const list = root.createComponent(List, {\n    imageDisplayStrategy: 'always',\n    data: [],\n  });\n\n  const fetchProductVariant = async () =&gt; {\n    const resultProductVariant =\n      await api.productSearch.fetchProductVariantWithId(1);\n    if (resultProductVariant) {\n      const listItem = {\n        id: String(resultProductVariant.id),\n        leftSide: {\n          label: resultProductVariant.title,\n          image: {\n            source: resultProductVariant.image,\n          },\n        },\n      };\n\n      list.updateProps({data: [listItem]});\n    }\n  };\n\n  const screen = root.createComponent(Screen, {\n    title: 'Home',\n    name: 'Home',\n  });\n\n  screen.append(list);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n\n  fetchProductVariant();\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Fetch multiple product variants by specifying variant IDs",
            "tabs": [
              {
                "title": "React",
                "code": "import React, { useEffect, useState } from 'react'\n\nimport { Screen, List, Navigator, reactExtension, SearchBar, useApi, ListRow } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n  const [data, setData] = useState&lt;ListRow[]&gt;([]);\n\n  useEffect(() =&gt; {\n    const fetchProductVariants = async () =&gt; {\n      const results = await api.productSearch.fetchProductVariantsWithIds([1, 2, 3]);\n      const data = results.fetchedResources.map((variant): ListRow =&gt; {\n        return {\n          id: String(variant.id),\n          leftSide: {\n            label: variant.title,\n            image: {\n              source: variant.image\n            }\n          }\n        }\n      })\n\n      console.log('IDs not found: ', results.idsForResourcesNotFound);\n  \n      setData(data)\n    }\n\n    fetchProductVariants();\n  }, []);\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"HelloWorld\" title=\"Hello World!\"&gt;\n        &lt;List\n          imageDisplayStrategy='always'\n          data={data}\n        /&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  SearchBar,\n  Screen,\n  Navigator,\n  extension,\n  ListRow,\n  List,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const list = root.createComponent(List, {\n    imageDisplayStrategy: 'always',\n    data: [],\n  });\n\n  const fetchProductVariants = async () =&gt; {\n    const results = await api.productSearch.fetchProductVariantsWithIds([\n      1, 2, 3, 4,\n    ]);\n    const data = results.fetchedResources.map((variant): ListRow =&gt; {\n      return {\n        id: String(variant.id),\n        leftSide: {\n          label: variant.title,\n          image: {\n            source: variant.image,\n          },\n        },\n      };\n    });\n\n    console.log('IDs not found: ', results.idsForResourcesNotFound);\n\n    list.updateProps({data});\n  };\n\n  const screen = root.createComponent(Screen, {\n    title: 'Home',\n    name: 'Home',\n  });\n\n  screen.append(list);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n\n  fetchProductVariants();\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Fetch a page of product variants with a specific product ID",
            "tabs": [
              {
                "title": "React",
                "code": "import React, { useEffect, useState } from 'react'\n\nimport { Screen, List, Navigator, reactExtension, SearchBar, useApi, ListRow } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n  const [data, setData] = useState&lt;ListRow[]&gt;([]);\n\n  useEffect(() =&gt; {\n    const fetchProductVariants = async () =&gt; {\n      const results = await api.productSearch.fetchPaginatedProductVariantsWithProductId(1, {first: 10});\n      const data = results.items.map((variant): ListRow =&gt; {\n        return {\n          id: String(variant.id),\n          leftSide: {\n            label: variant.title,\n            image: {\n              source: variant.image\n            }\n          }\n        }\n      })\n  \n      console.log('Cursor for next page: ', results.lastCursor);\n      setData(data)\n    }\n\n    fetchProductVariants();\n  }, []);\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"HelloWorld\" title=\"Hello World!\"&gt;\n        &lt;List\n          imageDisplayStrategy='always'\n          data={data}\n        /&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  SearchBar,\n  Screen,\n  Navigator,\n  extension,\n  ListRow,\n  List,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const list = root.createComponent(List, {\n    imageDisplayStrategy: 'always',\n    data: [],\n  });\n\n  const fetchProductVariants = async () =&gt; {\n    const results =\n      await api.productSearch.fetchPaginatedProductVariantsWithProductId(1, {\n        first: 10,\n      });\n    const data = results.items.map((variant): ListRow =&gt; {\n      return {\n        id: String(variant.id),\n        leftSide: {\n          label: variant.title,\n          image: {\n            source: variant.image,\n          },\n        },\n      };\n    });\n\n    console.log('Cursor for next page: ', results.lastCursor);\n\n    list.updateProps({data});\n  };\n\n  const screen = root.createComponent(Screen, {\n    title: 'Home',\n    name: 'Home',\n  });\n\n  screen.append(list);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n\n  fetchProductVariants();\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "Scanner API",
    "description": "The Scanner API enables an extension to access scanner data and available scanning sources supported by the device.",
    "isVisualComponent": false,
    "type": "APIs",
    "definitions": [
      {
        "title": "ScannerApi",
        "description": "",
        "type": "ScannerApiContent",
        "typeDefinitions": {
          "ScannerApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/scanner-api/scanner-api.ts",
            "importMap": {
              "RemoteSubscribable": "../../node_modules/@remote-ui/async-subscription/build/ts/index.d.ts"
            },
            "name": "ScannerApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/scanner-api/scanner-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "scannerDataSubscribable",
                "value": "RemoteSubscribable<ScannerSubscriptionResult>",
                "description": "Creates a subscription to scan events Provides an initial value and a callback to subscribe to value changes. Currently supports only one subscription. You can utilize `makeStatefulSubscribable` on a `RemoteSubscribable` to implement multiple subscriptions. Using `makeStatefulSubscribable` or the corresponding hooks counts as a subscription."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/scanner-api/scanner-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "scannerSourcesSubscribable",
                "value": "RemoteSubscribable<ScannerSource[]>",
                "description": "Creates a subscription to the scanning sources available on the POS device. Provides an initial value and a callback to subscribe to value changes. Currently supports only one subscription. You can utilize `makeStatefulSubscribable` on a `RemoteSubscribable` to implement multiple subscriptions. Using `makeStatefulSubscribable` or the corresponding hooks counts as a subscription."
              }
            ],
            "value": "export interface ScannerApiContent {\n  /** Creates a subscription to scan events\n   * Provides an initial value and a callback to subscribe to value changes. Currently supports only one subscription.\n   * You can utilize `makeStatefulSubscribable` on a `RemoteSubscribable` to implement multiple subscriptions.\n   * Using `makeStatefulSubscribable` or the corresponding hooks counts as a subscription.\n   */\n  scannerDataSubscribable: RemoteSubscribable<ScannerSubscriptionResult>;\n  /** Creates a subscription to the scanning sources available on the POS device.\n   * Provides an initial value and a callback to subscribe to value changes. Currently supports only one subscription.\n   * You can utilize `makeStatefulSubscribable` on a `RemoteSubscribable` to implement multiple subscriptions.\n   * Using `makeStatefulSubscribable` or the corresponding hooks counts as a subscription.\n   */\n  scannerSourcesSubscribable: RemoteSubscribable<ScannerSource[]>;\n}"
          },
          "ScannerSubscriptionResult": {
            "filePath": "src/surfaces/point-of-sale/api/scanner-api/scanner-api.ts",
            "importMap": {
              "RemoteSubscribable": "../../node_modules/@remote-ui/async-subscription/build/ts/index.d.ts"
            },
            "name": "ScannerSubscriptionResult",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/scanner-api/scanner-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "string",
                "description": "The string data from the last scanner event received.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/scanner-api/scanner-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "source",
                "value": "ScannerSource",
                "description": "The scanning source from which the scan event came.",
                "isOptional": true
              }
            ],
            "value": "export interface ScannerSubscriptionResult {\n  /** The string data from the last scanner event received. */\n  data?: string;\n  /** The scanning source from which the scan event came. */\n  source?: ScannerSource;\n}"
          },
          "ScannerSource": {
            "filePath": "src/surfaces/point-of-sale/api/scanner-api/scanner-api.ts",
            "importMap": {
              "RemoteSubscribable": "../../node_modules/@remote-ui/async-subscription/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ScannerSource",
            "value": "'camera' | 'external' | 'embedded'",
            "description": "The scanner source the POS device supports."
          }
        }
      }
    ],
    "category": "APIs",
    "related": [],
    "requires": "pos.home.modal.render",
    "examples": {
      "description": "Examples of receiving updates from the Scanner API",
      "examples": [
        {
          "codeblock": {
            "title": "Subscribe to scan event updates",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\nimport {\n  Navigator,\n  Screen,\n  Stack,\n  Text,\n  useScannerDataSubscription,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const {data, source} = useScannerDataSubscription();\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"Home\" title=\"Home\"&gt;\n        &lt;Stack direction=\"horizontal\"&gt;\n          &lt;Text&gt;{`Scanned data: ${data || ''} with ${source || ''}`}&lt;/Text&gt;\n        &lt;/Stack&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  Navigator,\n  Screen,\n  Stack,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const dataText = root.createComponent('Text', null, 'Scanned data: ');\n\n  const sourceText = root.createComponent(\n    'Text',\n    null,\n    'Scanned data source: ',\n  );\n\n  const stack1 = root.createComponent(Stack, {\n    direction: 'horizontal',\n  });\n\n  const screen = root.createComponent(Screen, {\n    title: 'Home',\n    name: 'Home',\n  });\n\n  const navigator = root.createComponent(Navigator);\n\n  stack1.append(dataText);\n  stack1.append(sourceText);\n  screen.append(stack1);\n  navigator.append(screen);\n  root.append(navigator);\n\n  api.scanner.scannerDataSubscribable.subscribe((data, source) =&gt; {\n    dataText.replaceChildren(`Scanned data: ${data || ''}`);\n    sourceText.updateProps(`Scanned data source: ${source || ''}`);\n  });\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Receiving updates on available scanner sources",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\nimport {\n  Navigator,\n  Screen,\n  Stack,\n  Text,\n  useScannerSourcesSubscription,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const scannerSources = useScannerSourcesSubscription();\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"Home\" title=\"Home\"&gt;\n        &lt;Stack direction=\"horizontal\"&gt;\n          &lt;Text&gt;{`Available scanner sources: ${scannerSources}`}&lt;/Text&gt;\n        &lt;/Stack&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  Navigator,\n  Screen,\n  Stack,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const scannerSourcesText = root.createComponent(\n    'Text',\n    null,\n    'Available scanner sources: ',\n  );\n\n  const stack1 = root.createComponent(Stack, {\n    direction: 'horizontal',\n  });\n\n  const screen = root.createComponent(Screen, {\n    title: 'Home',\n    name: 'Home',\n  });\n\n  const navigator = root.createComponent(Navigator);\n\n  stack1.append(scannerSourcesText);\n  screen.append(stack1);\n  navigator.append(screen);\n  root.append(navigator);\n\n  api.scanner.scannerSourcesSubscribable.subscribe((sources) =&gt; {\n    scannerSourcesText.replaceChildren(`Available scanner sources: ${sources}`);\n  });\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ],
      "exampleGroups": [
        {
          "title": "Use cases",
          "examples": [
            {
              "description": "In this example, assuming a physical scanner is connected to the POS, any scans performed when ui extensions are in use will automatically add the product to the cart if the data exists on the shop.",
              "codeblock": {
                "title": "Hardware scanner example",
                "tabs": [
                  {
                    "title": "React",
                    "code": "import React from 'react';\nimport {\n  Navigator,\n  Screen,\n  Stack,\n  Text,\n  useScannerDataSubscription,\n  useApi,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n  const {data} = useScannerDataSubscription();\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"Home\" title=\"Home\"&gt;\n        &lt;Stack direction=\"horizontal\"&gt;\n          &lt;Text&gt;{`Scanned data: ${data || ''}`}&lt;/Text&gt;\n        &lt;/Stack&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
                    "language": "tsx"
                  },
                  {
                    "title": "TS",
                    "code": "import React from 'react';\nimport {\n  Navigator,\n  Screen,\n  Stack,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const text = root.createComponent('Text', null, 'Scanned data: ');\n\n  const stack = root.createComponent(Stack, {\n    direction: 'horizontal',\n  });\n\n  const screen = root.createComponent(Screen, {\n    title: 'Home',\n    name: 'Home',\n  });\n\n  const navigator = root.createComponent(Navigator);\n\n  stack.append(text);\n  screen.append(stack);\n  navigator.append(screen);\n  root.append(navigator);\n\n  api.scanner.scannerDataSubscribable.subscribe((data) =&gt; {\n    text.replaceChildren(`Scanned data: ${data || ''}`);\n  });\n});\n",
                    "language": "ts"
                  }
                ]
              }
            },
            {
              "description": "There might be situations where a developer needs to conditionally render UI elements based on the available scanning sources of the device on which the extension is installed. For example, an extension could be designed for full-screen camera scanning, but a device like POS GO does not have a camera. In such cases, it would be necessary to avoid rendering the camera scanner component and instead create a UI that supports embedded scanning.",
              "codeblock": {
                "title": "Conditional scanner source rendering example",
                "tabs": [
                  {
                    "title": "React",
                    "code": "import React from 'react';\nimport {\n  CameraScanner,\n  Navigator,\n  Screen,\n  Stack,\n  Text,\n  useScannerDataSubscription,\n  useScannerSourcesSubscription,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const {data, source} = useScannerDataSubscription();\n  const availableScanners = useScannerSourcesSubscription();\n  const hasCameraScanner = availableScanners.includes('camera');\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"Home\" title=\"Home\"&gt;\n        &lt;Stack direction=\"horizontal\"&gt;\n          {hasCameraScanner ? (\n            &lt;CameraScanner /&gt;\n          ) : (\n            &lt;Stack direction=\"vertical\" alignment=\"space-evenly\"&gt;\n              &lt;Text&gt;{`Scanned data: ${data || ''}`}&lt;/Text&gt;\n              &lt;Text&gt;{`Scanned data source: ${source || ''}`}&lt;/Text&gt;\n            &lt;/Stack&gt;\n          )}\n        &lt;/Stack&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
                    "language": "tsx"
                  },
                  {
                    "title": "TS",
                    "code": "import {\n  CameraScanner,\n  Navigator,\n  Screen,\n  Stack,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const dataText = root.createComponent('Text', null, 'Scanned data: ');\n\n  const sourceText = root.createComponent(\n    'Text',\n    null,\n    'Scanned data source: ',\n  );\n\n  const cameraScanner = root.createComponent(CameraScanner);\n  const stack1 = root.createComponent(Stack, {\n    direction: 'horizontal',\n  });\n  const stack2 = root.createComponent(Stack, {\n    direction: 'vertical',\n    alignment: 'space-evenly',\n  });\n\n  const screen = root.createComponent(Screen, {\n    title: 'Home',\n    name: 'Home',\n  });\n\n  const navigator = root.createComponent(Navigator);\n\n  screen.append(stack1);\n  navigator.append(screen);\n  root.append(navigator);\n\n  api.scanner.scannerDataSubscribable.subscribe((data, source) =&gt; {\n    dataText.replaceChildren(`Scanned data: ${data || ''}`);\n    sourceText.replaceChildren(`Scanned data source: ${source || ''}`);\n  });\n\n  api.scanner.scannerSourcesSubscribable.subscribe((sources) =&gt; {\n    // Clear previous children to avoid duplicate appending\n    stack1.children = [];\n    stack2.children = [];\n\n    if (sources.include('camera')) {\n      stack1.append(cameraScanner);\n    } else {\n      stack2.append(dataText);\n      stack2.append(sourceText);\n      stack1.append(stack2);\n    }\n  });\n});\n",
                    "language": "ts"
                  }
                ]
              }
            }
          ]
        }
      ]
    }
  },
  {
    "name": "Session API",
    "description": "The Session API contains the information about the current user session, and allows to fetch a fresh session token for communication with your apps backend service.",
    "isVisualComponent": false,
    "type": "APIs",
    "definitions": [
      {
        "title": "SessionApi",
        "description": "",
        "type": "SessionApiContent",
        "typeDefinitions": {
          "SessionApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/session-api/session-api.ts",
            "importMap": {
              "Session": "src/surfaces/point-of-sale/api/types/session.ts"
            },
            "name": "SessionApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/session-api/session-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "currentSession",
                "value": "Session",
                "description": "Access information on the current POS session."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/session-api/session-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "getSessionToken",
                "value": "() => Promise<string>",
                "description": "Get a fresh session token for communication with your app's backend service. Calls to Shopify APIs must be made by your app’s backend service."
              }
            ],
            "value": "export interface SessionApiContent {\n  /**\n   * Access information on the current POS session.\n   */\n  currentSession: Session;\n  /**\n   * Get a fresh session token for communication with your app's backend service.\n   * Calls to Shopify APIs must be made by your app’s backend service.\n   */\n  getSessionToken: () => Promise<string | undefined>;\n}"
          },
          "Session": {
            "filePath": "src/surfaces/point-of-sale/api/types/session.ts",
            "name": "Session",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/types/session.ts",
                "syntaxKind": "PropertySignature",
                "name": "locationId",
                "value": "number",
                "description": "The location ID associated with the POS' current location."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/session.ts",
                "syntaxKind": "PropertySignature",
                "name": "shopDomain",
                "value": "string",
                "description": "The shop domain associated with the shop currently logged into POS."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/session.ts",
                "syntaxKind": "PropertySignature",
                "name": "shopId",
                "value": "number",
                "description": "The shop ID associated with the shop currently logged into POS."
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/session.ts",
                "syntaxKind": "PropertySignature",
                "name": "staffMemberId",
                "value": "number",
                "description": "The staff ID who is currently pinned into the POS. Note that this staff member ID may be different to the User ID, as the staff member who enters their PIN may be different to the User who logged onto POS.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/api/types/session.ts",
                "syntaxKind": "PropertySignature",
                "name": "userId",
                "value": "number",
                "description": "The user ID associated with the Shopify account currently authenticated on POS."
              }
            ],
            "value": "export interface Session {\n  /**\n   * The shop ID associated with the shop currently logged into POS.\n   */\n  shopId: number;\n\n  /**\n   * The user ID associated with the Shopify account currently authenticated on POS.\n   */\n  userId: number;\n\n  /**\n   * The shop domain associated with the shop currently logged into POS.\n   */\n  shopDomain: string;\n\n  /**\n   * The location ID associated with the POS' current location.\n   */\n  locationId: number;\n\n  /**\n   * The staff ID who is currently pinned into the POS.\n   * Note that this staff member ID may be different to the User ID, as the staff member who enters their PIN may be different to the User who logged onto POS.\n   */\n  staffMemberId?: number;\n}"
          }
        }
      }
    ],
    "category": "APIs",
    "related": [],
    "examples": {
      "description": "Examples of using the Session API",
      "examples": [
        {
          "codeblock": {
            "title": "Retrieve the current session data",
            "tabs": [
              {
                "title": "React",
                "code": "import React, {useState} from 'react';\nimport {\n  reactExtension,\n  useApi,\n  Screen,\n  Text,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const {currentSession, getSessionToken} =\n    useApi&lt;'pos.home.modal.render'&gt;().session;\n\n  const {shopId, userId, locationId, staffMemberId} = currentSession;\n  const [sessionToken, setSessionToken] = useState&lt;string&gt;();\n\n  getSessionToken().then((newToken) =&gt; {\n    setSessionToken(newToken);\n  });\n\n  return (\n    &lt;Screen name=\"ScreenOne\" title=\"Screen One Title\"&gt;\n      &lt;Text&gt;\n        shopId: {shopId}, userId: {userId}, locationId: {locationId}, staffId:\n        {staffMemberId}\n      &lt;/Text&gt;\n      &lt;Text&gt;sessionToken: {sessionToken}&lt;/Text&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  Screen,\n  Stack,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const {session} = api;\n  const {currentSession, getSessionToken} = session;\n  const {shopId, userId, locationId, staffMemberId} = currentSession;\n\n  const screen = root.createComponent(Screen, {\n    name: 'ScreenOne',\n    title: 'Screen One Title',\n  });\n\n  const currentSessionText = root.createComponent(\n    Text,\n    {},\n    `shopId: ${shopId}, userId: ${userId}, locationId: ${locationId}, staffId: ${staffMemberId}`,\n  );\n  const sessionTokenText = root.createComponent(\n    Text,\n    {},\n    'sessionToken: undefined',\n  );\n\n  getSessionToken().then((newToken) =&gt; {\n    sessionTokenText.children.forEach((child) =&gt; {\n      sessionTokenText.removeChild(child);\n    });\n    sessionTokenText.appendChild(`sessionToken: ${newToken}`);\n  });\n\n  screen.appendChild(currentSessionText);\n  screen.appendChild(sessionTokenText);\n  root.appendChild(screen);\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "Toast API",
    "description": "The Toast API allows the display of a Toast component.",
    "isVisualComponent": false,
    "type": "APIs",
    "definitions": [
      {
        "title": "ToastApi",
        "description": "",
        "type": "ToastApiContent",
        "typeDefinitions": {
          "ToastApiContent": {
            "filePath": "src/surfaces/point-of-sale/api/toast-api/toast-api.ts",
            "name": "ToastApiContent",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/toast-api/toast-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "show",
                "value": "(content: string, options?: ShowToastOptions) => void",
                "description": "Show a toast."
              }
            ],
            "value": "export interface ToastApiContent {\n  /**\n   * Show a toast.\n   * @param content The text content to display.\n   * @param options An object containing ShowToastOptions.\n   */\n  show: (content: string, options?: ShowToastOptions) => void;\n}"
          },
          "ShowToastOptions": {
            "filePath": "src/surfaces/point-of-sale/api/toast-api/toast-api.ts",
            "name": "ShowToastOptions",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/api/toast-api/toast-api.ts",
                "syntaxKind": "PropertySignature",
                "name": "duration",
                "value": "number",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "export interface ShowToastOptions {\n  duration?: number;\n}"
          }
        }
      }
    ],
    "category": "APIs",
    "related": [],
    "examples": {
      "description": "Examples of using the Toast API",
      "examples": [
        {
          "codeblock": {
            "title": "Display a Toast component from the tile",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react';\nimport {\n  Tile,\n  useApi,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridTile = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n\n  return (\n    &lt;Tile\n      title=\"My App\"\n      onPress={() =&gt; api.toast.show('Toast content', 5000)}\n      enabled\n    /&gt;\n  );\n};\n\nexport default reactExtension('pos.home.tile.render', () =&gt; &lt;SmartGridTile /&gt;);\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {Tile, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My App',\n    onPress: () =&gt; api.toast.show('Toast content', 5000),\n    enabled: true,\n  });\n\n  root.append(tile);\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "ActionItem",
    "description": "The `ActionItem` provides a tappable surface on the specified extension target as an entry point to an extension. Note that the text displayed on this `ActionItem` is dependent on the description of the extension.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "ActionItem",
        "description": "",
        "type": "ActionItemProps",
        "typeDefinitions": {
          "ActionItemProps": {
            "filePath": "src/surfaces/point-of-sale/components/Actiontem/ActionItem.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "ActionItemProps",
            "description": "Renders an `ActionItem` on action targets. Note that the text displayed on this `ActionItem` is dependent on the description of the extension.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Actiontem/ActionItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "enabled",
                "value": "boolean",
                "description": "Sets whether or not the `ActionItem` can be tapped.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Actiontem/ActionItem.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "The callback that is executed when the user taps the `ActionItem`."
              }
            ],
            "value": "export interface ActionItemProps {\n  /**\n   * Sets whether or not the `ActionItem` can be tapped.\n   */\n  enabled?: boolean;\n  /**\n   * The callback that is executed when the user taps the `ActionItem`.\n   */\n  onPress: () => void;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "action-item-thumbnail.png",
    "defaultExample": {
      "image": "action-item-default.png",
      "codeblock": {
        "title": "Render an ActionItem in post purchase",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\nimport {\n  reactExtension,\n  useApi,\n  ActionItem,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst PostPurchaseActionItem = () =&gt; {\n  const api = useApi&lt;'pos.purchase.post.action.menu-item.render'&gt;();\n\n  return (\n    &lt;ActionItem\n      onPress={() =&gt; api.action.presentModal()}\n      enabled\n    /&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.purchase.post.action.menu-item.render',\n  () =&gt; &lt;PostPurchaseActionItem /&gt;\n);",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  ActionItem,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.purchase.post.action.menu-item.render',\n  (root, api) =&gt; {\n    const actionItem = root.createComponent(\n      ActionItem,\n      {\n        onPress: () =&gt; api.action.presentModal(),\n        enabled: true,\n      },\n    );\n\n    root.append(actionItem);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "Badge",
    "description": "Badges are used to inform merchants of the status of an item or action that’s been taken.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Badge",
        "description": "",
        "type": "BadgeProps",
        "typeDefinitions": {
          "BadgeProps": {
            "filePath": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "BadgeProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
                "syntaxKind": "PropertySignature",
                "name": "status",
                "value": "BadgeStatus",
                "description": "A circle icon displaying the status of the badge.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
                "syntaxKind": "PropertySignature",
                "name": "text",
                "value": "string",
                "description": "The text displayed inside the badge."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
                "syntaxKind": "PropertySignature",
                "name": "variant",
                "value": "BadgeVariant",
                "description": "The appearance and function of the badge."
              }
            ],
            "value": "export interface BadgeProps {\n  /**\n   * The text displayed inside the badge.\n   */\n  text: string;\n\n  /**\n   * The appearance and function of the badge.\n   */\n  variant: BadgeVariant;\n\n  /**\n   * A circle icon displaying the status of the badge.\n   */\n  status?: BadgeStatus;\n}"
          },
          "BadgeStatus": {
            "filePath": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BadgeStatus",
            "value": "'empty' | 'partial' | 'complete'",
            "description": ""
          },
          "BadgeVariant": {
            "filePath": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BadgeVariant",
            "value": "'neutral' | 'critical' | 'warning' | 'success' | 'highlight'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "badge-thumbnail.png",
    "defaultExample": {
      "image": "badge-default.png",
      "codeblock": {
        "title": "Badge",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\nimport {\n  Badge,\n  Screen,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  return (\n    &lt;Screen title=\"Home\" name=\"Home\"&gt;\n      &lt;Badge\n        text=\"Badge\"\n        variant=\"success\"\n        status=\"complete\"\n      /&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; &lt;SmartGridModal /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Badge,\n  Screen,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const mainScreen = root.createComponent(\n      Screen,\n      {\n        name: 'Home',\n        title: 'Home',\n      },\n    );\n\n    const badge = root.createComponent(Badge, {\n      text: 'Badge',\n      variant: 'success',\n      status: 'complete',\n    });\n\n    mainScreen.append(badge);\n    root.append(mainScreen);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "guidelines",
        "title": "Guidelines",
        "sectionContent": "\n- Badges should be positioned as close as possible to the item they’re related to.\n"
      },
      {
        "type": "Generic",
        "anchorLink": "content-guidelines",
        "title": "Content guidelines",
        "sectionContent": "\n- Be concise. Use a single word to describe the status of an item. \n- Only use two or three words if you need to describe a complex state, for example \"partially fulfilled\".\n\n✅ fulfilled\n❌ order fulfilled\n\nStatuses should ideally be written as adjectives:\n\n✅ unpaid\n❌ payment not received\n      "
      }
    ]
  },
  {
    "name": "Banner",
    "description": "A banner informs merchants about important changes or persistent conditions. Use if you need to communicate to merchants in a prominent way, without blocking other actions.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Banner",
        "description": "",
        "type": "BannerProps",
        "typeDefinitions": {
          "BannerProps": {
            "filePath": "src/surfaces/point-of-sale/components/Banner/Banner.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "BannerProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Banner/Banner.ts",
                "syntaxKind": "PropertySignature",
                "name": "action",
                "value": "string",
                "description": "The text for the action button.",
                "isOptional": true,
                "defaultValue": "'Dismiss'"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Banner/Banner.ts",
                "syntaxKind": "PropertySignature",
                "name": "hideAction",
                "value": "boolean",
                "description": "Whether to hide the action button.",
                "isOptional": true,
                "defaultValue": "true"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Banner/Banner.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "The callback function executed when the banner is pressed.",
                "isOptional": true,
                "defaultValue": "Callback which dismisses the banner"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Banner/Banner.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title text displayed on the banner."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Banner/Banner.ts",
                "syntaxKind": "PropertySignature",
                "name": "variant",
                "value": "BannerVariant",
                "description": "The variant type of the banner."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Banner/Banner.ts",
                "syntaxKind": "PropertySignature",
                "name": "visible",
                "value": "boolean",
                "description": "The visibility state of the banner."
              }
            ],
            "value": "export interface BannerProps {\n  /**\n   * The title text displayed on the banner.\n   */\n  title: string;\n\n  /**\n   * The variant type of the banner.\n   */\n  variant: BannerVariant;\n\n  /**\n   * The text for the action button.\n   * @defaultValue 'Dismiss'\n   */\n  action?: string;\n\n  /**\n   * The callback function executed when the banner is pressed.\n   * @defaultValue Callback which dismisses the banner\n   */\n  onPress?: () => void;\n\n  /**\n   * Whether to hide the action button.\n   * @defaultValue true\n   */\n  hideAction?: boolean;\n\n  /**\n   * The visibility state of the banner.\n   */\n  visible: boolean;\n}"
          },
          "BannerVariant": {
            "filePath": "src/surfaces/point-of-sale/components/Banner/Banner.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BannerVariant",
            "value": "'confirmation' | 'alert' | 'error' | 'information'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "banner-thumbnail.png",
    "defaultExample": {
      "image": "banner-default.png",
      "codeblock": {
        "title": "Banner",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\nimport {\n  Banner,\n  ScrollView,\n  Screen,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  return (\n    &lt;Screen title=\"Home\" name=\"Home\"&gt;\n      &lt;ScrollView&gt;\n        &lt;Banner\n          title=\"Information Banner\"\n          variant=\"information\"\n          action=\"Ok\"\n          visible\n        /&gt;\n        &lt;Banner\n          title=\"Confirmation Banner\"\n          variant=\"confirmation\"\n          visible\n        /&gt;\n        &lt;Banner\n          title=\"Alert Banner\"\n          variant=\"alert\"\n          visible\n        /&gt;\n        &lt;Banner\n          title=\"Error Banner\"\n          variant=\"error\"\n          visible\n        /&gt;\n      &lt;/ScrollView&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; &lt;SmartGridModal /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Banner,\n  ScrollView,\n  Screen,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const screen = root.createComponent(Screen, {\n      title: 'Home',\n      name: 'Home',\n    });\n    const scrollView =\n      root.createComponent(ScrollView);\n\n    scrollView.appendChild(\n      root.createComponent(Banner, {\n        title: 'Information Banner',\n        variant: 'information',\n        action: 'Ok',\n        visible: true,\n      }),\n    );\n\n    scrollView.appendChild(\n      root.createComponent(Banner, {\n        title: 'Confirmation Banner',\n        variant: 'confirmation',\n        visible: true,\n      }),\n    );\n\n    scrollView.appendChild(\n      root.createComponent(Banner, {\n        title: 'Alert Banner',\n        variant: 'alert',\n        visible: true,\n      }),\n    );\n\n    scrollView.appendChild(\n      root.createComponent(Banner, {\n        title: 'Error Banner',\n        variant: 'error',\n        visible: true,\n      }),\n    );\n\n    screen.appendChild(scrollView);\n    root.appendChild(screen);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "guidelines",
        "title": "Guidelines",
        "sectionContent": "\n- Use when needing to communicate to merchants in a way that is persistent but non-interruptive.\n- Only one banner should be visible at a time.\n"
      }
    ]
  },
  {
    "name": "Button",
    "description": "Buttons enable the merchant to initiate actions, like \"add\", \"save\", or \"next\".",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Button",
        "description": "",
        "type": "ButtonProps",
        "typeDefinitions": {
          "ButtonProps": {
            "filePath": "src/surfaces/point-of-sale/components/Button/Button.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "ButtonProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "isDisabled",
                "value": "boolean",
                "description": "Sets whether the `Button` can be tapped.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "isLoading",
                "value": "boolean",
                "description": "Sets whether the `Button` is displaying an animated loading state.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "The callback that is executed when the user taps the button.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The text set on the `Button`."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Button/Button.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "ButtonType",
                "description": "The type of `Button` to render. Determines the appearance of the button.",
                "isOptional": true
              }
            ],
            "value": "export interface ButtonProps {\n  /**\n   * The text set on the `Button`.\n   */\n  title: string;\n  /**\n   * The type of `Button` to render. Determines the appearance of the button.\n   */\n  type?: ButtonType;\n  /**\n   * The callback that is executed when the user taps the button.\n   */\n  onPress?: () => void;\n  /**\n   * Sets whether the `Button` can be tapped.\n   */\n  isDisabled?: boolean;\n  /**\n   * Sets whether the `Button` is displaying an animated loading state.\n   */\n  isLoading?: boolean;\n}"
          },
          "ButtonType": {
            "filePath": "src/surfaces/point-of-sale/components/Button/Button.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ButtonType",
            "value": "'primary' | 'basic' | 'destructive' | 'plain'",
            "description": ""
          }
        }
      },
      {
        "title": "ButtonType",
        "description": "Determines the appearance of the button.",
        "type": "ButtonType",
        "typeDefinitions": {
          "ButtonType": {
            "filePath": "src/surfaces/point-of-sale/components/Button/Button.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ButtonType",
            "value": "'primary' | 'basic' | 'destructive' | 'plain'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "button-thumbnail.png",
    "defaultExample": {
      "image": "button-default.png",
      "codeblock": {
        "title": "Render a button that presents a toast",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react'\nimport { Button, Navigator, Screen, reactExtension, useApi } from '@shopify/ui-extensions-react/point-of-sale'\n\nconst ModalComponent = () =&gt; {\n  const api = useApi()\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen title=\"Home\" name=\"Home\"&gt;\n        &lt;Button title=\"Press me!\" onPress={() =&gt; api.toast.show('Button tapped!')} /&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; {\n  return &lt;ModalComponent /&gt;\n})",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Button,\n  Navigator,\n  Screen,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root, api) =&gt; {\n    const button = root.createComponent(Button, {\n      title: 'Press me!',\n      onPress: () =&gt; {\n        api.toast.show('Button tapped!');\n      },\n    });\n\n    const screen = root.createComponent(Screen, {\n      name: 'Home',\n      title: 'Home',\n    });\n    screen.append(button);\n\n    const navigator =\n      root.createComponent(Navigator);\n\n    navigator.append(screen);\n\n    root.append(navigator);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "CameraScanner",
    "description": "The camera scanner uses the devices camera to scan and decode barcodes or QR codes. It displays a live feed with guidance markers for alignment and triggers actions within the app upon successful recognition.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "CameraScanner",
        "description": "",
        "type": "CameraScannerProps",
        "typeDefinitions": {
          "CameraScannerProps": {
            "filePath": "src/surfaces/point-of-sale/components/CameraScanner/CameraScanner.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "BannerVariant": "src/surfaces/point-of-sale/components/Banner/Banner.ts"
            },
            "name": "CameraScannerProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/CameraScanner/CameraScanner.ts",
                "syntaxKind": "PropertySignature",
                "name": "bannerProps",
                "value": "CameraScannerBannerProps",
                "description": "",
                "isOptional": true
              }
            ],
            "value": "export interface CameraScannerProps {\n  bannerProps?: CameraScannerBannerProps;\n}"
          },
          "CameraScannerBannerProps": {
            "filePath": "src/surfaces/point-of-sale/components/CameraScanner/CameraScanner.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "BannerVariant": "src/surfaces/point-of-sale/components/Banner/Banner.ts"
            },
            "name": "CameraScannerBannerProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/CameraScanner/CameraScanner.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the banner."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/CameraScanner/CameraScanner.ts",
                "syntaxKind": "PropertySignature",
                "name": "variant",
                "value": "BannerVariant",
                "description": "The appearance of the banner."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/CameraScanner/CameraScanner.ts",
                "syntaxKind": "PropertySignature",
                "name": "visible",
                "value": "boolean",
                "description": "The visibility state of the banner."
              }
            ],
            "value": "export interface CameraScannerBannerProps {\n  /**\n   * The title of the banner.\n   */\n  title: string;\n\n  /**\n   * The appearance of the banner.\n   */\n  variant: BannerVariant;\n  /**\n   * The visibility state of the banner.\n   */\n  visible: boolean;\n}"
          },
          "BannerVariant": {
            "filePath": "src/surfaces/point-of-sale/components/Banner/Banner.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BannerVariant",
            "value": "'confirmation' | 'alert' | 'error' | 'information'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "related": [
      {
        "name": "Scanner API",
        "subtitle": "See how to retrieve updates with the Scanner API.",
        "url": "/api/pos-ui-extensions/apis/scanner-api#examples"
      }
    ],
    "thumbnail": "camera-scanner-thumbnail.png",
    "defaultExample": {
      "image": "camera-scanner-default.png",
      "codeblock": {
        "title": "Camera scanner and data text example",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\nimport {\n  CameraScanner,\n  Screen,\n  Text,\n  useScannerDataSubscription,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const {data} = useScannerDataSubscription();\n\n  return (\n    &lt;Screen\n      name=\"CameraScanner\"\n      title=\"Camera Scanner Title\"\n    &gt;\n      &lt;CameraScanner /&gt;\n      &lt;Text&gt;{`Scanned data: ${data || ''}`}&lt;/Text&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; &lt;SmartGridModal /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  CameraScanner,\n  Screen,\n  Text,\n  Stack,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root, api) =&gt; {\n    const mainScreen = root.createComponent(\n      Screen,\n      {\n        title: 'CameraScanner',\n        name: 'Camera Scanner Title',\n      },\n    );\n\n    const cameraScanner = root.createComponent(\n      CameraScanner,\n    );\n\n    const text = root.createComponent(\n      Text,\n      null,\n      'Scanned data: ',\n    );\n\n    mainScreen.append(cameraScanner);\n    mainScreen.append(text);\n    root.append(mainScreen);\n\n    api.scanner.scannerDataSubscribable.subscribe(\n      (data) =&gt; {\n        text.replaceChildren(\n          `Scanned data: ${data || ''}`,\n        );\n      },\n    );\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "best-practices",
        "title": "Best Practices",
        "sectionContent": "\n- Utilize the error banner to display scanning errors or unrecognized barcodes at the top of the camera view screen.\n- After a successful scan, dismiss the full-screen camera view and display a secondary screen showcasing the intended outcome.\n- The camera scanner UI can be adjusted to display the camera view on part of the screen while dedicating the remaining portion to other components. This can be useful for tasks like inventory management.\n- In situations where scanning should not be allowed within a specific section of your application, use an error banner to inform merchants that scanning is not permitted on that screen and offer alternative areas where the scanning function can be performed.\n- Use the error banner at the top of the screen to denote errors while scanning or when encountering an unrecognized barcode.\n- Upon successful scanning of an item, display a ‘Toast’ component with a message such as \"Item scanned\" to indicate the outcome. Additionally, altering the screen contents can also be used to signal a successful scan.\n",
        "image": "camera-scanner-best-practice.png"
      },
      {
        "type": "Generic",
        "anchorLink": "content-guidelines",
        "title": "Content guidelines",
        "sectionContent": "\nFor banners:\n\n- Be concise.\n- Keep to 1 or 2 short sentences.\n- Be dismissible unless it contains critical information or an important step merchants need to take.\n\nExample:\n\n✅ Scanning not permitted on this screen. Go to {Section} to scan items.<br />\nDismiss (CTA)<br />\n❌Error.\n\n✅ Barcode not recognized. Try scanning item again.<br />\nDismiss (CTA)<br />\n❌ Didn’t work.\n\nFor toasts:\n\n- Used for short messages to confirm an action.\n- Never go over 3 or 4 words.\n- Do not use for error messages.\n- Should be used for success messages.\n- Written in the pattern of noun + verb.\n\nExample:\n\n✅ Item scanned.<br />\n❌ Your item has been scanned and added to your inventory count!\n      "
      }
    ]
  },
  {
    "name": "DateField",
    "description": "A component that enables users to open a dialog and select a date through a text input.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "DateField",
        "description": "",
        "type": "DateFieldProps",
        "typeDefinitions": {
          "DateFieldProps": {
            "filePath": "src/surfaces/point-of-sale/components/DateField/DateField.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "InputProps": "src/surfaces/point-of-sale/components/shared/InputField.ts"
            },
            "name": "DateFieldProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "action",
                "value": "InputAction",
                "description": "A button under the text field to provide extra functionality.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the field can be modified.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "error",
                "value": "string",
                "description": "Indicates an error to the user. The field is given specific stylistic treatment to communicate problems that have to be resolved immediately.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "helpText",
                "value": "string",
                "description": "The label under the text field which provides guidance or instructions that assist users.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The content to use as the field label."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onBlur",
                "value": "() => void",
                "description": "The callback when focus is removed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onChange",
                "value": "(value: string) => void",
                "description": "The callback when the user has finished editing a field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onFocus",
                "value": "() => void",
                "description": "The callback when input is focused.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/DateField/DateField.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The current value for the field. Defaults to now. You should update this value in response to the `onChange` callback.",
                "isOptional": true
              }
            ],
            "value": "export interface DateFieldProps\n  extends Pick<\n    InputProps,\n    | 'value'\n    | 'error'\n    | 'label'\n    | 'disabled'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onChange'\n    | 'action'\n    | 'helpText'\n  > {}"
          },
          "InputAction": {
            "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
            "name": "InputAction",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the button can be pressed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The text displayed in the button."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "A callback to be performed."
              }
            ],
            "value": "export interface InputAction {\n  /**\n   * The text displayed in the button.\n   */\n  label: string;\n  /**\n   * A callback to be performed.\n   */\n  onPress: () => void;\n  /**\n   * Whether the button can be pressed.\n   */\n  disabled?: boolean;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "defaultExample": {
      "image": "date-field-default.png",
      "codeblock": {
        "title": "Date input",
        "tabs": [
          {
            "title": "React",
            "code": "import React, {useState} from 'react';\nimport {\n  DateField,\n  Screen,\n  ScrollView,\n  Navigator,\n  Text,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [date, setDate] = useState('');\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"DateField\" title=\"DateField Example\"&gt;\n        &lt;ScrollView&gt;\n          &lt;DateField\n            label=\"Date\"\n            value={date}\n            onChange={setDate}\n            action={{\n              label: 'Clear',\n              onPress: () =&gt; setDate(''),\n            }}\n          /&gt;\n          &lt;Text&gt;Selected Date: {date}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  DateField,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const clearHandler = () =&gt; {\n    dateField.updateProps({value: ''});\n    textBox.replaceChildren('');\n  };\n  const dateField = root.createComponent(DateField, {\n    label: 'Select Date',\n    value: '',\n    action: {label: 'Clear', onPress: clearHandler},\n  });\n\n  const textBox = root.createComponent(Text);\n\n  const onChangeHandler = (newValue: string) =&gt; {\n    dateField.updateProps({value: newValue});\n\n    const textContent = `Selected Date: ${newValue}`;\n    textBox.replaceChildren(textContent);\n  };\n\n  dateField.updateProps({onChange: onChangeHandler});\n\n  const scrollView = root.createComponent(ScrollView);\n  scrollView.append(dateField);\n  scrollView.append(textBox);\n\n  const screen = root.createComponent(Screen, {\n    name: 'DateField',\n    title: 'Date Field Example',\n  });\n  screen.append(scrollView);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "guidelines",
        "title": "Guidelines",
        "sectionContent": "\n- Use a smart default date for common selections.\n      "
      }
    ],
    "thumbnail": "date-field-thumbnail.png"
  },
  {
    "name": "DatePicker",
    "description": "A component used to select a date through a dialog.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "DatePicker",
        "description": "",
        "type": "DatePickerProps",
        "typeDefinitions": {
          "DatePickerProps": {
            "filePath": "src/surfaces/point-of-sale/components/DatePicker/DatePicker.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "DatePickerProps",
            "description": "Represents the properties for the DatePicker component.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/DatePicker/DatePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "inputMode",
                "value": "'inline' | 'spinner'",
                "description": "Whether to display the picker in inline (calendar) mode or spinner mode.",
                "isOptional": true,
                "defaultValue": "'inline'"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/DatePicker/DatePicker.ts",
                "syntaxKind": "MethodSignature",
                "name": "onChange",
                "value": "(selected: string) => void",
                "description": "A callback for changes.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/DatePicker/DatePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "selected",
                "value": "string",
                "description": "The selected time.",
                "isOptional": true,
                "defaultValue": "The current time"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/DatePicker/DatePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "visibleState",
                "value": "[boolean, (visible: boolean) => void]",
                "description": "Control the visible state, and a callback to set the visible state as false when the dialog closes."
              }
            ],
            "value": "export interface DatePickerProps {\n  /**\n   * The selected time.\n   * @defaultValue The current time\n   */\n  selected?: string;\n  /**\n   * A callback for changes.\n   */\n  onChange?(selected: string): void;\n  /**\n   * Control the visible state, and a callback to set the visible state as false when the dialog closes.\n   */\n  visibleState: [boolean, (visible: boolean) => void];\n\n  /**\n   * Whether to display the picker in inline (calendar) mode or spinner mode.\n   * @defaultValue 'inline'\n   */\n  inputMode?: 'inline' | 'spinner';\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "date-picker-thumbnail.png",
    "defaultExample": {
      "image": "date-picker-default.png",
      "codeblock": {
        "title": "DatePicker",
        "tabs": [
          {
            "title": "React",
            "code": "import React, {useState} from 'react';\nimport {\n  Button,\n  DatePicker,\n  Screen,\n  Text,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [date, setDate] = useState(\n    new Date().toDateString(),\n  );\n  const visibleState = useState(false);\n\n  return (\n    &lt;Screen name=\"Home\" title=\"Home\"&gt;\n      &lt;Text&gt;Selected date: {date}&lt;/Text&gt;\n      &lt;Button\n        title=\"Show\"\n        onPress={() =&gt; {\n          visibleState[1](true);\n        }}\n      /&gt;\n      &lt;DatePicker\n        visibleState={visibleState}\n        onChange={(selected) =&gt; {\n          setDate(\n            new Date(selected).toDateString(),\n          );\n        }}\n        selected={date}\n        inputMode={'spinner'}\n      /&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; &lt;SmartGridModal /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Button,\n  DatePicker,\n  Screen,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const mainScreen = root.createComponent(\n      Screen,\n      {\n        name: 'Home',\n        title: 'Home',\n      },\n    );\n\n    const button = root.createComponent(Button, {\n      title: 'Show',\n      onPress: () =&gt; {\n        datePicker.updateProps({\n          visibleState: [true, () =&gt; {}],\n        });\n      },\n    });\n\n    const handleOnChange = (selected) =&gt; {\n      datePicker.updateProps({\n        selected: new Date(\n          selected,\n        ).toDateString(),\n      });\n    };\n\n    const datePicker = root.createComponent(\n      DatePicker,\n      {\n        visibleState: [false, () =&gt; {}],\n        onChange: handleOnChange,\n        selected: new Date().toDateString(),\n        inputMode: 'spinner',\n      },\n    );\n\n    mainScreen.append(button);\n    mainScreen.append(datePicker);\n    root.append(mainScreen);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "Dialog",
    "description": "A dialog is a high-priority, intentionally disruptive message that requires action from the merchant before they can continue using POS.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Dialog",
        "description": "",
        "type": "DialogProps",
        "typeDefinitions": {
          "DialogProps": {
            "filePath": "src/surfaces/point-of-sale/components/Dialog/Dialog.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "DialogProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Dialog/Dialog.ts",
                "syntaxKind": "PropertySignature",
                "name": "actionText",
                "value": "string",
                "description": "The text displayed in the primary action button of the dialog."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Dialog/Dialog.ts",
                "syntaxKind": "PropertySignature",
                "name": "content",
                "value": "string",
                "description": "The text displayed in the body of the dialog.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Dialog/Dialog.ts",
                "syntaxKind": "PropertySignature",
                "name": "isVisible",
                "value": "boolean",
                "description": "Whether the dialog should be presented."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Dialog/Dialog.ts",
                "syntaxKind": "PropertySignature",
                "name": "onAction",
                "value": "() => void",
                "description": "A callback that performs when the action is triggered."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Dialog/Dialog.ts",
                "syntaxKind": "PropertySignature",
                "name": "onSecondaryAction",
                "value": "() => void",
                "description": "A callback that is executed when the secondary action is triggered.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Dialog/Dialog.ts",
                "syntaxKind": "PropertySignature",
                "name": "secondaryActionText",
                "value": "string",
                "description": "The text displayed in the secondary action section of the dialog.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Dialog/Dialog.ts",
                "syntaxKind": "PropertySignature",
                "name": "showSecondaryAction",
                "value": "boolean",
                "description": "Whether a secondary action displays.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Dialog/Dialog.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The text displayed in the title of the dialog."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Dialog/Dialog.ts",
                "syntaxKind": "PropertySignature",
                "name": "type",
                "value": "DialogType",
                "description": "Determines the dialog’s appearance and function.",
                "isOptional": true
              }
            ],
            "value": "export interface DialogProps {\n  /**\n   * The text displayed in the title of the dialog.\n   */\n  title: string;\n\n  /**\n   * The text displayed in the body of the dialog.\n   */\n  content?: string;\n\n  /**\n   * The text displayed in the primary action button of the dialog.\n   */\n  actionText: string;\n\n  /**\n   * The text displayed in the secondary action section of the dialog.\n   */\n  secondaryActionText?: string;\n\n  /**\n   * Whether a secondary action displays.\n   */\n  showSecondaryAction?: boolean;\n\n  /**\n   * Determines the dialog’s appearance and function.\n   */\n  type?: DialogType;\n\n  /**\n   * A callback that performs when the action is triggered.\n   */\n  onAction: () => void;\n\n  /**\n   * A callback that is executed when the secondary action is triggered.\n   */\n  onSecondaryAction?: () => void;\n\n  /**\n   * Whether the dialog should be presented.\n   */\n  isVisible: boolean;\n}"
          },
          "DialogType": {
            "filePath": "src/surfaces/point-of-sale/components/Dialog/Dialog.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "DialogType",
            "value": "'default' | 'alert' | 'error' | 'destructive'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "dialog-thumbnail.png",
    "defaultExample": {
      "image": "dialog-default.png",
      "codeblock": {
        "title": "Dialog example",
        "tabs": [
          {
            "title": "React",
            "code": "import React, {useState} from 'react';\nimport {\n  Button,\n  Dialog,\n  Screen,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [visible, setVisible] = useState(false);\n\n  const handlePrimaryAction = () =&gt; {\n    setVisible(false);\n    console.log('Primary action pressed');\n  };\n\n  const handleSecondaryAction = () =&gt; {\n    setVisible(false);\n    console.log('Secondary action pressed');\n  };\n\n  return (\n    &lt;Screen name=\"Dialog\" title=\"Dialog Title\"&gt;\n      &lt;Button\n        title=\"Show dialog\"\n        onPress={() =&gt; setVisible(true)}\n      /&gt;\n      &lt;Dialog\n        type=\"error\"\n        title=\"Dialog title\"\n        content=\"Dialog content\"\n        actionText=\"Primary action\"\n        onAction={handlePrimaryAction}\n        secondaryActionText=\"Secondary action\"\n        onSecondaryAction={handleSecondaryAction}\n        isVisible={visible}\n      /&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; &lt;SmartGridModal /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Button,\n  Dialog,\n  Screen,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const mainScreen = root.createComponent(\n      Screen,\n      {\n        name: 'Dialog',\n        title: 'Dialog Title',\n      },\n    );\n\n    const button = root.createComponent(Button, {\n      title: 'Show dialog',\n      onPress: () =&gt;\n        dialog.updateProps({visible: true}),\n    });\n\n    const handlePrimaryAction = () =&gt; {\n      dialog.updateProps({visible: false});\n      console.log('Primary action pressed');\n    };\n\n    const handleSecondaryAction = () =&gt; {\n      dialog.updateProps({visible: false});\n      console.log('Secondary action pressed');\n    };\n\n    const dialog = root.createComponent(Dialog, {\n      type: 'error',\n      title: 'Dialog title',\n      content: 'Dialog content',\n      actionText: 'Primary action',\n      onAction: handlePrimaryAction,\n      secondaryActionText: 'Secondary action',\n      onSecondaryAction: handleSecondaryAction,\n      isVisible: false,\n    });\n\n    mainScreen.append(button);\n    mainScreen.append(dialog);\n    root.append(mainScreen);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "guidelines",
        "title": "Guidelines",
        "sectionContent": "\n- A dialog appears on top of the view the merchant is currently looking at.\n- When a dialog appears, the merchant can only interact with the buttons in the dialog and nothing else in the view.\n- A scrim is used to dim the UI in the background, using the surfaceBackground color set to 60% transparency.\n- Dialogs always include at least one action, two actions at most.\n- Buttons in dialogs work best when stacked to accommodate for longer translated content.\n- When buttons are displayed side-by-side, the primary action is on the right. When buttons are stacked, the primary action is at the top.\n- For buttons that initiate irreversible actions, the text should be displayed in \"destructive\" (red) state.\n"
      },
      {
        "type": "Generic",
        "anchorLink": "content-guidelines",
        "title": "Content guidelines",
        "sectionContent": "\nFor confirmation dialogs, the header should be formed as a question that re-emphasizes the action being taken. Don't write: \"Are you sure?\"\n\n✅ Log out of Shopify POS?<br />\n❌ Are you sure you want to log out of Shopify POS?<br />\n❌ You’re about to log out of Shopify POS\n\nFor confirmation dialogs, the primary button should clearly confirm the action while the secondary button should cancel the action with \"Cancel\":\n\n✅ [Primary button] Log out<br />\n❌ [Primary button] Yes\n\nFor errors, the header should clearly communicate the problem rather than the solution (use the body and button to communicate the solution):\n\n✅ [Header] Transaction declined<br />\n❌ [Header] Retry transaction\n\nFor informational dialogs where there's no action for the merchant to take but to acknowledge the message, the sole button should be \"OK\":\n\n✅ [Button] OK<br />\n❌ [Button] Understood<br />\n❌ [Button] Dismiss\n      "
      }
    ]
  },
  {
    "name": "EmailField",
    "description": "Use an email field to conveniently and accurately capture merchant email addresses.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "EmailField",
        "description": "",
        "type": "EmailFieldProps",
        "typeDefinitions": {
          "EmailFieldProps": {
            "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "InputProps": "src/surfaces/point-of-sale/components/shared/InputField.ts"
            },
            "name": "EmailFieldProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "action",
                "value": "InputAction",
                "description": "A button under the text field to provide extra functionality.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the field can be modified.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "error",
                "value": "string",
                "description": "Indicates an error to the user. The field is given specific stylistic treatment to communicate problems that have to be resolved immediately.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "helpText",
                "value": "string",
                "description": "The label under the text field which provides guidance or instructions that assist users.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The content to use as the field label."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxLength",
                "value": "number",
                "description": "The maximum number of characters allowed in the input field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onBlur",
                "value": "() => void",
                "description": "The callback when focus is removed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onChange",
                "value": "(value: string) => void",
                "description": "The callback when the user has finished editing a field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onFocus",
                "value": "() => void",
                "description": "The callback when input is focused.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onInput",
                "value": "(value: string) => void",
                "description": "Callback when the user makes any changes in the field. As noted in the documentation for `onChange`, you **must not** use this to update `value` — use the `onChange` callback for that purpose. Use the `onInput` prop when you need to do something as soon as the user makes a change, like clearing validation errors that apply to the field as soon as the user begins making the necessary adjustments.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "placeholder",
                "value": "string",
                "description": "A short hint that describes the expected value of the field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "required",
                "value": "boolean",
                "description": "Whether the field needs a value.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/EmailField/EmailField.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The current value for the field. Defaults to now. You should update this value in response to the `onChange` callback.",
                "isOptional": true
              }
            ],
            "value": "export interface EmailFieldProps extends InputProps {}"
          },
          "InputAction": {
            "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
            "name": "InputAction",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the button can be pressed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The text displayed in the button."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "A callback to be performed."
              }
            ],
            "value": "export interface InputAction {\n  /**\n   * The text displayed in the button.\n   */\n  label: string;\n  /**\n   * A callback to be performed.\n   */\n  onPress: () => void;\n  /**\n   * Whether the button can be pressed.\n   */\n  disabled?: boolean;\n}"
          }
        }
      }
    ],
    "defaultExample": {
      "codeblock": {
        "title": "Email input",
        "tabs": [
          {
            "title": "React",
            "code": "import React, {useState} from 'react';\nimport {\n  EmailField,\n  Screen,\n  ScrollView,\n  Navigator,\n  Text,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [email, setEmail] = useState('');\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"DateField\" title=\"DateField Example\"&gt;\n        &lt;ScrollView&gt;\n          &lt;EmailField\n            label=\"Email\"\n            placeholder=\"example@email.com\"\n            helpText=\"Please enter a valid email\"\n            value={email}\n            onChange={setEmail}\n            required={true}\n            action={{\n              label: 'Clear',\n              onPress: () =&gt; setEmail(''),\n            }}\n          /&gt;\n          &lt;Text&gt;Entered Email: {email}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  EmailField,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const clearHandler = () =&gt; {\n    emailField.updateProps({value: ''});\n    textBox.replaceChildren('');\n  };\n  const emailField = root.createComponent(EmailField, {\n    label: 'Email',\n    value: '',\n    action: {label: 'Clear', onPress: clearHandler},\n  });\n\n  const textBox = root.createComponent(Text);\n\n  const onChangeHandler = (newValue: string) =&gt; {\n    emailField.updateProps({value: newValue});\n\n    const textContent = `Selected Date: ${newValue}`;\n    textBox.replaceChildren(textContent);\n  };\n\n  emailField.updateProps({onChange: onChangeHandler});\n\n  const scrollView = root.createComponent(ScrollView);\n  scrollView.append(emailField);\n  scrollView.append(textBox);\n\n  const screen = root.createComponent(Screen, {\n    name: 'DateField',\n    title: 'Date Field Example',\n  });\n  screen.append(scrollView);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Components",
    "related": [],
    "thumbnail": "email-field-thumbnail.png"
  },
  {
    "name": "FormattedTextField",
    "description": "Use a formatted text field when you require additional functionality such as the text field input type or a custom validator.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "FormattedTextField",
        "description": "",
        "type": "FormattedTextFieldProps",
        "typeDefinitions": {
          "FormattedTextFieldProps": {
            "filePath": "src/surfaces/point-of-sale/components/FormattedTextField/FormattedTextField.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "AutoCapitalizationType": "src/surfaces/point-of-sale/components/shared/auto-capitalization-type.ts",
              "BaseTextFieldProps": "src/surfaces/point-of-sale/components/shared/BaseTextField.ts"
            },
            "name": "FormattedTextFieldProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/FormattedTextField/FormattedTextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "autoCapitalize",
                "value": "AutoCapitalizationType",
                "description": "Dictates when the text should be auto-capitalized.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/FormattedTextField/FormattedTextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "customValidator",
                "value": "(text: string) => boolean",
                "description": "Applies a custom validator that can dictate whether or not an entered value is valid.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/FormattedTextField/FormattedTextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "errorMessage",
                "value": "string",
                "description": "Sets an error message to present to the user.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/FormattedTextField/FormattedTextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "initialValue",
                "value": "string",
                "description": "Populates the `TextField` with an text initial value.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/FormattedTextField/FormattedTextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "inputType",
                "value": "InputType",
                "description": "The `InputType` of the `TextField`. This will select the appropriate keyboard.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/FormattedTextField/FormattedTextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "isValid",
                "value": "boolean",
                "description": "Set whether the current value in the `TextField` is valid.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/FormattedTextField/FormattedTextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onChangeText",
                "value": "(value: string) => void",
                "description": "A callback that is executed every time the `TextField` value changes.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/FormattedTextField/FormattedTextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "placeholder",
                "value": "string",
                "description": "Sets a placeholder value for when the `TextField` is empty.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/FormattedTextField/FormattedTextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the `TextField`.",
                "isOptional": true
              }
            ],
            "value": "export interface FormattedTextFieldProps extends BaseTextFieldProps {\n  /**\n   * The `InputType` of the `TextField`. This will select the appropriate keyboard.\n   */\n  inputType?: InputType;\n  /**\n   * Dictates when the text should be auto-capitalized.\n   */\n  autoCapitalize?: AutoCapitalizationType;\n  /**\n   * Applies a custom validator that can dictate whether or not an entered value is valid.\n   */\n  customValidator?: (text: string) => boolean;\n}"
          },
          "AutoCapitalizationType": {
            "filePath": "src/surfaces/point-of-sale/components/shared/auto-capitalization-type.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AutoCapitalizationType",
            "value": "'none' | 'sentences' | 'words' | 'characters'",
            "description": ""
          },
          "InputType": {
            "filePath": "src/surfaces/point-of-sale/components/FormattedTextField/FormattedTextField.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "AutoCapitalizationType": "src/surfaces/point-of-sale/components/shared/auto-capitalization-type.ts",
              "BaseTextFieldProps": "src/surfaces/point-of-sale/components/shared/BaseTextField.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InputType",
            "value": "'text' | 'number' | 'currency' | 'giftcard' | 'email'",
            "description": "Dictates what type of values can be used in a `TextField`."
          }
        }
      },
      {
        "title": "InputType",
        "description": "",
        "type": "InputType",
        "typeDefinitions": {
          "InputType": {
            "filePath": "src/surfaces/point-of-sale/components/FormattedTextField/FormattedTextField.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "AutoCapitalizationType": "src/surfaces/point-of-sale/components/shared/auto-capitalization-type.ts",
              "BaseTextFieldProps": "src/surfaces/point-of-sale/components/shared/BaseTextField.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "InputType",
            "value": "'text' | 'number' | 'currency' | 'giftcard' | 'email'",
            "description": "Dictates what type of values can be used in a `TextField`."
          }
        }
      },
      {
        "title": "AutoCapitalizationType",
        "description": "",
        "type": "AutoCapitalizationType",
        "typeDefinitions": {
          "AutoCapitalizationType": {
            "filePath": "src/surfaces/point-of-sale/components/shared/auto-capitalization-type.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "AutoCapitalizationType",
            "value": "'none' | 'sentences' | 'words' | 'characters'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "formatted-text-field-thumbnail.png",
    "defaultExample": {
      "image": "formatted-text-field-default.png",
      "codeblock": {
        "title": "Render a FormattedTextField that validates email addresses",
        "tabs": [
          {
            "title": "React",
            "code": "import React, {useState} from 'react';\nimport {\n  Navigator,\n  Screen,\n  Text,\n  ScrollView,\n  FormattedTextField,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [textFieldValue, setTextFieldValue] =\n    useState('');\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen\n        name=\"TextArea\"\n        title=\"Text Area Example\"\n      &gt;\n        &lt;ScrollView&gt;\n          &lt;FormattedTextField\n            placeholder=\"Email address\"\n            inputType=\"email\"\n            onChangeText={setTextFieldValue}\n          /&gt;\n          &lt;Text&gt;{textFieldValue}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; &lt;SmartGridModal /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  extension,\n  Screen,\n  Navigator,\n  ScrollView,\n  Text,\n  FormattedTextField,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const homeScreen = root.createComponent(\n      Screen,\n      {\n        name: 'Home',\n        title: 'Home',\n      },\n    );\n\n    const text = root.createComponent(Text);\n\n    const textField = root.createComponent(\n      FormattedTextField,\n      {\n        placeholder: 'Email address',\n        inputType: 'email',\n        onChangeText: (newText) =&gt; {\n          text.replaceChildren(newText);\n        },\n      },\n    );\n\n    const scrollView =\n      root.createComponent(ScrollView);\n\n    homeScreen.append(scrollView);\n    scrollView.append(textField);\n    scrollView.append(text);\n\n    const navigator =\n      root.createComponent(Navigator);\n    navigator.append(homeScreen);\n    root.append(navigator);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "Icon",
    "description": "A component that renders an icon from the POS asset catalog.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Icon",
        "description": "",
        "type": "IconProps",
        "typeDefinitions": {
          "IconProps": {
            "filePath": "src/surfaces/point-of-sale/components/Icon/Icon.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "IconProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Icon/Icon.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "IconName",
                "description": "A name used to render the icon."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Icon/Icon.ts",
                "syntaxKind": "PropertySignature",
                "name": "size",
                "value": "IconSize",
                "description": "Size of the icon.",
                "isOptional": true,
                "defaultValue": "'major'"
              }
            ],
            "value": "export interface IconProps {\n  /**\n   * A name used to render the icon.\n   */\n  name: IconName;\n  /**\n   * Size of the icon.\n   * @defaultValue 'major'\n   */\n  size?: IconSize;\n}"
          },
          "IconName": {
            "filePath": "src/surfaces/point-of-sale/components/Icon/Icon.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "IconName",
            "value": "'add-customer' | 'analytics' | 'apps' | 'arrow' | 'arrow-left' | 'backspace' | 'card-reader' | 'call' | 'cancel' | 'not-stocked' | 'cash' | 'checkmark' | 'caret-down' | 'checkmark-active' | 'checkmark-inactive' | 'chevron-up' | 'chevron-right' | 'chevron-down' | 'circle-alert' | 'circle-cancel' | 'circle-checkmark' | 'circle-disconnected' | 'circle-info' | 'circle-outline' | 'clock' | 'collections' | 'copy' | 'credit-card' | 'custom-payment' | 'custom-sale' | 'discount' | 'external-link' | 'flag' | 'flip-camera' | 'gallery-view' | 'gift-card' | 'help' | 'hide-keyboard' | 'home' | 'horizontal-dots' | 'keypad' | 'lightning' | 'link' | 'list' | 'list-view' | 'lock' | 'mail' | 'available-at-other-locations' | 'menu' | 'minus' | 'mobile' | 'note-report' | 'drawer' | 'orders' | 'shopify-payments' | 'play-button' | 'plus' | 'products' | 'radio-active' | 'radio-inactive' | 'rearrange' | 'receipt' | 'refresh' | 'register' | 'retrieve-cart' | 'image-placeholder' | 'save-cart' | 'scan-barcode' | 'search' | 'send' | 'settings' | 'shipment' | 'split-payment' | 'sort' | 'staff' | 'star' | 'unordered-list' | 'connectivity-warning' | 'internet' | 'delivery' | 'shop-pay'",
            "description": ""
          },
          "IconSize": {
            "filePath": "src/surfaces/point-of-sale/components/Icon/Icon.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "IconSize",
            "value": "'minor' | 'major' | 'spot' | 'caption' | 'badge'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "related": [
      {
        "name": "Figma UI Kit Icons",
        "subtitle": "See the Figma UI Kit to get a full list of icons to design your extension",
        "url": "https://www.figma.com/design/0UcHY7C4hqrhvA5tjynunA/Shopify-POS-UI-Kit-(Community)?node-id=15-15&t=Ygce7CbfazMNpKsA-0",
        "type": "star"
      }
    ],
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "guidelines",
        "title": "Guidelines",
        "sectionContent": "\n- Icons in POS are used in areas where they specifically add clarity and structure to the UI, aiding in creating a deeper understanding of the product and common interaction points nested throughout the experience."
      }
    ],
    "defaultExample": {
      "image": "icon-default.png",
      "codeblock": {
        "title": "Example icons",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\n\nimport {\n  Icon,\n  Screen,\n  ScrollView,\n  Navigator,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"Image\" title=\"Image Example\"&gt;\n        &lt;ScrollView&gt;\n          &lt;Icon name=\"call\" size=\"minor\" /&gt;\n          &lt;Icon name=\"card-reader\" size=\"major\" /&gt;\n          &lt;Icon name=\"circle-cancel\" size=\"spot\" /&gt;\n          &lt;Icon name=\"orders\" size=\"caption\" /&gt;\n          &lt;Icon name=\"star\" size=\"badge\" /&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Icon,\n  IconName,\n  IconSize,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const iconsData: {name: IconName; size: IconSize}[] = [\n    {name: 'call', size: 'minor'},\n    {name: 'card-reader', size: 'major'},\n    {name: 'circle-cancel', size: 'spot'},\n    {name: 'orders', size: 'caption'},\n    {name: 'star', size: 'badge'},\n  ];\n  const scrollView = root.createComponent(ScrollView);\n\n  iconsData.forEach((iconData) =&gt; {\n    const icon = root.createComponent(Icon, {\n      name: iconData.name,\n      size: iconData.size,\n    });\n    scrollView.append(icon);\n  });\n\n  const screen = root.createComponent(Screen, {\n    name: 'Icon',\n    title: 'Icon Example',\n  });\n  screen.append(scrollView);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "thumbnail": "icon-thumbnail.png"
  },
  {
    "name": "Image",
    "description": "The image component displays an image to a merchant in Shopify POS.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Image",
        "description": "",
        "type": "ImageProps",
        "typeDefinitions": {
          "ImageProps": {
            "filePath": "src/surfaces/point-of-sale/components/Image/Image.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "ImageProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Image/Image.ts",
                "syntaxKind": "PropertySignature",
                "name": "src",
                "value": "string",
                "description": "The source of the image to be displayed.",
                "isOptional": true
              }
            ],
            "value": "export interface ImageProps {\n  /**\n   * The source of the image to be displayed.\n   */\n  src?: string;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "defaultExample": {
      "image": "image-default.png",
      "codeblock": {
        "title": "Example image",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\n\nimport {\n  Image,\n  Screen,\n  ScrollView,\n  Navigator,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"Image\" title=\"Image Example\"&gt;\n        &lt;ScrollView&gt;\n          &lt;Image src=\"example.png\" /&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; &lt;SmartGridModal /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Image,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root, api) =&gt; {\n    const image = root.createComponent(Image, {\n      src: 'example.png',\n    });\n\n    const scrollView =\n      root.createComponent(ScrollView);\n    scrollView.append(image);\n\n    const screen = root.createComponent(Screen, {\n      name: 'Image',\n      title: 'Image Example',\n    });\n    screen.append(scrollView);\n\n    const navigator =\n      root.createComponent(Navigator);\n    navigator.append(screen);\n\n    root.append(navigator);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    },
    "thumbnail": "image-thumbnail.png"
  },
  {
    "name": "List",
    "description": "The list is a scrollable component in which the list rows are rendered.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "List",
        "description": "",
        "type": "ListProps",
        "typeDefinitions": {
          "ListProps": {
            "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
            "importMap": {
              "RemoteFragment": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "BadgeProps": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
              "ColorType": "src/surfaces/point-of-sale/components/Text/Text.ts"
            },
            "name": "ListProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "data",
                "value": "ListRow[]",
                "description": "The array of `ListRow` which will be converted into rows for this list."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "imageDisplayStrategy",
                "value": "'automatic' | 'always' | 'never'",
                "description": "The logic behind displaying an image or placeholder. `automatic` will display an image or placeholder if it detects that a `ListItem` in `data` has an `imageUri` value. `never` will never display images or placeholders. `always` will always display images or placeholders if `imageUri` is undefined or empty.",
                "isOptional": true,
                "defaultValue": "`automatic`"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "isLoadingMore",
                "value": "boolean",
                "description": "Whether or not more data is being loaded. Set this to `true` when paginating and fetching more data for the list.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "listHeaderComponent",
                "value": "RemoteFragment",
                "description": "A header component for the list.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "onEndReached",
                "value": "() => void",
                "description": "Callback for when the user reaches the end of the `List`. This can be used to fire a request to load more data.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "A large display title at the top of the `List`.",
                "isOptional": true
              }
            ],
            "value": "export interface ListProps {\n  /**\n   * A large display title at the top of the `List`.\n   */\n  title?: string;\n  /**\n   * A header component for the list.\n   */\n  listHeaderComponent?: RemoteFragment;\n  /**\n   * The array of `ListRow` which will be converted into rows for this list.\n   */\n  data: ListRow[];\n  /**\n   * Whether or not more data is being loaded. Set this to `true` when paginating and fetching more data for the list.\n   */\n  isLoadingMore?: boolean;\n  /**\n   * The logic behind displaying an image or placeholder. `automatic` will display an image or placeholder if it detects\n   * that a `ListItem` in `data` has an `imageUri` value. `never` will never display images or placeholders. `always` will\n   * always display images or placeholders if `imageUri` is undefined or empty.\n   * @defaultValue `automatic`\n   */\n  imageDisplayStrategy?: 'automatic' | 'always' | 'never';\n  /**\n   * Callback for when the user reaches the end of the `List`. This can be used to fire a request to load more data.\n   */\n  onEndReached?: () => void;\n}"
          },
          "ListRow": {
            "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
            "importMap": {
              "RemoteFragment": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "BadgeProps": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
              "ColorType": "src/surfaces/point-of-sale/components/Text/Text.ts"
            },
            "name": "ListRow",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The unique identifier for this list item."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "leftSide",
                "value": "ListRowLeftSide",
                "description": "The user interface of the left side of the row."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "Callback for when the user taps the row.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "rightSide",
                "value": "ListRowRightSide",
                "description": "The user interface of the right side of the row.",
                "isOptional": true
              }
            ],
            "value": "export interface ListRow {\n  /**\n   * The unique identifier for this list item.\n   */\n  id: string;\n  /**\n   * The user interface of the left side of the row.\n   */\n  leftSide: ListRowLeftSide;\n  /**\n   * The user interface of the right side of the row.\n   */\n  rightSide?: ListRowRightSide;\n  /**\n   * Callback for when the user taps the row.\n   */\n  onPress?: () => void;\n}"
          },
          "ListRowLeftSide": {
            "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
            "importMap": {
              "RemoteFragment": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "BadgeProps": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
              "ColorType": "src/surfaces/point-of-sale/components/Text/Text.ts"
            },
            "name": "ListRowLeftSide",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "badge",
                "value": "BadgeProps",
                "description": "",
                "isOptional": true,
                "deprecationMessage": "badge will be removed in version 2.0.0 in favor of badges.\nPlease migrate to using badges as soon as possible."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "badges",
                "value": "BadgeProps[]",
                "description": "Colored badges that are displayed underneath the `title` and `subtitles`.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "image",
                "value": "{ source?: string; badge?: number; }",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The main label that will be displayed on the left side of the row."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "[ListRowSubtitle, ListRowSubtitle?, ListRowSubtitle?]",
                "description": "The subtitles to display beneath the main label. Up to 3 subtitles can be displayed. Subtitles can optionally be configured with colors by passing an object with a `content` and `color` properties.",
                "isOptional": true
              }
            ],
            "value": "export interface ListRowLeftSide {\n  /**\n   * The main label that will be displayed on the left side of the row.\n   */\n  label: string;\n  /**\n   * The subtitles to display beneath the main label. Up to 3 subtitles can be displayed.\n   * Subtitles can optionally be configured with colors by passing an object with a `content` and `color` properties.\n   */\n  subtitle?: [ListRowSubtitle, ListRowSubtitle?, ListRowSubtitle?];\n  /**\n   * @deprecated\n   * badge will be removed in version 2.0.0 in favor of badges.\n   * Please migrate to using badges as soon as possible.\n   */\n  badge?: BadgeProps;\n  /**\n   * Colored badges that are displayed underneath the `title` and `subtitles`.\n   */\n  badges?: BadgeProps[];\n  image?: {\n    /**\n     * A link to an image to be displayed on the far left side of the row.\n     */\n    source?: string;\n    /**\n     * A number that is displayed on the top right of the image.\n     */\n    badge?: number;\n  };\n}"
          },
          "BadgeProps": {
            "filePath": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "BadgeProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
                "syntaxKind": "PropertySignature",
                "name": "status",
                "value": "BadgeStatus",
                "description": "A circle icon displaying the status of the badge.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
                "syntaxKind": "PropertySignature",
                "name": "text",
                "value": "string",
                "description": "The text displayed inside the badge."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
                "syntaxKind": "PropertySignature",
                "name": "variant",
                "value": "BadgeVariant",
                "description": "The appearance and function of the badge."
              }
            ],
            "value": "export interface BadgeProps {\n  /**\n   * The text displayed inside the badge.\n   */\n  text: string;\n\n  /**\n   * The appearance and function of the badge.\n   */\n  variant: BadgeVariant;\n\n  /**\n   * A circle icon displaying the status of the badge.\n   */\n  status?: BadgeStatus;\n}"
          },
          "BadgeStatus": {
            "filePath": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BadgeStatus",
            "value": "'empty' | 'partial' | 'complete'",
            "description": ""
          },
          "BadgeVariant": {
            "filePath": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "BadgeVariant",
            "value": "'neutral' | 'critical' | 'warning' | 'success' | 'highlight'",
            "description": ""
          },
          "ListRowSubtitle": {
            "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
            "importMap": {
              "RemoteFragment": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "BadgeProps": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
              "ColorType": "src/surfaces/point-of-sale/components/Text/Text.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ListRowSubtitle",
            "value": "string | SubtitleType",
            "description": ""
          },
          "SubtitleType": {
            "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
            "importMap": {
              "RemoteFragment": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "BadgeProps": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
              "ColorType": "src/surfaces/point-of-sale/components/Text/Text.ts"
            },
            "name": "SubtitleType",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "color",
                "value": "ColorType",
                "description": "Property used to modify the subtitle appearance.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "content",
                "value": "string",
                "description": "The subtitles to display beneath the main label."
              }
            ],
            "value": "export interface SubtitleType {\n  /**\n   * The subtitles to display beneath the main label.\n   */\n  content: string;\n\n  /**\n   * Property used to modify the subtitle appearance.\n   */\n  color?: ColorType;\n}"
          },
          "ColorType": {
            "filePath": "src/surfaces/point-of-sale/components/Text/Text.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ColorType",
            "value": "'TextNeutral' | 'TextSubdued' | 'TextDisabled' | 'TextWarning' | 'TextCritical' | 'TextSuccess' | 'TextInteractive' | 'TextHighlight'",
            "description": ""
          },
          "ListRowRightSide": {
            "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
            "importMap": {
              "RemoteFragment": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "BadgeProps": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
              "ColorType": "src/surfaces/point-of-sale/components/Text/Text.ts"
            },
            "name": "ListRowRightSide",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The main label that will be displayed on the right side of the row.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "showChevron",
                "value": "boolean",
                "description": "Show a chevron. Set this to true if pressing on the row navigates to another screen.",
                "isOptional": true,
                "defaultValue": "`false`"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "toggleSwitch",
                "value": "ToggleSwitch",
                "description": "A toggle switch that is be displayed on the right side of the row.",
                "isOptional": true
              }
            ],
            "value": "export interface ListRowRightSide {\n  /**\n   * The main label that will be displayed on the right side of the row.\n   */\n  label?: string;\n  /**\n   * Show a chevron. Set this to true if pressing on the row navigates to another screen.\n   * @defaultValue `false`\n   */\n  showChevron?: boolean;\n  /**\n   * A toggle switch that is be displayed on the right side of the row.\n   */\n  toggleSwitch?: ToggleSwitch;\n}"
          },
          "ToggleSwitch": {
            "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
            "importMap": {
              "RemoteFragment": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "BadgeProps": "src/surfaces/point-of-sale/components/Badge/Badge.ts",
              "ColorType": "src/surfaces/point-of-sale/components/Text/Text.ts"
            },
            "name": "ToggleSwitch",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether or not the toggle switch is disabled.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/List/List.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "boolean",
                "description": "Whether or not the toggle switch is on or off.",
                "isOptional": true
              }
            ],
            "value": "export interface ToggleSwitch {\n  /**\n   * Whether or not the toggle switch is on or off.\n   */\n  value?: boolean;\n\n  /**\n   * Whether or not the toggle switch is disabled.\n   */\n  disabled?: boolean;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [
      {
        "name": "ProductSearch API",
        "subtitle": "See how to use the ProductSearch API with a SearchBar to search for products.",
        "url": "/api/pos-ui-extensions/apis/productsearch-api#example-search-for-products-with-a-search-bar"
      }
    ],
    "thumbnail": "list-thumbnail.png",
    "defaultExample": {
      "image": "list-default.png",
      "codeblock": {
        "title": "Product List",
        "tabs": [
          {
            "title": "React",
            "code": "import React, {useState} from 'react';\nimport {\n  Navigator,\n  Screen,\n  ScrollView,\n  List,\n  Text,\n  Section,\n  ListRowSubtitle,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [seeDetails, setSeeDetails] = useState(false);\n  const listData = [\n    {\n      id: 'graphicTees',\n      leftSide: {\n        label: 'Graphic Tees',\n        subtitle: [{content: 'Summer Collection'}, {content: 'Unisex'}] as [\n          ListRowSubtitle,\n          ListRowSubtitle?,\n        ],\n      },\n      rightSide: {\n        label: 'Product details',\n        showChevron: true,\n      },\n      onPress: () =&gt; setSeeDetails(!seeDetails),\n    },\n    {\n      id: 'denimShorts',\n      leftSide: {\n        label: 'Denim Shorts',\n        subtitle: [{content: 'Summer Collection'}, {content: 'Denim'}] as [\n          ListRowSubtitle,\n          ListRowSubtitle?,\n        ],\n      },\n    },\n  ];\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"TextArea\" title=\"Text Area Example\"&gt;\n        &lt;ScrollView&gt;\n          &lt;List title=\"Products\" data={listData} /&gt;\n          {seeDetails && (\n            &lt;Section title=\"Our T-shirts\"&gt;\n              &lt;Text&gt;Our shirts are made with 100% organic cotton!&lt;/Text&gt;\n            &lt;/Section&gt;\n          )}\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  List,\n  Text,\n  Section,\n  ListRowSubtitle,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  let showDetails = false;\n  const scrollView = root.createComponent(ScrollView);\n  const section = root.createComponent(Section, {\n    title: 'Our T-shirts',\n  });\n\n  const triggerShowDetails = () =&gt; {\n    showDetails = !showDetails;\n    if (showDetails) {\n      scrollView.append(section);\n    } else {\n      scrollView.removeChild(section);\n    }\n  };\n\n  const listData = [\n    {\n      id: 'graphicTees',\n      leftSide: {\n        label: 'Graphic Tees',\n        subtitle: [{content: 'Summer Collection'}, {content: 'Unisex'}] as [\n          ListRowSubtitle,\n          ListRowSubtitle?,\n        ],\n      },\n      rightSide: {\n        label: 'Product details',\n        showChevron: true,\n      },\n      onPress: () =&gt; triggerShowDetails(),\n    },\n    {\n      id: 'denimShorts',\n      leftSide: {\n        label: 'Denim Shorts',\n        subtitle: [{content: 'Summer Collection'}, {content: 'Denim'}] as [\n          ListRowSubtitle,\n          ListRowSubtitle?,\n        ],\n      },\n    },\n  ];\n  const list = root.createComponent(List, {\n    title: 'Products',\n    data: listData,\n  });\n\n  const textBlock = root.createComponent(\n    Text,\n    null,\n    'Our shirts are made with 100% organic cotton!',\n  );\n\n  section.append(textBlock);\n\n  scrollView.append(list);\n  if (showDetails) {\n    scrollView.append(section);\n  }\n  const screen = root.createComponent(Screen, {\n    name: 'TextArea',\n    title: 'Text Area Example',\n  });\n  screen.append(scrollView);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "guidelines",
        "title": "Guidelines",
        "sectionContent": "\nList items have a wide variety of use cases:\n\n- To display and link to an object | Examples: an item in the cart, a customer in the customer list\n- To display information | Examples: the payment breakdown in an order, staff contact information\n- To display a menu item | Examples: an item on the first page of settings, an item in “More actions”\n- To display a setting\n- To display an action related to other items in the section\n- To show a selectable option | Example: one filter option\n- To display an external link\n    "
      },
      {
        "type": "Generic",
        "anchorLink": "content-guidelines",
        "title": "Content Guidelines",
        "sectionContent": "\nSubtitles:\n\n- Each subtitle should have a different piece of information. Don't use dashes to display more than one type of information on the same line.\n- Subtitles should be shown in order of relevance.\n- If you're showing the results of the form, the label should be the form field title and the subtitle should be the information the merchant entered.\n    "
      }
    ]
  },
  {
    "name": "Navigator",
    "description": "A component used to navigate between different screens.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Navigator",
        "description": "",
        "type": "NavigatorProps",
        "typeDefinitions": {
          "NavigatorProps": {
            "filePath": "src/surfaces/point-of-sale/components/Navigator/Navigator.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "NavigatorProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Navigator/Navigator.ts",
                "syntaxKind": "PropertySignature",
                "name": "initialScreenName",
                "value": "string",
                "description": "Sets the initial `Screen` whose `name` matches.",
                "isOptional": true
              }
            ],
            "value": "export interface NavigatorProps {\n  /**\n   * Sets the initial `Screen` whose `name` matches.\n   */\n  initialScreenName?: string;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "navigator-thumbnail.png",
    "defaultExample": {
      "image": "navigator-default.png",
      "codeblock": {
        "title": "Navigate to another screen",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react'\n\nimport { Screen, Text, Navigator, reactExtension, Button, useApi } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"Home\" title=\"Home\"&gt;\n        &lt;Text&gt;Home screen&lt;/Text&gt;\n        &lt;Button title=\"Navigate to details\" onPress={() =&gt; api.navigation.navigate('Details')} /&gt;\n      &lt;/Screen&gt;\n      &lt;Screen name=\"Details\" title=\"Details\"&gt;\n        &lt;Text&gt;Details screen&lt;/Text&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  extension,\n  Screen,\n  Navigator,\n  Text,\n  Button,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const homeScreen = root.createComponent(Screen, {\n    name: 'Home',\n    title: 'Home',\n  });\n\n  const homeText = root.createComponent(Text);\n  homeText.append('Home screen');\n  homeScreen.append(homeText);\n\n  const navigateButton = root.createComponent(Button, {\n    title: 'Navigate to details',\n    onPress: () =&gt; api.navigation.navigate('Details'),\n  });\n  homeScreen.append(navigateButton);\n\n  const detailsScreen = root.createComponent(Screen, {\n    name: 'Details',\n    title: 'Details',\n  });\n\n  const detailsText = root.createComponent(Text);\n  detailsText.append('Details screen');\n  detailsScreen.append(detailsText);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(homeScreen);\n  navigator.append(detailsScreen);\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "examples": {
      "description": "Using a Navigator to navigate between Screens",
      "examples": [
        {
          "codeblock": {
            "title": "Navigate to another screen with parameters",
            "tabs": [
              {
                "title": "React",
                "code": "import React, {useState} from 'react';\n\nimport {\n  Screen,\n  Text,\n  Navigator,\n  reactExtension,\n  Button,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  return (\n    &lt;Navigator&gt;\n      &lt;HomeScreen /&gt;\n      &lt;DetailsScreen /&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nconst HomeScreen = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n  return (\n    &lt;Screen name=\"Home\" title=\"Home\"&gt;\n      &lt;Text&gt;Home screen&lt;/Text&gt;\n      &lt;Button\n        title=\"Navigate to details\"\n        onPress={() =&gt; api.navigation.navigate('Details', {orderId: '123'})}\n      /&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nconst DetailsScreen = () =&gt; {\n  const [params, setParams] = useState&lt;pos.home.modal.render&gt;();\n\n  return (\n    &lt;Screen\n      name=\"Details\"\n      title=\"Details\"\n      presentation={{sheet: true}}\n      onReceiveParams={setParams}\n    &gt;\n      &lt;Text&gt;{`Order ID: ${params.orderId}`}&lt;/Text&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  extension,\n  Screen,\n  Navigator,\n  Text,\n  Button,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const homeScreen = root.createComponent(Screen, {\n    name: 'Home',\n    title: 'Home',\n  });\n\n  const homeText = root.createComponent(Text);\n  homeText.append('Home screen');\n  homeScreen.append(homeText);\n\n  const navigateButton = root.createComponent(Button, {\n    title: 'Navigate to details',\n    onPress: () =&gt; api.navigation.navigate('Details', {orderId: '123'}),\n  });\n  homeScreen.append(navigateButton);\n\n  const detailsText = root.createComponent(Text);\n\n  const detailsScreen = root.createComponent(Screen, {\n    name: 'Details',\n    title: 'Details',\n    onReceiveParams: (params) =&gt; {\n      detailsText.replaceChildren(`Order ID: ${params.orderId}`);\n    },\n  });\n\n  detailsScreen.append(detailsText);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(homeScreen);\n  navigator.append(detailsScreen);\n  root.append(navigator);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Navigate to another screen with sheet presentation",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react'\n\nimport { Screen, Text, Navigator, reactExtension, Button, useApi } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"Home\" title=\"Home\"&gt;\n        &lt;Text&gt;Home screen&lt;/Text&gt;\n        &lt;Button title=\"Navigate to details\" onPress={() =&gt; api.navigation.navigate('Details')} /&gt;\n      &lt;/Screen&gt;\n      &lt;Screen name=\"Details\" title=\"Details\" presentation={{sheet: true}}&gt;\n        &lt;Text&gt;Details screen&lt;/Text&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  extension,\n  Screen,\n  Navigator,\n  Text,\n  Button,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const homeScreen = root.createComponent(Screen, {\n    name: 'Home',\n    title: 'Home',\n  });\n\n  const homeText = root.createComponent(Text);\n  homeText.append('Home screen');\n  homeScreen.append(homeText);\n\n  const navigateButton = root.createComponent(Button, {\n    title: 'Navigate to details',\n    onPress: () =&gt; api.navigation.navigate('Details'),\n  });\n  homeScreen.append(navigateButton);\n\n  const detailsScreen = root.createComponent(Screen, {\n    name: 'Details',\n    title: 'Details',\n    presentation: {sheet: true},\n  });\n\n  const detailsText = root.createComponent(Text);\n  detailsText.append('Details screen');\n  detailsScreen.append(detailsText);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(homeScreen);\n  navigator.append(detailsScreen);\n  root.append(navigator);\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "NumberField",
    "description": "Use a number field to conveniently and accurately capture numerical values.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "NumberField",
        "description": "",
        "type": "NumberFieldProps",
        "typeDefinitions": {
          "NumberFieldProps": {
            "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "InputProps": "src/surfaces/point-of-sale/components/shared/InputField.ts"
            },
            "name": "NumberFieldProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "action",
                "value": "InputAction",
                "description": "A button under the text field to provide extra functionality.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the field can be modified.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "error",
                "value": "string",
                "description": "Indicates an error to the user. The field is given specific stylistic treatment to communicate problems that have to be resolved immediately.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "helpText",
                "value": "string",
                "description": "The label under the text field which provides guidance or instructions that assist users.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "inputMode",
                "value": "'decimal' | 'numeric'",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The content to use as the field label."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "max",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxLength",
                "value": "number",
                "description": "The maximum number of characters allowed in the input field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "min",
                "value": "number",
                "description": "",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onBlur",
                "value": "() => void",
                "description": "The callback when focus is removed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onChange",
                "value": "(value: string) => void",
                "description": "The callback when the user has finished editing a field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onFocus",
                "value": "() => void",
                "description": "The callback when input is focused.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onInput",
                "value": "(value: string) => void",
                "description": "Callback when the user makes any changes in the field. As noted in the documentation for `onChange`, you **must not** use this to update `value` — use the `onChange` callback for that purpose. Use the `onInput` prop when you need to do something as soon as the user makes a change, like clearing validation errors that apply to the field as soon as the user begins making the necessary adjustments.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "placeholder",
                "value": "string",
                "description": "A short hint that describes the expected value of the field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "required",
                "value": "boolean",
                "description": "Whether the field needs a value.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/NumberField/NumberField.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The current value for the field. Defaults to now. You should update this value in response to the `onChange` callback.",
                "isOptional": true
              }
            ],
            "value": "export interface NumberFieldProps extends InputProps {\n  inputMode?: 'decimal' | 'numeric';\n  max?: number;\n  min?: number;\n}"
          },
          "InputAction": {
            "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
            "name": "InputAction",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the button can be pressed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The text displayed in the button."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "A callback to be performed."
              }
            ],
            "value": "export interface InputAction {\n  /**\n   * The text displayed in the button.\n   */\n  label: string;\n  /**\n   * A callback to be performed.\n   */\n  onPress: () => void;\n  /**\n   * Whether the button can be pressed.\n   */\n  disabled?: boolean;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "defaultExample": {
      "image": "number-field-default.png",
      "codeblock": {
        "title": "Number input",
        "tabs": [
          {
            "title": "React",
            "code": "import React, {useState} from 'react';\nimport {\n  NumberField,\n  Screen,\n  ScrollView,\n  Navigator,\n  Text,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [number, setNumber] = useState('');\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"NumberField\" title=\"NumberField Example\"&gt;\n        &lt;ScrollView&gt;\n          &lt;NumberField\n            label=\"Number\"\n            placeholder=\"1234\"\n            helpText=\"Enter a numeric value.\"\n            value={number}\n            onChange={setNumber}\n            required={true}\n            action={{\n              label: 'Clear',\n              onPress: () =&gt; setNumber(''),\n            }}\n          /&gt;\n          &lt;Text&gt;Entered Value: {number}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  NumberField,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const clearHandler = () =&gt; {\n    numberField.updateProps({value: ''});\n    textBox.replaceChildren('');\n  };\n  const numberField = root.createComponent(NumberField, {\n    label: 'Number',\n    placeholder: '1234',\n    helpText: 'Enter a numeric value.',\n    value: '',\n    action: {label: 'Clear', onPress: clearHandler},\n  });\n\n  const textBox = root.createComponent(Text);\n\n  const onChangeHandler = (newValue: string) =&gt; {\n    numberField.updateProps({value: newValue});\n\n    const textContent = `Selected Date: ${newValue}`;\n    textBox.replaceChildren(textContent);\n  };\n\n  numberField.updateProps({onChange: onChangeHandler});\n\n  const scrollView = root.createComponent(ScrollView);\n  scrollView.append(numberField);\n  scrollView.append(textBox);\n\n  const screen = root.createComponent(Screen, {\n    name: 'NumberField',\n    title: 'Number Field Example',\n  });\n  screen.append(scrollView);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "thumbnail": "number-field-thumbnail.png"
  },
  {
    "name": "PinPad",
    "description": "A component used to authenticate or identify individuals through a standarized number pad.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "PinPad",
        "description": "",
        "type": "PinPadProps",
        "typeDefinitions": {
          "PinPadProps": {
            "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "PinPadProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The content for the prompt on the pin pad.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
                "syntaxKind": "PropertySignature",
                "name": "masked",
                "value": "boolean",
                "description": "Whether the entered PIN should be masked.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxPinLength",
                "value": "PinLength",
                "description": "The maximum length of the PIN.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
                "syntaxKind": "PropertySignature",
                "name": "minPinLength",
                "value": "PinLength",
                "description": "The minimum length of the PIN.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPinEntry",
                "value": "(pin: number[]) => void",
                "description": "The function to be called when a PIN is entered.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
                "syntaxKind": "PropertySignature",
                "name": "onSubmit",
                "value": "(pin: number[]) => Promise<PinValidationResult>",
                "description": "The function to be called when the PIN is submitted."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
                "syntaxKind": "PropertySignature",
                "name": "pinPadAction",
                "value": "PinPadActionType",
                "description": "The call to action between the entry view and the keypad, consisting of a label and function that returns the pin.",
                "isOptional": true
              }
            ],
            "value": "export interface PinPadProps {\n  /**\n   * Whether the entered PIN should be masked.\n   */\n  masked?: boolean;\n  /**\n   * The minimum length of the PIN.\n   */\n  minPinLength?: PinLength;\n  /**\n   * The maximum length of the PIN.\n   */\n  maxPinLength?: PinLength;\n  /**\n   * The content for the prompt on the pin pad.\n   */\n  label?: string;\n  /**\n   * The call to action between the entry view and the keypad, consisting of a label and function that returns the pin.\n   */\n  pinPadAction?: PinPadActionType;\n  /**\n   * The function to be called when the PIN is submitted.\n   */\n  onSubmit: (pin: number[]) => Promise<PinValidationResult>;\n  /**\n   * The function to be called when a PIN is entered.\n   */\n  onPinEntry?: (pin: number[]) => void;\n}"
          },
          "PinLength": {
            "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "PinLength",
            "value": "4 | 5 | 6 | 7 | 8 | 9 | 10",
            "description": ""
          },
          "PinValidationResult": {
            "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "PinValidationResult",
            "value": "'accept' | 'reject'",
            "description": ""
          },
          "PinPadActionType": {
            "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "PinPadActionType",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The label for the action button."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/PinPad/PinPad.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => Promise<number[]>",
                "description": "The function to be called when the action button is pressed."
              }
            ],
            "value": "export interface PinPadActionType {\n  /**\n   * The label for the action button.\n   */\n  label: string;\n  /**\n   * The function to be called when the action button is pressed.\n   */\n  onPress: () => Promise<number[]>;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "pin-pad-thumbnail.png",
    "defaultExample": {
      "image": "pin-pad-default.png",
      "codeblock": {
        "title": "Validation",
        "tabs": [
          {
            "code": "const onPinSubmit = (pin: number[]): Promise&lt;PinValidationResult&gt; =&gt; {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      const isPinValid =\n        pin.length === 6 && pin.every((digit, index) =&gt; digit === index + 1);\n      const result: PinValidationResult = isPinValid ? 'accept' : 'reject';\n      resolve(result);\n    }, 1000);\n  });\n};\n",
            "language": "ts"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "example",
        "title": "Validating a PIN Example",
        "sectionContent": "\nThis code defines a function onPinSubmit that simulates the validation of a Personal Identification Number (PIN). The function takes an array of numbers as input, representing the PIN entered by a user.\n\nThe function returns a Promise that resolves with a PinValidationResult, which can be either 'accept' or 'reject'. The Promise simulates an asynchronous operation using setTimeout with a delay of 1 second.\n\nThis code simulates an asynchronous operation using the setTimeout callback. The code checks if the entered PIN matches the sequence [1, 2, 3, 4, 5, 6]. If the entered PIN matches this sequence, the Promise resolves with 'accept'; otherwise, it resolves with 'reject'.\n\nThis function can be used to simulate PIN validation in a system where the correct PIN is [1, 2, 3, 4, 5, 6].\n"
      },
      {
        "type": "Generic",
        "anchorLink": "guidelines",
        "title": "Guidelines",
        "sectionContent": "\n*   Due to the nature of this component and the intended UX for this type of action, we recommend surfacing this in a full screen modal.\n\n*   Please be advised that when utilizing the onSubmit callback, it is your responsibility to manage the navigation to the subsequent screen or dismissal of the modal. The component will only handle rejection of invalid PIN cases.\n      "
      },
      {
        "type": "Generic",
        "anchorLink": "content-guidelines",
        "title": "Content guidelines",
        "sectionContent": "\nWhen referring to a personal identification number, refer to it as a PIN, with all capital letters.\n\nAlso when writing the PIN title or PinPadAction label:\n\n*   Be concise\n*   Never go over 4 words\n*   Do not use punctuation\n*   Start with a capital letter\n\n### Title (Enter PIN)\n\n✅ [PIN pad title] Enter PIN<br>\n✅ [PIN pad title] Enter staff PIN<br>\n✅ [PIN pad title] Create PIN<br>\n❌ [PIN pad title] Please put in a PIN<br>\n❌ [PIN pad title] Create a PIN\n\n### PinPadAction (Generate random PIN, Clear)\n\nFor PIN Pad actions, the action label should clearly communicate the action.\n\n✅ [PIN pad action label] Generate random PIN<br>\n❌ [PIN pad action label] Please create a new random PIN\n\nYou can use just [verb], if it's obvious from the surrounding context what the [item] is:\n\n✅ [PIN pad action label] Clear<br>\n❌ [PIN pad action label] Clear PIN\n      "
      }
    ]
  },
  {
    "name": "RadioButtonList",
    "description": "A radio button list lets merchants select from a given set of options.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "RadioButtonList",
        "description": "",
        "type": "RadioButtonListProps",
        "typeDefinitions": {
          "RadioButtonListProps": {
            "filePath": "src/surfaces/point-of-sale/components/RadioButtonList/RadioButtonList.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "RadioButtonListProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/RadioButtonList/RadioButtonList.ts",
                "syntaxKind": "PropertySignature",
                "name": "initialOffsetToShowSelectedItem",
                "value": "boolean",
                "description": "Whether the initialSelectedItem renders at the top of the list.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/RadioButtonList/RadioButtonList.ts",
                "syntaxKind": "PropertySignature",
                "name": "initialSelectedItem",
                "value": "string",
                "description": "The name of the selected item. Warning: This is a controlled component, so this prop must be used in conjunction with onItemSelected.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/RadioButtonList/RadioButtonList.ts",
                "syntaxKind": "PropertySignature",
                "name": "items",
                "value": "string[]",
                "description": "The radio button options."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/RadioButtonList/RadioButtonList.ts",
                "syntaxKind": "PropertySignature",
                "name": "onItemSelected",
                "value": "(item: string) => void",
                "description": "A callback to be performed when the radio list item is selected."
              }
            ],
            "value": "export interface RadioButtonListProps {\n  /**\n   * \tThe radio button options.\n   */\n  items: string[];\n  /**\n   * A callback to be performed when the radio list item is selected.\n   */\n  onItemSelected: (item: string) => void;\n  /**\n   * The name of the selected item. Warning: This is a controlled component, so this prop must be used in conjunction with onItemSelected.\n   */\n  initialSelectedItem?: string;\n  /**\n   * Whether the initialSelectedItem renders at the top of the list.\n   */\n  initialOffsetToShowSelectedItem?: boolean;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "radio-button-list-thumbnail.png",
    "defaultExample": {
      "image": "radio-button-list-default.png",
      "codeblock": {
        "title": "RadioButtonList",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\nimport {\n  reactExtension,\n  RadioButtonList,\n  Screen,\n  ScrollView,\n  Text,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [selected, setSelected] =\n    React.useState('');\n\n  return (\n    &lt;Screen\n      name=\"RadioButtonList\"\n      title=\"RadioButtonList\"\n    &gt;\n      &lt;ScrollView&gt;\n        &lt;RadioButtonList\n          items={['1', '2', '3']}\n          onItemSelected={setSelected}\n          initialSelectedItem={selected}\n        /&gt;\n        &lt;Text&gt;{selected}&lt;/Text&gt;\n      &lt;/ScrollView&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; {\n    return &lt;SmartGridModal /&gt;;\n  },\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  extension,\n  RadioButtonList,\n  Screen,\n  ScrollView,\n  Text,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const mainScreen = root.createComponent(\n      Screen,\n      {\n        name: 'RadioButtonList',\n        title: 'RadioButtonList',\n      },\n    );\n    const scrollView =\n      root.createComponent(ScrollView);\n\n    const text = root.createComponent(Text);\n\n    const radioButtonList = root.createComponent(\n      RadioButtonList,\n      {\n        items: ['1', '2', '3'],\n        onItemSelected: (selected) =&gt; {\n          text.replaceChildren(selected);\n          radioButtonList.updateProps({\n            initialSelectedItem: selected,\n          });\n        },\n      },\n    );\n\n    scrollView.append(radioButtonList);\n    scrollView.append(text);\n\n    mainScreen.append(scrollView);\n    root.append(mainScreen);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "Screen",
    "description": "A component used in the root of a modal extension to define a screen.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Screen",
        "description": "",
        "type": "ScreenProps",
        "typeDefinitions": {
          "ScreenProps": {
            "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "ScreenProps",
            "description": "Represents a screen in the navigation stack.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "isLoading",
                "value": "boolean",
                "description": "Displays a loading indicator when `true`. Set this to `true` when performing an asynchronous task, and then to false when the data becomes available to the UI.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "name",
                "value": "string",
                "description": "Used to identify this screen as a destination in the navigation stack."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "onNavigate",
                "value": "() => void",
                "description": "Triggered when the screen is navigated to.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "onNavigateBack",
                "value": "() => void",
                "description": "Triggered when the user navigates back from this screen. Runs after screen is unmounted.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "onReceiveParams",
                "value": "(params: any) => void",
                "description": "A callback that gets triggered when the navigation event completes and the screen receives the parameters.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "overrideNavigateBack",
                "value": "() => void",
                "description": "A callback that allows you to override the secondary navigation action. Runs when screen is mounted.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "presentation",
                "value": "ScreenPresentationProps",
                "description": "Dictates how the `Screen` will be presented when navigated to.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "secondaryAction",
                "value": "SecondaryActionProps",
                "description": "Displays a secondary action button on the screen.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the screen which will be displayed on the UI."
              }
            ],
            "value": "export interface ScreenProps {\n  /**\n   * Used to identify this screen as a destination in the navigation stack.\n   */\n  name: string;\n  /**\n   * The title of the screen which will be displayed on the UI.\n   */\n  title: string;\n  /**\n   * Displays a loading indicator when `true`.\n   * Set this to `true` when performing an asynchronous task, and then to false when the data becomes available to the UI.\n   */\n  isLoading?: boolean;\n  /**\n   * Dictates how the `Screen` will be presented when navigated to.\n   */\n  presentation?: ScreenPresentationProps;\n  /**\n   * Displays a secondary action button on the screen.\n   */\n  secondaryAction?: SecondaryActionProps;\n  /**\n   * Triggered when the screen is navigated to.\n   */\n  onNavigate?: () => void;\n  /**\n   * Triggered when the user navigates back from this screen. Runs after screen is unmounted.\n   */\n  onNavigateBack?: () => void;\n  /**\n   * A callback that allows you to override the secondary navigation action. Runs when screen is mounted.\n   */\n  overrideNavigateBack?: () => void;\n  /**\n   * A callback that gets triggered when the navigation event completes and the screen receives the parameters.\n   */\n  onReceiveParams?: (params: any) => void;\n}"
          },
          "ScreenPresentationProps": {
            "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "ScreenPresentationProps",
            "description": "Represents the presentation of a screen in the navigation stack.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "sheet",
                "value": "boolean",
                "description": "Displays the screen from the bottom on `navigate` when `true`.",
                "isOptional": true
              }
            ],
            "value": "export interface ScreenPresentationProps {\n  /**\n   * Displays the screen from the bottom on `navigate` when `true`.\n   */\n  sheet?: boolean;\n}"
          },
          "SecondaryActionProps": {
            "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "SecondaryActionProps",
            "description": "Represents the secondary action button of a screen in the navigation stack.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "isEnabled",
                "value": "boolean",
                "description": "Sets whether the action can be tapped.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "Triggered when the secondary action button is pressed."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "text",
                "value": "string",
                "description": "Displays the name of the secondary action in the action bar."
              }
            ],
            "value": "export interface SecondaryActionProps {\n  /**\n   * Displays the name of the secondary action in the action bar.\n   */\n  text: string;\n  /**\n   * Triggered when the secondary action button is pressed.\n   */\n  onPress: () => void;\n  /**\n   * Sets whether the action can be tapped.\n   */\n  isEnabled?: boolean;\n}"
          }
        }
      },
      {
        "title": "ScreenPresentationProps",
        "description": "",
        "type": "ScreenPresentationProps",
        "typeDefinitions": {
          "ScreenPresentationProps": {
            "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "ScreenPresentationProps",
            "description": "Represents the presentation of a screen in the navigation stack.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "sheet",
                "value": "boolean",
                "description": "Displays the screen from the bottom on `navigate` when `true`.",
                "isOptional": true
              }
            ],
            "value": "export interface ScreenPresentationProps {\n  /**\n   * Displays the screen from the bottom on `navigate` when `true`.\n   */\n  sheet?: boolean;\n}"
          }
        }
      },
      {
        "title": "SecondaryActionProps",
        "description": "",
        "type": "SecondaryActionProps",
        "typeDefinitions": {
          "SecondaryActionProps": {
            "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "SecondaryActionProps",
            "description": "Represents the secondary action button of a screen in the navigation stack.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "isEnabled",
                "value": "boolean",
                "description": "Sets whether the action can be tapped.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "Triggered when the secondary action button is pressed."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Screen/Screen.ts",
                "syntaxKind": "PropertySignature",
                "name": "text",
                "value": "string",
                "description": "Displays the name of the secondary action in the action bar."
              }
            ],
            "value": "export interface SecondaryActionProps {\n  /**\n   * Displays the name of the secondary action in the action bar.\n   */\n  text: string;\n  /**\n   * Triggered when the secondary action button is pressed.\n   */\n  onPress: () => void;\n  /**\n   * Sets whether the action can be tapped.\n   */\n  isEnabled?: boolean;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "screen-thumbnail.png",
    "defaultExample": {
      "image": "screen-default.png",
      "codeblock": {
        "title": "Navigate to another screen",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react'\n\nimport { Screen, Text, Navigator, reactExtension, Button, useApi } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"Home\" title=\"Home\"&gt;\n        &lt;Text&gt;Home screen&lt;/Text&gt;\n        &lt;Button title=\"Navigate to details\" onPress={() =&gt; api.navigation.navigate('Details')} /&gt;\n      &lt;/Screen&gt;\n      &lt;Screen name=\"Details\" title=\"Details\"&gt;\n        &lt;Text&gt;Details screen&lt;/Text&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  extension,\n  Screen,\n  Navigator,\n  Text,\n  Button,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const homeScreen = root.createComponent(Screen, {\n    name: 'Home',\n    title: 'Home',\n  });\n\n  const homeText = root.createComponent(Text);\n  homeText.append('Home screen');\n  homeScreen.append(homeText);\n\n  const navigateButton = root.createComponent(Button, {\n    title: 'Navigate to details',\n    onPress: () =&gt; api.navigation.navigate('Details'),\n  });\n  homeScreen.append(navigateButton);\n\n  const detailsScreen = root.createComponent(Screen, {\n    name: 'Details',\n    title: 'Details',\n  });\n\n  const detailsText = root.createComponent(Text);\n  detailsText.append('Details screen');\n  detailsScreen.append(detailsText);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(homeScreen);\n  navigator.append(detailsScreen);\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "examples": {
      "description": "Navigating using NavigationAPI with Screens within Navigators",
      "examples": [
        {
          "codeblock": {
            "title": "Navigate to another screen with parameters",
            "tabs": [
              {
                "title": "React",
                "code": "import React, {useState} from 'react';\n\nimport {\n  Screen,\n  Text,\n  Navigator,\n  reactExtension,\n  Button,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  return (\n    &lt;Navigator&gt;\n      &lt;HomeScreen /&gt;\n      &lt;DetailsScreen /&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nconst HomeScreen = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n  return (\n    &lt;Screen name=\"Home\" title=\"Home\"&gt;\n      &lt;Text&gt;Home screen&lt;/Text&gt;\n      &lt;Button\n        title=\"Navigate to details\"\n        onPress={() =&gt; api.navigation.navigate('Details', {orderId: '123'})}\n      /&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nconst DetailsScreen = () =&gt; {\n  const [params, setParams] = useState&lt;pos.home.modal.render&gt;();\n\n  return (\n    &lt;Screen\n      name=\"Details\"\n      title=\"Details\"\n      presentation={{sheet: true}}\n      onReceiveParams={setParams}\n    &gt;\n      &lt;Text&gt;{`Order ID: ${params.orderId}`}&lt;/Text&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  extension,\n  Screen,\n  Navigator,\n  Text,\n  Button,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const homeScreen = root.createComponent(Screen, {\n    name: 'Home',\n    title: 'Home',\n  });\n\n  const homeText = root.createComponent(Text);\n  homeText.append('Home screen');\n  homeScreen.append(homeText);\n\n  const navigateButton = root.createComponent(Button, {\n    title: 'Navigate to details',\n    onPress: () =&gt; api.navigation.navigate('Details', {orderId: '123'}),\n  });\n  homeScreen.append(navigateButton);\n\n  const detailsText = root.createComponent(Text);\n\n  const detailsScreen = root.createComponent(Screen, {\n    name: 'Details',\n    title: 'Details',\n    onReceiveParams: (params) =&gt; {\n      detailsText.replaceChildren(`Order ID: ${params.orderId}`);\n    },\n  });\n\n  detailsScreen.append(detailsText);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(homeScreen);\n  navigator.append(detailsScreen);\n  root.append(navigator);\n});\n",
                "language": "ts"
              }
            ]
          }
        },
        {
          "codeblock": {
            "title": "Navigate to another screen with sheet presentation",
            "tabs": [
              {
                "title": "React",
                "code": "import React from 'react'\n\nimport { Screen, Text, Navigator, reactExtension, Button, useApi } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"Home\" title=\"Home\"&gt;\n        &lt;Text&gt;Home screen&lt;/Text&gt;\n        &lt;Button title=\"Navigate to details\" onPress={() =&gt; api.navigation.navigate('Details')} /&gt;\n      &lt;/Screen&gt;\n      &lt;Screen name=\"Details\" title=\"Details\" presentation={{sheet: true}}&gt;\n        &lt;Text&gt;Details screen&lt;/Text&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);\n",
                "language": "tsx"
              },
              {
                "title": "TS",
                "code": "import {\n  extension,\n  Screen,\n  Navigator,\n  Text,\n  Button,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const homeScreen = root.createComponent(Screen, {\n    name: 'Home',\n    title: 'Home',\n  });\n\n  const homeText = root.createComponent(Text);\n  homeText.append('Home screen');\n  homeScreen.append(homeText);\n\n  const navigateButton = root.createComponent(Button, {\n    title: 'Navigate to details',\n    onPress: () =&gt; api.navigation.navigate('Details'),\n  });\n  homeScreen.append(navigateButton);\n\n  const detailsScreen = root.createComponent(Screen, {\n    name: 'Details',\n    title: 'Details',\n    presentation: {sheet: true},\n  });\n\n  const detailsText = root.createComponent(Text);\n  detailsText.append('Details screen');\n  detailsScreen.append(detailsText);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(homeScreen);\n  navigator.append(detailsScreen);\n  root.append(navigator);\n});\n",
                "language": "ts"
              }
            ]
          }
        }
      ]
    }
  },
  {
    "name": "ScrollView",
    "description": "The ScrollView component allows content that doesn’t fully fit on screen to scroll. Typically, the ScrollView component serves as the root component of a Screen.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [],
    "category": "Components",
    "related": [],
    "thumbnail": "scroll-view-thumbnail.png",
    "defaultExample": {
      "image": "scroll-view-default.png",
      "codeblock": {
        "title": "ScrollView",
        "tabs": [
          {
            "title": "React",
            "code": "import React, {ReactNode} from 'react';\nimport {\n  Text,\n  Navigator,\n  Screen,\n  ScrollView,\n  Stack,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst ModalComponent = () =&gt; {\n  const textElement = (\n    count: number,\n  ): ReactNode =&gt; {\n    return (\n      &lt;Stack\n        direction=\"vertical\"\n        paddingHorizontal=\"Small\"\n        paddingVertical=\"Small\"\n      &gt;\n        &lt;Text&gt;{`Text element ${count}`}&lt;/Text&gt;\n      &lt;/Stack&gt;\n    );\n  };\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen\n        title=\"ScrollView\"\n        name=\"ScrollView\"\n      &gt;\n        &lt;ScrollView&gt;\n          {Array.from(Array(25)).map((_, count) =&gt;\n            textElement(count),\n          )}\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; {\n    return &lt;ModalComponent /&gt;;\n  },\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  extension,\n  Screen,\n  ScrollView,\n  Stack,\n  Navigator,\n  Text,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const screen = root.createComponent(Screen, {\n      name: 'ScrollView',\n      title: 'ScrollView',\n    });\n\n    const scrollView =\n      root.createComponent(ScrollView);\n\n    for (let i = 0; i &lt; 25; i++) {\n      const stack = root.createComponent(Stack, {\n        paddingVertical: 'Small',\n        direction: 'vertical',\n        paddingHorizontal: 'Small',\n      });\n\n      const textElement =\n        root.createComponent(Text);\n      textElement.append(`Text element ${i}`);\n\n      stack.append(textElement);\n      scrollView.append(stack);\n    }\n\n    screen.append(scrollView);\n    const navigator =\n      root.createComponent(Navigator);\n    navigator.append(screen);\n    root.append(navigator);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "SearchBar",
    "description": "The search bar lets merchants enter search queries for objects throughout the app.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "SearchBar",
        "description": "",
        "type": "SearchBarProps",
        "typeDefinitions": {
          "SearchBarProps": {
            "filePath": "src/surfaces/point-of-sale/components/SearchBar/SearchBar.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "SearchBarProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/SearchBar/SearchBar.ts",
                "syntaxKind": "PropertySignature",
                "name": "editable",
                "value": "boolean",
                "description": "Whether the text can be changed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/SearchBar/SearchBar.ts",
                "syntaxKind": "PropertySignature",
                "name": "initialValue",
                "value": "string",
                "description": "The initial text value in the search bar. This is different from `placeHolder`, which is displayed in the search bar when the search bar doesn't have a populated string.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/SearchBar/SearchBar.ts",
                "syntaxKind": "PropertySignature",
                "name": "onFocus",
                "value": "() => void",
                "description": "A callback when the input is focused.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/SearchBar/SearchBar.ts",
                "syntaxKind": "PropertySignature",
                "name": "onSearch",
                "value": "(value: string) => void",
                "description": "A callback when the search button is tapped."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/SearchBar/SearchBar.ts",
                "syntaxKind": "PropertySignature",
                "name": "onTextChange",
                "value": "(value: string) => void",
                "description": "A callback containing the new text value of the search bar.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/SearchBar/SearchBar.ts",
                "syntaxKind": "PropertySignature",
                "name": "placeholder",
                "value": "string",
                "description": "The placeholder value to display in the search bar when no text is entered.",
                "isOptional": true
              }
            ],
            "value": "export interface SearchBarProps {\n  /**\n   * The initial text value in the search bar. This is different from `placeHolder`, which is displayed in the search bar when the search bar doesn't have a populated string.\n   */\n  initialValue?: string;\n  /**\n   * A callback containing the new text value of the search bar.\n   */\n  onTextChange?: (value: string) => void;\n  /**\n   * A callback when the search button is tapped.\n   */\n  onSearch: (value: string) => void;\n  /**\n   * A callback when the input is focused.\n   */\n  onFocus?: () => void;\n  /**\n   * Whether the text can be changed.\n   */\n  editable?: boolean;\n  /**\n   * The placeholder value to display in the search bar when no text is entered.\n   */\n  placeholder?: string;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [
      {
        "name": "ProductSearch API",
        "subtitle": "See how to use the ProductSearch API with a SearchBar to search for products.",
        "url": "/api/pos-ui-extensions/apis/productsearch-api#example-search-for-products-with-a-search-bar"
      }
    ],
    "thumbnail": "search-bar-thumbnail.png",
    "defaultExample": {
      "image": "search-bar-default.png",
      "codeblock": {
        "title": "SearchBar",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\nimport {\n  reactExtension,\n  Text,\n  Screen,\n  SearchBar,\n  ScrollView,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [searched, setSearched] =\n    React.useState('');\n\n  return (\n    &lt;Screen name=\"SearchBar\" title=\"SearchBar\"&gt;\n      &lt;ScrollView&gt;\n        &lt;SearchBar\n          onSearch={setSearched}\n          editable\n          initialValue=\"initial value\"\n          placeholder=\"placeholder\"\n        /&gt;\n        &lt;Text&gt;Searched: {searched}&lt;/Text&gt;\n      &lt;/ScrollView&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; {\n    return &lt;SmartGridModal /&gt;;\n  },\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  extension,\n  Screen,\n  ScrollView,\n  SearchBar,\n  Text,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const mainScreen = root.createComponent(\n      Screen,\n      {name: 'SearchBar', title: 'SearchBar'},\n    );\n    const scrollView =\n      root.createComponent(ScrollView);\n    const text = root.createComponent(Text, null);\n\n    const onSearch = (value: string) =&gt; {\n      text.replaceChildren(`Searched: ${value}`);\n    };\n\n    const searchBar = root.createComponent(\n      SearchBar,\n      {\n        onSearch,\n        editable: true,\n        initialValue: 'initial value',\n        placeholder: 'placeholder',\n      },\n    );\n\n    scrollView.append(searchBar);\n    scrollView.append(text);\n\n    mainScreen.append(scrollView);\n    root.append(mainScreen);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "guidelines",
        "title": "Guidelines",
        "sectionContent": "\n- The global search bar should appear at the very top of a view, above the header. This is because it searches for things beyond the scope of that page.\n- The inline search bar should appear at the top of a list, but under the header.\n- The search bar should be sticky and remain at the top of the page when the merchant scrolls.\n- When a merchant selects the search bar, the bar enters the focused state.\n- When entering the focused state, the border turns blue and the search icon changes to a back arrow icon. Selecting the back arrow lets merchants return to the default state.\n- If it's an inline search bar, entering focused state should also move the search bar to the top of the screen.\n- When a merchant starts entering a search query, the bar enters the filled state.\n- Selecting the **X** deletes the merchant's search query, but keeps them in the focused state so that they can immediately enter a new search query.\n      "
      },
      {
        "type": "Generic",
        "anchorLink": "content-guidelines",
        "title": "Content guidelines",
        "sectionContent": "\nFor the placeholder text, use the pattern: \"Search {items}\"\n\n✅ Search staff\n❌ Search\n      "
      }
    ]
  },
  {
    "name": "Section",
    "description": "A component used to group other components together in a card-like UI. Usually, sections will be used inside a ScrollView.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Section",
        "description": "",
        "type": "SectionProps",
        "typeDefinitions": {
          "SectionProps": {
            "filePath": "src/surfaces/point-of-sale/components/Section/Section.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "SectionProps",
            "description": "Renders content that is bound by a border, with a title and a call to action at the top.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Section/Section.ts",
                "syntaxKind": "PropertySignature",
                "name": "action",
                "value": "SectionHeaderAction",
                "description": "The action in the top right of the section that can be triggered by a tap.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Section/Section.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title of the section.",
                "isOptional": true
              }
            ],
            "value": "export interface SectionProps {\n  /**\n   * The title of the section.\n   */\n  title?: string;\n  /**\n   * The action in the top right of the section that can be triggered by a tap.\n   */\n  action?: SectionHeaderAction;\n}"
          },
          "SectionHeaderAction": {
            "filePath": "src/surfaces/point-of-sale/components/Section/Section.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "SectionHeaderAction",
            "description": "Allows the implementation of an action at the top right of a `Section`.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Section/Section.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "The callback when the action is tapped by the user."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Section/Section.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title describing the action."
              }
            ],
            "value": "export interface SectionHeaderAction {\n  /**\n   * The title describing the action.\n   */\n  title: string;\n  /**\n   * The callback when the action is tapped by the user.\n   */\n  onPress: () => void;\n}"
          }
        }
      },
      {
        "title": "SectionHeaderAction",
        "description": "",
        "type": "SectionHeaderAction",
        "typeDefinitions": {
          "SectionHeaderAction": {
            "filePath": "src/surfaces/point-of-sale/components/Section/Section.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "SectionHeaderAction",
            "description": "Allows the implementation of an action at the top right of a `Section`.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Section/Section.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "The callback when the action is tapped by the user."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Section/Section.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The title describing the action."
              }
            ],
            "value": "export interface SectionHeaderAction {\n  /**\n   * The title describing the action.\n   */\n  title: string;\n  /**\n   * The callback when the action is tapped by the user.\n   */\n  onPress: () => void;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "section-header-thumbnail.png",
    "defaultExample": {
      "image": "section-header-default.png",
      "codeblock": {
        "title": "Section",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react'\nimport { Text, Navigator, Screen, ScrollView, Stack, reactExtension, Section, useApi, Selectable } from '@shopify/ui-extensions-react/point-of-sale'\n\nconst ModalComponent = () =&gt; {\n  const api = useApi&lt;'pos.home.modal.render'&gt;();\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen title=\"Section\" name=\"Section\"&gt;\n        &lt;ScrollView&gt;\n          &lt;Stack direction=\"vertical\" paddingHorizontal=\"HalfPoint\"&gt;\n            &lt;Section title='Items' action={{title: \"Show toast\", onPress: () =&gt; api.toast.show('Hello world!')}}&gt;\n              &lt;Selectable onPress={() =&gt; api.toast.show('Item 1!')}&gt;\n                &lt;Stack direction=\"vertical\" paddingHorizontal=\"Small\" paddingVertical=\"Small\"&gt;\n                  &lt;Text&gt;Item 1&lt;/Text&gt;\n                &lt;/Stack&gt;  \n              &lt;/Selectable&gt;\n              &lt;Selectable onPress={() =&gt; api.toast.show('Item 2!')}&gt;\n                &lt;Stack direction=\"vertical\" paddingHorizontal=\"Small\" paddingVertical=\"Small\"&gt;\n                  &lt;Text&gt;Item 2&lt;/Text&gt;\n                &lt;/Stack&gt;  \n              &lt;/Selectable&gt;\n              &lt;Selectable onPress={() =&gt; api.toast.show('Item 3!')}&gt;\n                &lt;Stack direction=\"vertical\" paddingHorizontal=\"Small\" paddingVertical=\"Small\"&gt;\n                  &lt;Text&gt;Item 3&lt;/Text&gt;\n                &lt;/Stack&gt;  \n              &lt;/Selectable&gt;\n              &lt;Selectable onPress={() =&gt; api.toast.show('Item 4!')}&gt;\n                &lt;Stack direction=\"vertical\" paddingHorizontal=\"Small\" paddingVertical=\"Small\"&gt;\n                  &lt;Text&gt;Item 4&lt;/Text&gt;\n                &lt;/Stack&gt;  \n              &lt;/Selectable&gt;\n            &lt;/Section&gt;\n          &lt;/Stack&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; {\n  return &lt;ModalComponent /&gt;\n}) ",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  extension,\n  Screen,\n  ScrollView,\n  Stack,\n  Navigator,\n  Text,\n  Section,\n  Selectable,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root, api) =&gt; {\n    const screen = root.createComponent(Screen, {\n      name: 'Section',\n      title: 'Section',\n    });\n\n    const scrollView =\n      root.createComponent(ScrollView);\n\n    const section = root.createComponent(\n      Section,\n      {\n        title: 'Section',\n        action: {\n          title: 'Show toast',\n          onPress: () =&gt;\n            api.toast.show('Hello world!'),\n        },\n      },\n    );\n\n    for (let i = 1; i &lt; 5; i++) {\n      const selectable = root.createComponent(\n        Selectable,\n        {\n          onPress: () =&gt;\n            api.toast.show(`Item ${i}!`),\n        },\n      );\n      const stack = root.createComponent(Stack, {\n        paddingVertical: 'Small',\n        direction: 'vertical',\n        paddingHorizontal: 'Small',\n      });\n\n      const textElement =\n        root.createComponent(Text);\n      textElement.append(`Item ${i}`);\n\n      stack.append(textElement);\n      selectable.append(stack);\n      section.append(selectable);\n    }\n\n    const rootStack = root.createComponent(\n      Stack,\n      {\n        paddingHorizontal: 'HalfPoint',\n        direction: 'vertical',\n      },\n    );\n    rootStack.append(section);\n\n    scrollView.append(rootStack);\n    screen.append(scrollView);\n    const navigator =\n      root.createComponent(Navigator);\n    navigator.append(screen);\n    root.append(navigator);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "SegmentedControl",
    "description": "The segmented control lets the merchant easily switch between different lists or views on the same page.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "SegmentedControl",
        "description": "",
        "type": "SegmentedControlProps",
        "typeDefinitions": {
          "SegmentedControlProps": {
            "filePath": "src/surfaces/point-of-sale/components/SegmentedControl/SegmentedControl.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "SegmentedControlProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/SegmentedControl/SegmentedControl.ts",
                "syntaxKind": "PropertySignature",
                "name": "onSelect",
                "value": "(id: string) => void",
                "description": "A callback when a segment is selected."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/SegmentedControl/SegmentedControl.ts",
                "syntaxKind": "PropertySignature",
                "name": "segments",
                "value": "Segment[]",
                "description": "The segments to display."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/SegmentedControl/SegmentedControl.ts",
                "syntaxKind": "PropertySignature",
                "name": "selected",
                "value": "string",
                "description": "The id of the selected segment."
              }
            ],
            "value": "export interface SegmentedControlProps {\n  /**\n   * The segments to display.\n   */\n  segments: Segment[];\n  /**\n   * The id of the selected segment.\n   */\n  selected: string;\n  /**\n   * A callback when a segment is selected.\n   */\n  onSelect: (id: string) => void;\n}"
          },
          "Segment": {
            "filePath": "src/surfaces/point-of-sale/components/SegmentedControl/SegmentedControl.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "Segment",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/SegmentedControl/SegmentedControl.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the segment is disabled."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/SegmentedControl/SegmentedControl.ts",
                "syntaxKind": "PropertySignature",
                "name": "id",
                "value": "string",
                "description": "The id of the segment."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/SegmentedControl/SegmentedControl.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The label of the segment."
              }
            ],
            "value": "export interface Segment {\n  /**\n   * The id of the segment.\n   */\n  id: string;\n  /**\n   * The label of the segment.\n   */\n  label: string;\n  /**\n   * Whether the segment is disabled.\n   */\n  disabled: boolean;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "segmented-control-thumbnail.png",
    "defaultExample": {
      "image": "segmented-control-default.png",
      "codeblock": {
        "title": "SegmentedControl",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\nimport {\n  reactExtension,\n  Screen,\n  SegmentedControl,\n  Stack,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nexport const SmartGridModal = () =&gt; {\n  const [selected, setSelected] =\n    React.useState('1');\n  return (\n    &lt;Screen\n      name=\"SegmentedControl\"\n      title=\"SegmentedControl\"\n    &gt;\n      &lt;Stack\n        direction=\"vertical\"\n        paddingHorizontal=\"ExtraExtraLarge\"\n      &gt;\n        &lt;SegmentedControl\n          segments={[\n            {\n              id: '1',\n              label: '1',\n              disabled: false,\n            },\n            {\n              id: '2',\n              label: '2',\n              disabled: false,\n            },\n            {\n              id: '3',\n              label: '3 (disabled)',\n              disabled: true,\n            },\n          ]}\n          selected={selected}\n          onSelect={setSelected}\n        /&gt;\n      &lt;/Stack&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; {\n    return &lt;SmartGridModal /&gt;;\n  },\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  extension,\n  Screen,\n  ScrollView,\n  SegmentedControl,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const mainScreen = root.createComponent(\n      Screen,\n      {\n        name: 'SegmentedControl',\n        title: 'SegmentedControl',\n      },\n    );\n    const scrollView =\n      root.createComponent(ScrollView);\n\n    const onSelect = (id: string) =&gt; {\n      segmentedControl.updateProps({\n        selected: id,\n      });\n    };\n\n    const segmentedControl = root.createComponent(\n      SegmentedControl,\n      {\n        onSelect,\n        selected: '1',\n        segments: [\n          {id: '1', label: '1', disabled: false},\n          {id: '2', label: '2', disabled: false},\n          {\n            id: '3',\n            label: '3 (disabled)',\n            disabled: true,\n          },\n        ],\n      },\n    );\n\n    scrollView.append(segmentedControl);\n\n    mainScreen.append(scrollView);\n    root.append(mainScreen);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "Selectable",
    "description": "The selectable component allows you to wrap any non-interactive UI component to make it selectable.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Selectable",
        "description": "",
        "type": "SelectableProps",
        "typeDefinitions": {
          "SelectableProps": {
            "filePath": "src/surfaces/point-of-sale/components/Selectable/Selectable.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "SelectableProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Selectable/Selectable.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the selectable reacts to presses.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Selectable/Selectable.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "The callback on press."
              }
            ],
            "value": "export interface SelectableProps {\n  /**\n   * The callback on press.\n   */\n  onPress: () => void;\n  /**\n   * Whether the selectable reacts to presses.\n   */\n  disabled?: boolean;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "selectable-thumbnail.png",
    "defaultExample": {
      "image": "selectable-default.png",
      "codeblock": {
        "title": "Selectable",
        "tabs": [
          {
            "title": "React",
            "code": "import React, { useState } from 'react';\n\nimport { Screen, reactExtension, Text, ScrollView, Selectable } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;Screen name='selectable' title='Selectable'&gt;\n      &lt;ScrollView&gt;\n        &lt;Selectable onPress={() =&gt; {setCount(count + 1)}}&gt;\n          &lt;Text variant=\"body\"&gt;{count}&lt;/Text&gt;\n        &lt;/Selectable&gt;\n      &lt;/ScrollView&gt;\n    &lt;/Screen&gt;\n  );\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; {\n  return &lt;SmartGridModal /&gt;\n})\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  extension,\n  Screen,\n  ScrollView,\n  Selectable,\n  Stepper,\n  Text,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    let value = 0;\n\n    const mainScreen = root.createComponent(\n      Screen,\n      {name: 'selectable', title: 'Selectable'},\n    );\n    const scrollView =\n      root.createComponent(ScrollView);\n    const text = root.createComponent(\n      Text,\n      null,\n      value.toString(),\n    );\n    const selectable = root.createComponent(\n      Selectable,\n      {\n        onPress: () =&gt; {\n          value += 1;\n          text.replaceChildren(value.toString());\n        },\n      },\n    );\n\n    selectable.append(text);\n    scrollView.append(selectable);\n    mainScreen.append(scrollView);\n    root.append(mainScreen);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "Spacing",
    "description": "Set of spacing constants to be used in the UI Extensions components library.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "VerticalSpacing",
        "description": "",
        "type": "VerticalSpacing",
        "typeDefinitions": {
          "VerticalSpacing": {
            "filePath": "src/surfaces/point-of-sale/components/Spacing/Spacing.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "VerticalSpacing",
            "value": "'HalfPoint' | 'ExtraSmall' | 'Small' | 'Medium' | 'Large' | 'ExtraLarge'",
            "description": ""
          }
        }
      },
      {
        "title": "HorizontalSpacing",
        "description": "",
        "type": "HorizontalSpacing",
        "typeDefinitions": {
          "HorizontalSpacing": {
            "filePath": "src/surfaces/point-of-sale/components/Spacing/Spacing.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "HorizontalSpacing",
            "value": "'HalfPoint' | 'ExtraSmall' | 'Small' | 'Medium' | 'Large' | 'ExtraLarge' | 'ExtraExtraLarge'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "spacing-thumbnail.png",
    "defaultExample": {
      "image": "spacing-default.png",
      "codeblock": {
        "title": "Spacing",
        "tabs": [
          {
            "title": "React",
            "code": "VerticalSpacing.ExtraSmall;\nHorizontalSpacing.ExtraSmall;\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "VerticalSpacing.ExtraSmall;\nHorizontalSpacing.ExtraSmall;\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "Stack",
    "description": "A container for other components that allows them to be stacked horizontally or vertically. When building complex UIs, this will be your primary building block.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Stack",
        "description": "",
        "type": "StackProps",
        "typeDefinitions": {
          "StackProps": {
            "filePath": "src/surfaces/point-of-sale/components/Stack/Stack.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "HorizontalSpacing": "src/surfaces/point-of-sale/components/Spacing/Spacing.ts",
              "VerticalSpacing": "src/surfaces/point-of-sale/components/Spacing/Spacing.ts"
            },
            "name": "StackProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Stack/Stack.ts",
                "syntaxKind": "PropertySignature",
                "name": "alignment",
                "value": "| 'flex-end'\n    | 'center'\n    | 'flex-start'\n    | 'space-around'\n    | 'space-between'\n    | 'space-evenly'",
                "description": "The alignment of the children along the cross axis.",
                "isOptional": true,
                "defaultValue": "'flex-end'"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Stack/Stack.ts",
                "syntaxKind": "PropertySignature",
                "name": "direction",
                "value": "'vertical' | 'horizontal'",
                "description": "The direction of the stack."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Stack/Stack.ts",
                "syntaxKind": "PropertySignature",
                "name": "flex",
                "value": "number",
                "description": "The flex value for the stack.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Stack/Stack.ts",
                "syntaxKind": "PropertySignature",
                "name": "flexChildren",
                "value": "boolean",
                "description": "Whether the children should be stretched to fill the cross axis.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Stack/Stack.ts",
                "syntaxKind": "PropertySignature",
                "name": "flexWrap",
                "value": "'wrap' | 'nowrap' | 'wrap-reverse'",
                "description": "Wrap behavior for the children of the stack.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Stack/Stack.ts",
                "syntaxKind": "PropertySignature",
                "name": "paddingHorizontal",
                "value": "HorizontalSpacing",
                "description": "The horizontal padding around the stack.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Stack/Stack.ts",
                "syntaxKind": "PropertySignature",
                "name": "paddingVertical",
                "value": "VerticalSpacing",
                "description": "The vertical padding around the stack.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Stack/Stack.ts",
                "syntaxKind": "PropertySignature",
                "name": "spacing",
                "value": "Spacing",
                "description": "The spacing between each child in the stack.",
                "isOptional": true,
                "defaultValue": "1"
              }
            ],
            "value": "export interface StackProps {\n  /**\n   * The direction of the stack.\n   */\n  direction: 'vertical' | 'horizontal';\n  /**\n   * The alignment of the children along the cross axis.\n   * @defaultValue 'flex-end'\n   */\n  alignment?:\n    | 'flex-end'\n    | 'center'\n    | 'flex-start'\n    | 'space-around'\n    | 'space-between'\n    | 'space-evenly';\n  /**\n   * The vertical padding around the stack.\n   */\n  paddingVertical?: VerticalSpacing;\n  /**\n   * The horizontal padding around the stack.\n   */\n  paddingHorizontal?: HorizontalSpacing;\n  /**\n   * The spacing between each child in the stack.\n   * @defaultValue 1\n   */\n  spacing?: Spacing;\n  /**\n   * Whether the children should be stretched to fill the cross axis.\n   */\n  flexChildren?: boolean;\n  /**\n   * The flex value for the stack.\n   */\n  flex?: number;\n  /**\n   * Wrap behavior for the children of the stack.\n   */\n  flexWrap?: 'wrap' | 'nowrap' | 'wrap-reverse';\n}"
          },
          "HorizontalSpacing": {
            "filePath": "src/surfaces/point-of-sale/components/Spacing/Spacing.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "HorizontalSpacing",
            "value": "'HalfPoint' | 'ExtraSmall' | 'Small' | 'Medium' | 'Large' | 'ExtraLarge' | 'ExtraExtraLarge'",
            "description": ""
          },
          "VerticalSpacing": {
            "filePath": "src/surfaces/point-of-sale/components/Spacing/Spacing.ts",
            "syntaxKind": "TypeAliasDeclaration",
            "name": "VerticalSpacing",
            "value": "'HalfPoint' | 'ExtraSmall' | 'Small' | 'Medium' | 'Large' | 'ExtraLarge'",
            "description": ""
          },
          "Spacing": {
            "filePath": "src/surfaces/point-of-sale/components/Stack/Stack.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "HorizontalSpacing": "src/surfaces/point-of-sale/components/Spacing/Spacing.ts",
              "VerticalSpacing": "src/surfaces/point-of-sale/components/Spacing/Spacing.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "Spacing",
            "value": "0.5 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 13 | 16",
            "description": ""
          }
        }
      }
    ],
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "examples",
        "title": "Examples",
        "sectionContent": "\nThe following examples will demonstrate some, but not all of the abilities of the `Stack` component. In all the following examples we will be applying `horizontalPadding` of `ExtraExtraLarge`, since this is the default that we use on POS when we wrap our screens. For simplicity, these examples use the React version of the `Stack` component, but the same results will be achieved by using the same props with the regular JS library.\n"
      },
      {
        "type": "Generic",
        "anchorLink": "horizontal-default",
        "title": "Horizontal Stack with default values",
        "sectionContent": "\nIn this example, we specify `horizontal` for the `direction`. We don't specify the `flex`, which means it's 0 by default. However, `horizontal` stacks will always stretch to fill from the left to the right of the screen. As you can see, we have two small buttons occupying just the amount of space that they need, at the left side of the `Stack`. This is because `alignment` is set to `flex-end` by default.\n",
        "codeblock": {
          "title": "Horizontal Stack with default values",
          "tabs": [
            {
              "title": "React",
              "code": "&lt;Screen name=\"Home\"&gt;\n  &lt;Stack direction=\"horizontal\" paddingHorizontal={'ExtraExtraLarge'}&gt;\n    &lt;Button title=\"Hello\" /&gt;\n    &lt;Button title=\"Hello\" /&gt;\n  &lt;/Stack&gt;\n&lt;/Screen&gt;;\n",
              "language": "tsx"
            }
          ]
        },
        "image": "extension-stack-horizontal.png"
      },
      {
        "type": "Generic",
        "anchorLink": "horizontal-flex-children",
        "title": "Horizontal Stack with flexChildren",
        "sectionContent": "\nSimilar to the example above, but this time we are specifying `flexChildren` to be `true`. This means that the two buttons will take up the max amount of space that they can within the `horizontal` stack.\n      ",
        "codeblock": {
          "title": "Horizontal Stack with flexChildren",
          "tabs": [
            {
              "title": "React",
              "code": "&lt;Screen name=\"Home\"&gt;\n  &lt;Stack\n    direction=\"horizontal\"\n    flexChildren\n    paddingHorizontal={'ExtraExtraLarge'}\n  &gt;\n    &lt;Button title=\"Hello\" /&gt;\n    &lt;Button title=\"Hello\" /&gt;\n  &lt;/Stack&gt;\n&lt;/Screen&gt;;\n",
              "language": "tsx"
            }
          ]
        },
        "image": "extension-stack-horizontal-flexChildren.png"
      },
      {
        "type": "Generic",
        "anchorLink": "horizontal-center-children",
        "title": "Horizontal Stack with centered children",
        "sectionContent": "\nYou can also center elements in your `horizontal` stack. For this, you can specify the `alignment` to be `center`. However, in this case you also want `flexChildren` to be `false` (which is the default), so that the children can take up the minimal amount of space that they need, and be centered.\n",
        "codeblock": {
          "title": "Horizontal Stack with centered children",
          "tabs": [
            {
              "title": "React",
              "code": "&lt;Screen name=\"Home\"&gt;\n  &lt;Stack\n    direction=\"horizontal\"\n    alignment=\"center\"\n    paddingHorizontal={'ExtraExtraLarge'}\n  &gt;\n    &lt;Button title=\"Hello\" /&gt;\n    &lt;Button title=\"Hello\" /&gt;\n  &lt;/Stack&gt;\n&lt;/Screen&gt;;\n",
              "language": "tsx"
            }
          ]
        },
        "image": "extension-stack-horizontal-centered.png"
      },
      {
        "type": "Generic",
        "anchorLink": "horizontal-end-children",
        "title": "Horizontal Stack with children at the end",
        "sectionContent": "\nTo make the children be aligned to the end of your `horizontal` container, you just need to specify `alignment` to be `flex-end`. Note that in the first example, the children were at the start of the container. This is because the default value is `flex-start`.\n",
        "codeblock": {
          "title": "Horizontal Stack with children at the end",
          "tabs": [
            {
              "title": "React",
              "code": "&lt;Screen name=\"Home\"&gt;\n  &lt;Stack\n    direction=\"horizontal\"\n    alignment=\"flex-end\"\n    paddingHorizontal={'ExtraExtraLarge'}\n  &gt;\n    &lt;Button title=\"Hello\" /&gt;\n    &lt;Button title=\"Hello\" /&gt;\n  &lt;/Stack&gt;\n&lt;/Screen&gt;;\n",
              "language": "tsx"
            }
          ]
        },
        "image": "extension-stack-horizontal-flex-end.png"
      },
      {
        "type": "Generic",
        "anchorLink": "vertical",
        "title": "Vertical Stack",
        "sectionContent": "\nYou can specify your `Stack` to layout its children vertically by setting `direction` to `vertical`.\n  ",
        "codeblock": {
          "title": "Vertical Stack",
          "tabs": [
            {
              "title": "React",
              "code": "&lt;Screen name=\"Home\"&gt;\n  &lt;Stack direction=\"vertical\" paddingHorizontal={'ExtraExtraLarge'}&gt;\n    &lt;Button title=\"Hello\" /&gt;\n    &lt;Button title=\"Hello\" /&gt;\n  &lt;/Stack&gt;\n&lt;/Screen&gt;;\n",
              "language": "tsx"
            }
          ]
        },
        "image": "extension-stack-vertical.png"
      },
      {
        "type": "Generic",
        "anchorLink": "vertical-center-children",
        "title": "Vertical Stack with centered children",
        "sectionContent": "\nYou can center your stack's children along the `vertical` axis by setting the `alignment` to `center`. However, because `vertical` stacks only take up the minimal amount of `vertical` space required when `flex` is set to `0` (which is by default), you will need to set `flex` to `1`\n",
        "codeblock": {
          "title": "Vertical Stack with centered children",
          "tabs": [
            {
              "title": "React",
              "code": "&lt;Screen name=\"Home\"&gt;\n  &lt;Stack\n    direction=\"vertical\"\n    flex={1}\n    alignment=\"center\"\n    paddingHorizontal={'ExtraExtraLarge'}\n  &gt;\n    &lt;Button title=\"Hello\" /&gt;\n    &lt;Button title=\"Hello\" /&gt;\n  &lt;/Stack&gt;\n&lt;/Screen&gt;;\n",
              "language": "tsx"
            }
          ]
        },
        "image": "extension-stack-vertical-center.png"
      },
      {
        "type": "Generic",
        "anchorLink": "vertical-bottom-children",
        "title": "Vertical Stack with children at the bottom",
        "sectionContent": "\nYou can set your children to the bottom of your `vertical` stack by setting `alignment` to `flex-end`. As explained in the previous example, you also need to set `flex` to `1`, since the default is `0`, which will make your container only take up the minimum amount of space it needs.\n",
        "codeblock": {
          "title": "Vertical Stack with children at the bottom",
          "tabs": [
            {
              "title": "React",
              "code": "&lt;Screen name=\"Home\"&gt;\n  &lt;Stack\n    direction=\"vertical\"\n    flex={1}\n    alignment=\"flex-end\"\n    paddingHorizontal={'ExtraExtraLarge'}\n  &gt;\n    &lt;Button title=\"Hello\" /&gt;\n    &lt;Button title=\"Hello\" /&gt;\n  &lt;/Stack&gt;\n&lt;/Screen&gt;;\n",
              "language": "tsx"
            }
          ]
        },
        "image": "extension-stack-vertical-flex-end.png"
      },
      {
        "type": "Generic",
        "anchorLink": "nested",
        "title": "Nested Stack",
        "sectionContent": "\nNow that we've run through a few examples of what a `Stack` can do, let's move on to something more complex. You can nest multiple Stacks of different configurations to achieve a more complex UI. In this example, we will create a row that displays several labels and an icon. This will mimic some of the basic rows that you can find across different POS screens.\n\nLet's put the `Selectable` aside for now; we'll get to that later. If you look at the first `Stack`, this is our parent `Stack`. We've set its `direction` to `horizontal` and its `alignment` to `space-between`. Then, we've added some vertical and horizontal padding (as highlighted in the screenshot).\n\nAs you can see, there are two child Stacks. Because the parent `Stack` is set to `space-between`, these two child Stacks are spread to each end of the parent horizontal `Stack`. Both of these child Stacks occupy the amount of space they need, but not more.\n\nThe first child `Stack` is a simple vertical `Stack` that stacks the two left labels. It specifies the `spacing` to be `0.5` (the default is `1`, and this was a bit too much).\n\nThe second child `Stack` has another nested `Stack`. Let's discuss the nested `Stack` first. This is a horizontal `Stack` that lays out a text label and an icon horizontally. We then apply a bit of padding. That horizontal `Stack` is wrapped in a vertical `Stack`. The reason for this is to align the horizontal `Stack` on the center of the vertical axis, giving it a nicer appearance. Without it, the horizontal `Stack` would be located at the same height as the \"Hello world!\" `Text` on the left side of our row. But by specifying a `flex` of `1`, we are telling the vertical `Stack` to take as much vertical space as it can within its parent container. And then we specify an alignment of center, which lays out its child horizontal `Stack` on the center of its vertical axis.\n\nFinally, we can return to the `Selectable`. You'll notice that we've wrapped the entire `Stack` in a `Selectable`. This makes the entire `Stack` within the `Selectable` become a tappable surface, with an `onPress` handler, which is part of the `Selectable` component. It also gives a nice highlight effect when you tap, as you can see in the screenshot.\n",
        "codeblock": {
          "title": "Nested Stack",
          "tabs": [
            {
              "title": "React",
              "code": "&lt;Screen name=\"Home\"&gt;\n  &lt;Selectable onPress={() =&gt; console.log('You tapped this row!')}&gt;\n    // Parent stack\n    &lt;Stack\n      direction=\"horizontal\"\n      alignment=\"space-between\"\n      paddingVertical={'Medium'}\n      paddingHorizontal={'ExtraExtraLarge'}\n    &gt;\n      // First child stack\n      &lt;Stack direction=\"vertical\" spacing={0.5}&gt;\n        &lt;Text&gt;Hello world!&lt;/Text&gt;\n        &lt;Text variant=\"captionRegular\"&gt;\n          This is an example of nested stacks!\n        &lt;/Text&gt;\n      &lt;/Stack&gt;\n      // Second child stack\n      &lt;Stack direction=\"vertical\" flex={1} alignment=\"center\"&gt;\n        // Horizontal stack for the right label and chevron icon\n        &lt;Stack direction=\"horizontal\" spacing={2}&gt;\n          &lt;Text variant=\"captionRegular\"&gt;Let's go!&lt;/Text&gt;\n          &lt;Icon name=\"chevron-right\" /&gt;\n        &lt;/Stack&gt;\n      &lt;/Stack&gt;\n    &lt;/Stack&gt;\n  &lt;/Selectable&gt;\n&lt;/Screen&gt;;\n",
              "language": "tsx"
            }
          ]
        },
        "image": "extension-stack-nested.png"
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "stack-thumbnail.png",
    "defaultExample": {
      "image": "stack-default.png",
      "codeblock": {
        "title": "Stack",
        "tabs": [
          {
            "title": "React",
            "code": "&lt;Screen name=\"Home\"&gt;\n  &lt;Stack direction=\"horizontal\" paddingHorizontal={'ExtraExtraLarge'}&gt;\n    &lt;Button title=\"Hello\" /&gt;\n    &lt;Button title=\"Hello\" /&gt;\n  &lt;/Stack&gt;\n&lt;/Screen&gt;;\n",
            "language": "tsx"
          }
        ]
      }
    }
  },
  {
    "name": "Stepper",
    "description": "A component used for increasing or decreasing quantities.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Stepper",
        "description": "",
        "type": "StepperProps",
        "typeDefinitions": {
          "StepperProps": {
            "filePath": "src/surfaces/point-of-sale/components/Stepper/Stepper.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "StepperProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the field can be modified.",
                "isOptional": true,
                "defaultValue": "false"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "initialValue",
                "value": "number",
                "description": "The initial value of the stepper."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "maximumValue",
                "value": "number",
                "description": "Use to set the maximum value of the stepper.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "minimumValue",
                "value": "number",
                "description": "Use to set the minimum value of the stepper.",
                "isOptional": true,
                "defaultValue": "1"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "onValueChanged",
                "value": "(value: number) => void",
                "description": "A callback when the value of the stepper changes."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Stepper/Stepper.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "number",
                "description": "Only use this field if you wish to override the internal state of this component.",
                "isOptional": true
              }
            ],
            "value": "export interface StepperProps {\n  /**\n   * The initial value of the stepper.\n   */\n  initialValue: number;\n\n  /**\n   * A callback when the value of the stepper changes.\n   */\n  onValueChanged: (value: number) => void;\n\n  /**\n   * Use to set the minimum value of the stepper.\n   * @defaultValue 1\n   */\n  minimumValue?: number;\n\n  /**\n   * Use to set the maximum value of the stepper.\n   */\n  maximumValue?: number;\n\n  /**\n   * Only use this field if you wish to override the internal state of this component.\n   */\n  value?: number;\n\n  /**\n   * Whether the field can be modified.\n   * @defaultValue false\n   */\n  disabled?: boolean;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "stepper-thumbnail.png",
    "defaultExample": {
      "image": "stepper-default.png",
      "codeblock": {
        "title": "Stepper",
        "tabs": [
          {
            "title": "React",
            "code": "import React, { useState } from 'react';\n\nimport { Screen, reactExtension, Text, Stepper, ScrollView } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [value, setValue] = useState(4);\n\n  return (\n    &lt;Screen name='stepper' title='Stepper'&gt;\n      &lt;ScrollView&gt;\n        &lt;Stepper initialValue={value} onValueChanged={setValue} /&gt;\n        &lt;Text&gt;{value}&lt;/Text&gt;\n      &lt;/ScrollView&gt;\n    &lt;/Screen&gt;\n  );\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; {\n  return &lt;SmartGridModal /&gt;\n})\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  extension,\n  Screen,\n  ScrollView,\n  Stepper,\n  Text,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const mainScreen = root.createComponent(\n      Screen,\n      {name: 'stepper', title: 'Stepper'},\n    );\n    const scrollView =\n      root.createComponent(ScrollView);\n    const text = root.createComponent(\n      Text,\n      null,\n      '4',\n    );\n    const stepper = root.createComponent(\n      Stepper,\n      {\n        initialValue: 4,\n        onValueChanged: (value) =&gt; {\n          text.replaceChildren(value.toString());\n        },\n      },\n    );\n\n    scrollView.append(stepper);\n    scrollView.append(text);\n    mainScreen.append(scrollView);\n    root.append(mainScreen);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "Text",
    "description": "Text can be rendered in different sizes and colors in order to structure content.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Text",
        "description": "",
        "type": "TextProps",
        "typeDefinitions": {
          "TextProps": {
            "filePath": "src/surfaces/point-of-sale/components/Text/Text.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "TextProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Text/Text.ts",
                "syntaxKind": "PropertySignature",
                "name": "color",
                "value": "ColorType",
                "description": "The text color.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Text/Text.ts",
                "syntaxKind": "PropertySignature",
                "name": "variant",
                "value": "TextVariant",
                "description": "The text variant.",
                "isOptional": true
              }
            ],
            "value": "export interface TextProps {\n  /**\n   * The text variant.\n   */\n  variant?: TextVariant;\n  /**\n   * The text color.\n   */\n  color?: ColorType;\n}"
          },
          "ColorType": {
            "filePath": "src/surfaces/point-of-sale/components/Text/Text.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ColorType",
            "value": "'TextNeutral' | 'TextSubdued' | 'TextDisabled' | 'TextWarning' | 'TextCritical' | 'TextSuccess' | 'TextInteractive' | 'TextHighlight'",
            "description": ""
          },
          "TextVariant": {
            "filePath": "src/surfaces/point-of-sale/components/Text/Text.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "TextVariant",
            "value": "'sectionHeader' | 'captionRegular' | 'captionRegularTall' | 'captionMedium' | 'body' | 'headingSmall' | 'headingLarge' | 'display'",
            "description": ""
          }
        }
      },
      {
        "title": "TextVariant",
        "description": "",
        "type": "TextVariant",
        "typeDefinitions": {
          "TextVariant": {
            "filePath": "src/surfaces/point-of-sale/components/Text/Text.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "TextVariant",
            "value": "'sectionHeader' | 'captionRegular' | 'captionRegularTall' | 'captionMedium' | 'body' | 'headingSmall' | 'headingLarge' | 'display'",
            "description": ""
          }
        }
      },
      {
        "title": "ColorType",
        "description": "",
        "type": "ColorType",
        "typeDefinitions": {
          "ColorType": {
            "filePath": "src/surfaces/point-of-sale/components/Text/Text.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "syntaxKind": "TypeAliasDeclaration",
            "name": "ColorType",
            "value": "'TextNeutral' | 'TextSubdued' | 'TextDisabled' | 'TextWarning' | 'TextCritical' | 'TextSuccess' | 'TextInteractive' | 'TextHighlight'",
            "description": ""
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "text-thumbnail.png",
    "defaultExample": {
      "image": "text-default.png",
      "codeblock": {
        "title": "Text",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\n\nimport { Screen, reactExtension, Text, ScrollView } from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  return (\n    &lt;Screen name='text' title='Text'&gt;\n      &lt;ScrollView&gt;\n        &lt;Text variant=\"body\"&gt;body&lt;/Text&gt;\n        &lt;Text variant=\"captionMedium\"&gt;captionMedium&lt;/Text&gt;\n        &lt;Text variant=\"captionRegular\"&gt;captionRegular&lt;/Text&gt;\n        &lt;Text variant=\"captionRegularTall\"&gt;captionRegularTall&lt;/Text&gt;\n        &lt;Text variant=\"display\"&gt;display&lt;/Text&gt;\n        &lt;Text variant=\"headingLarge\"&gt;headingLarge&lt;/Text&gt;\n        &lt;Text variant=\"headingSmall\"&gt;headingSmall&lt;/Text&gt;\n        &lt;Text variant=\"sectionHeader\"&gt;sectionHeader&lt;/Text&gt;\n        &lt;Text variant=\"headingSmall\" color=\"TextCritical\"&gt;\n          TextCritical\n        &lt;/Text&gt;\n        &lt;Text variant=\"headingSmall\" color=\"TextDisabled\"&gt;\n          TextDisabled\n        &lt;/Text&gt;\n        &lt;Text variant=\"headingSmall\" color=\"TextHighlight\"&gt;\n          TextHighlight\n        &lt;/Text&gt;\n        &lt;Text variant=\"headingSmall\" color=\"TextInteractive\"&gt;\n          TextInteractive\n        &lt;/Text&gt;\n        &lt;Text variant=\"headingSmall\" color=\"TextNeutral\"&gt;\n          TextNeutral\n        &lt;/Text&gt;\n        &lt;Text variant=\"headingSmall\" color=\"TextSubdued\"&gt;\n          TextSubdued\n        &lt;/Text&gt;\n        &lt;Text variant=\"headingSmall\" color=\"TextSuccess\"&gt;\n          TextSuccess\n        &lt;/Text&gt;\n        &lt;Text variant=\"headingSmall\" color=\"TextWarning\"&gt;\n          TextWarning\n        &lt;/Text&gt;\n      &lt;/ScrollView&gt;\n    &lt;/Screen&gt;\n  );\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; {\n  return &lt;SmartGridModal /&gt;\n})\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  extension,\n  Screen,\n  ScrollView,\n  Text,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const mainScreen = root.createComponent(\n      Screen,\n      {name: 'text', title: 'Text'},\n    );\n    const scrollView =\n      root.createComponent(ScrollView);\n\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {variant: 'body'},\n        'body',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {variant: 'captionMedium'},\n        'captionMedium',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {variant: 'captionRegular'},\n        'captionRegular',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {variant: 'captionRegularTall'},\n        'captionRegularTall',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {variant: 'display'},\n        'display',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {variant: 'headingLarge'},\n        'headingLarge',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {variant: 'headingSmall'},\n        'headingSmall',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {variant: 'sectionHeader'},\n        'sectionHeader',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {\n          variant: 'headingSmall',\n          color: 'TextCritical',\n        },\n        'TextCritical',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {\n          variant: 'headingSmall',\n          color: 'TextHighlight',\n        },\n        'TextHighlight',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {\n          variant: 'headingSmall',\n          color: 'TextInteractive',\n        },\n        'TextInteractive',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {\n          variant: 'headingSmall',\n          color: 'TextNeutral',\n        },\n        'TextNeutral',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {\n          variant: 'headingSmall',\n          color: 'TextSubdued',\n        },\n        'TextSubdued',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {\n          variant: 'headingSmall',\n          color: 'TextSuccess',\n        },\n        'TextSuccess',\n      ),\n    );\n    scrollView.append(\n      root.createComponent(\n        Text,\n        {\n          variant: 'headingSmall',\n          color: 'TextWarning',\n        },\n        'TextWarning',\n      ),\n    );\n\n    mainScreen.append(scrollView);\n    root.append(mainScreen);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "TextArea",
    "description": "Use a text input to allow merchants to input or modify multiline text.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "TextArea",
        "description": "A text field which supports multiple lines.",
        "type": "TextAreaProps",
        "typeDefinitions": {
          "TextAreaProps": {
            "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "InputProps": "src/surfaces/point-of-sale/components/shared/InputField.ts"
            },
            "name": "TextAreaProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "action",
                "value": "InputAction",
                "description": "A button under the text field to provide extra functionality.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the field can be modified.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "error",
                "value": "string",
                "description": "Indicates an error to the user. The field is given specific stylistic treatment to communicate problems that have to be resolved immediately.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "helpText",
                "value": "string",
                "description": "The label under the text field which provides guidance or instructions that assist users.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The content to use as the field label."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxLength",
                "value": "number",
                "description": "The maximum number of characters allowed in the input field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "onBlur",
                "value": "() => void",
                "description": "The callback when focus is removed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "onChange",
                "value": "(value: string) => void",
                "description": "The callback when the user has finished editing a field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "onFocus",
                "value": "() => void",
                "description": "The callback when input is focused.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "onInput",
                "value": "(value: string) => void",
                "description": "Callback when the user makes any changes in the field. As noted in the documentation for `onChange`, you **must not** use this to update `value` — use the `onChange` callback for that purpose. Use the `onInput` prop when you need to do something as soon as the user makes a change, like clearing validation errors that apply to the field as soon as the user begins making the necessary adjustments.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "placeholder",
                "value": "string",
                "description": "A short hint that describes the expected value of the field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "required",
                "value": "boolean",
                "description": "Whether the field needs a value.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "rows",
                "value": "number",
                "description": "The initial number of lines to be displayed. Maximum of 8 lines.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextArea/TextArea.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The current value for the field. Defaults to now. You should update this value in response to the `onChange` callback.",
                "isOptional": true
              }
            ],
            "value": "export interface TextAreaProps extends InputProps {\n  /**\n   * The initial number of lines to be displayed. Maximum of 8 lines.\n   */\n  rows?: number;\n}"
          },
          "InputAction": {
            "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
            "name": "InputAction",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the button can be pressed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The text displayed in the button."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "A callback to be performed."
              }
            ],
            "value": "export interface InputAction {\n  /**\n   * The text displayed in the button.\n   */\n  label: string;\n  /**\n   * A callback to be performed.\n   */\n  onPress: () => void;\n  /**\n   * Whether the button can be pressed.\n   */\n  disabled?: boolean;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "text-area-thumbnail.png",
    "defaultExample": {
      "image": "text-area-default.png",
      "codeblock": {
        "title": "Thumbnail",
        "tabs": [
          {
            "title": "React",
            "code": "import React, {useState} from 'react';\nimport {\n  TextArea,\n  Screen,\n  ScrollView,\n  Navigator,\n  reactExtension,\n  Text,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [text, setText] = useState('');\n\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen\n        name=\"TextArea\"\n        title=\"Comment Input Example\"\n      &gt;\n        &lt;ScrollView&gt;\n          &lt;TextArea\n            label=\"Text\"\n            rows={4}\n            placeholder=\"Input your text here\"\n            value={text}\n            onChange={setText}\n          /&gt;\n          &lt;Text&gt;{text}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; &lt;SmartGridModal /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  TextArea,\n  Text,\n  Screen,\n  ScrollView,\n  Navigator,\n  extension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const textArea = root.createComponent(\n      TextArea,\n      {\n        label: 'Text',\n        placeholder: 'Input your text here',\n        required: true,\n        value: '',\n      },\n    );\n\n    const textBox = root.createComponent(Text);\n\n    const onChangeHandler = (\n      newValue: string,\n    ) =&gt; {\n      textArea.updateProps({value: newValue});\n      textBox.replaceChildren(newValue);\n    };\n\n    textArea.updateProps({\n      onChange: onChangeHandler,\n    });\n\n    const scrollView =\n      root.createComponent(ScrollView);\n    scrollView.append(textArea);\n    scrollView.append(textBox);\n\n    const screen = root.createComponent(Screen, {\n      name: 'TextArea',\n      title: 'Text Area Example',\n    });\n    screen.append(scrollView);\n\n    const navigator =\n      root.createComponent(Navigator);\n    navigator.append(screen);\n\n    root.append(navigator);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "TextField",
    "description": "Use a text field to allow merchants to enter or edit text. If you want to specify the kind of input, then use a formatted text field.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "TextField",
        "description": "Use a text field to allow merchants to input or modify multiline text.",
        "type": "NewTextFieldProps",
        "typeDefinitions": {
          "NewTextFieldProps": {
            "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "BaseTextFieldProps": "src/surfaces/point-of-sale/components/shared/BaseTextField.ts",
              "InputProps": "src/surfaces/point-of-sale/components/shared/InputField.ts"
            },
            "name": "NewTextFieldProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "action",
                "value": "InputAction",
                "description": "A button under the text field to provide extra functionality.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the field can be modified.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "error",
                "value": "string",
                "description": "Indicates an error to the user. The field is given specific stylistic treatment to communicate problems that have to be resolved immediately.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "helpText",
                "value": "string",
                "description": "The label under the text field which provides guidance or instructions that assist users.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The content to use as the field label."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "maxLength",
                "value": "number",
                "description": "The maximum number of characters allowed in the input field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onBlur",
                "value": "() => void",
                "description": "The callback when focus is removed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onChange",
                "value": "(value: string) => void",
                "description": "The callback when the user has finished editing a field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onFocus",
                "value": "() => void",
                "description": "The callback when input is focused.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onInput",
                "value": "(value: string) => void",
                "description": "Callback when the user makes any changes in the field. As noted in the documentation for `onChange`, you **must not** use this to update `value` — use the `onChange` callback for that purpose. Use the `onInput` prop when you need to do something as soon as the user makes a change, like clearing validation errors that apply to the field as soon as the user begins making the necessary adjustments.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "placeholder",
                "value": "string",
                "description": "A short hint that describes the expected value of the field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "required",
                "value": "boolean",
                "description": "Whether the field needs a value.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TextField/TextField.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The current value for the field. Defaults to now. You should update this value in response to the `onChange` callback.",
                "isOptional": true
              }
            ],
            "value": "export interface NewTextFieldProps extends InputProps {}"
          },
          "InputAction": {
            "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
            "name": "InputAction",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the button can be pressed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The text displayed in the button."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "A callback to be performed."
              }
            ],
            "value": "export interface InputAction {\n  /**\n   * The text displayed in the button.\n   */\n  label: string;\n  /**\n   * A callback to be performed.\n   */\n  onPress: () => void;\n  /**\n   * Whether the button can be pressed.\n   */\n  disabled?: boolean;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "text-field-thumbnail.png",
    "defaultExample": {
      "image": "text-field-default.png",
      "codeblock": {
        "title": "Name Input",
        "tabs": [
          {
            "title": "React",
            "code": "import React, {useState} from 'react';\nimport {\n  TextField,\n  Screen,\n  ScrollView,\n  Navigator,\n  reactExtension,\n  Text,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [name, setName] = useState('');\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"TextField\" title=\"Text Field Example\"&gt;\n        &lt;ScrollView&gt;\n          &lt;TextField\n            label=\"Name\"\n            placeholder=\"Input your name here\"\n            required={true}\n            value={name}\n            onChange={setName}\n          /&gt;\n          &lt;Text&gt;{name ? `Hello ${name}!` : ''}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  TextField,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const textField = root.createComponent(TextField, {\n    label: 'Name',\n    placeholder: 'Input your name here',\n    required: true,\n    value: '',\n  });\n\n  const textBox = root.createComponent(Text);\n\n  const onChangeHandler = (newValue: string) =&gt; {\n    textField.updateProps({value: newValue});\n\n    const greeting = newValue ? `Hello ${newValue}!` : '';\n    textBox.replaceChildren(greeting);\n  };\n\n  textField.updateProps({onChange: onChangeHandler});\n\n  const scrollView = root.createComponent(ScrollView);\n  scrollView.append(textField);\n  scrollView.append(textBox);\n\n  const screen = root.createComponent(Screen, {\n    name: 'TextField',\n    title: 'Text Field Example',\n  });\n  screen.append(scrollView);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "guidelines",
        "title": "Guidelines",
        "sectionContent": "\n- When a merchant opens a new form, the first text field should be in a focused state.\n- If the merchant is actively focused in a text field, then the keyboard should come up and the label should move to the top of the field.\n- If focus goes away from the text field, then the keyboard should hide.\n- Text fields always take up the full screen width.\n- Text fields don’t change height. If text entered is longer than the width of the text field, then the oldest text on the left should be hidden to make room.\n- When it makes sense, provide autocomplete options (for example, entering an address).\n    "
      },
      {
        "type": "Generic",
        "anchorLink": "content-guidelines",
        "title": "Content Guidelines",
        "sectionContent": "\n- If a text field is required, then it should indicate `Required`.\n- Label titles should be brief and written in sentence case.\n- Use the same terms for similar label titles throughout the app.\n    "
      }
    ]
  },
  {
    "name": "Tile",
    "description": "Tiles are customizable buttons that allow staff to complete actions quickly. Think of them as shortcuts--adding a 10% discount to an order, for example. Tiles provide contextual information and let merchants quickly access workflows, actions, and information from the smart grid and the top of detail pages. They’re dynamic and can change based on surrounding context, such as what’s in the cart.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "Tile",
        "description": "",
        "type": "TileProps",
        "typeDefinitions": {
          "TileProps": {
            "filePath": "src/surfaces/point-of-sale/components/Tile/Tile.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "TileProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/Tile/Tile.ts",
                "syntaxKind": "PropertySignature",
                "name": "badgeValue",
                "value": "number",
                "description": "The number value displayed in the top right corner of the tile.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Tile/Tile.ts",
                "syntaxKind": "PropertySignature",
                "name": "destructive",
                "value": "boolean",
                "description": "Sets whether or not the tile is in a red destructive appearance.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Tile/Tile.ts",
                "syntaxKind": "PropertySignature",
                "name": "enabled",
                "value": "boolean",
                "description": "Sets whether or not the tile can be tapped.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Tile/Tile.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "The callback that is executed when the tile is tapped.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Tile/Tile.ts",
                "syntaxKind": "PropertySignature",
                "name": "subtitle",
                "value": "string",
                "description": "The text set on the secondary label of the tile.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/Tile/Tile.ts",
                "syntaxKind": "PropertySignature",
                "name": "title",
                "value": "string",
                "description": "The text set on the main label of the tile."
              }
            ],
            "value": "export interface TileProps {\n  /**\n   * The text set on the main label of the tile.\n   */\n  title: string;\n  /**\n   * The text set on the secondary label of the tile.\n   */\n  subtitle?: string;\n  /**\n   * Sets whether or not the tile can be tapped.\n   */\n  enabled?: boolean;\n  /**\n   * Sets whether or not the tile is in a red destructive appearance.\n   */\n  destructive?: boolean;\n  /**\n   * The number value displayed in the top right corner of the tile.\n   */\n  badgeValue?: number;\n  /**\n   * The callback that is executed when the tile is tapped.\n   */\n  onPress?: () => void;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "tile-thumbnail.png",
    "defaultExample": {
      "image": "tile-default.png",
      "codeblock": {
        "title": "Render a tile on smart grid",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react'\nimport { Tile, reactExtension, useApi } from '@shopify/ui-extensions-react/point-of-sale'\n\nconst TileComponent = () =&gt; {\n  const api = useApi()\n  return (\n    &lt;Tile\n      title=\"My app\"\n      subtitle=\"Hello world!\"\n      onPress={() =&gt; {\n        api.action.presentModal()\n      }}\n      enabled\n    /&gt;\n  )\n}\n\nexport default reactExtension('pos.home.tile.render', () =&gt; {\n  return &lt;TileComponent /&gt;\n})",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Tile,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.tile.render',\n  (root, api) =&gt; {\n    const tile = root.createComponent(Tile, {\n      title: 'My app',\n      subtitle: 'Hello world!',\n      enabled: true,\n      onPress: () =&gt; {\n        api.action.presentModal();\n      },\n    });\n\n    root.append(tile);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "TimeField",
    "description": "A component that enables users to open a dialog and select a time through a text input.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "TimeField",
        "description": "",
        "type": "TimeFieldProps",
        "typeDefinitions": {
          "TimeFieldProps": {
            "filePath": "src/surfaces/point-of-sale/components/TimeField/TimeField.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts",
              "InputProps": "src/surfaces/point-of-sale/components/shared/InputField.ts"
            },
            "name": "TimeFieldProps",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/TimeField/TimeField.ts",
                "syntaxKind": "PropertySignature",
                "name": "action",
                "value": "InputAction",
                "description": "A button under the text field to provide extra functionality.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimeField/TimeField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the field can be modified.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimeField/TimeField.ts",
                "syntaxKind": "PropertySignature",
                "name": "error",
                "value": "string",
                "description": "Indicates an error to the user. The field is given specific stylistic treatment to communicate problems that have to be resolved immediately.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimeField/TimeField.ts",
                "syntaxKind": "PropertySignature",
                "name": "helpText",
                "value": "string",
                "description": "The label under the text field which provides guidance or instructions that assist users.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimeField/TimeField.ts",
                "syntaxKind": "PropertySignature",
                "name": "is24Hour",
                "value": "boolean",
                "description": "(Android only) Whether the clock displays in 24 hour time instead of 12 hour time.",
                "isOptional": true,
                "defaultValue": "false"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimeField/TimeField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The content to use as the field label."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimeField/TimeField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onBlur",
                "value": "() => void",
                "description": "The callback when focus is removed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimeField/TimeField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onChange",
                "value": "(value: string) => void",
                "description": "The callback when the user has finished editing a field.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimeField/TimeField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onFocus",
                "value": "() => void",
                "description": "The callback when input is focused.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimeField/TimeField.ts",
                "syntaxKind": "PropertySignature",
                "name": "value",
                "value": "string",
                "description": "The current value for the field. Defaults to now. You should update this value in response to the `onChange` callback.",
                "isOptional": true
              }
            ],
            "value": "export interface TimeFieldProps\n  extends Pick<\n    InputProps,\n    | 'value'\n    | 'error'\n    | 'label'\n    | 'disabled'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onChange'\n    | 'action'\n    | 'helpText'\n  > {\n  /**\n   * (Android only) Whether the clock displays in 24 hour time instead of 12 hour time.\n   * @defaultValue false\n   */\n  is24Hour?: boolean;\n}"
          },
          "InputAction": {
            "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
            "name": "InputAction",
            "description": "",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "disabled",
                "value": "boolean",
                "description": "Whether the button can be pressed.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "label",
                "value": "string",
                "description": "The text displayed in the button."
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/shared/InputField.ts",
                "syntaxKind": "PropertySignature",
                "name": "onPress",
                "value": "() => void",
                "description": "A callback to be performed."
              }
            ],
            "value": "export interface InputAction {\n  /**\n   * The text displayed in the button.\n   */\n  label: string;\n  /**\n   * A callback to be performed.\n   */\n  onPress: () => void;\n  /**\n   * Whether the button can be pressed.\n   */\n  disabled?: boolean;\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "defaultExample": {
      "image": "time-field-default.png",
      "codeblock": {
        "title": "Time input",
        "tabs": [
          {
            "title": "React",
            "code": "import React, {useState} from 'react';\nimport {\n  TimeField,\n  Screen,\n  ScrollView,\n  Navigator,\n  Text,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [time, setTime] = useState('');\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"TimeField\" title=\"TimeField Example\"&gt;\n        &lt;ScrollView&gt;\n          &lt;TimeField label=\"Time\" value={time} onChange={setTime} /&gt;\n          &lt;Text&gt;Selected Time: {time}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.home.modal.render', () =&gt; (\n  &lt;SmartGridModal /&gt;\n));\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  TimeField,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root, api) =&gt; {\n  const timeField = root.createComponent(TimeField, {\n    label: 'Select Time',\n    value: '',\n  });\n\n  const textBox = root.createComponent(Text);\n\n  const onChangeHandler = (newValue: string) =&gt; {\n    timeField.updateProps({value: newValue});\n\n    const textContent = `Selected Time: ${newValue}`;\n    textBox.replaceChildren(textContent);\n  };\n\n  timeField.updateProps({onChange: onChangeHandler});\n\n  const scrollView = root.createComponent(ScrollView);\n  scrollView.append(timeField);\n  scrollView.append(textBox);\n\n  const screen = root.createComponent(Screen, {\n    name: 'TimeField',\n    title: 'Time Field Example',\n  });\n  screen.append(scrollView);\n\n  const navigator = root.createComponent(Navigator);\n  navigator.append(screen);\n\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "subSections": [
      {
        "type": "Generic",
        "anchorLink": "guidelines",
        "title": "Guidelines",
        "sectionContent": "\n- Use a smart default time for common selections.\n      "
      }
    ],
    "thumbnail": "time-field-thumbnail.png"
  },
  {
    "name": "TimePicker",
    "description": "A component used to select a time through a dialog.",
    "isVisualComponent": true,
    "type": "component",
    "definitions": [
      {
        "title": "TimePicker",
        "description": "",
        "type": "TimePickerProps",
        "typeDefinitions": {
          "TimePickerProps": {
            "filePath": "src/surfaces/point-of-sale/components/TimePicker/TimePicker.ts",
            "importMap": {
              "createRemoteComponent": "../../node_modules/@remote-ui/core/build/ts/index.d.ts"
            },
            "name": "TimePickerProps",
            "description": "Represents the properties for the TimePicker component.",
            "members": [
              {
                "filePath": "src/surfaces/point-of-sale/components/TimePicker/TimePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "inputMode",
                "value": "'inline' | 'spinner'",
                "description": "Whether to display the picker in inline (clock) mode or spinner mode. iOS only supports 'spinner'.",
                "isOptional": true,
                "defaultValue": "'inline'"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimePicker/TimePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "is24Hour",
                "value": "boolean",
                "description": "(Android only) Whether the clock displays in 24 hour time instead of 12 hour time.",
                "isOptional": true,
                "defaultValue": "false"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimePicker/TimePicker.ts",
                "syntaxKind": "MethodSignature",
                "name": "onChange",
                "value": "(selected: string) => void",
                "description": "A callback for changes.",
                "isOptional": true
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimePicker/TimePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "selected",
                "value": "string",
                "description": "The selected time.",
                "isOptional": true,
                "defaultValue": "The current time"
              },
              {
                "filePath": "src/surfaces/point-of-sale/components/TimePicker/TimePicker.ts",
                "syntaxKind": "PropertySignature",
                "name": "visibleState",
                "value": "[boolean, (visible: boolean) => void]",
                "description": "Controls the visible state, and a callback to set the visible state as false when the dialog closes."
              }
            ],
            "value": "export interface TimePickerProps {\n  /**\n   * The selected time.\n   * @defaultValue The current time\n   */\n  selected?: string;\n  /**\n   * A callback for changes.\n   */\n  onChange?(selected: string): void;\n  /**\n   * Controls the visible state, and a callback to set the visible state as false when the dialog closes.\n   */\n  visibleState: [boolean, (visible: boolean) => void];\n  /**\n   * (Android only) Whether the clock displays in 24 hour time instead of 12 hour time.\n   * @defaultValue false\n   */\n  is24Hour?: boolean;\n  /**\n   * Whether to display the picker in inline (clock) mode or spinner mode.\n   * iOS only supports 'spinner'.\n   * @defaultValue 'inline'\n   */\n  inputMode?: 'inline' | 'spinner';\n}"
          }
        }
      }
    ],
    "category": "Components",
    "related": [],
    "thumbnail": "time-picker-thumbnail.png",
    "defaultExample": {
      "image": "time-picker-default.png",
      "codeblock": {
        "title": "TimePicker",
        "tabs": [
          {
            "title": "React",
            "code": "import React, {useState} from 'react';\nimport {\n  Button,\n  TimePicker,\n  Screen,\n  Text,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst SmartGridModal = () =&gt; {\n  const [date, setDate] = useState(\n    new Date().toDateString(),\n  );\n  const visibleState = useState(false);\n\n  return (\n    &lt;Screen name=\"Home\" title=\"Home\"&gt;\n      &lt;Text&gt;Selected date: {date}&lt;/Text&gt;\n      &lt;Button\n        title=\"Show\"\n        onPress={() =&gt; {\n          visibleState[1](true);\n        }}\n      /&gt;\n      &lt;TimePicker\n        visibleState={visibleState}\n        onChange={(selected) =&gt; {\n          setDate(\n            new Date(selected).toDateString(),\n          );\n        }}\n        selected={date}\n        is24Hour={true}\n        inputMode={'spinner'}\n      /&gt;\n    &lt;/Screen&gt;\n  );\n};\n\nexport default reactExtension(\n  'pos.home.modal.render',\n  () =&gt; &lt;SmartGridModal /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Button,\n  TimePicker,\n  Screen,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.home.modal.render',\n  (root) =&gt; {\n    const mainScreen = root.createComponent(\n      Screen,\n      {\n        name: 'Home',\n        title: 'Home',\n      },\n    );\n\n    const button = root.createComponent(Button, {\n      title: 'Show',\n      onPress: () =&gt; {\n        timePicker.updateProps({\n          visibleState: [true, () =&gt; {}],\n        });\n      },\n    });\n\n    const handleOnChange = (selected) =&gt; {\n      timePicker.updateProps({\n        selected: new Date(\n          selected,\n        ).toDateString(),\n      });\n    };\n\n    const timePicker = root.createComponent(\n      TimePicker,\n      {\n        visibleState: [false, () =&gt; {}],\n        onChange: handleOnChange,\n        selected: new Date().toDateString(),\n        is24Hour: true,\n        inputMode: 'spinner',\n      },\n    );\n\n    mainScreen.append(button);\n    mainScreen.append(timePicker);\n    root.append(mainScreen);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    }
  },
  {
    "name": "pos.customer-details.action.menu-item.render",
    "description": "A static extension target that renders as a menu item on the customer details screen",
    "defaultExample": {
      "codeblock": {
        "title": "Menu item",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\nimport {\n  reactExtension,\n  ActionItem,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst ActionItemComponent = () =&gt; {\n  const api = useApi&lt;'pos.customer-details.action.menu-item.render'&gt;();\n\n  console.log(`Customer ID: ${api.customer.id}`);\n\n  return &lt;ActionItem enabled onPress={() =&gt; api.action.presentModal()} /&gt;;\n};\n\nexport default reactExtension(\n  'pos.customer-details.action.menu-item.render',\n  () =&gt; &lt;ActionItemComponent /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {ActionItem, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.customer-details.action.menu-item.render',\n  (root, api) =&gt; {\n    const actionItem = root.createComponent(ActionItem, {\n      onPress: () =&gt; api.action.presentModal(),\n      enabled: true,\n    });\n\n    console.log(`Customer ID: ${api.customer.id}`);\n\n    root.append(actionItem);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Targets",
    "subCategory": "Customer details",
    "isVisualComponent": false,
    "related": [
      {
        "name": "pos.customer-details.action.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-customer-details-action-render"
      },
      {
        "name": "Customer API",
        "url": "/docs/api/pos-ui-extensions/apis/customer-api"
      }
    ],
    "type": "Target"
  },
  {
    "name": "pos.customer-details.action.render",
    "description": "A full-screen extension target that renders when a `pos.customer-details.action.menu-item.render` target calls for it",
    "defaultExample": {
      "codeblock": {
        "title": "Action",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\n\nimport {\n  Text,\n  Screen,\n  ScrollView,\n  Navigator,\n  reactExtension,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.customer-details.action.render'&gt;();\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"CustomerDetails\" title=\"Customer Details\"&gt;\n        &lt;ScrollView&gt;\n          &lt;Text&gt;{`Customer ID: ${api.customer.id}`}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.customer-details.action.render', () =&gt; (\n  &lt;Modal /&gt;\n));\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.customer-details.action.render', (root, api) =&gt; {\n  const navigator = root.createComponent(Navigator);\n  const screen = root.createComponent(Screen, {\n    name: 'CustomerDetails',\n    title: 'Customer Details',\n  });\n  const scrollView = root.createComponent(ScrollView);\n  const text = root.createComponent(Text);\n\n  text.append(`Customer ID: ${api.customer.id}`);\n  scrollView.append(text);\n  screen.append(scrollView);\n  navigator.append(screen);\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Targets",
    "subCategory": "Customer details",
    "isVisualComponent": false,
    "related": [
      {
        "name": "pos.customer-details.action.menu-item.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-customer-details-action-menu-item-render"
      },
      {
        "name": "Customer API",
        "url": "/docs/api/pos-ui-extensions/apis/customer-api"
      }
    ],
    "type": "Target"
  },
  {
    "name": "pos.draft-order-details.action.menu-item.render",
    "description": "A static extension target that renders as a menu item on the draft order details screen",
    "defaultExample": {
      "codeblock": {
        "title": "Menu item",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\nimport {\n  reactExtension,\n  ActionItem,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst ActionItemComponent = () =&gt; {\n  const api = useApi&lt;'pos.draft-order-details.action.menu-item.render'&gt;();\n  return &lt;ActionItem enabled onPress={() =&gt; api.action.presentModal()} /&gt;;\n};\n\nexport default reactExtension(\n  'pos.draft-order-details.action.menu-item.render',\n  () =&gt; &lt;ActionItemComponent /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {ActionItem, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.draft-order-details.action.menu-item.render',\n  (root, api) =&gt; {\n    const actionItem = root.createComponent(ActionItem, {\n      onPress: () =&gt; api.action.presentModal(),\n      enabled: true,\n    });\n\n    root.append(actionItem);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Targets",
    "subCategory": "Draft order details",
    "isVisualComponent": false,
    "related": [
      {
        "name": "pos.draft-order-details.action.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-draft-order-details-action-render"
      }
    ],
    "type": "Target"
  },
  {
    "name": "pos.draft-order-details.action.render",
    "description": "A full-screen extension target that renders when a `pos.draft-order-details.action.render` target calls for it",
    "defaultExample": {
      "codeblock": {
        "title": "Draft order details action",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\n\nimport {\n  Text,\n  Screen,\n  ScrollView,\n  Navigator,\n  reactExtension,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.draft-order-details.action.render'&gt;();\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"DraftOrderDetailsAction\" title=\"Draft Order Details Action\"&gt;\n        &lt;ScrollView&gt;\n          &lt;Text&gt;{`Order ID: ${api.product.id}`}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.draft-order-details.action.render', () =&gt; (\n  &lt;Modal /&gt;\n));\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.draft-order-details.action.render',\n  (root, api) =&gt; {\n    const navigator = root.createComponent(Navigator);\n    const screen = root.createComponent(Screen, {\n      name: 'DraftOrderDetailsAction',\n      title: 'Draft Order Details Action',\n    });\n    const scrollView = root.createComponent(ScrollView);\n    const text = root.createComponent(Text);\n\n    text.append(`ID for current draft order screen: ${api.order.id}`);\n    scrollView.append(text);\n    screen.append(scrollView);\n    navigator.append(screen);\n    root.append(navigator);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Targets",
    "subCategory": "Draft order details",
    "isVisualComponent": false,
    "related": [
      {
        "name": "pos.draft-order-details.action.menu-item.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-draft-order-details-action-menu-item-render"
      },
      {
        "name": "Draft order details API",
        "url": "/docs/api/pos-ui-extensions/apis/draft-order-api"
      }
    ],
    "type": "Target"
  },
  {
    "name": "pos.home.modal.render",
    "description": "A full-screen extension target that renders when a `pos.home.tile.render` target calls for it",
    "defaultExample": {
      "codeblock": {
        "title": "Modal",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react'\n\nimport { Text, Screen, ScrollView, Navigator, reactExtension } from '@shopify/ui-extensions-react/point-of-sale'\n\nconst Modal = () =&gt; {\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name='HelloWorld' title='Hello World!'&gt;\n        &lt;ScrollView&gt;\n          &lt;Text&gt;Welcome to the extension!&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  )\n}\n\nexport default reactExtension('pos.home.modal.render', () =&gt; &lt;Modal /&gt;);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.modal.render', (root) =&gt; {\n  const navigator = root.createComponent(Navigator);\n  const screen = root.createComponent(Screen, {\n    name: 'HelloWorld',\n    title: 'Hello World!',\n  });\n  const scrollView = root.createComponent(ScrollView);\n  const text = root.createComponent(Text);\n\n  text.append('Welcome to the extension!');\n  scrollView.append(text);\n  screen.append(scrollView);\n  navigator.append(screen);\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Targets",
    "subCategory": "Smart grid",
    "isVisualComponent": false,
    "related": [
      {
        "name": "pos.home.tile.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-home-tile-render"
      }
    ],
    "type": "Target"
  },
  {
    "name": "pos.home.tile.render",
    "description": "A static extension target that renders as a smart grid tile",
    "defaultExample": {
      "codeblock": {
        "title": "Tile",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\n\nimport {\n  Tile,\n  reactExtension,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst TileComponent = () =&gt; {\n  const api = useApi&lt;'pos.home.tile.render'&gt;();\n  return (\n    &lt;Tile\n      title=\"My app\"\n      subtitle=\"SmartGrid react Extension\"\n      onPress={() =&gt; {\n        api.action.presentModal();\n      }}\n      enabled\n    /&gt;\n  );\n};\n\nexport default reactExtension('pos.home.tile.render', () =&gt; {\n  return &lt;TileComponent /&gt;;\n});\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {extension, Tile} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.home.tile.render', (root, api) =&gt; {\n  const tile = root.createComponent(Tile, {\n    title: 'My app',\n    subtitle: 'SmartGrid vanilla-js Extension',\n    onPress: () =&gt; api.action.presentModal(),\n    enabled: true,\n  });\n\n  root.append(tile);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Targets",
    "subCategory": "Smart grid",
    "isVisualComponent": false,
    "related": [
      {
        "name": "pos.home.modal.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-home-modal-render"
      }
    ],
    "type": "Target"
  },
  {
    "name": "pos.order-details.action.menu-item.render",
    "description": "A static extension target that renders as a menu item on the order details screen",
    "defaultExample": {
      "codeblock": {
        "title": "Order details action menu item",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\nimport {\n  reactExtension,\n  ActionItem,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst ActionItemComponent = () =&gt; {\n  const api = useApi&lt;'pos.order-details.action.menu-item.render'&gt;();\n  return &lt;ActionItem enabled onPress={() =&gt; api.action.presentModal()} /&gt;;\n};\n\nexport default reactExtension(\n  'pos.order-details.action.menu-item.render',\n  () =&gt; &lt;ActionItemComponent /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {ActionItem, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.order-details.action.menu-item.render',\n  (root, api) =&gt; {\n    const actionItem = root.createComponent(ActionItem, {\n      onPress: () =&gt; api.action.presentModal(),\n      enabled: true,\n    });\n\n    root.append(actionItem);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Targets",
    "subCategory": "Order details",
    "isVisualComponent": false,
    "related": [
      {
        "name": "pos.order-details.action.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-order-details-action-render"
      }
    ],
    "type": "Target"
  },
  {
    "name": "pos.order-details.action.render",
    "description": "A full-screen extension target that renders when a `pos.order-details.action.menu-item.render` target calls for it",
    "defaultExample": {
      "codeblock": {
        "title": "Order details action",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\n\nimport {\n  Text,\n  Screen,\n  ScrollView,\n  useApi,\n  Navigator,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.order-details.action.render'&gt;();\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"OrderDetailsAction\" title=\"Order Details Action\"&gt;\n        &lt;ScrollView&gt;\n          &lt;Text&gt;{`Order ID: ${api.order.id}`}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.order-details.action.render', () =&gt; (\n  &lt;Modal /&gt;\n));\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.order-details.action.render', (root, api) =&gt; {\n  const navigator = root.createComponent(Navigator);\n  const screen = root.createComponent(Screen, {\n    name: 'OrderDetailsAction',\n    title: 'Order Details Action',\n  });\n  const scrollView = root.createComponent(ScrollView);\n  const text = root.createComponent(Text);\n\n  text.append(`ID for current order screen: ${api.order.id}`);\n  scrollView.append(text);\n  screen.append(scrollView);\n  navigator.append(screen);\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Targets",
    "subCategory": "Order details",
    "isVisualComponent": false,
    "related": [
      {
        "name": "pos.order-details.action.menu-item.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-order-details-action-menu-item-render"
      }
    ],
    "type": "Target"
  },
  {
    "name": "pos.product-details.action.menu-item.render",
    "description": "A static extension target that renders as a menu item on the product details screen",
    "defaultExample": {
      "codeblock": {
        "title": "Menu item",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\nimport {\n  reactExtension,\n  ActionItem,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst ActionItemComponent = () =&gt; {\n  const api = useApi&lt;'pos.product-details.action.menu-item.render'&gt;();\n\n  console.log(`Product ID: ${api.product.id}`);\n\n  return &lt;ActionItem enabled onPress={() =&gt; api.action.presentModal()} /&gt;;\n};\n\nexport default reactExtension(\n  'pos.product-details.action.menu-item.render',\n  () =&gt; &lt;ActionItemComponent /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {ActionItem, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.product-details.action.menu-item.render',\n  (root, api) =&gt; {\n    const actionItem = root.createComponent(ActionItem, {\n      onPress: () =&gt; api.action.presentModal(),\n      enabled: true,\n    });\n\n    console.log(`Product ID: ${api.product.id}`);\n\n    root.append(actionItem);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Targets",
    "subCategory": "Product details",
    "isVisualComponent": false,
    "related": [
      {
        "name": "pos.product-details.action.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-product-details-action-render"
      }
    ],
    "type": "Target"
  },
  {
    "name": "pos.product-details.action.render",
    "description": "A full-screen extension target that renders when a `pos.product-details.action.menu-item.render` target calls for it",
    "defaultExample": {
      "codeblock": {
        "title": "Action",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\n\nimport {\n  Text,\n  Screen,\n  ScrollView,\n  Navigator,\n  reactExtension,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.product-details.action.render'&gt;();\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"ProductDetails\" title=\"Product Details\"&gt;\n        &lt;ScrollView&gt;\n          &lt;Text&gt;{`Product ID: ${api.product.id}`}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.product-details.action.render', () =&gt; (\n  &lt;Modal /&gt;\n));\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.product-details.action.render', (root, api) =&gt; {\n  const navigator = root.createComponent(Navigator);\n  const screen = root.createComponent(Screen, {\n    name: 'ProductDetails',\n    title: 'Product Details',\n  });\n  const scrollView = root.createComponent(ScrollView);\n  const text = root.createComponent(Text);\n\n  text.append(`Product ID: ${api.product.id}`);\n  scrollView.append(text);\n  screen.append(scrollView);\n  navigator.append(screen);\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Targets",
    "subCategory": "Product details",
    "isVisualComponent": false,
    "related": [
      {
        "name": "pos.product-details.action.menu-item.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-product-details-action-menu-item-render"
      },
      {
        "name": "ProductAPI",
        "url": "/docs/api/pos-ui-extensions/apis/product-api"
      }
    ],
    "type": "Target"
  },
  {
    "name": "pos.purchase.post.action.menu-item.render",
    "description": "A static extension target that renders as a menu item on the post-purchase screen",
    "defaultExample": {
      "codeblock": {
        "title": "Menu item",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\nimport {\n  reactExtension,\n  ActionItem,\n  useApi,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst ActionItemComponent = () =&gt; {\n  const api = useApi&lt;'pos.purchase.post.action.menu-item.render'&gt;();\n  return &lt;ActionItem enabled onPress={() =&gt; api.action.presentModal()} /&gt;;\n};\n\nexport default reactExtension(\n  'pos.purchase.post.action.menu-item.render',\n  () =&gt; &lt;ActionItemComponent /&gt;,\n);\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {ActionItem, extension} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension(\n  'pos.purchase.post.action.menu-item.render',\n  (root, api) =&gt; {\n    const actionItem = root.createComponent(ActionItem, {\n      onPress: () =&gt; api.action.presentModal(),\n      enabled: true,\n    });\n\n    root.append(actionItem);\n  },\n);\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Targets",
    "subCategory": "Post-purchase",
    "isVisualComponent": false,
    "related": [
      {
        "name": "pos.purchase.post.action.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-purchase-post-action-render"
      }
    ],
    "type": "Target"
  },
  {
    "name": "pos.purchase.post.action.render",
    "description": "A full-screen extension target that renders when a `pos.purchase.post.action.menu-item.render` target calls for it",
    "defaultExample": {
      "codeblock": {
        "title": "Action",
        "tabs": [
          {
            "title": "React",
            "code": "import React from 'react';\n\nimport {\n  Text,\n  Screen,\n  ScrollView,\n  Navigator,\n  useApi,\n  reactExtension,\n} from '@shopify/ui-extensions-react/point-of-sale';\n\nconst Modal = () =&gt; {\n  const api = useApi&lt;'pos.purchase.post.action.render'&gt;();\n  return (\n    &lt;Navigator&gt;\n      &lt;Screen name=\"HelloWorld\" title=\"Hello World!\"&gt;\n        &lt;ScrollView&gt;\n          &lt;Text&gt;{`Order ID for complete checkout: ${api.order.id}`}&lt;/Text&gt;\n        &lt;/ScrollView&gt;\n      &lt;/Screen&gt;\n    &lt;/Navigator&gt;\n  );\n};\n\nexport default reactExtension('pos.purchase.post.action.render', () =&gt; (\n  &lt;Modal /&gt;\n));\n",
            "language": "tsx"
          },
          {
            "title": "TS",
            "code": "import {\n  Navigator,\n  Screen,\n  ScrollView,\n  Text,\n  extension,\n} from '@shopify/ui-extensions/point-of-sale';\n\nexport default extension('pos.purchase.post.action.render', (root, api) =&gt; {\n  const navigator = root.createComponent(Navigator);\n  const screen = root.createComponent(Screen, {\n    name: 'HelloWorld',\n    title: 'Hello World!',\n  });\n  const scrollView = root.createComponent(ScrollView);\n  const text = root.createComponent(Text);\n\n  text.append(`Order ID for complete checkout: ${api.order.id}`);\n  scrollView.append(text);\n  screen.append(scrollView);\n  navigator.append(screen);\n  root.append(navigator);\n});\n",
            "language": "ts"
          }
        ]
      }
    },
    "category": "Targets",
    "subCategory": "Post-purchase",
    "isVisualComponent": false,
    "related": [
      {
        "name": "pos.purchase.post.action.menu-item.render",
        "url": "/docs/api/pos-ui-extensions/targets/pos-purchase-post-action-menu-item-render"
      }
    ],
    "type": "Target"
  }
]