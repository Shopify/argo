[
  {
    "title": "Configuration",
    "description": "When you create a [checkout UI extension](/api/checkout-ui-extensions/), the `shopify.ui.extension.toml` file is automatically generated in your checkout UI extension directory. This guide describes the properties that you can configure in `shopify.ui.extension.toml`.",
    "id": "configuration",
    "sections": [
      {
        "type": "Generic",
        "anchorLink": "how-it-works",
        "title": "How it works",
        "sectionContent": "You define properties for your checkout UI extension in the extension configuration file. The `shopify.ui.extension.toml` file contains the extension's configuration, which include the extension name, extension points, metafields, capabilities, and settings definition. \n\n When an extension is published to Shopify, the contents of the settings file are pushed alongside the extension.",
        "codeblock": {
          "title": "Shopify Checkout UI scaffolding",
          "tabs": [
            {
              "title": "shopify.ui.extension.toml",
              "code": "type = \"checkout_ui_extension\"\nname = \"my-checkout-extension\"\n\nextension_points = [\n  'Checkout::Dynamic::Render'\n]\n\n[[metafields]]\nnamespace = \"my-namespace\"\nkey = \"my-key\"\n\n[[metafields]]\nnamespace = \"my-namespace\"\nkey = \"my-other-key\"\n\n[capabilities]\nnetwork_access = true\nblock_progress = true\napi_access = true\n\n[settings]\n  [[settings.fields]]\n  key = \"field_key\"\n  type = \"boolean\"\n  name = \"field-name\"\n  [[settings.fields]]\n  key = \"field_key_2\"\n  type = \"number_integer\"\n  name = \"field-name-2\"\n",
              "language": "toml"
            }
          ]
        }
      },
      {
        "type": "Markdown",
        "anchorLink": "configuration-properties",
        "title": "Configuration properties",
        "sectionContent": "\n| Property  | Required? | Description  |\n|---|---|---|\n| `type` | Yes | The type of extension. For checkout UI extensions, this value is `checkout_ui_extension`. |\n| `name`  | Yes | The name of the checkout UI extension. |\n| `extension_points`  | Yes | The [pre-defined points](/docs/api/checkout-ui-extensions/extension-points-overview) within checkout that your extension will render to. These values must match how your extension calls `extension()` or `reactExtension()`.<br /><br />For example, if your extension calls `extension('Checkout::Dynamic::Render', () => {})` then your config must specify `Checkout::Dynamic::Render`. |\n| `metafields`  | Yes | The metafields that your extension [needs to read](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-appmetafields). <br></br>You can specify up to five `key` and `namespace` pairs in the settings file. When the extension is executed, Shopify looks for the metafields in each resource and returns their contents. |\n| `capabilities`  | No | Defines the [capabilities](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-extension) associated with the UI extension. <br></br><ul><li>[`api_access`](#api-access): Allows your extension to query the Storefront API.</li><li>[`network_access`](#network-access): Allows your extension make external network calls.</li><li>[`block_progress`](#block-progress): States that your extension might block the buyer's progress.</li></ul> |\n| `settings` | No | Defines [settings](#settings-definition) that a merchant can set values for in the checkout editor. |\n"
      },
      {
        "type": "Generic",
        "anchorLink": "api-access",
        "title": "Storefront API access",
        "sectionContent": "The following section describes the use cases of the `api_access` capability and the [Storefront API](/api/storefront) access scopes.",
        "codeblock": {
          "title": "Enable Storefront API access",
          "tabs": [
            {
              "title": "shopify.ui.extension.toml",
              "code": "type = \"checkout_ui_extension\"\nname = \"my-checkout-extension\"\n\n# ...\n\n[capabilities]\napi_access = true\n",
              "language": "toml"
            }
          ]
        },
        "sectionCard": [
          {
            "name": "API access examples",
            "subtitle": "See",
            "url": "/docs/api/checkout-ui-extensions/apis/standardapi#example-storefront-api-access",
            "type": "blocks"
          }
        ],
        "sectionSubContent": [
          {
            "title": "When to use Storefront API access",
            "sectionContent": "API access is used when your extension needs to retrieve data from the [Storefront API](/api/storefront). For example, you may need to [fetch product data](/apps/checkout/product-offers/add-product-offer), check the product tags on an item in the cart, or convert a product's price to another currency.\n\n> Tip:\n> Shopify handles the authentication for all API calls from an extension.\n"
          },
          {
            "title": "Methods for accessing the Storefront API",
            "sectionContent": "Enabling the `api_access` capability allows you to use the Standard API [`query`](/api/checkout-ui-extensions/extension-points-api#standardapi) method and the global `fetch` to retrieve data from the [Storefront API](/api/storefront) without manually managing token aquisition and refresh.\n\n`query` lets you request a single GraphQL response from the Storefront API.\n\nIf you prefer to construct GraphQL requests yourself or you would like to use a full-featured GraphQL client such as Apollo or urql, our custom `fetch` global automatically appends the required access tokens.\n\nThe GraphQL client of your choice shouldn’t use any DOM APIs, as they aren’t available in a checkout UI extension's Web Worker.\n\n> Note: Both `query` and `fetch` will work for calling the Storefront API with the `api_access` capability enabled. If you are using `fetch` to get data external to Shopify, refer to the [`network_access` capability](/api/checkout-ui-extensions/configuration#network-access)"
          },
          {
            "title": "Storefront API access scopes",
            "sectionContent": "\nYour extensions will have the following unauthenticated access scopes to the Storefront API:\n\n- <code>unauthenticated_read_product_publications</code>\n- <code>unauthenticated_read_collection_publications</code>\n- <code>unauthenticated_read_product_listings</code>\n- <code>unauthenticated_read_product_tags</code>\n- <code>unauthenticated_read_selling_plans</code>\n- <code>unauthenticated_read_collection_listings</code>\n- <code>unauthenticated_read_metaobjects</code>\n"
          }
        ]
      },
      {
        "type": "Generic",
        "anchorLink": "network-access",
        "title": "Network access",
        "sectionContent": "The following section describes use cases for requesting network access, alternatives to requesting network access, and steps for completing a request for network access.",
        "codeblock": {
          "title": "Enable network access",
          "tabs": [
            {
              "title": "shopify.ui.extension.toml",
              "code": "type = \"checkout_ui_extension\"\nname = \"my-checkout-extension\"\n\n# ...\n\n[capabilities]\nnetwork_access = true\n",
              "language": "toml"
            }
          ]
        },
        "sectionSubContent": [
          {
            "title": "When to request network access",
            "sectionContent": "If you need to get data into checkout that you can't currently get from Shopify, then you should request network access. For example, you might need to fetch additional data to render loyalty points."
          },
          {
            "title": "Alternatives to network access",
            "sectionContent": "\nInstead of fetching data with an external network call, consider retrieving the data from a metafield. Your app may be able to use the [Admin API](/docs/api/admin) to write [metafields](/api/admin-graphql/latest/objects/metafield) on the shop, product, or customer ahead of checkout.\n\nRetrieving data from [metafields](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-appmetafields) during checkout is faster since it won't introduce an external network call. This allows you to rely on Shopify for the uptime, scaling, and durability of the data storage.\n"
          },
          {
            "title": "Complete a request for network access",
            "sectionContent": "\n1. Go to your [Partner Dashboard](https://partners.shopify.com/current/apps).\n2. Click the name of the app that you want to change.\n3. Click **App setup**.\n4. In the **Checkout UI extensions** section, on the **Enable network access in checkout UI extensions** card, click **Request access**.\n\n   Your request is automatically approved and your app is immediately granted the approval scope that's required for your checkout UI extension to make external network calls.\n\n5. Add <code>network_access = true</code> to the <code>settings</code> section of your extension's configuration file."
          },
          {
            "title": "Required CORS headers",
            "sectionContent": "\nSince UI extensions run in a [Web Worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API), they have a null origin. They do not share the storefront or checkout's origin. For network calls to succeed, your server must support [cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) for null origins by including this response header:\n\n<code>Access-Control-Allow-Origin: *</code>\n"
          },
          {
            "title": "Security considerations",
            "sectionContent": "\nWhen processing HTTP requests on your API server, you cannot guarantee that your own extension will have made every request. When responding with sensitive data, keep in mind that requests could originate from anywhere on the Internet.\n\nYour extension can pass a [session token](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-sessiontoken) to your API server but this only guarantees the integrity of its claims. It does not guarantee the request itself originated from Shopify. For example, your API server could trust the session token's `sub` claim (the customer ID) but it could not trust a `?customer_id=` query parameter.\n\nConsider a scenario where your extension retrieves a discount code from your API server and [applies it to the checkout](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-applydiscountcodechange). It would not be safe to expose an API endpoint named `/get-discount-code` if any buyer could make a direct HTTP request and obtain a discount code.\n"
          }
        ]
      },
      {
        "type": "Generic",
        "anchorLink": "block-progress",
        "title": "Block progress",
        "sectionContent": "The following section describes blocking the buyer's progress through checkout, and how you can detect whether the merchant has allowed it.",
        "sectionCard": [
          {
            "name": "Blocking examples",
            "subtitle": "See",
            "url": "/docs/api/checkout-ui-extensions/apis/standardapi#example-buyer-journey",
            "type": "blocks"
          }
        ],
        "codeblock": {
          "title": "Enable progress blocking",
          "tabs": [
            {
              "title": "shopify.ui.extension.toml",
              "code": "type = \"checkout_ui_extension\"\nname = \"my-checkout-extension\"\n\n# ...\n\n[capabilities]\nblock_progress = true\n",
              "language": "toml"
            }
          ]
        },
        "sectionSubContent": [
          {
            "title": "When to request blocking progress",
            "sectionContent": "\nIf your extension relies on specific input then you might need to block the buyer's progress until they've provided all required information. You can do this with a [buyer journey](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-buyerjourney) intercept, by returning `behavior: 'block'`.\n\nFor example, for some purchases you need to collect and verify a customer's age. For the order to be valid, you need to verify that an age is set and that it's greater than or equal to a minimum value.\n\nIn order to block checkout progress, your extension must have the `block_progress` capability.\n"
          },
          {
            "title": "Granting the capability to block progress",
            "sectionContent": "\nSetting `block_progress` in the `shopify.ui.extension.toml` file informs merchants that your extension blocks the buyer's progress for invalid orders. Merchants can allow or disallow this capability in the checkout editor.\n\n> Note:\n> When running a local extension with the `block_progress` capability, it will be automatically granted. This simulates a scenario where the merchant has allowed the capability.\n"
          },
          {
            "title": "Detecting the ability to block progress",
            "sectionContent": "\nIn your extension, look for `block_progress` in [extension.capabilities](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-extension) to see if the merchant has granted the blocking capability.\n\nIf the merchant declined the permission for your app to block progress, the `behavior: 'block'` option in the [buyer journey](/docs/api/checkout-ui-extensions/apis/standardapi#properties-propertydetail-buyerjourney) intercept will be treated as `behavior: 'allow'`, and checkout will proceed as normal.\n\nWhen developing a local extension, you can remove the `block_progress` capability from your `shopify.ui.extension.toml` file to simulate a merchant disallowing the capability.\n\n> Tip:\n> We recommend having some UI to cover cases where you can't block checkout progress. For example, you might want to show a warning rather than block checkout progress when an order doesn't pass validation."
          }
        ]
      },
      {
        "type": "Markdown",
        "anchorLink": "settings-definition",
        "title": "Settings definition",
        "sectionContent": "The settings for a checkout UI extension define a set of fields that the merchant can set a value for from the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor). You can use validation options to apply additional constraints to the data that the setting can store, such as a minimum or maximum value. \n\n Each settings definition can include up to 20 settings. \n\n > Note: \n > All setting inputs are optional. You should code the extension so that it still works if the merchant hasn't set a value for the setting.",
        "sectionSubContent": [
          {
            "title": "Properties",
            "sectionContent": "The following table describes the properties that you can use to define a setting:\n\n | Property  | Required? | Description | Example |\n|---|---|---|---|\n| `key` | Yes | The key of the setting. When a merchant configures a value for this setting, the value will be exposed under this `key` when running your extension    | <pre>\"banner_title\"</pre> |\n| `type` | Yes | The [type](#supported-setting-types) of setting. | <pre>\"single_line_text_field\"</pre> |\n| `name` | Yes | The name of the setting. `name` is displayed to the merchant in the checkout editor. | <pre>\"Banner title\"</pre> |\n| `description` | No | The description of the setting. `description` is displayed to the merchant in the checkout editor. | <pre>\"Enter a title for the banner.\"</pre> |\n| `validations` | No | Constraints on the setting input that Shopify validates. | <pre>validations: <br> name = \"max\",<br> value = \"25\"</pre> |"
          },
          {
            "title": "Supported setting types",
            "sectionContent": "The setting type determines the type of information that the setting can store. The setting types have built-in validation on the setting input. \n\n Settings can have the following types: \n\n| Type | Description | Example value |\n|---|---|---|\n| `boolean` | A true or false value. | <pre>true</pre> |\n| `date` | A date in ISO 8601 format without a presumed time zone. | <pre>2022-02-02</pre> |\n| `date_time` | A date and time in ISO 8601 format without a presumed time zone. | <pre>2022-01-01T12:30:00</pre> |\n| `single_line_text_field` | A single line string. | <pre>Canada</pre> |\n| `multi_line_text_field` | A multi-line string. | <pre>Canada<br>United States<br>Brazil<br>Australia</pre> |\n| `number_integer` | A whole number in the range of +/-9,007,199,254,740,991. | <pre>10</pre> |\n| `number_decimal` | A number with decimal places in the range of +/-9,999,999,999,999.999999999. | <pre>10.4</pre> |\n| `variant_reference` | A globally-unique identifier (GID) for a product variant. | <pre>gid://shopify/ProductVariant/1<pre> |"
          },
          {
            "title": "Validation options",
            "sectionContent": "Each setting can include validation options. Validation options enable you to apply additional constraints to the data that a setting can store, such as a minimum or maximum value, or a regular expression. The setting's `type` determines the available validation options. \n\n You can include a validation option for a setting using the validation `name` and a corresponding `value`. The appropriate value depends on the setting type to which the validation applies.\n\n The following table outlines the available validation options with supported types for applying constraints to a setting:\n\n | Validation option | Description | Supported types | Example |\n|---|---|---|---|\n| Minimum length | The minimum length of a text value. | <ul><li><code>single_line_text_field</code></li><li><code>multi_line_text_field</code></li></ul> | <pre>[[settings.fields.validations]]<br> name = \"min\"<br> value = \"8\"</pre> |\n| Maximum length | The maximum length of a text value. | <ul><li><code>single_line_text_field</code></li><li><code>multi_line_text_field</code></li></ul> | <pre>[[settings.fields.validations]]<br> name = \"max\"<br> value = \"25\"</pre> |\n| Regular expression | A regular expression. Shopify supports [RE2](https://github.com/google/re2/wiki/Syntax). | <ul><li><code>single_line_text_field</code></li><li><code>multi_line_text_field</code></li></ul> | <pre>[[settings.fields.validations]]<br> name = \"regex\"<br> value = \"(@)(.+)$\"</pre> |\n| Choices | A list of up to 128 predefined options that limits the values allowed for the metafield.  | `single_line_text_field` | <pre>[[settings.fields.validations]]<br> name = \"choices\"<br> value = \"[\"red\", \"green\", \"blue\"]\"</pre> |\n| Minimum date | The minimum date in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. | `date` | <pre>[[settings.fields.validations]]<br> name = \"min\"<br> value = \"2022-01-01\"</pre> |\n| Maximum date | The maximum date in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. | `date` | <pre>[[settings.fields.validations]]<br> name = \"max\"<br> value = \"2022-03-03\"</pre> |\n| Minimum datetime | The minimum date and time in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. | `date_time` | <pre>[[settings.fields.validations]]<br> name = \"min\"<br> value = \"2022-03-03T16:30:00\"</pre> |\n| Maximum datetime | The maximum date and time in [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. |  `date_time` | <pre>[[settings.fields.validations]]<br> name = \"max\"<br> value = \"2022-03-03T17:30:00\"</pre> |\n| Minimum integer | The minimum integer number. | `number_integer` | <pre>[[settings.fields.validations]]<br> name = \"min\"<br> value = \"9\"</pre> |\n| Maximum integer | The maximum integer number. | `number_integer` | <pre>[[settings.fields.validations]]<br> name = \"max\"<br> value = \"15\"</pre> |\n| Minimum decimal | The minimum decimal number. |  `number_decimal` | <pre>[[settings.fields.validations]]<br> name = \"min\"<br> value = \"0.5\"</pre> |\n| Maximum decimal | The maximum decimal number. |  `number_decimal` | <pre>[[settings.fields.validations]]<br> name = \"max\"<br> value = \"1.99\"</pre> |\n| Maximum precision | The maximum number of decimal places to store for a decimal number. | `number_decimal` | <pre>[[settings.fields.validations]]<br> name = \"max_precision\"<br> value = \"2\"</pre> |"
          }
        ]
      },
      {
        "type": "Generic",
        "anchorLink": "example-settings-definition",
        "title": "Example settings definition",
        "sectionContent": "The following example shows a settings definition that defines a setting named `banner_title` of type `single_line_text_field`. When the merchant sets a value for this setting from the checkout editor, Shopify validates that the provided value is between 5 and 20 characters in length \n\n Learn more about the settings api by completing our [custom banners example](/apps/checkout/custom-banners/add-custom-banner).",
        "sectionCard": [
          {
            "name": "Settings example code",
            "subtitle": "See",
            "url": "/docs/api/checkout-ui-extensions/apis/standardapi#example-settings",
            "type": "blocks"
          }
        ],
        "codeblock": {
          "title": "Example settings",
          "tabs": [
            {
              "title": "shopify.ui.extension.toml",
              "code": "[settings]\n  [[settings.fields]]\n  key = \"banner_title\"\n  type = \"single_line_text_field\"\n  name = \"Banner title\"\n  description = \"Enter a title for the banner.\"\n    [[settings.fields.validations]]\n    name = \"min\"\n    value = \"5\"\n    [[settings.fields.validations]]\n    name = \"max\"\n    value = \"20\"\n",
              "language": "toml"
            }
          ]
        }
      }
    ]
  },
  {
    "title": "Error handling",
    "description": "You can use standard web techniques to handle errors in [checkout UI extensions](/api/checkout-ui-extensions/) but you may need to account for how they run inside of a [Web Worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API).",
    "id": "error-handling",
    "sections": [
      {
        "type": "Generic",
        "anchorLink": "handling-any-error",
        "title": "Handling any error",
        "sectionContent": "Add an `unhandledrejection` listener for promise rejections or an `error` listener for other exceptions like Javascript runtime errors or failures to load a resource.",
        "codeblock": {
          "title": "Handling any error",
          "tabs": [
            {
              "code": "// For unhandled promise rejections\nself.addEventListener(\n  'unhandledrejection',\n  (error) => {\n    console.warn(\n      'event unhandledrejection',\n      error,\n    );\n  },\n);\n\n// For other exceptions\nself.addEventListener('error', (error) => {\n  console.warn('event error', error);\n});\n",
              "language": "ts"
            }
          ]
        }
      },
      {
        "type": "Generic",
        "anchorLink": "third-party-libraries",
        "title": "Third party libraries",
        "sectionContent": "\nYou can use error reporting libraries like [Bugsnag](https://www.bugsnag.com/) or [Sentry](https://sentry.io/). However, they might require extra configuration because UI extensions run inside of a [Web Worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API).\n\n> Tip:\n> You must request [network access](/api/checkout-ui-extensions/configuration#network-access) to transmit errors to a third party service.\n"
      },
      {
        "type": "Generic",
        "anchorLink": "sentry",
        "title": "Sentry (recommended)",
        "sectionContent": "\nInitialize Sentry following their [Web Worker guide](https://docs.sentry.io/platforms/javascript/configuration/webworkers/). We recommend disabling the default integrations to be sure it will run within a Web Worker. You'll need to add event listeners manually.\n\nIf you are writing your UI extension in React, you can follow Sentry's [React integration guide](https://docs.sentry.io/platforms/javascript/guides/react/) to get additional context on errors thrown while rendering your components. Integrations like tracing do not currently run in Web Workers ([issue](https://github.com/getsentry/sentry-javascript/issues/5289)).",
        "codeblock": {
          "title": "Sentry",
          "tabs": [
            {
              "code": "import {\n  reactExtension,\n  Banner,\n} from '@shopify/checkout-ui-extensions-react';\nimport * as Sentry from '@sentry/browser';\n\nSentry.init({\n  dsn: 'https://examplePublicKey@o0.ingest.sentry.io/0',\n  defaultIntegrations: false,\n});\n\nself.addEventListener(\n  'unhandledrejection',\n  (error) => {\n    Sentry.captureException(\n      new Error(error.reason.stack),\n    );\n  },\n);\n\nself.addEventListener('error', (error) => {\n  Sentry.captureException(\n    new Error(error.reason.stack),\n  );\n});\n\n// Your normal extension code.\nreactExtension(\n  'Checkout::Dynamic::Render',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  return <Banner>Your extension</Banner>;\n}\n",
              "language": "ts"
            }
          ]
        }
      },
      {
        "type": "Generic",
        "anchorLink": "bugsnag",
        "title": "Bugsnag",
        "sectionContent": "\nFollow [Bugsnag's documentation](https://docs.bugsnag.com/platforms/javascript/) to install it for your extension. Bugsnag adds event listeners by default so there's no need to add them manually.\n\nIf you use the [CDN version](https://docs.bugsnag.com/platforms/javascript/cdn-guide/), you'll need to add polyfill code (see example) before importing Bugsnag because it tries to access some variables that are not available in Web Workers ([details](https://github.com/bugsnag/bugsnag-js/issues/1506)).\n\nIf you are writing your UI extension in React, you can follow Bugsnag's [React integration guide](https://docs.bugsnag.com/platforms/javascript/legacy/react/) to get additional context on errors thrown while rendering your components.",
        "codeblock": {
          "title": "Bugsnag",
          "tabs": [
            {
              "code": "/**\n * The CDN version of Bugsnag requires this polyfill.\n */\n(() => {\n  const document = {\n    documentElement: {\n      outerHTML: '',\n      createElement: () => ({}),\n      clientWidth: 0,\n      clientHeight: 0,\n    },\n    addEventListener: () => {},\n  };\n  const history = {};\n  const window = self;\n  self.window = window;\n  window.document = document;\n  window.history = history;\n})();\n",
              "language": "ts"
            }
          ]
        }
      }
    ]
  },
  {
    "title": "Extension Points",
    "description": "A checkout UI extension will register for one or more extension points using `shopify.extend()`. An extension point in a UI extension is a plain JavaScript function. This function receives an API object for interacting with the application, and is expected to return a value in a specific shape. The input arguments and the output type are different for each extension point.",
    "id": "extension-points-overview",
    "sections": [
      {
        "type": "Generic",
        "anchorLink": "static-extension-points",
        "title": "Static extension points",
        "image": "static-extension-points.png",
        "sectionContent": "Static extension points render immediately before or after most core checkout features such as contact information, shipping methods, and order summary line items. Merchants use the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor) to activate and place the extension in the checkout experience.\n      \n\nWhen a core checkout feature isn't rendered, neither are the static extension points tied to it. For example, shipping methods aren't shown when customers select the option for store pickup and the UI extensions that load before or after the shipping method aren't rendered.\n      \n\nChoose static extension points when your content and functionality is closely related to a core checkout feature. An example is a shipping delay notice.\n      ",
        "sectionCard": [
          {
            "name": "Extension points",
            "subtitle": "API reference",
            "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
            "type": "blocks"
          }
        ]
      },
      {
        "type": "Generic",
        "anchorLink": "dynamic-extension-points",
        "title": "Dynamic extension points",
        "sectionContent": "Dynamic extension points aren't tied to specific checkout features. They can render between core features on any checkout step. Merchants can use the [checkout editor](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor) to place the extension in any one of the [supported locations](/docs/api/checkout-ui-extensions/extension-points-overview#supported-locations) for the dynamic extension point.\n      \n\nWhen a checkout feature for that location is hidden, dynamic extensions are still rendered. For example, an extension placed above the shipping address will still render even for digital products which do not require a shipping address.\n\nChoose dynamic extension points when your content and functionality is self-contained and can display at any step in the checkout process. An example is a field to capture order notes from the customer.",
        "image": "dynamic-extension-points.png",
        "sectionCard": [
          {
            "name": "Extension points",
            "subtitle": "API reference",
            "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
            "type": "blocks"
          }
        ]
      },
      {
        "type": "GenericAccordion",
        "title": "Checkout locations",
        "anchorLink": "supported-locations",
        "sectionContent": "Checkout is where buyers go to purchase goods. Checkout consists of the information, shipping, and payment steps in addition to the order summary and Shop Pay. Learn more about building [custom functionality for checkout](/docs/api/checkout-ui-extensions).",
        "accordionContent": [
          {
            "title": "Information",
            "description": "\nThis is the first step in the checkout process where the buyer enters contact information and a delivery address.\n\nSee [all extensions points](/docs/api/checkout-ui-extensions/apis/extensionpoints).\n",
            "image": "supported-locations-information.png"
          },
          {
            "title": "Shipping",
            "description": "\nPoint in checkout where the buyer selects a shipping method.\n\nSee [all extensions points](/docs/api/checkout-ui-extensions/apis/extensionpoints).\n",
            "image": "supported-locations-shipping.png"
          },
          {
            "title": "Payment",
            "description": "\nPoint in checkout where the buyer enters their payment information.\n\nSee [all extensions points](/docs/api/checkout-ui-extensions/apis/extensionpoints).\n",
            "image": "supported-locations-payment.png"
          },
          {
            "title": "Order summary",
            "description": "\nSummary of the cart contents, discounts, and order totals.\n\nSee [all extensions points](/docs/api/checkout-ui-extensions/apis/extensionpoints).\n",
            "image": "supported-locations-order-summary.png"
          },
          {
            "title": "Shop Pay",
            "description": "\nAccelerated checkout where Shopify pre-fills buyer information using their Shop Pay account.\n\nSee [all extensions points](/docs/api/checkout-ui-extensions/apis/extensionpoints).\n",
            "image": "supported-locations-shop-pay.png"
          },
          {
            "title": "Local Pickup",
            "description": "\nPoint in checkout where the buyer can select a store location to pick up their purchase.\n\nSee [all extensions points](/docs/api/checkout-ui-extensions/apis/extensionpoints).\n",
            "image": "supported-locations-local-pickup.png"
          },
          {
            "title": "Pickup Points",
            "description": "\nPoint in checkout where the buyer can select a pickup point to have their purchase delivered to.\n\nSee [all extensions points](/docs/api/checkout-ui-extensions/apis/extensionpoints).\n",
            "image": "supported-locations-pickup-points.png"
          }
        ]
      },
      {
        "type": "GenericAccordion",
        "title": "Thank you locations",
        "anchorLink": "supported-typ-locations",
        "sectionContent": "The thank you page is shown to buyers immediately after a checkout is successfully submitted. Learn more about building for [the thank you page](/docs/apps/checkout/thank-you-order-status).",
        "accordionContent": [
          {
            "title": "Order details",
            "description": "\nDisplays all order information to buyers.\n\nSee [all thank you page extension points](/docs/api/checkout-ui-extensions/apis/extensionpoints).\n",
            "image": "supported-locations-thank-you.png"
          },
          {
            "title": "Order summary",
            "description": "\nSummary of the cart contents, discounts, and order totals.\n\nSee [all thank you page extensions points](/docs/api/checkout-ui-extensions/apis/extensionpoints).\n",
            "image": "supported-locations-order-summary-thank-you.png"
          }
        ]
      },
      {
        "type": "GenericAccordion",
        "title": "Order status locations",
        "anchorLink": "supported-osp-locations",
        "sectionContent": "The order status page is shown to buyers when they return to a completed checkout for order updates. Learn more about building for [the order status page](/docs/apps/checkout/thank-you-order-status).",
        "accordionContent": [
          {
            "title": "Order details",
            "description": "\nDisplays all order information to buyers.\n\nSee [all order status page extension points](/docs/api/checkout-ui-extensions/apis/extensionpoints).\n",
            "image": "supported-locations-order-status.png"
          },
          {
            "title": "Order summary",
            "description": "\nSummary of the cart contents, discounts, and order totals.\n\nSee [all order status page extensions points](/docs/api/checkout-ui-extensions/apis/extensionpoints).\n",
            "image": "supported-locations-order-summary-order-status.png"
          }
        ]
      },
      {
        "type": "Generic",
        "anchorLink": "globals",
        "title": "Globals",
        "sectionContent": "The `checkout-ui-extensions` library provides an alias for `shopify.extend` in the form of the `extend()` export. This function is also strongly-typed. If you’re working in an editor that supports TypeScript’s language server (we recommend [VSCode](https://code.visualstudio.com)), then you get feedback about the input arguments to that extension point. \n\n For extensions that render UI, such as [`Checkout::Dynamic::Render`](#extension-points), the first argument is always a [`@remote-ui` `RemoteRoot` object](https://github.com/Shopify/remote-ui/tree/main/packages/core#remoteroot) that enables you to render UI components into your extension point in checkout. You don't need to explicitly call [`mount()`](https://github.com/Shopify/remote-ui/tree/main/packages/core#remoterootmount) on this object. After the callback that you registered for the extension point ends, or if it returns a `Promise` that resolves, your initial UI is rendered.",
        "sectionCard": [
          {
            "name": "Extension points",
            "subtitle": "API reference",
            "url": "/docs/api/checkout-ui-extensions/apis/extensionpoints",
            "type": "blocks"
          },
          {
            "name": "Standard API",
            "subtitle": "API reference",
            "url": "/docs/api/checkout-ui-extensions/apis/standardapi",
            "type": "blocks"
          }
        ],
        "sectionSubContent": [
          {
            "title": "Web platform globals",
            "sectionContent": "Checkout UI extensions always run in a [web worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API). This environment has access to many of the same globals as you’d get with JavaScript running in a browser. However, we only guarantee the presence of the following globals: \n\n - [`self`](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self), a reference back to the global object. \n - [`console`](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/console), which is the same `console` available in the browser and can be used for printing to the browser’s console (**Note**: your app **should not** log any content when running in production) \n - [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout), [`clearTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout), [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval), and [`clearInterval`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval), which behave the same as they do outside a web worker \n - [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) and related globals ([`Headers`](https://developer.mozilla.org/en-US/docs/Web/API/Headers), [`Request`](https://developer.mozilla.org/en-US/docs/Web/API/Request), and [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)), which can be used to make HTTPS requests to arbitrary endpoints (**Note**: any requests you make must explicitly support [cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Glossary/CORS), just as they would if the request were coming from `fetch()` outside of a web worker) \n\n > Caution: \n > You **must not** rely on any other globals being available. Many will be explicitly overwritten to be `undefined` in the sandbox, and non-language globals that aren’t hidden and aren’t in the list above may also be overwritten at any time."
          },
          {
            "title": "JavaScript environment",
            "sectionContent": "The sandbox that loads your extension guarantees all of the globals available in [ECMAScript 2015 (ES2015)](http://www.ecma-international.org/ecma-262/6.0/). This includes `Set`, `Map`, `Promise`, `Symbol`, and more. You should rely on these globals directly when you need them, and you shouldn't use your own polyfill for any of these features. If you use globals added after ES2015, or new static methods on globals added after ES2015 (like `Object.entries`), then you must polyfill your usage of these features. \n\n Your UI extension shouldn't ship any ES2015 (or newer) syntax, like [`class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class), [`const/let`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const), or [`for..of` loops](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of). This syntax isn't understood by some of the browsers that checkout supports. If you use these features in your source code, then make sure that they're compiled to ES5 syntax in your final JavaScript file. \n\n The UI extension sandbox makes a `regeneratorRuntime` instance available globally. This object is provided by [regenerator-runtime](https://github.com/facebook/regenerator/tree/main/packages/runtime), and is used by many compilers to provide an ES5-compatible compilation target for [generator functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*) and [async/ await](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await). If you use generators or async/ await, then make sure you compile it down to code that uses regenerator-runtime, and make sure you don't import your own version of that polyfill."
          }
        ],
        "codeblock": {
          "title": "extend()",
          "tabs": [
            {
              "code": "import {\n  extension,\n  Banner,\n} from '@shopify/checkout-ui-extensions';\n\nextension(\n  'Checkout::Dynamic::Render',\n  (root, api) => {\n    root.appendChild(\n      root.createComponent(\n        Banner,\n        {},\n        `Extension version: ${api.extension.version}`,\n      ),\n    );\n  },\n);\n",
              "language": "ts"
            }
          ]
        }
      }
    ]
  },
  {
    "title": "Checkout UI extensions",
    "description": "Checkout UI extensions let app developers build custom functionality that merchants can install\n    at defined points in the checkout flow, including product information, shipping, payment,\n    order summary, and Shop Pay.\n    \n\n > Shopify Plus: \n>Checkout UI extensions for pre-purchase workflows (for example, gathering shipping and payment information from customers) are available only to stores on a [Shopify Plus](https://www.shopify.com/plus) plan.",
    "id": "checkout-ui-extensions",
    "image": "/assets/landing-pages/templated-apis/checkout-ui-extensions/checkout-ui.png",
    "darkImage": "/assets/landing-pages/templated-apis/checkout-ui-extensions/checkout-ui-dark.png",
    "mobileImage": "/assets/landing-pages/templated-apis/checkout-ui-extensions/checkout-ui-mobile.png",
    "mobileDarkImage": "/assets/landing-pages/templated-apis/checkout-ui-extensions/checkout-ui-mobile-dark.png",
    "sections": [
      {
        "type": "Generic",
        "anchorLink": "scaffolding-extension",
        "title": "Scaffolding an extension",
        "sectionContent": "Use Shopify CLI to [generate a new extension](/apps/tools/cli/commands#generate-extension) in the directory of your app.",
        "sectionCard": [
          {
            "name": "Getting started video",
            "subtitle": "Watch",
            "url": "https://www.youtube.com/watch?v=jr_AIUDUSMw",
            "type": "youtube"
          }
        ],
        "codeblock": {
          "title": "Scaffolding",
          "tabs": [
            {
              "title": "npm",
              "code": "npm init @shopify/app@latest\ncd your-app\nnpm run shopify app generate extension\n",
              "language": "bash"
            },
            {
              "title": "yarn",
              "code": "yarn create @shopify/app\ncd your-app\nyarn shopify app generate extension\n",
              "language": "bash"
            },
            {
              "title": "pnpm",
              "code": "pnpm create @shopify/app\ncd your-app\npnpm shopify app generate extension\n",
              "language": "bash"
            }
          ]
        },
        "initialLanguage": "bash"
      },
      {
        "type": "Generic",
        "anchorLink": "extension-points",
        "title": "Extension points",
        "sectionContent": "Extension points provide locations where merchants can insert custom content.\n        Static extension points are tied to core checkout features like contact information, shipping methods, and order summary line items.\n        Dynamic extension points can be displayed at any point in the checkout process and will always render regardless of which checkout features are available.\n        An example is a field to capture order notes from the customer.\n        \n\nExtension UIs are rendered using [remote UI](https://github.com/Shopify/remote-ui),\n        a fast and secure environment for custom [(non-DOM)](#constraints) UIs.",
        "sectionCard": [
          {
            "name": "Extension points",
            "subtitle": "Overview",
            "url": "/api/checkout-ui-extensions/extension-points-overview",
            "type": "blocks"
          }
        ],
        "image": "extension-points.png",
        "codeblock": {
          "title": "Extension points",
          "tabs": [
            {
              "title": "React",
              "code": "import {\n  reactExtension,\n  Banner,\n} from '@shopify/checkout-ui-extensions-react';\n\nreactExtension(\n  'Checkout::Dynamic::Render',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  return <Banner>Your extension</Banner>;\n}\n",
              "language": "tsx"
            },
            {
              "title": "JS",
              "code": "import {\n  extension,\n  Banner,\n} from '@shopify/checkout-ui-extensions';\n\nextension(\n  'Checkout::Dynamic::Render',\n  (root, api) => {\n    const banner = root.createComponent(\n      Banner,\n      {},\n      'Your extension',\n    );\n    root.appendChild(banner);\n  },\n);\n",
              "language": "js"
            }
          ]
        },
        "initialLanguage": "tsx"
      },
      {
        "type": "Generic",
        "anchorLink": "configuration-file",
        "title": "Configuration file",
        "sectionContent": "When you create a checkout UI extension, the `shopify.ui.extension.toml` file is automatically generated in your checkout UI extension directory.  It contains the extension's configuration, which includes the extension name, extension points, metafields, capabilities, and settings definition.",
        "sectionCard": [
          {
            "name": "Configuration guide",
            "subtitle": "Learn more",
            "url": "/api/checkout-ui-extensions/configuration",
            "type": "gear"
          }
        ],
        "codeblock": {
          "title": "shopify.ui.extension.toml",
          "tabs": [
            {
              "title": "toml",
              "code": "type = \"checkout_ui_extension\"\nname = \"my-checkout-extension\"\n\nextension_points = [\n  'Checkout::Dynamic::Render'\n]\n",
              "language": "toml"
            }
          ]
        },
        "initialLanguage": "yaml"
      },
      {
        "type": "Generic",
        "anchorLink": "extension-apis",
        "title": "Extension APIs",
        "sectionContent": "APIs enable checkout UI extensions to get information about the checkout or related objects and to perform actions. For example, you can use the APIs to retrieve what's in customer carts so that you can offer related products. \n\nExtensions use JavaScript to read and write data and call external services, and natively render UIs built using Shopify's checkout components.",
        "sectionCard": [
          {
            "name": "Checkout extensions API",
            "subtitle": "API reference",
            "url": "/api/checkout-ui-extensions/extension-points-api",
            "type": "blocks"
          }
        ],
        "codeblock": {
          "title": "Extension APIs",
          "tabs": [
            {
              "title": "React",
              "code": "import {\n  reactExtension,\n  useShippingAddress,\n  Banner,\n} from '@shopify/checkout-ui-extensions-react';\n\nreactExtension(\n  'Checkout::DeliveryAddress::RenderBefore',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  const {countryCode} = useShippingAddress();\n\n  if (countryCode !== 'CA') {\n    return (\n      <Banner>\n        Sorry, we can only ship to Canada at this\n        time\n      </Banner>\n    );\n  }\n}\n",
              "language": "tsx"
            },
            {
              "title": "JS",
              "code": "import {\n  extension,\n  Banner,\n} from '@shopify/checkout-ui-extensions';\n\nextension(\n  'Checkout::DeliveryAddress::RenderBefore',\n  (root, api) => {\n    renderApp(root, api);\n\n    api.shippingAddress.subscribe(() =>\n      renderApp(root, api),\n    );\n  },\n);\n\nfunction renderApp(root, api) {\n  const {countryCode} =\n    api.shippingAddress.current;\n\n  // In case of a re-render, remove previous children.\n  for (const child of root.children) {\n    root.removeChild(child);\n  }\n\n  if (countryCode !== 'CA') {\n    const banner = root.createComponent(\n      Banner,\n      {},\n      'Sorry, we can only ship to Canada at this time',\n    );\n    root.appendChild(banner);\n  }\n}\n",
              "language": "js"
            }
          ]
        },
        "initialLanguage": "tsx"
      },
      {
        "type": "Generic",
        "anchorLink": "ui-components",
        "title": "UI components",
        "image": "ui-components.gif",
        "sectionContent": "Checkout UI extensions provide UI components that a [rendering extension](/api/checkout-ui-extensions/extension-points-api#renderextension) can use to build an interface. Shopify renders the UI natively, so it's performant, accessible, and works in all of checkout's supported browsers. \n\nCheckout components are designed to be flexible, enabling you to layer and mix them to create highly-customized app extensions that feel seamless within the checkout experience. All components inherit a merchant's brand settings and the CSS cannot be altered or overridden.",
        "sectionCard": [
          {
            "name": "Component library",
            "subtitle": "API reference",
            "url": "/api/checkout-ui-extensions/components",
            "type": "blocks"
          },
          {
            "name": "Figma UI kit",
            "subtitle": "UI Reference",
            "url": "https://www.figma.com/community/file/1121180079120732846",
            "type": "setting"
          }
        ],
        "codeblock": {
          "title": "UI components",
          "tabs": [
            {
              "title": "React",
              "code": "import {\n  reactExtension,\n  BlockStack,\n  InlineStack,\n  Button,\n  Image,\n  Text,\n} from '@shopify/checkout-ui-extensions-react';\n\nreactExtension(\n  'Checkout::Dynamic::Render',\n  () => <Extension />,\n);\n\nfunction Extension() {\n  return (\n    <InlineStack>\n      <Image source=\"/url/for/image\" />\n      <BlockStack>\n        <Text size=\"large\">Heading</Text>\n        <Text size=\"small\">Description</Text>\n      </BlockStack>\n      <Button\n        onPress={() => {\n          console.log('button was pressed');\n        }}\n      >\n        Button\n      </Button>\n    </InlineStack>\n  );\n}\n",
              "language": "tsx"
            },
            {
              "title": "JS",
              "code": "import {\n  extension,\n  BlockStack,\n  Button,\n  Image,\n  InlineStack,\n  Text,\n} from '@shopify/checkout-ui-extensions';\n\nextension(\n  'Checkout::Dynamic::Render',\n  (root, api) => {\n    const inlineStack = root.createComponent(\n      InlineStack,\n      {},\n      [\n        root.createComponent(Image, {\n          source: '/url/for/image',\n        }),\n        root.createComponent(BlockStack, {}, [\n          root.createComponent(\n            Text,\n            {size: 'large'},\n            'Heading',\n          ),\n          root.createComponent(\n            Text,\n            {size: 'small'},\n            'Description',\n          ),\n        ]),\n        root.createComponent(\n          Button,\n          {\n            onPress: () => {\n              console.log('button was pressed');\n            },\n          },\n          'Button',\n        ),\n      ],\n    );\n\n    root.appendChild(inlineStack);\n  },\n);\n",
              "language": "js"
            }
          ]
        },
        "initialLanguage": "tsx"
      },
      {
        "type": "Generic",
        "anchorLink": "security",
        "title": "Security",
        "sectionContent": "\nCheckout UI extensions are a safe and secure way to customize the appearance and functionality of the checkout page without compromising the security of checkout or customer data.\n- They run in an isolated sandbox, separate from the checkout page and other UI extensions.\n- They don't have access to sensitive payment information or the checkout page itself (HTML or other assets).\n- They are limited to specific UI components and APIs that are exposed by the platform.\n- They have limited access to global web APIs.\n- Apps that wish to access [protected customer data](/docs/apps/store/data-protection/protected-customer-data), must submit an application and are subject to strict security guidelines and review proccesses by Shopify.\n",
        "sectionNotice": [
          {
            "title": "Constraints",
            "sectionContent": "\nYou can't override the CSS for UI components. The checkout UI will always render the merchant's own branding as shown in the image in the UI components section above.\n\nCheckout UI extensions don't have access to the DOM and can't return DOM nodes. They can't return `<div>` elements, for example. Building an arbitrary tree of HTML and loading additional scripts using script tags are also not supported.\n",
            "type": "info"
          }
        ],
        "sectionCard": [
          {
            "name": "Rendering extensions",
            "subtitle": "Learn more",
            "url": "https://shopify.engineering/remote-rendering-ui-extensibility",
            "type": "tutorial"
          },
          {
            "name": "Checkout branding",
            "subtitle": "Learn more",
            "url": "/docs/apps/checkout/advanced-checkout-branding",
            "type": "tutorial"
          }
        ]
      },
      {
        "type": "Generic",
        "anchorLink": "troubleshooting",
        "title": "Troubleshooting",
        "sectionContent": "Find an end-to-end guide to testing your extensions in [Testing checkout UI extensions](/apps/checkout/test-ui-extensions#test-the-extension-in-the-checkout-editor).\n\nIf you're encountering errors when you run `dev` for an app that contains checkout UI extensions, follow this [troubleshooting guide](/apps/checkout/delivery-instructions/getting-started#troubleshooting).",
        "sectionCard": [
          {
            "name": "Troubleshooting guide",
            "subtitle": "Learn more",
            "url": "/apps/checkout/delivery-instructions/getting-started#troubleshooting",
            "type": "apps"
          }
        ]
      },
      {
        "type": "Resource",
        "anchorLink": "resources",
        "title": "Resources",
        "resources": [
          {
            "name": "remote-ui",
            "subtitle": "Learn more about the underlying technology that powers checkout UI extensions.",
            "url": "https://github.com/Shopify/remote-ui",
            "type": "gitHub"
          },
          {
            "name": "UX guidelines",
            "subtitle": "Use our UX guidelines when you're designing your checkout experiences to ensure that they're trustworthy, efficient, and considerate.",
            "url": "/apps/checkout/checkout-ux-guidelines",
            "type": "star"
          },
          {
            "name": "Localization",
            "subtitle": "You can use JavaScript APIs to access translations and localize UI extensions for international merchants and customers.",
            "url": "/apps/checkout/localize-ui-extensions",
            "type": "globe"
          },
          {
            "name": "Tutorials",
            "subtitle": "Check out our tutorials on how to build payment or delivery customizations, product offers, custom banners and more.",
            "url": "/apps/checkout",
            "type": "growth"
          }
        ]
      }
    ]
  }
]
